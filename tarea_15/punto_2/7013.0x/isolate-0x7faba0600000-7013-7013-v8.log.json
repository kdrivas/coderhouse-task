{
  "code": [
  {
    "name": "/usr/local/bin/node",
    "type": "SHARED_LIB"
  },
  {
    "name": "T node::AsyncResource::AsyncResource(v8::Isolate*, v8::Local<v8::Object>, char const*, double)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncResource::AsyncResource(v8::Isolate*, v8::Local<v8::Object>, char const*, double)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncResource::~AsyncResource()",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncResource::~AsyncResource()",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncResource::~AsyncResource()",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncResource::MakeCallback(v8::Local<v8::Function>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncResource::get_resource()",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncResource::MakeCallback(char const*, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncResource::MakeCallback(v8::Local<v8::String>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncResource::get_async_id() const",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncResource::get_trigger_async_id() const",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncResource::CallbackScope::CallbackScope(node::AsyncResource*)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncResource::CallbackScope::CallbackScope(node::AsyncResource*)",
    "type": "CPP"
  },
  {
    "name": "T node::CallbackScope::CallbackScope(v8::Isolate*, v8::Local<v8::Object>, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "T node::CallbackScope::CallbackScope(node::Environment*, v8::Local<v8::Object>, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "T node::CallbackScope::CallbackScope(v8::Isolate*, v8::Local<v8::Object>, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "T node::CallbackScope::CallbackScope(node::Environment*, v8::Local<v8::Object>, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "T node::InternalCallbackScope::InternalCallbackScope(node::Environment*, v8::Local<v8::Object>, node::async_context const&, int)",
    "type": "CPP"
  },
  {
    "name": "T node::CallbackScope::~CallbackScope()",
    "type": "CPP"
  },
  {
    "name": "T node::InternalCallbackScope::~InternalCallbackScope()",
    "type": "CPP"
  },
  {
    "name": "T node::CallbackScope::~CallbackScope()",
    "type": "CPP"
  },
  {
    "name": "T node::InternalCallbackScope::InternalCallbackScope(node::AsyncWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "T node::InternalCallbackScope::InternalCallbackScope(node::Environment*, v8::Local<v8::Object>, node::async_context const&, int)",
    "type": "CPP"
  },
  {
    "name": "T node::InternalCallbackScope::InternalCallbackScope(node::AsyncWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "t node::AsyncHooks::push_async_context(double, double, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::InternalCallbackScope::~InternalCallbackScope()",
    "type": "CPP"
  },
  {
    "name": "T node::InternalCallbackScope::Close()",
    "type": "CPP"
  },
  {
    "name": "t node::AsyncHooks::pop_async_context(double)",
    "type": "CPP"
  },
  {
    "name": "T node::InternalMakeCallback(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "T node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, char const*, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "T node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::String>, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "T node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "T node::MakeSyncCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "T node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, char const*, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "T node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::String>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "T node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::vector<v8::Global<v8::Context>, std::__1::allocator<v8::Global<v8::Context> > >::__append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::AsyncHooks::clear_async_id_stack()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::vector<v8::Global<v8::Object>, std::__1::allocator<v8::Global<v8::Object> > >::shrink_to_fit()",
    "type": "CPP"
  },
  {
    "name": "T node::SpinEventLoop(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::CommonEnvironmentSetup::CommonEnvironmentSetup(node::MultiIsolatePlatform*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >*, std::__1::function<node::Environment* (node::CommonEnvironmentSetup const*)>)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::push_back(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "T node::CommonEnvironmentSetup::CommonEnvironmentSetup(node::MultiIsolatePlatform*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >*, std::__1::function<node::Environment* (node::CommonEnvironmentSetup const*)>)",
    "type": "CPP"
  },
  {
    "name": "T node::CommonEnvironmentSetup::~CommonEnvironmentSetup()",
    "type": "CPP"
  },
  {
    "name": "T node::CommonEnvironmentSetup::~CommonEnvironmentSetup()",
    "type": "CPP"
  },
  {
    "name": "T node::CommonEnvironmentSetup::event_loop() const",
    "type": "CPP"
  },
  {
    "name": "T node::CommonEnvironmentSetup::array_buffer_allocator() const",
    "type": "CPP"
  },
  {
    "name": "T node::CommonEnvironmentSetup::isolate() const",
    "type": "CPP"
  },
  {
    "name": "T node::CommonEnvironmentSetup::isolate_data() const",
    "type": "CPP"
  },
  {
    "name": "T node::CommonEnvironmentSetup::env() const",
    "type": "CPP"
  },
  {
    "name": "T node::CommonEnvironmentSetup::context() const",
    "type": "CPP"
  },
  {
    "name": "t node::CommonEnvironmentSetup::~CommonEnvironmentSetup()::$_0::__invoke(void*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > std::__1::operator+<char, std::__1::char_traits<char>, std::__1::allocator<char> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, char)",
    "type": "CPP"
  },
  {
    "name": "t node::ToUpper(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "t node::SPrintFImpl(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > node::ToStringHelper::BaseConvert<3u, char const*, 0>(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > node::ToStringHelper::BaseConvert<4u, char const*, 0>(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_pointer<char*, std::__1::default_delete<char []>, std::__1::allocator<char> >::~__shared_ptr_pointer()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_pointer<char*, std::__1::default_delete<char []>, std::__1::allocator<char> >::~__shared_ptr_pointer()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_pointer<auto node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::__1::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, std::__1::default_delete<auto node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::__1::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*>, std::__1::allocator<auto node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::__1::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*> >::__on_zero_shared()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_pointer<char*, std::__1::default_delete<char []>, std::__1::allocator<char> >::__on_zero_shared_weak()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_bad_function_call()",
    "type": "CPP"
  },
  {
    "name": "T node::ParseEncoding(char const*, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "T node::ParseEncoding(v8::Isolate*, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "T node::Encode(v8::Isolate*, char const*, unsigned long, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "T node::Encode(v8::Isolate*, unsigned short const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::DecodeBytes(v8::Isolate*, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "T node::DecodeWrite(v8::Isolate*, char*, unsigned long, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "T node::AllowWasmCodeGenerationCallback(v8::Local<v8::Context>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "T node::ShouldAbortOnUncaughtException(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "T node::PrepareStackTraceCallback(v8::Local<v8::Context>, v8::Local<v8::Value>, v8::Local<v8::Array>)",
    "type": "CPP"
  },
  {
    "name": "T node::NodeArrayBufferAllocator::Allocate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::NodeArrayBufferAllocator::AllocateUninitialized(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::NodeArrayBufferAllocator::Reallocate(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::NodeArrayBufferAllocator::Free(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::DebuggingArrayBufferAllocator::~DebuggingArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "T node::DebuggingArrayBufferAllocator::~DebuggingArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "T node::DebuggingArrayBufferAllocator::~DebuggingArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "T node::DebuggingArrayBufferAllocator::Allocate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::DebuggingArrayBufferAllocator::RegisterPointerInternal(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::DebuggingArrayBufferAllocator::AllocateUninitialized(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::DebuggingArrayBufferAllocator::Free(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::DebuggingArrayBufferAllocator::UnregisterPointerInternal(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::DebuggingArrayBufferAllocator::Reallocate(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::DebuggingArrayBufferAllocator::RegisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::NodeArrayBufferAllocator::RegisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::DebuggingArrayBufferAllocator::UnregisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::NodeArrayBufferAllocator::UnregisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unordered_map<void*, unsigned long, std::__1::hash<void*>, std::__1::equal_to<void*>, std::__1::allocator<std::__1::pair<void* const, unsigned long> > >::operator[](void* const&)",
    "type": "CPP"
  },
  {
    "name": "T node::ArrayBufferAllocator::Create(bool)",
    "type": "CPP"
  },
  {
    "name": "T node::CreateArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "T node::FreeArrayBufferAllocator(node::ArrayBufferAllocator*)",
    "type": "CPP"
  },
  {
    "name": "T node::SetIsolateCreateParamsForNode(v8::Isolate::CreateParams*)",
    "type": "CPP"
  },
  {
    "name": "T node::SetIsolateErrorHandlers(v8::Isolate*, node::IsolateSettings const&)",
    "type": "CPP"
  },
  {
    "name": "T node::SetIsolateMiscHandlers(v8::Isolate*, node::IsolateSettings const&)",
    "type": "CPP"
  },
  {
    "name": "T node::SetIsolateUpForNode(v8::Isolate*, node::IsolateSettings const&)",
    "type": "CPP"
  },
  {
    "name": "T node::SetIsolateUpForNode(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "T node::NewIsolate(v8::Isolate::CreateParams*, uv_loop_s*, node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "T node::NewIsolate(node::ArrayBufferAllocator*, uv_loop_s*, node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "T node::NewIsolate(std::__1::shared_ptr<node::ArrayBufferAllocator>, uv_loop_s*, node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "T node::CreateIsolateData(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, node::ArrayBufferAllocator*)",
    "type": "CPP"
  },
  {
    "name": "T node::FreeIsolateData(node::IsolateData*)",
    "type": "CPP"
  },
  {
    "name": "T node::InspectorParentHandle::~InspectorParentHandle()",
    "type": "CPP"
  },
  {
    "name": "T node::InspectorParentHandle::~InspectorParentHandle()",
    "type": "CPP"
  },
  {
    "name": "T node::InspectorParentHandle::~InspectorParentHandle()",
    "type": "CPP"
  },
  {
    "name": "T node::CreateEnvironment(node::IsolateData*, v8::Local<v8::Context>, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, node::EnvironmentFlags::Flags, node::ThreadId, std::__1::unique_ptr<node::InspectorParentHandle, std::__1::default_delete<node::InspectorParentHandle> >)",
    "type": "CPP"
  },
  {
    "name": "T node::FreeEnvironment(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::GetInspectorParentHandle(node::Environment*, node::ThreadId, char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::LoadEnvironment(node::Environment*, std::__1::function<v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&)>)",
    "type": "CPP"
  },
  {
    "name": "T node::LoadEnvironment(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::GetCurrentEnvironment(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "T node::GetEnvironmentIsolateData(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::GetArrayBufferAllocator(node::IsolateData*)",
    "type": "CPP"
  },
  {
    "name": "T node::GetMultiIsolatePlatform(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::GetMultiIsolatePlatform(node::IsolateData*)",
    "type": "CPP"
  },
  {
    "name": "T node::CreatePlatform(int, node::tracing::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "T node::CreatePlatform(int, v8::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "T node::MultiIsolatePlatform::Create(int, v8::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "T node::FreePlatform(node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "T node::GetPerContextExports(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "T node::InitializePrimordials(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "T node::NewContext(v8::Isolate*, v8::Local<v8::ObjectTemplate>)",
    "type": "CPP"
  },
  {
    "name": "T node::InitializeContext(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "T node::ProtoThrower(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::InitializeContextRuntime(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "T node::InitializeContextForSnapshot(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "T node::GetCurrentEventLoop(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "T node::AddLinkedBinding(node::Environment*, node::node_module const&)",
    "type": "CPP"
  },
  {
    "name": "T node::AddLinkedBinding(node::Environment*, napi_module const&)",
    "type": "CPP"
  },
  {
    "name": "T node::AddLinkedBinding(node::Environment*, char const*, void (*)(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "T node::AllocateEnvironmentThreadId()",
    "type": "CPP"
  },
  {
    "name": "T node::DefaultProcessExitHandler(node::Environment*, int)",
    "type": "CPP"
  },
  {
    "name": "t node::DisposePlatform()",
    "type": "CPP"
  },
  {
    "name": "T node::SetProcessExitHandler(node::Environment*, std::__1::function<void (node::Environment*, int)>&&)",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to v8::internal::PointersUpdatingVisitor::~PointersUpdatingVisitor()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_iterator<std::__1::__hash_node<void*, void*>*> std::__1::__hash_table<void*, std::__1::hash<void*>, std::__1::equal_to<void*>, std::__1::allocator<void*> >::find<void*>(void* const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<unsigned long, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<unsigned long> >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<unsigned long, void*>*>)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_const_iterator<std::__1::__hash_node<v8::internal::compiler::Node*, void*>*> std::__1::__hash_table<v8::internal::compiler::Node*, std::__1::hash<v8::internal::compiler::Node*>, std::__1::equal_to<v8::internal::compiler::Node*>, std::__1::allocator<v8::internal::compiler::Node*> >::find<v8::internal::compiler::Node*>(v8::internal::compiler::Node* const&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<void*, unsigned long>, std::__1::__unordered_map_hasher<void*, std::__1::__hash_value_type<void*, unsigned long>, std::__1::hash<void*>, true>, std::__1::__unordered_map_equal<void*, std::__1::__hash_value_type<void*, unsigned long>, std::__1::equal_to<void*>, true>, std::__1::allocator<std::__1::__hash_value_type<void*, unsigned long> > >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<unsigned long, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<unsigned long> >::__rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::InspectorParentHandleImpl::~InspectorParentHandleImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::InspectorParentHandleImpl::~InspectorParentHandleImpl()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<node::LoadEnvironment(node::Environment*, char const*)::$_0, std::__1::allocator<node::LoadEnvironment(node::Environment*, char const*)::$_0>, v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&)>::~__func()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<node::LoadEnvironment(node::Environment*, char const*)::$_0, std::__1::allocator<node::LoadEnvironment(node::Environment*, char const*)::$_0>, v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&)>::~__func()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<node::LoadEnvironment(node::Environment*, char const*)::$_0, std::__1::allocator<node::LoadEnvironment(node::Environment*, char const*)::$_0>, v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&)>::__clone() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<node::LoadEnvironment(node::Environment*, char const*)::$_0, std::__1::allocator<node::LoadEnvironment(node::Environment*, char const*)::$_0>, v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&)>::__clone(std::__1::__function::__base<v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&)>*) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<node::LoadEnvironment(node::Environment*, char const*)::$_0, std::__1::allocator<node::LoadEnvironment(node::Environment*, char const*)::$_0>, v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&)>::destroy()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<node::LoadEnvironment(node::Environment*, char const*)::$_0, std::__1::allocator<node::LoadEnvironment(node::Environment*, char const*)::$_0>, v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&)>::destroy_deallocate()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<node::LoadEnvironment(node::Environment*, char const*)::$_0, std::__1::allocator<node::LoadEnvironment(node::Environment*, char const*)::$_0>, v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&)>::operator()(node::StartExecutionCallbackInfo const&)",
    "type": "CPP"
  },
  {
    "name": "T node::ErrnoException(v8::Isolate*, int, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::UVException(v8::Isolate*, int, char const*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::FatalException(v8::Isolate*, v8::TryCatch const&)",
    "type": "CPP"
  },
  {
    "name": "T node::RunAtExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::AtExit(node::Environment*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "T node::EmitBeforeExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::EmitProcessBeforeExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::EmitExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::EmitProcessExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::DeleteACHHandle::operator()(node::ACHHandle*) const",
    "type": "CPP"
  },
  {
    "name": "T node::AddEnvironmentCleanupHook(v8::Isolate*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "t node::Environment::AddCleanupHook(void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "T node::RemoveEnvironmentCleanupHook(v8::Isolate*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "T node::AddEnvironmentCleanupHookInternal(v8::Isolate*, void (*)(void*, void (*)(void*), void*), void*)",
    "type": "CPP"
  },
  {
    "name": "t node::RunAsyncCleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "T node::RemoveEnvironmentCleanupHookInternal(node::ACHHandle*)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncHooksGetExecutionAsyncId(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncHooksGetTriggerAsyncId(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "T node::EmitAsyncInit(v8::Isolate*, v8::Local<v8::Object>, char const*, double)",
    "type": "CPP"
  },
  {
    "name": "T node::EmitAsyncInit(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::String>, double)",
    "type": "CPP"
  },
  {
    "name": "T node::EmitAsyncDestroy(v8::Isolate*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "T node::EmitAsyncDestroy(node::Environment*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "t node::TraceEventScope::TraceEventScope(char const*, char const*, void*)",
    "type": "CPP"
  },
  {
    "name": "t node::TraceEventScope::~TraceEventScope()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<node::CleanupHookCallback, node::CleanupHookCallback::Hash, node::CleanupHookCallback::Equal, std::__1::allocator<node::CleanupHookCallback> >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<node::CleanupHookCallback, node::CleanupHookCallback::Hash, node::CleanupHookCallback::Equal, std::__1::allocator<node::CleanupHookCallback> >::__rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_iterator<std::__1::__hash_node<node::CleanupHookCallback, void*>*> std::__1::__hash_table<node::CleanupHookCallback, node::CleanupHookCallback::Hash, node::CleanupHookCallback::Equal, std::__1::allocator<node::CleanupHookCallback> >::find<node::CleanupHookCallback>(node::CleanupHookCallback const&)",
    "type": "CPP"
  },
  {
    "name": "t node::FinishAsyncCleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<node::AsyncCleanupHookInfo, std::__1::allocator<node::AsyncCleanupHookInfo> >::~__shared_ptr_emplace()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<node::AsyncCleanupHookInfo, std::__1::allocator<node::AsyncCleanupHookInfo> >::~__shared_ptr_emplace()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<node::AsyncCleanupHookInfo, std::__1::allocator<node::AsyncCleanupHookInfo> >::__on_zero_shared()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_pointer<node::inspector::protocol::NodeRuntime::Frontend*, std::__1::default_delete<node::inspector::protocol::NodeRuntime::Frontend>, std::__1::allocator<node::inspector::protocol::NodeRuntime::Frontend> >::__on_zero_shared_weak()",
    "type": "CPP"
  },
  {
    "name": "T node::signo_string(int)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::DestroyAsyncIdsCallback(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::Emit(node::Environment*, double, node::AsyncHooks::Fields, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::EmitPromiseResolve(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::EmitTraceEventBefore()",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::EmitBefore(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::EmitTraceEventAfter(node::AsyncWrap::ProviderType, double)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::EmitAfter(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::WeakCallback(v8::WeakCallbackInfo<node::DestroyParam> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::DestroyParamCleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::EmitDestroy(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::GetAsyncId(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::PushAsyncContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::PopAsyncContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::ExecutionAsyncResource(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::ClearAsyncIdStack(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::AsyncReset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::AsyncReset(v8::Local<v8::Object>, double, bool)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::GetProviderType(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::EmitDestroy(bool)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::QueueDestroyAsyncId(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::SetCallbackTrampoline(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "t node::Environment::SetMethod(v8::Local<v8::Object>, char const*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "t node::SetupHooks(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::SetPromiseHooks(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::RegisterDestroyHook(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, double)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, double, bool)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, double, double)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::IsDoneInitializing() const",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::~AsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::EmitTraceEventDestroy()",
    "type": "CPP"
  },
  {
    "name": "t node::BaseObject::~BaseObject()",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::~AsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::~AsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::EmitAsyncInit(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::String>, double, double)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::MakeCallback(v8::Local<v8::Function>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::diagnostic_name() const",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::GetOwner()",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncWrap::GetOwner(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T _register_async_wrap()",
    "type": "CPP"
  },
  {
    "name": "T _register_external_reference_async_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "t node::CustomBufferJSListener::OnStreamDestroy()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::PerIsolatePlatformData::IdleTasksEnabled()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::AsyncHooks::SetJSPromiseHooks(v8::Local<v8::Function>, v8::Local<v8::Function>, v8::Local<v8::Function>, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "t void node::ExternalReferenceRegistry::RegisterT<void (v8::PropertyCallbackInfo<v8::Array> const&)>(void (*)(v8::PropertyCallbackInfo<v8::Array> const&))",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<void (*)(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::AsyncWrap::EmitDestroy(node::Environment*, double)::$_0>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::AsyncWrap::EmitDestroy(node::Environment*, double)::$_0>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::AsyncWrap::EmitDestroy(node::Environment*, double)::$_0>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t node::AsyncWrap::EmitDestroy(node::Environment*, double)::$_0::operator()(node::Environment*) const::'lambda'(void*)::__invoke(void*)",
    "type": "CPP"
  },
  {
    "name": "t node::MutexBase<node::LibuvMutexTraits>::~MutexBase()",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::ChannelWrap::ChannelWrap(node::Environment*, v8::Local<v8::Object>, int, int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::ChannelWrap::Setup()",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::ChannelWrap::ChannelWrap(node::Environment*, v8::Local<v8::Object>, int, int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::ChannelWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t void node::MemoryTracker::TrackField<std::__1::unordered_set<node::cares_wrap::NodeAresTask*, node::cares_wrap::NodeAresTask::Hash, node::cares_wrap::NodeAresTask::Equal, std::__1::allocator<node::cares_wrap::NodeAresTask*> >, std::__1::__hash_const_iterator<std::__1::__hash_node<node::cares_wrap::NodeAresTask*, void*>*> >(char const*, std::__1::unordered_set<node::cares_wrap::NodeAresTask*, node::cares_wrap::NodeAresTask::Hash, node::cares_wrap::NodeAresTask::Equal, std::__1::allocator<node::cares_wrap::NodeAresTask*> > const&, char const*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::ChannelWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::GetAddrInfoReqWrap::GetAddrInfoReqWrap(node::Environment*, v8::Local<v8::Object>, bool)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::GetAddrInfoReqWrap::GetAddrInfoReqWrap(node::Environment*, v8::Local<v8::Object>, bool)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::GetNameInfoReqWrap::GetNameInfoReqWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::GetNameInfoReqWrap::GetNameInfoReqWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::ChannelWrap::AresTimeout(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::NodeAresTask::Create(node::cares_wrap::ChannelWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::(anonymous namespace)::ares_sockstate_cb(void*, int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::ChannelWrap::StartTimer()",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::ChannelWrap::CloseTimer()",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::ChannelWrap::~ChannelWrap()",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::ChannelWrap::~ChannelWrap()",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::ChannelWrap::~ChannelWrap()",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::ChannelWrap::ModifyActivityQueryCount(int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::ChannelWrap::EnsureServers()",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::AnyTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::AresQuery(char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::ATraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::AresQuery(char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::AaaaTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::AresQuery(char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::CaaTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::AresQuery(char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::CnameTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::AresQuery(char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::MxTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::AresQuery(char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::NsTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::AresQuery(char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::TxtTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::AresQuery(char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::SrvTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::AresQuery(char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::PtrTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::AresQuery(char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::NaptrTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::AresQuery(char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::SoaTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::AresQuery(char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::AnyTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>*, std::__1::unique_ptr<node::cares_wrap::ResponseData, std::__1::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::(anonymous namespace)::ParseGeneralReply(node::Environment*, unsigned char const*, int, int*, v8::Local<v8::Array>, void*, int*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::(anonymous namespace)::ParseMxReply(node::Environment*, unsigned char const*, int, v8::Local<v8::Array>, bool)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::(anonymous namespace)::ParseTxtReply(node::Environment*, unsigned char const*, int, v8::Local<v8::Array>, bool)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::(anonymous namespace)::ParseSrvReply(node::Environment*, unsigned char const*, int, v8::Local<v8::Array>, bool)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::(anonymous namespace)::ParseNaptrReply(node::Environment*, unsigned char const*, int, v8::Local<v8::Array>, bool)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::(anonymous namespace)::ParseCaaReply(node::Environment*, unsigned char const*, int, v8::Local<v8::Array>, bool)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::CallOnComplete(v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::ATraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>*, std::__1::unique_ptr<node::cares_wrap::ResponseData, std::__1::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::CallOnComplete(v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::AaaaTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>*, std::__1::unique_ptr<node::cares_wrap::ResponseData, std::__1::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::CallOnComplete(v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::CaaTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>*, std::__1::unique_ptr<node::cares_wrap::ResponseData, std::__1::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::CallOnComplete(v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::CnameTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>*, std::__1::unique_ptr<node::cares_wrap::ResponseData, std::__1::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::CallOnComplete(v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::MxTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>*, std::__1::unique_ptr<node::cares_wrap::ResponseData, std::__1::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::CallOnComplete(v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::NsTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>*, std::__1::unique_ptr<node::cares_wrap::ResponseData, std::__1::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::CallOnComplete(v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::TxtTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>*, std::__1::unique_ptr<node::cares_wrap::ResponseData, std::__1::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::CallOnComplete(v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::SrvTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>*, std::__1::unique_ptr<node::cares_wrap::ResponseData, std::__1::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::CallOnComplete(v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::PtrTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>*, std::__1::unique_ptr<node::cares_wrap::ResponseData, std::__1::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::CallOnComplete(v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::NaptrTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>*, std::__1::unique_ptr<node::cares_wrap::ResponseData, std::__1::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::CallOnComplete(v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::SoaTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>*, std::__1::unique_ptr<node::cares_wrap::ResponseData, std::__1::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::CallOnComplete(v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::ReverseTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::Callback(void*, int, int, hostent*)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::ReverseTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>*, std::__1::unique_ptr<node::cares_wrap::ResponseData, std::__1::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::CallOnComplete(v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::(anonymous namespace)::GetAddrInfo(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::(anonymous namespace)::GetNameInfo(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::Environment::SetMethodNoSideEffect(v8::Local<v8::Object>, char const*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::(anonymous namespace)::CanonicalizeIP(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::(anonymous namespace)::StrError(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::(anonymous namespace)::GetServers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::(anonymous namespace)::SetServers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::(anonymous namespace)::SetLocalAddress(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::(anonymous namespace)::Cancel(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T _register_cares_wrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::ChannelWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::crypto::KeyPairGenConfig<node::crypto::NidKeyPairParams>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::GetAddrInfoReqWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::FixedSizeBlobCopyJob::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::ReqWrap<uv_fs_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::ReqWrap<uv_fs_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::GetNameInfoReqWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::GetNameInfoReqWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "T node::BaseObject::MakeWeak()::'lambda'(v8::WeakCallbackInfo<node::BaseObject> const&)::__invoke(v8::WeakCallbackInfo<node::BaseObject> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::MemoryRetainerNode::~MemoryRetainerNode()",
    "type": "CPP"
  },
  {
    "name": "t node::MemoryRetainerNode::~MemoryRetainerNode()",
    "type": "CPP"
  },
  {
    "name": "t node::MemoryRetainerNode::Name()",
    "type": "CPP"
  },
  {
    "name": "t node::MemoryRetainerNode::SizeInBytes()",
    "type": "CPP"
  },
  {
    "name": "t node::MemoryRetainerNode::IsRootNode()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::PerIsolatePlatformData::NonNestableDelayedTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "t node::MemoryRetainerNode::NamePrefix()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::NodeAresTask::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::NodeAresTask::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::NodeAresTask::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::MemoryTracker::Track(node::MemoryRetainer const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::MemoryTracker::AddNode(node::MemoryRetainer const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unordered_map<node::MemoryRetainer const*, node::MemoryRetainerNode*, std::__1::hash<node::MemoryRetainer const*>, std::__1::equal_to<node::MemoryRetainer const*>, std::__1::allocator<std::__1::pair<node::MemoryRetainer const* const, node::MemoryRetainerNode*> > >::operator[](node::MemoryRetainer const* const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<node::MemoryRetainer const*, node::MemoryRetainerNode*>, std::__1::__unordered_map_hasher<node::MemoryRetainer const*, std::__1::__hash_value_type<node::MemoryRetainer const*, node::MemoryRetainerNode*>, std::__1::hash<node::MemoryRetainer const*>, true>, std::__1::__unordered_map_equal<node::MemoryRetainer const*, std::__1::__hash_value_type<node::MemoryRetainer const*, node::MemoryRetainerNode*>, std::__1::equal_to<node::MemoryRetainer const*>, true>, std::__1::allocator<std::__1::__hash_value_type<node::MemoryRetainer const*, node::MemoryRetainerNode*> > >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::deque<unsigned long, std::__1::allocator<unsigned long> >::__add_back_capacity()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__split_buffer<unsigned long*, std::__1::allocator<unsigned long*> >::push_back(unsigned long*&&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__split_buffer<unsigned long*, std::__1::allocator<unsigned long*> >::push_front(unsigned long*&&)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::(anonymous namespace)::ares_poll_cb(uv_poll_s*, int, int)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::(anonymous namespace)::ares_poll_close_cb(uv_poll_s*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<node::cares_wrap::NodeAresTask*, node::cares_wrap::NodeAresTask::Hash, node::cares_wrap::NodeAresTask::Equal, std::__1::allocator<node::cares_wrap::NodeAresTask*> >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<node::cares_wrap::NodeAresTask*, node::cares_wrap::NodeAresTask::Hash, node::cares_wrap::NodeAresTask::Equal, std::__1::allocator<node::cares_wrap::NodeAresTask*> >::__rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T void node::Environment::CloseHandle<uv_poll_s, void (*)(uv_poll_s*)>(uv_poll_s*, void (*)(uv_poll_s*))::'lambda'(uv_handle_s*)::__invoke(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::(anonymous namespace)::AfterGetAddrInfo(uv_getaddrinfo_s*, int, addrinfo*)",
    "type": "CPP"
  },
  {
    "name": "T node::MakeLibuvRequestCallback<uv_getaddrinfo_s, void (*)(uv_getaddrinfo_s*, int, addrinfo*)>::Wrapper(uv_getaddrinfo_s*, int, addrinfo*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::(anonymous namespace)::AfterGetNameInfo(uv_getnameinfo_s*, int, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::MakeLibuvRequestCallback<uv_getnameinfo_s, void (*)(uv_getnameinfo_s*, int, char const*, char const*)>::Wrapper(uv_getnameinfo_s*, int, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::BaseObject::LazilyInitializedJSTemplateConstructor(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::MemoryTracker::PushNode(char const*, unsigned long, char const*)",
    "type": "CPP"
  },
  {
    "name": "t void node::Environment::CloseHandle<uv_timer_s, node::cares_wrap::ChannelWrap::CloseTimer()::$_0>(uv_timer_s*, node::cares_wrap::ChannelWrap::CloseTimer()::$_0)::'lambda'(uv_handle_s*)::__invoke(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::QueueResponseCallback(int)",
    "type": "CPP"
  },
  {
    "name": "t node::FunctionDeleter<hostent, &(node::cares_wrap::safe_free_hostent(hostent*))>::operator()(hostent*) const",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "t node::BaseObject::decrease_refcount()",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::QueueResponseCallback(int)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::QueueResponseCallback(int)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::QueueResponseCallback(int)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::QueueResponseCallback(int)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::QueueResponseCallback(int)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::QueueResponseCallback(int)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::QueueResponseCallback(int)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::QueueResponseCallback(int)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::QueueResponseCallback(int)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::QueueResponseCallback(int)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "T node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::QueueResponseCallback(int)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::cares_wrap_hostent_cpy(hostent*, hostent const*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::QueueResponseCallback(int)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::QueueResponseCallback(int)::'lambda'(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::QueryWrap(node::cares_wrap::ChannelWrap*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::crypto::HmacConfig::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::QueryWrap(node::cares_wrap::ChannelWrap*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::QueryWrap(node::cares_wrap::ChannelWrap*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::QueryWrap(node::cares_wrap::ChannelWrap*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::QueryWrap(node::cares_wrap::ChannelWrap*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::QueryWrap(node::cares_wrap::ChannelWrap*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::QueryWrap(node::cares_wrap::ChannelWrap*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::QueryWrap(node::cares_wrap::ChannelWrap*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::QueryWrap(node::cares_wrap::ChannelWrap*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::QueryWrap(node::cares_wrap::ChannelWrap*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::QueryWrap(node::cares_wrap::ChannelWrap*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::QueryWrap(node::cares_wrap::ChannelWrap*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::QueryWrap(node::cares_wrap::ChannelWrap*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "t __GLOBAL__sub_I_cares_wrap.cc",
    "type": "CPP"
  },
  {
    "name": "T node::ConnectWrap::ConnectWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "T node::ConnectWrap::ConnectWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "t node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::ConnectWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "T node::ConnectionWrap<node::PipeWrap, uv_pipe_s>::ConnectionWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "T node::ConnectionWrap<node::TCPWrap, uv_tcp_s>::ConnectionWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "T node::ConnectionWrap<node::PipeWrap, uv_pipe_s>::OnConnection(uv_stream_s*, int)",
    "type": "CPP"
  },
  {
    "name": "T node::ConnectionWrap<node::TCPWrap, uv_tcp_s>::OnConnection(uv_stream_s*, int)",
    "type": "CPP"
  },
  {
    "name": "T node::ConnectionWrap<node::PipeWrap, uv_pipe_s>::AfterConnect(uv_connect_s*, int)",
    "type": "CPP"
  },
  {
    "name": "T node::ConnectionWrap<node::TCPWrap, uv_tcp_s>::AfterConnect(uv_connect_s*, int)",
    "type": "CPP"
  },
  {
    "name": "T node::EnabledDebugList::Parse(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::EnabledDebugList::Parse(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool)",
    "type": "CPP"
  },
  {
    "name": "t node::ToLower(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::NativeSymbolDebuggingContext::New()",
    "type": "CPP"
  },
  {
    "name": "T node::NativeSymbolDebuggingContext::SymbolInfo::Display() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "T node::DumpBacktrace(__sFILE*)",
    "type": "CPP"
  },
  {
    "name": "T node::CheckedUvLoopClose(uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::PrintLibuvHandleInformation(uv_loop_s*, __sFILE*)",
    "type": "CPP"
  },
  {
    "name": "T node::NativeSymbolDebuggingContext::GetLoadedLibraries()",
    "type": "CPP"
  },
  {
    "name": "T node::FWrite(__sFILE*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T ___DumpBacktrace",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t virtual thunk to std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "t virtual thunk to std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >::seekoff(long long, std::__1::ios_base::seekdir, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >::seekpos(std::__1::fpos<__mbstate_t>, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >::pbackfail(int)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >::overflow(int)",
    "type": "CPP"
  },
  {
    "name": "t node::PrintLibuvHandleInformation(uv_loop_s*, __sFILE*)::$_0::__invoke(uv_handle_s*, void*)",
    "type": "CPP"
  },
  {
    "name": "t node::PosixSymbolDebuggingContext::LookupSymbol(void*)",
    "type": "CPP"
  },
  {
    "name": "t node::PosixSymbolDebuggingContext::IsMapped(void*)",
    "type": "CPP"
  },
  {
    "name": "t node::PosixSymbolDebuggingContext::GetStackTrace(void**, int)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_ostream<char, std::__1::char_traits<char> >& std::__1::__put_character_sequence<char, std::__1::char_traits<char> >(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > std::__1::__pad_and_output<char, std::__1::char_traits<char> >(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, char const*, char const*, char const*, std::__1::ios_base&, char)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >::str() const",
    "type": "CPP"
  },
  {
    "name": "T node::IsolateData::Serialize(v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "T node::IsolateData::DeserializeProperties(std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const*)",
    "type": "CPP"
  },
  {
    "name": "T node::IsolateData::CreateProperties()",
    "type": "CPP"
  },
  {
    "name": "T node::IsolateData::IsolateData(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, node::ArrayBufferAllocator*, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const*)",
    "type": "CPP"
  },
  {
    "name": "T node::IsolateData::IsolateData(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, node::ArrayBufferAllocator*, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const*)",
    "type": "CPP"
  },
  {
    "name": "T node::IsolateData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t void node::MemoryTracker::TrackField<std::__1::array<v8::Eternal<v8::String>, 58ul>, v8::Eternal<v8::String> const*>(char const*, std::__1::array<v8::Eternal<v8::String>, 58ul> const&, char const*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "T node::TrackingTraceStateObserver::UpdateTraceCategoryState()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::CreateProperties()",
    "type": "CPP"
  },
  {
    "name": "T node::BaseObject::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::GetExecPath(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::Environment(node::IsolateData*, v8::Isolate*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, node::EnvSerializeInfo const*, node::EnvironmentFlags::Flags, node::ThreadId)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncHooks::AsyncHooks(v8::Isolate*, node::AsyncHooks::SerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "T node::ImmediateInfo::ImmediateInfo(v8::Isolate*, node::ImmediateInfo::SerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "T node::TickInfo::TickInfo(v8::Isolate*, node::TickInfo::SerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::Environment(node::IsolateData*, v8::Isolate*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, node::EnvSerializeInfo const*, node::EnvironmentFlags::Flags, node::ThreadId)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::Environment(node::IsolateData*, v8::Local<v8::Context>, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, node::EnvSerializeInfo const*, node::EnvironmentFlags::Flags, node::ThreadId)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::InitializeMainContext(v8::Local<v8::Context>, node::EnvSerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::Environment(node::IsolateData*, v8::Local<v8::Context>, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, node::EnvSerializeInfo const*, node::EnvironmentFlags::Flags, node::ThreadId)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::DeserializeProperties(node::EnvSerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::~Environment()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::NearHeapLimitCallback(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::BuildEmbedderGraph(v8::Isolate*, v8::EmbedderGraph*, void*)",
    "type": "CPP"
  },
  {
    "name": "t node::TickInfo::~TickInfo()",
    "type": "CPP"
  },
  {
    "name": "t node::ImmediateInfo::~ImmediateInfo()",
    "type": "CPP"
  },
  {
    "name": "t node::AsyncHooks::~AsyncHooks()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::~Environment()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::~Environment()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::InitializeLibuv()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::CheckImmediate(uv_check_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::RegisterHandleCleanups()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::StartProfilerIdleNotifier()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::ExitEnv()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::CleanupHandles()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::RunAndClearNativeImmediates(bool)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::PrintSyncTrace() const",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::RunCleanup()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::RunAtExitCallbacks()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::AtExit(void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::RunAndClearInterrupts()",
    "type": "CPP"
  },
  {
    "name": "t node::Environment::RunAndClearNativeImmediates(bool)::$_7::operator()(node::CallbackQueue<void, node::Environment*>*) const",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::ToggleImmediateRef(bool)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::RequestInterruptFromV8()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::ScheduleTimer(long long)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::RunTimers(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::ToggleTimerRef(bool)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::GetNow()",
    "type": "CPP"
  },
  {
    "name": "T node::CollectExceptionInfo(node::Environment*, v8::Local<v8::Object>, int, char const*, char const*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::CollectUVExceptionInfo(v8::Local<v8::Value>, int, char const*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::ImmediateInfo::ImmediateInfo(v8::Isolate*, node::ImmediateInfo::SerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "T node::ImmediateInfo::Serialize(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "T node::ImmediateInfo::Deserialize(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "t node::AliasedBufferBase<unsigned int, v8::Uint32Array, void>::Deserialize(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "T node::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, node::ImmediateInfo::SerializeInfo const&)",
    "type": "CPP"
  },
  {
    "name": "T node::ImmediateInfo::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::TickInfo::Serialize(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "T node::TickInfo::Deserialize(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "T node::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, node::TickInfo::SerializeInfo const&)",
    "type": "CPP"
  },
  {
    "name": "T node::TickInfo::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::TickInfo::TickInfo(v8::Isolate*, node::TickInfo::SerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncHooks::AsyncHooks(v8::Isolate*, node::AsyncHooks::SerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncHooks::Deserialize(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "T node::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, node::AsyncHooks::SerializeInfo const&)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncHooks::Serialize(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncHooks::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t void node::MemoryTracker::TrackField<std::__1::array<v8::Global<v8::Function>, 4ul>, v8::Global<v8::Function> const*>(char const*, std::__1::array<v8::Global<v8::Function>, 4ul> const&, char const*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "T node::AsyncHooks::grow_async_ids_stack()",
    "type": "CPP"
  },
  {
    "name": "t node::AliasedBufferBase<double, v8::Float64Array, void>::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::Exit(int)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::stop_sub_worker_contexts()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::worker_parent_env() const",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::AddUnmanagedFd(int)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::RemoveUnmanagedFd(int)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::PrintInfoForSnapshotIfDebug()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::PrintAllBaseObjects()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::VerifyNoStrongBaseObjects()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::Serialize(v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::vector<node::PropInfo, std::__1::allocator<node::PropInfo> >::push_back(node::PropInfo&&)",
    "type": "CPP"
  },
  {
    "name": "T node::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, std::__1::vector<node::PropInfo, std::__1::allocator<node::PropInfo> > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, node::EnvSerializeInfo const&)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::EnqueueDeserializeRequest(void (*)(v8::Local<v8::Context>, v8::Local<v8::Object>, int, node::InternalFieldInfo*), v8::Local<v8::Object>, int, node::InternalFieldInfo*)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::RunDeserializeRequests()",
    "type": "CPP"
  },
  {
    "name": "T node::GuessMemoryAvailableToTheProcess()",
    "type": "CPP"
  },
  {
    "name": "t node::Environment::GetCwd()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t void node::MemoryTracker::TrackField<std::__1::set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >, std::__1::__tree_const_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*, long> >(char const*, std::__1::set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, char const*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "t void node::MemoryTracker::TrackField<std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >, std::__1::__wrap_iter<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const*> >(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, char const*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::RunWeakRefCleanup()",
    "type": "CPP"
  },
  {
    "name": "T node::BaseObject::DeleteMe(void*)",
    "type": "CPP"
  },
  {
    "name": "T node::BaseObject::IsDoneInitializing() const",
    "type": "CPP"
  },
  {
    "name": "T node::BaseObject::WrappedObject() const",
    "type": "CPP"
  },
  {
    "name": "T node::BaseObject::IsRootNode() const",
    "type": "CPP"
  },
  {
    "name": "T node::BaseObject::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "t node::IsolateData::~IsolateData()",
    "type": "CPP"
  },
  {
    "name": "t node::IsolateData::~IsolateData()",
    "type": "CPP"
  },
  {
    "name": "t node::IsolateData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::IsolateData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::AsyncHooks::~AsyncHooks()",
    "type": "CPP"
  },
  {
    "name": "t node::AsyncHooks::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::AsyncHooks::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::ImmediateInfo::~ImmediateInfo()",
    "type": "CPP"
  },
  {
    "name": "t node::ImmediateInfo::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::TickInfo::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::TickInfo::~TickInfo()",
    "type": "CPP"
  },
  {
    "name": "t node::TickInfo::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::Environment::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::Environment::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::AsyncHooks::AddContext(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::AsyncHooks::~AsyncHooks()",
    "type": "CPP"
  },
  {
    "name": "t node::Environment::InitializeLibuv()::$_0::__invoke(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::Environment::RegisterHandleCleanups()::$_2::__invoke(node::Environment*, uv_handle_s*, void*)",
    "type": "CPP"
  },
  {
    "name": "t void node::Environment::CloseHandle<uv_handle_s, node::Environment::RegisterHandleCleanups()::$_2::operator()(node::Environment*, uv_handle_s*, void*) const::'lambda'(uv_handle_s*)>(uv_handle_s*, node::Environment::RegisterHandleCleanups()::$_2::operator()(node::Environment*, uv_handle_s*, void*) const::'lambda'(uv_handle_s*))::'lambda'(uv_handle_s*)::__invoke(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::Environment::StartProfilerIdleNotifier()::$_4::__invoke(uv_prepare_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::Environment::StartProfilerIdleNotifier()::$_5::__invoke(uv_check_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::Environment::RequestInterruptFromV8()::$_8::__invoke(v8::Isolate*, void*)",
    "type": "CPP"
  },
  {
    "name": "t node::Environment::ToggleImmediateRef(bool)::$_9::__invoke(uv_idle_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::MemoryTracker::~MemoryTracker()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<void (*)(node::Environment*, int), std::__1::allocator<void (*)(node::Environment*, int)>, void (node::Environment*, int)>::__clone() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<void (*)(node::Environment*, int), std::__1::allocator<void (*)(node::Environment*, int)>, void (node::Environment*, int)>::__clone(std::__1::__function::__base<void (node::Environment*, int)>*) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<void (*)(node::Environment*, int), std::__1::allocator<void (*)(node::Environment*, int)>, void (node::Environment*, int)>::operator()(node::Environment*&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::destroy(std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_pointer<node::EnvironmentOptions*, std::__1::default_delete<node::EnvironmentOptions>, std::__1::allocator<node::EnvironmentOptions> >::__on_zero_shared()",
    "type": "CPP"
  },
  {
    "name": "t node::AliasedBufferBase<unsigned int, v8::Uint32Array, void>::AliasedBufferBase(v8::Isolate*, unsigned long, unsigned long const*)",
    "type": "CPP"
  },
  {
    "name": "t node::AliasedBufferBase<int, v8::Int32Array, void>::AliasedBufferBase(v8::Isolate*, unsigned long, unsigned long const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__tree<int, std::__1::less<int>, std::__1::allocator<int> >::destroy(std::__1::__tree_node<int, void*>*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<node::EnvironmentOptions, std::__1::allocator<node::EnvironmentOptions> >::~__shared_ptr_emplace()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<node::EnvironmentOptions, std::__1::allocator<node::EnvironmentOptions> >::~__shared_ptr_emplace()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<node::EnvironmentOptions, std::__1::allocator<node::EnvironmentOptions> >::__on_zero_shared()",
    "type": "CPP"
  },
  {
    "name": "t node::EnvironmentOptions::EnvironmentOptions(node::EnvironmentOptions const&)",
    "type": "CPP"
  },
  {
    "name": "t node::EnvironmentOptions::~EnvironmentOptions()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::__1::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > > >::~__shared_ptr_emplace()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::__1::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > > >::~__shared_ptr_emplace()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::__1::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > > >::__on_zero_shared()",
    "type": "CPP"
  },
  {
    "name": "t node::TrackingTraceStateObserver::OnTraceDisabled()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::Environment::ExitEnv()::$_1>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::Environment::ExitEnv()::$_1>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::Environment::ExitEnv()::$_1>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__sort<node::Environment::RunCleanup()::$_6&, node::CleanupHookCallback*>(node::CleanupHookCallback*, node::CleanupHookCallback*, node::Environment::RunCleanup()::$_6&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort4<node::Environment::RunCleanup()::$_6&, node::CleanupHookCallback*>(node::CleanupHookCallback*, node::CleanupHookCallback*, node::CleanupHookCallback*, node::CleanupHookCallback*, node::Environment::RunCleanup()::$_6&)",
    "type": "CPP"
  },
  {
    "name": "t bool std::__1::__insertion_sort_incomplete<node::Environment::RunCleanup()::$_6&, node::CleanupHookCallback*>(node::CleanupHookCallback*, node::CleanupHookCallback*, node::Environment::RunCleanup()::$_6&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_const_iterator<std::__1::__hash_node<node::CleanupHookCallback, void*>*> std::__1::__hash_table<node::CleanupHookCallback, node::CleanupHookCallback::Hash, node::CleanupHookCallback::Equal, std::__1::allocator<node::CleanupHookCallback> >::find<node::CleanupHookCallback>(node::CleanupHookCallback const&) const",
    "type": "CPP"
  },
  {
    "name": "t node::AliasedBufferBase<unsigned char, v8::Uint8Array, void>::AliasedBufferBase(v8::Isolate*, unsigned long, unsigned long const*)",
    "type": "CPP"
  },
  {
    "name": "t node::AliasedBufferBase<double, v8::Float64Array, void>::AliasedBufferBase(v8::Isolate*, unsigned long, unsigned long const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >::__append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_bad_function_call()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> >::__rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > node::ToStringHelper::BaseConvert<3u, int, 0>(int const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > node::ToStringHelper::BaseConvert<4u, int, 0>(int const&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned long std::__1::__hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> >::__erase_unique<int>(int const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::vector<std::__1::__tree_const_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*, long> >(std::__1::__tree_const_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*, long>, std::__1::enable_if<(__is_cpp17_forward_iterator<std::__1::__tree_const_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*, long> >::value) && (is_constructible<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::iterator_traits<std::__1::__tree_const_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*, long> >::reference>::value), std::__1::__tree_const_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*, long> >::type)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::enable_if<(__is_cpp17_forward_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*>::value) && (is_constructible<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::iterator_traits<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*>::reference>::value), void>::type std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::assign<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > node::ToStringHelper::BaseConvert<3u, unsigned char, 0>(unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > node::ToStringHelper::BaseConvert<4u, bool, 0>(bool const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > node::ToStringHelper::BaseConvert<3u, unsigned long long, 0>(unsigned long long const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > node::ToStringHelper::BaseConvert<4u, unsigned long long, 0>(unsigned long long const&)",
    "type": "CPP"
  },
  {
    "name": "T _register_fs_event_wrap()",
    "type": "CPP"
  },
  {
    "name": "T _register_external_reference_fs_event_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::FSEventWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::FSEventWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::FSEventWrap::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::FSEventWrap::GetInitialized(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::FSEventWrap::~FSEventWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::FSEventWrap::~FSEventWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::FSEventWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::FSEventWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::FSEventWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::FSEventWrap::OnEvent(uv_fs_event_s*, char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T node::HandleWrap::Ref(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::HandleWrap::Unref(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::HandleWrap::HasRef(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::HandleWrap::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::HandleWrap::Close(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::HandleWrap::OnClose(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::HandleWrap::OnGCCollect()",
    "type": "CPP"
  },
  {
    "name": "T node::HandleWrap::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "T node::HandleWrap::MarkAsInitialized()",
    "type": "CPP"
  },
  {
    "name": "T node::HandleWrap::MarkAsUninitialized()",
    "type": "CPP"
  },
  {
    "name": "T node::HandleWrap::HandleWrap(node::Environment*, v8::Local<v8::Object>, uv_handle_s*, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "T node::HandleWrap::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::HandleWrap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "T _register_external_reference_handle_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::heap::BuildEmbedderGraph(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::heap::JSGraph::CreateObject() const",
    "type": "CPP"
  },
  {
    "name": "t node::heap::JSGraph::~JSGraph()",
    "type": "CPP"
  },
  {
    "name": "T node::heap::WriteSnapshot(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::FileOutputStream::~FileOutputStream()",
    "type": "CPP"
  },
  {
    "name": "T node::heap::DeleteHeapSnapshot(v8::HeapSnapshot const*)",
    "type": "CPP"
  },
  {
    "name": "T node::heap::CreateHeapSnapshotStream(node::Environment*, std::__1::unique_ptr<v8::HeapSnapshot const, node::FunctionDeleter<v8::HeapSnapshot const, &(node::heap::DeleteHeapSnapshot(v8::HeapSnapshot const*))> >&&)",
    "type": "CPP"
  },
  {
    "name": "T node::heap::CreateHeapSnapshotStream(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::heap::TriggerHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::heap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::heap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "T _register_heap_utils()",
    "type": "CPP"
  },
  {
    "name": "T _register_external_reference_heap_utils(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "t node::heap::JSGraph::V8Node(v8::Local<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::heap::JSGraph::AddNode(std::__1::unique_ptr<v8::EmbedderGraph::Node, std::__1::default_delete<v8::EmbedderGraph::Node> >)",
    "type": "CPP"
  },
  {
    "name": "t node::heap::JSGraph::AddEdge(v8::EmbedderGraph::Node*, v8::EmbedderGraph::Node*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::heap::JSGraph::~JSGraph()",
    "type": "CPP"
  },
  {
    "name": "t node::heap::JSGraphJSNode::~JSGraphJSNode()",
    "type": "CPP"
  },
  {
    "name": "t node::heap::JSGraphJSNode::~JSGraphJSNode()",
    "type": "CPP"
  },
  {
    "name": "t node::heap::JSGraphJSNode::Name()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_iterator<std::__1::__hash_node<node::heap::JSGraphJSNode*, void*>*> std::__1::__hash_table<node::heap::JSGraphJSNode*, node::heap::JSGraphJSNode::Hash, node::heap::JSGraphJSNode::Equal, std::__1::allocator<node::heap::JSGraphJSNode*> >::find<node::heap::JSGraphJSNode*>(node::heap::JSGraphJSNode* const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<node::heap::JSGraphJSNode*, node::heap::JSGraphJSNode::Hash, node::heap::JSGraphJSNode::Equal, std::__1::allocator<node::heap::JSGraphJSNode*> >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<node::heap::JSGraphJSNode*, node::heap::JSGraphJSNode::Hash, node::heap::JSGraphJSNode::Equal, std::__1::allocator<node::heap::JSGraphJSNode*> >::__rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::unique_ptr<v8::EmbedderGraph::Node, std::__1::default_delete<v8::EmbedderGraph::Node> >, std::__1::hash<std::__1::unique_ptr<v8::EmbedderGraph::Node, std::__1::default_delete<v8::EmbedderGraph::Node> > >, std::__1::equal_to<std::__1::unique_ptr<v8::EmbedderGraph::Node, std::__1::default_delete<v8::EmbedderGraph::Node> > >, std::__1::allocator<std::__1::unique_ptr<v8::EmbedderGraph::Node, std::__1::default_delete<v8::EmbedderGraph::Node> > > >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unordered_map<v8::EmbedderGraph::Node*, std::__1::set<std::__1::pair<char const*, v8::EmbedderGraph::Node*>, std::__1::less<std::__1::pair<char const*, v8::EmbedderGraph::Node*> >, std::__1::allocator<std::__1::pair<char const*, v8::EmbedderGraph::Node*> > >, std::__1::hash<v8::EmbedderGraph::Node*>, std::__1::equal_to<v8::EmbedderGraph::Node*>, std::__1::allocator<std::__1::pair<v8::EmbedderGraph::Node* const, std::__1::set<std::__1::pair<char const*, v8::EmbedderGraph::Node*>, std::__1::less<std::__1::pair<char const*, v8::EmbedderGraph::Node*> >, std::__1::allocator<std::__1::pair<char const*, v8::EmbedderGraph::Node*> > > > > >::operator[](v8::EmbedderGraph::Node* const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<v8::EmbedderGraph::Node*, std::__1::set<std::__1::pair<char const*, v8::EmbedderGraph::Node*>, std::__1::less<std::__1::pair<char const*, v8::EmbedderGraph::Node*> >, std::__1::allocator<std::__1::pair<char const*, v8::EmbedderGraph::Node*> > > >, std::__1::__unordered_map_hasher<v8::EmbedderGraph::Node*, std::__1::__hash_value_type<v8::EmbedderGraph::Node*, std::__1::set<std::__1::pair<char const*, v8::EmbedderGraph::Node*>, std::__1::less<std::__1::pair<char const*, v8::EmbedderGraph::Node*> >, std::__1::allocator<std::__1::pair<char const*, v8::EmbedderGraph::Node*> > > >, std::__1::hash<v8::EmbedderGraph::Node*>, true>, std::__1::__unordered_map_equal<v8::EmbedderGraph::Node*, std::__1::__hash_value_type<v8::EmbedderGraph::Node*, std::__1::set<std::__1::pair<char const*, v8::EmbedderGraph::Node*>, std::__1::less<std::__1::pair<char const*, v8::EmbedderGraph::Node*> >, std::__1::allocator<std::__1::pair<char const*, v8::EmbedderGraph::Node*> > > >, std::__1::equal_to<v8::EmbedderGraph::Node*>, true>, std::__1::allocator<std::__1::__hash_value_type<v8::EmbedderGraph::Node*, std::__1::set<std::__1::pair<char const*, v8::EmbedderGraph::Node*>, std::__1::less<std::__1::pair<char const*, v8::EmbedderGraph::Node*> >, std::__1::allocator<std::__1::pair<char const*, v8::EmbedderGraph::Node*> > > > > >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__tree_balance_after_insert<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unordered_map<v8::EmbedderGraph::Node*, v8::Local<v8::Object>, std::__1::hash<v8::EmbedderGraph::Node*>, std::__1::equal_to<v8::EmbedderGraph::Node*>, std::__1::allocator<std::__1::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> > > >::operator[](v8::EmbedderGraph::Node*&&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unordered_map<v8::EmbedderGraph::Node*, v8::Local<v8::Object>, std::__1::hash<v8::EmbedderGraph::Node*>, std::__1::equal_to<v8::EmbedderGraph::Node*>, std::__1::allocator<std::__1::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> > > >::operator[](v8::EmbedderGraph::Node* const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<v8::EmbedderGraph::Node*, v8::Local<v8::Object> >, std::__1::__unordered_map_hasher<v8::EmbedderGraph::Node*, std::__1::__hash_value_type<v8::EmbedderGraph::Node*, v8::Local<v8::Object> >, std::__1::hash<v8::EmbedderGraph::Node*>, true>, std::__1::__unordered_map_equal<v8::EmbedderGraph::Node*, std::__1::__hash_value_type<v8::EmbedderGraph::Node*, v8::Local<v8::Object> >, std::__1::equal_to<v8::EmbedderGraph::Node*>, true>, std::__1::allocator<std::__1::__hash_value_type<v8::EmbedderGraph::Node*, v8::Local<v8::Object> > > >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::heap::JSGraph::~JSGraph()",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::FileOutputStream::~FileOutputStream()",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::FileOutputStream::EndOfStream()",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::FileOutputStream::GetChunkSize()",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::FileOutputStream::WriteAsciiChunk(char*, int)",
    "type": "CPP"
  },
  {
    "name": "t icu_69::Normalizer2WithImpl::getQuickCheck(int) const",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::HeapSnapshotStream::~HeapSnapshotStream()",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::HeapSnapshotStream::~HeapSnapshotStream()",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::HeapSnapshotStream::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::HeapSnapshotStream::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::HeapSnapshotStream::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::HeapSnapshotStream::GetChunkSize()",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::HeapSnapshotStream::EndOfStream()",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::HeapSnapshotStream::WriteAsciiChunk(char*, int)",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::HeapSnapshotStream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::HeapSnapshotStream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::HeapSnapshotStream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::HeapSnapshotStream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::HeapSnapshotStream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::HeapSnapshotStream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "t node::heap::(anonymous namespace)::HeapSnapshotStream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::~HeapSnapshotStream()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::~HeapSnapshotStream()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::~HeapSnapshotStream()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::~HeapSnapshotStream()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::EndOfStream()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::GetChunkSize()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::WriteAsciiChunk(char*, int)",
    "type": "CPP"
  },
  {
    "name": "T node::Histogram::Histogram(long long, long long, int)",
    "type": "CPP"
  },
  {
    "name": "T node::Histogram::Histogram(long long, long long, int)",
    "type": "CPP"
  },
  {
    "name": "T node::Histogram::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramImpl::HistogramImpl(long long, long long, int)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramImpl::HistogramImpl(long long, long long, int)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramImpl::HistogramImpl(std::__1::shared_ptr<node::Histogram>)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramImpl::HistogramImpl(std::__1::shared_ptr<node::Histogram>)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::HistogramBase(node::Environment*, v8::Local<v8::Object>, long long, long long, int)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::HistogramBase(node::Environment*, v8::Local<v8::Object>, long long, long long, int)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::HistogramBase(node::Environment*, v8::Local<v8::Object>, std::__1::shared_ptr<node::Histogram>)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::HistogramBase(node::Environment*, v8::Local<v8::Object>, std::__1::shared_ptr<node::Histogram>)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::GetMin(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::GetMax(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::GetMean(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::GetExceeds(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::GetStddev(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::GetPercentile(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::GetPercentiles(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::DoReset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::RecordDelta(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::Record(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::Create(node::Environment*, long long, long long, int)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::Create(node::Environment*, std::__1::shared_ptr<node::Histogram>)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::HistogramTransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::__1::unique_ptr<node::worker::TransferData, std::__1::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "T node::HistogramBase::HistogramTransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::IntervalHistogram::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::IntervalHistogram::GetExceeds(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::IntervalHistogram::GetMin(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::IntervalHistogram::GetMax(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::IntervalHistogram::GetMean(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::IntervalHistogram::GetStddev(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::IntervalHistogram::GetPercentile(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::IntervalHistogram::GetPercentiles(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::IntervalHistogram::DoReset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::IntervalHistogram::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::IntervalHistogram::Stop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::IntervalHistogram::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "T node::IntervalHistogram::IntervalHistogram(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, int, long long, long long, int)",
    "type": "CPP"
  },
  {
    "name": "T node::IntervalHistogram::TimerCB(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::IntervalHistogram::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::IntervalHistogram::OnStart(node::IntervalHistogram::StartFlags)",
    "type": "CPP"
  },
  {
    "name": "T node::IntervalHistogram::OnStop()",
    "type": "CPP"
  },
  {
    "name": "T node::IntervalHistogram::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "t node::HistogramBase::HistogramTransferData::~HistogramTransferData()",
    "type": "CPP"
  },
  {
    "name": "t node::HistogramBase::HistogramTransferData::~HistogramTransferData()",
    "type": "CPP"
  },
  {
    "name": "t node::HistogramBase::HistogramTransferData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::crypto::SecretKeyGenConfig::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::Histogram::~Histogram()",
    "type": "CPP"
  },
  {
    "name": "t node::Histogram::~Histogram()",
    "type": "CPP"
  },
  {
    "name": "t node::Histogram::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::Histogram::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::HistogramBase::~HistogramBase()",
    "type": "CPP"
  },
  {
    "name": "t node::HistogramBase::~HistogramBase()",
    "type": "CPP"
  },
  {
    "name": "t node::HistogramBase::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t icu_69::UCharsTrieBuilder::getMinLinearMatch() const",
    "type": "CPP"
  },
  {
    "name": "t node::SocketAddressBlockListWrap::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "T v8impl::RefBase::RefBase(napi_env__*, unsigned int, bool, void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "T v8impl::RefBase::RefBase(napi_env__*, unsigned int, bool, void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "T v8impl::RefBase::New(napi_env__*, unsigned int, bool, void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "T v8impl::RefBase::~RefBase()",
    "type": "CPP"
  },
  {
    "name": "T v8impl::RefBase::~RefBase()",
    "type": "CPP"
  },
  {
    "name": "T v8impl::RefBase::~RefBase()",
    "type": "CPP"
  },
  {
    "name": "T v8impl::RefBase::Data()",
    "type": "CPP"
  },
  {
    "name": "T v8impl::RefBase::Ref()",
    "type": "CPP"
  },
  {
    "name": "T v8impl::RefBase::Unref()",
    "type": "CPP"
  },
  {
    "name": "T v8impl::RefBase::RefCount()",
    "type": "CPP"
  },
  {
    "name": "T v8impl::RefBase::Finalize(bool)",
    "type": "CPP"
  },
  {
    "name": "T v8impl::Reference::New(napi_env__*, v8::Local<v8::Value>, unsigned int, bool, void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "T v8impl::Reference::~Reference()",
    "type": "CPP"
  },
  {
    "name": "T v8impl::Reference::~Reference()",
    "type": "CPP"
  },
  {
    "name": "T v8impl::Reference::~Reference()",
    "type": "CPP"
  },
  {
    "name": "T v8impl::Reference::Ref()",
    "type": "CPP"
  },
  {
    "name": "T v8impl::Reference::ClearWeak()",
    "type": "CPP"
  },
  {
    "name": "T v8impl::Reference::Unref()",
    "type": "CPP"
  },
  {
    "name": "T v8impl::Reference::SetWeak()",
    "type": "CPP"
  },
  {
    "name": "T v8impl::Reference::Get()",
    "type": "CPP"
  },
  {
    "name": "T v8impl::Reference::Finalize(bool)",
    "type": "CPP"
  },
  {
    "name": "T v8impl::Reference::FinalizeCallback(v8::WeakCallbackInfo<v8impl::Reference*> const&)",
    "type": "CPP"
  },
  {
    "name": "T v8impl::Reference::SecondPassCallback(v8::WeakCallbackInfo<v8impl::Reference*> const&)",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_last_error_info",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_function",
    "type": "CPP"
  },
  {
    "name": "T _napi_define_class",
    "type": "CPP"
  },
  {
    "name": "T _napi_define_properties",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_property_names",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_all_property_names",
    "type": "CPP"
  },
  {
    "name": "T _napi_set_property",
    "type": "CPP"
  },
  {
    "name": "T _napi_has_property",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_property",
    "type": "CPP"
  },
  {
    "name": "T _napi_delete_property",
    "type": "CPP"
  },
  {
    "name": "T _napi_has_own_property",
    "type": "CPP"
  },
  {
    "name": "T _napi_set_named_property",
    "type": "CPP"
  },
  {
    "name": "T _napi_has_named_property",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_named_property",
    "type": "CPP"
  },
  {
    "name": "T _napi_set_element",
    "type": "CPP"
  },
  {
    "name": "T _napi_has_element",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_element",
    "type": "CPP"
  },
  {
    "name": "T _napi_delete_element",
    "type": "CPP"
  },
  {
    "name": "T _napi_object_freeze",
    "type": "CPP"
  },
  {
    "name": "T _napi_object_seal",
    "type": "CPP"
  },
  {
    "name": "T _napi_is_array",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_array_length",
    "type": "CPP"
  },
  {
    "name": "T _napi_strict_equals",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_prototype",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_object",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_array",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_array_with_length",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_string_latin1",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_string_utf8",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_string_utf16",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_double",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_int32",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_uint32",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_int64",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_bigint_int64",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_bigint_uint64",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_bigint_words",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_boolean",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_symbol",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_error",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_type_error",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_range_error",
    "type": "CPP"
  },
  {
    "name": "T _napi_typeof",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_undefined",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_null",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_cb_info",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_new_target",
    "type": "CPP"
  },
  {
    "name": "T _napi_call_function",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_global",
    "type": "CPP"
  },
  {
    "name": "T _napi_throw",
    "type": "CPP"
  },
  {
    "name": "T _napi_throw_error",
    "type": "CPP"
  },
  {
    "name": "T _napi_throw_type_error",
    "type": "CPP"
  },
  {
    "name": "T _napi_throw_range_error",
    "type": "CPP"
  },
  {
    "name": "T _napi_is_error",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_value_double",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_value_int32",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_value_uint32",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_value_int64",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_value_bigint_int64",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_value_bigint_uint64",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_value_bigint_words",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_value_bool",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_value_string_latin1",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_value_string_utf8",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_value_string_utf16",
    "type": "CPP"
  },
  {
    "name": "T _napi_coerce_to_bool",
    "type": "CPP"
  },
  {
    "name": "T _napi_coerce_to_number",
    "type": "CPP"
  },
  {
    "name": "T _napi_coerce_to_object",
    "type": "CPP"
  },
  {
    "name": "T _napi_coerce_to_string",
    "type": "CPP"
  },
  {
    "name": "T _napi_wrap",
    "type": "CPP"
  },
  {
    "name": "T _napi_unwrap",
    "type": "CPP"
  },
  {
    "name": "t v8impl::(anonymous namespace)::Unwrap(napi_env__*, napi_value__*, void**, v8impl::(anonymous namespace)::UnwrapAction)",
    "type": "CPP"
  },
  {
    "name": "T _napi_remove_wrap",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_external",
    "type": "CPP"
  },
  {
    "name": "T _napi_type_tag_object",
    "type": "CPP"
  },
  {
    "name": "T _napi_check_object_type_tag",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_value_external",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_reference",
    "type": "CPP"
  },
  {
    "name": "T _napi_delete_reference",
    "type": "CPP"
  },
  {
    "name": "T _napi_reference_ref",
    "type": "CPP"
  },
  {
    "name": "T _napi_reference_unref",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_reference_value",
    "type": "CPP"
  },
  {
    "name": "T _napi_open_handle_scope",
    "type": "CPP"
  },
  {
    "name": "T _napi_close_handle_scope",
    "type": "CPP"
  },
  {
    "name": "T _napi_open_escapable_handle_scope",
    "type": "CPP"
  },
  {
    "name": "T _napi_close_escapable_handle_scope",
    "type": "CPP"
  },
  {
    "name": "T _napi_escape_handle",
    "type": "CPP"
  },
  {
    "name": "T _napi_new_instance",
    "type": "CPP"
  },
  {
    "name": "T _napi_instanceof",
    "type": "CPP"
  },
  {
    "name": "T _napi_is_exception_pending",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_and_clear_last_exception",
    "type": "CPP"
  },
  {
    "name": "T _napi_is_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_external_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_typedarray_info",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_arraybuffer_info",
    "type": "CPP"
  },
  {
    "name": "T _napi_is_typedarray",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_typedarray",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_dataview",
    "type": "CPP"
  },
  {
    "name": "T _napi_is_dataview",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_dataview_info",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_version",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_promise",
    "type": "CPP"
  },
  {
    "name": "T _napi_resolve_deferred",
    "type": "CPP"
  },
  {
    "name": "t v8impl::(anonymous namespace)::ConcludeDeferred(napi_env__*, napi_deferred__*, napi_value__*, bool)",
    "type": "CPP"
  },
  {
    "name": "T _napi_reject_deferred",
    "type": "CPP"
  },
  {
    "name": "T _napi_is_promise",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_date",
    "type": "CPP"
  },
  {
    "name": "T _napi_is_date",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_date_value",
    "type": "CPP"
  },
  {
    "name": "T _napi_run_script",
    "type": "CPP"
  },
  {
    "name": "T _napi_add_finalizer",
    "type": "CPP"
  },
  {
    "name": "T _napi_adjust_external_memory",
    "type": "CPP"
  },
  {
    "name": "T _napi_set_instance_data",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_instance_data",
    "type": "CPP"
  },
  {
    "name": "T _napi_detach_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "T _napi_is_detached_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "t v8impl::(anonymous namespace)::CallbackBundle::New(napi_env__*, napi_value__* (*)(napi_env__*, napi_callback_info__*), void*)",
    "type": "CPP"
  },
  {
    "name": "t v8impl::(anonymous namespace)::FunctionCallbackWrapper::Invoke(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t v8impl::(anonymous namespace)::CallbackBundle::Delete(napi_env__*, void*, void*)",
    "type": "CPP"
  },
  {
    "name": "t v8impl::(anonymous namespace)::FunctionCallbackWrapper::GetNewTarget()",
    "type": "CPP"
  },
  {
    "name": "t v8impl::(anonymous namespace)::FunctionCallbackWrapper::Args(napi_value__**, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t v8impl::(anonymous namespace)::FunctionCallbackWrapper::SetReturnValue(napi_value__*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::JSStream::JSStream(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::JSStream::JSStream(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::JSStream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::JSStream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "T node::JSStream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::JSStream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "T node::JSStream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::JSStream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "T node::JSStream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::JSStream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "T node::JSStream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::JSStream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "T node::JSStream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::JSStream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "T node::JSStream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::JSStream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::JSStream::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::JSStream::ReadBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::JSStream::EmitEOF(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::JSStream::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "T void node::JSStream::Finish<node::WriteWrap>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T void node::JSStream::Finish<node::ShutdownWrap>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T _register_js_stream()",
    "type": "CPP"
  },
  {
    "name": "t node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "t node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "t node::JSStream::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::JSStream::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "t node::ArrayBufferViewContents<char, 64ul>::Read(v8::Local<v8::ArrayBufferView>)",
    "type": "CPP"
  },
  {
    "name": "T node::EscapeJsonChars(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::Reindent(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)",
    "type": "CPP"
  },
  {
    "name": "T node::JSUDPWrap::JSUDPWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::JSUDPWrap::JSUDPWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::JSUDPWrap::RecvStart()",
    "type": "CPP"
  },
  {
    "name": "T node::JSUDPWrap::RecvStop()",
    "type": "CPP"
  },
  {
    "name": "T node::JSUDPWrap::Send(uv_buf_t*, unsigned long, sockaddr const*)",
    "type": "CPP"
  },
  {
    "name": "T node::JSUDPWrap::GetPeerName()",
    "type": "CPP"
  },
  {
    "name": "T node::JSUDPWrap::GetSockName()",
    "type": "CPP"
  },
  {
    "name": "T node::JSUDPWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::JSUDPWrap::EmitReceived(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::JSUDPWrap::OnSendDone(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::JSUDPWrap::OnAfterBind(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::JSUDPWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "T _register_js_udp_wrap()",
    "type": "CPP"
  },
  {
    "name": "t node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::JSUDPWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::JSUDPWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::JSUDPWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::SocketAddress::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::crypto::KeyPairGenConfig<node::crypto::DhKeyPairParams>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::ModuleWrap(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Module>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::ModuleWrap(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Module>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::~ModuleWrap()",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::~ModuleWrap()",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::~ModuleWrap()",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::context() const",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::GetFromModule(node::Environment*, v8::Local<v8::Module>)",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::GetFromID(node::Environment*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::SyntheticModuleEvaluationStepsCallback(v8::Local<v8::Context>, v8::Local<v8::Module>)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_map_iterator<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<int, node::loader::ModuleWrap*>, void*>*> > std::__1::unordered_multimap<int, node::loader::ModuleWrap*, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<int const, node::loader::ModuleWrap*> > >::emplace<int, node::loader::ModuleWrap*&>(int&&, node::loader::ModuleWrap*&)",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::Link(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::loader::createImportAssertionContainer(node::Environment*, v8::Isolate*, v8::Local<v8::FixedArray>)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, v8::Global<v8::Promise>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, v8::Global<v8::Promise> > > >::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::Instantiate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::ResolveModuleCallback(v8::Local<v8::Context>, v8::Local<v8::String>, v8::Local<v8::FixedArray>, v8::Local<v8::Module>)",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::Evaluate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::THROW_ERR_SCRIPT_EXECUTION_TIMEOUT(node::Environment*, long long)",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::GetNamespace(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::GetStatus(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::GetStaticDependencySpecifiers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::GetError(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::SetImportModuleDynamicallyCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::loader::ImportModuleDynamically(v8::Local<v8::Context>, v8::Local<v8::ScriptOrModule>, v8::Local<v8::String>, v8::Local<v8::FixedArray>)",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::HostInitializeImportMetaObjectCallback(v8::Local<v8::Context>, v8::Local<v8::Module>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::SetInitializeImportMetaObjectCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::SetSyntheticExport(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::CreateCachedData(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::loader::ModuleWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "T _register_module_wrap()",
    "type": "CPP"
  },
  {
    "name": "t node::loader::ModuleWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::loader::ModuleWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__murmur2_or_cityhash<unsigned long, 64ul>::operator()(void const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >::seekpos(std::__1::fpos<__mbstate_t>, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t void node::MemoryTracker::TrackField<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, v8::Global<v8::Promise> >(char const*, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, v8::Global<v8::Promise> > const&, char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, node::loader::ModuleWrap*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, node::loader::ModuleWrap*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, node::loader::ModuleWrap*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, node::loader::ModuleWrap*> > >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, node::loader::ModuleWrap*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, node::loader::ModuleWrap*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, node::loader::ModuleWrap*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, node::loader::ModuleWrap*> > >::__rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t unsigned long std::__1::__hash_table<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> >::__erase_unique<unsigned int>(unsigned int const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<int, node::loader::ModuleWrap*>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, node::loader::ModuleWrap*>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, node::loader::ModuleWrap*>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, node::loader::ModuleWrap*> > >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > node::ToBaseString<4u, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, v8::Global<v8::Promise> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, v8::Global<v8::Promise> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, v8::Global<v8::Promise> >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, v8::Global<v8::Promise> > > >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, int>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, int>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, int> > >::__rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, v8::Global<v8::Promise> >, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, v8::Global<v8::Promise> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, v8::Global<v8::Promise> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, v8::Global<v8::Promise> >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, v8::Global<v8::Promise> > > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "t node::Platform volatile::~Platform volatile()",
    "type": "CPP"
  },
  {
    "name": "T node::SignalExit(int, __siginfo*, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::ResetStdio()",
    "type": "CPP"
  },
  {
    "name": "T node::ExecuteBootstrapper(node::Environment*, char const*, std::__1::vector<v8::Local<v8::String>, std::__1::allocator<v8::Local<v8::String> > >*, std::__1::vector<v8::Local<v8::Value>, std::__1::allocator<v8::Local<v8::Value> > >*)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::InitializeInspector(std::__1::unique_ptr<node::inspector::ParentInspectorHandle, std::__1::default_delete<node::inspector::ParentInspectorHandle> >)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::InitializeDiagnostics()",
    "type": "CPP"
  },
  {
    "name": "t node::AtomicsWaitCallback(v8::Isolate::AtomicsWaitEvent, v8::Local<v8::SharedArrayBuffer>, unsigned long, long long, double, v8::Isolate::AtomicsWaitWakeHandle*, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::BootstrapInternalLoaders()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::BootstrapNode()",
    "type": "CPP"
  },
  {
    "name": "T node::Environment::RunBootstrapping()",
    "type": "CPP"
  },
  {
    "name": "T node::MarkBootstrapComplete(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::StartExecution(node::Environment*, std::__1::function<v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&)>)",
    "type": "CPP"
  },
  {
    "name": "t node::StartExecution(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::TrapWebAssemblyOrContinue(int, __siginfo*, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::RegisterSignalHandler(int, void (*)(int, __siginfo*, void*), bool)",
    "type": "CPP"
  },
  {
    "name": "T node::ProcessGlobalArgs(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::push_back(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "T node::InitializeNodeWithArgs(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::insert(std::__1::__wrap_iter<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::InitializeOncePerProcess(int, char**)",
    "type": "CPP"
  },
  {
    "name": "T node::InitializeOncePerProcess(int, char**, node::InitializationSettingsFlags)",
    "type": "CPP"
  },
  {
    "name": "t node::PlatformInit()",
    "type": "CPP"
  },
  {
    "name": "t node::Platform volatile::Initialize(int)",
    "type": "CPP"
  },
  {
    "name": "T node::TearDownOncePerProcess()",
    "type": "CPP"
  },
  {
    "name": "T node::Start(int, char**)",
    "type": "CPP"
  },
  {
    "name": "T node::Stop(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::Environment::InitializeDiagnostics()::$_0::__invoke(void*)",
    "type": "CPP"
  },
  {
    "name": "t node::Platform volatile::StartTracingAgent()",
    "type": "CPP"
  },
  {
    "name": "t node::NodeTraceStateObserver::OnTraceEnabled()",
    "type": "CPP"
  },
  {
    "name": "t node::NodeTraceStateObserver::OnTraceDisabled()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::__tree_const_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_bad_function_call()",
    "type": "CPP"
  },
  {
    "name": "t __GLOBAL__sub_I_node.cc",
    "type": "CPP"
  },
  {
    "name": "T node_napi_env__::node_napi_env__(v8::Local<v8::Context>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T node_napi_env__::node_napi_env__(v8::Local<v8::Context>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T node_napi_env__::can_call_into_js() const",
    "type": "CPP"
  },
  {
    "name": "T node_napi_env__::mark_arraybuffer_as_untransferable(v8::Local<v8::ArrayBuffer>) const",
    "type": "CPP"
  },
  {
    "name": "T node_napi_env__::CallFinalizer(void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "T napi_module_register_by_symbol(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, napi_value__* (*)(napi_env__*, napi_value__*))",
    "type": "CPP"
  },
  {
    "name": "T node::napi_module_to_node_module(napi_module const*)",
    "type": "CPP"
  },
  {
    "name": "t napi_module_register_cb(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "T _napi_module_register",
    "type": "CPP"
  },
  {
    "name": "T _napi_add_env_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "T _napi_remove_env_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "T _napi_add_async_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "T _napi_remove_async_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "T _napi_fatal_exception",
    "type": "CPP"
  },
  {
    "name": "T _napi_fatal_error",
    "type": "CPP"
  },
  {
    "name": "T _napi_open_callback_scope",
    "type": "CPP"
  },
  {
    "name": "T _napi_close_callback_scope",
    "type": "CPP"
  },
  {
    "name": "T _napi_async_init",
    "type": "CPP"
  },
  {
    "name": "T _napi_async_destroy",
    "type": "CPP"
  },
  {
    "name": "T _napi_make_callback",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_buffer",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_external_buffer",
    "type": "CPP"
  },
  {
    "name": "t v8impl::(anonymous namespace)::BufferFinalizer::FinalizeBufferCallback(char*, void*)",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_buffer_copy",
    "type": "CPP"
  },
  {
    "name": "T _napi_is_buffer",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_buffer_info",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_node_version",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_async_work",
    "type": "CPP"
  },
  {
    "name": "T _napi_delete_async_work",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_uv_event_loop",
    "type": "CPP"
  },
  {
    "name": "T _napi_queue_async_work",
    "type": "CPP"
  },
  {
    "name": "T _napi_cancel_async_work",
    "type": "CPP"
  },
  {
    "name": "T _napi_create_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "T _napi_get_threadsafe_function_context",
    "type": "CPP"
  },
  {
    "name": "T _napi_call_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "T _napi_acquire_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "T _napi_release_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "T _napi_unref_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "T _napi_ref_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "T _node_api_get_module_file_name",
    "type": "CPP"
  },
  {
    "name": "t node_napi_env__::~node_napi_env__()",
    "type": "CPP"
  },
  {
    "name": "t node_napi_env__::~node_napi_env__()",
    "type": "CPP"
  },
  {
    "name": "t napi_env__::~napi_env__()",
    "type": "CPP"
  },
  {
    "name": "t napi_env__::~napi_env__()",
    "type": "CPP"
  },
  {
    "name": "t napi_env__::mark_arraybuffer_as_untransferable(v8::Local<v8::ArrayBuffer>) const",
    "type": "CPP"
  },
  {
    "name": "t napi_env__::CallFinalizer(void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t v8impl::(anonymous namespace)::NewEnv(v8::Local<v8::Context>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::'lambda'(void*)::__invoke(void*)",
    "type": "CPP"
  },
  {
    "name": "T napi_async_cleanup_hook_handle__::Hook(void*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "t napi_async_cleanup_hook_handle__::~napi_async_cleanup_hook_handle__()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<napi_async_cleanup_hook_handle__::~napi_async_cleanup_hook_handle__()::'lambda'(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t v8impl::(anonymous namespace)::AsyncContext::EnsureReference()",
    "type": "CPP"
  },
  {
    "name": "t v8impl::(anonymous namespace)::AsyncContext::WeakCallback(v8::WeakCallbackInfo<v8impl::(anonymous namespace)::AsyncContext> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<v8impl::(anonymous namespace)::BufferFinalizer::FinalizeBufferCallback(char*, void*)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<v8impl::(anonymous namespace)::BufferFinalizer::FinalizeBufferCallback(char*, void*)::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<v8impl::(anonymous namespace)::BufferFinalizer::FinalizeBufferCallback(char*, void*)::'lambda'(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::uvimpl::Work::~Work()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::uvimpl::Work::~Work()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::uvimpl::Work::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::uvimpl::Work::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to (anonymous namespace)::uvimpl::Work::~Work()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to (anonymous namespace)::uvimpl::Work::~Work()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to (anonymous namespace)::uvimpl::Work::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to (anonymous namespace)::uvimpl::Work::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "T node::ThreadPoolWork::ScheduleWork()::'lambda'(uv_work_s*)::__invoke(uv_work_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::ThreadPoolWork::ScheduleWork()::'lambda'(uv_work_s*, int)::__invoke(uv_work_s*, int)",
    "type": "CPP"
  },
  {
    "name": "t v8impl::(anonymous namespace)::ThreadSafeFunction::CallJs(napi_env__*, napi_value__*, void*, void*)",
    "type": "CPP"
  },
  {
    "name": "t v8impl::(anonymous namespace)::ThreadSafeFunction::Cleanup(void*)",
    "type": "CPP"
  },
  {
    "name": "t v8impl::(anonymous namespace)::ThreadSafeFunction::~ThreadSafeFunction()",
    "type": "CPP"
  },
  {
    "name": "t v8impl::(anonymous namespace)::ThreadSafeFunction::~ThreadSafeFunction()",
    "type": "CPP"
  },
  {
    "name": "t v8impl::(anonymous namespace)::ThreadSafeFunction::CloseHandlesAndMaybeDelete(bool)",
    "type": "CPP"
  },
  {
    "name": "t void node::Environment::CloseHandle<uv_handle_s, v8impl::(anonymous namespace)::ThreadSafeFunction::CloseHandlesAndMaybeDelete(bool)::'lambda'(uv_handle_s*)>(uv_handle_s*, v8impl::(anonymous namespace)::ThreadSafeFunction::CloseHandlesAndMaybeDelete(bool)::'lambda'(uv_handle_s*))::'lambda'(uv_handle_s*)::__invoke(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "t v8impl::(anonymous namespace)::ThreadSafeFunction::AsyncCb(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "t void node::Environment::CloseHandle<uv_handle_s, v8impl::(anonymous namespace)::ThreadSafeFunction::Init()::'lambda'(uv_handle_s*)>(uv_handle_s*, v8impl::(anonymous namespace)::ThreadSafeFunction::Init()::'lambda'(uv_handle_s*))::'lambda'(uv_handle_s*)::__invoke(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node_napi_env__::CallFinalizer(void (*)(napi_env__*, void*, void*), void*, void*)::$_0>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node_napi_env__::CallFinalizer(void (*)(napi_env__*, void*, void*), void*, void*)::$_0>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node_napi_env__::CallFinalizer(void (*)(napi_env__*, void*, void*), void*, void*)::$_0>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T _node_module_register",
    "type": "CPP"
  },
  {
    "name": "t node::binding::global_handle_map_t::~global_handle_map_t()",
    "type": "CPP"
  },
  {
    "name": "T node::binding::DLib::DLib(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "T node::binding::DLib::DLib(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "T node::binding::DLib::Open()",
    "type": "CPP"
  },
  {
    "name": "T node::binding::DLib::Close()",
    "type": "CPP"
  },
  {
    "name": "t node::binding::global_handle_map_t::erase(void*)",
    "type": "CPP"
  },
  {
    "name": "T node::binding::DLib::GetSymbolAddress(char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::binding::DLib::SaveInGlobalHandleMap(node::node_module*)",
    "type": "CPP"
  },
  {
    "name": "T node::binding::DLib::GetSavedModuleFromGlobalHandleMap()",
    "type": "CPP"
  },
  {
    "name": "T node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::Environment::TryLoadAddon(char const*, int, std::__1::function<bool (node::binding::DLib*)> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::binding::GetInternalBinding(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::binding::GetLinkedBinding(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::binding::RegisterBuiltinModules()",
    "type": "CPP"
  },
  {
    "name": "T node::binding::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "T _register_external_reference_binding(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unordered_map<void*, node::binding::global_handle_map_t::Entry, std::__1::hash<void*>, std::__1::equal_to<void*>, std::__1::allocator<std::__1::pair<void* const, node::binding::global_handle_map_t::Entry> > >::operator[](void* const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<void*, node::binding::global_handle_map_t::Entry>, std::__1::__unordered_map_hasher<void*, std::__1::__hash_value_type<void*, node::binding::global_handle_map_t::Entry>, std::__1::hash<void*>, true>, std::__1::__unordered_map_equal<void*, std::__1::__hash_value_type<void*, node::binding::global_handle_map_t::Entry>, std::__1::equal_to<void*>, true>, std::__1::allocator<std::__1::__hash_value_type<void*, node::binding::global_handle_map_t::Entry> > >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_bad_function_call()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::$_0, std::__1::allocator<node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::$_0>, bool (node::binding::DLib*)>::~__func()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::$_0, std::__1::allocator<node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::$_0>, bool (node::binding::DLib*)>::~__func()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::$_0, std::__1::allocator<node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::$_0>, bool (node::binding::DLib*)>::__clone() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::$_0, std::__1::allocator<node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::$_0>, bool (node::binding::DLib*)>::__clone(std::__1::__function::__base<bool (node::binding::DLib*)>*) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::$_0, std::__1::allocator<node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::$_0>, bool (node::binding::DLib*)>::destroy()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::$_0, std::__1::allocator<node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::$_0>, bool (node::binding::DLib*)>::destroy_deallocate()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::$_0, std::__1::allocator<node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::$_0>, bool (node::binding::DLib*)>::operator()(node::binding::DLib*&&)",
    "type": "CPP"
  },
  {
    "name": "t __GLOBAL__sub_I_node_binding.cc",
    "type": "CPP"
  },
  {
    "name": "T node::Blob::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "t node::BlobBindingData* node::Environment::AddBindingData<node::BlobBindingData>(v8::Local<v8::Context>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::Blob::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::Blob::StoreDataObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::Blob::GetDataObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::Blob::RevokeDataObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::FixedSizeBlobCopyJob::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::Blob::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::Blob::ToArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::Blob::ToSlice(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::Blob::HasInstance(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::Blob::Create(node::Environment*, std::__1::vector<node::BlobEntry, std::__1::allocator<node::BlobEntry> >, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::vector<node::BlobEntry, std::__1::allocator<node::BlobEntry> >::emplace_back<node::BlobEntry>(node::BlobEntry&&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::enable_if<(__is_cpp17_forward_iterator<std::__1::__wrap_iter<node::BlobEntry*> >::value) && (is_constructible<node::BlobEntry, std::__1::iterator_traits<std::__1::__wrap_iter<node::BlobEntry*> >::reference>::value), std::__1::__wrap_iter<node::BlobEntry*> >::type std::__1::vector<node::BlobEntry, std::__1::allocator<node::BlobEntry> >::insert<std::__1::__wrap_iter<node::BlobEntry*> >(std::__1::__wrap_iter<node::BlobEntry const*>, std::__1::__wrap_iter<node::BlobEntry*>, std::__1::__wrap_iter<node::BlobEntry*>)",
    "type": "CPP"
  },
  {
    "name": "T node::Blob::GetArrayBuffer(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::Blob::Slice(node::Environment*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::Blob::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::Blob::Blob(node::Environment*, v8::Local<v8::Object>, std::__1::vector<node::BlobEntry, std::__1::allocator<node::BlobEntry> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::Blob::Blob(node::Environment*, v8::Local<v8::Object>, std::__1::vector<node::BlobEntry, std::__1::allocator<node::BlobEntry> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::Blob::BlobTransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::__1::unique_ptr<node::worker::TransferData, std::__1::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "T node::Blob::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "T node::Blob::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "T node::BlobBindingData::store_data_object(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, node::BlobBindingData::StoredDataObject const&)",
    "type": "CPP"
  },
  {
    "name": "T node::BlobBindingData::StoredDataObject::StoredDataObject(node::BaseObjectPtrImpl<node::Blob, false> const&, unsigned long, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "t node::BlobBindingData::StoredDataObject::~StoredDataObject()",
    "type": "CPP"
  },
  {
    "name": "T node::BlobBindingData::revoke_data_object(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::BlobBindingData::get_data_object(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::FixedSizeBlobCopyJob::FixedSizeBlobCopyJob(node::Environment*, v8::Local<v8::Object>, node::Blob*, node::FixedSizeBlobCopyJob::Mode)",
    "type": "CPP"
  },
  {
    "name": "T node::FixedSizeBlobCopyJob::FixedSizeBlobCopyJob(node::Environment*, v8::Local<v8::Object>, node::Blob*, node::FixedSizeBlobCopyJob::Mode)",
    "type": "CPP"
  },
  {
    "name": "T node::FixedSizeBlobCopyJob::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::FixedSizeBlobCopyJob::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "T node::FixedSizeBlobCopyJob::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::FixedSizeBlobCopyJob::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "T node::FixedSizeBlobCopyJob::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::FixedSizeBlobCopyJob::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::FixedSizeBlobCopyJob::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::FixedSizeBlobCopyJob::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "T node::BlobBindingData::StoredDataObject::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::BlobBindingData::StoredDataObject::StoredDataObject(node::BaseObjectPtrImpl<node::Blob, false> const&, unsigned long, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::BlobBindingData::BlobBindingData(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::BlobBindingData::BlobBindingData(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::BlobBindingData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, node::BlobBindingData::StoredDataObject, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, node::BlobBindingData::StoredDataObject> > >::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::BlobBindingData::Deserialize(v8::Local<v8::Context>, v8::Local<v8::Object>, int, node::InternalFieldInfo*)",
    "type": "CPP"
  },
  {
    "name": "T node::BlobBindingData::PrepareForSerialization(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "T node::BlobBindingData::Serialize(int)",
    "type": "CPP"
  },
  {
    "name": "T node::Blob::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "T _register_blob()",
    "type": "CPP"
  },
  {
    "name": "T _register_external_reference_blob(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "t node::Blob::BlobTransferData::~BlobTransferData()",
    "type": "CPP"
  },
  {
    "name": "t node::Blob::BlobTransferData::~BlobTransferData()",
    "type": "CPP"
  },
  {
    "name": "t node::Blob::BlobTransferData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::worker::JSTransferable::Data::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::Blob::~Blob()",
    "type": "CPP"
  },
  {
    "name": "t node::Blob::~Blob()",
    "type": "CPP"
  },
  {
    "name": "t node::Blob::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::serdes::DeserializerContext::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::BlobBindingData::StoredDataObject::~StoredDataObject()",
    "type": "CPP"
  },
  {
    "name": "t node::BlobBindingData::StoredDataObject::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "t node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "t node::FixedSizeBlobCopyJob::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "t node::BlobBindingData::~BlobBindingData()",
    "type": "CPP"
  },
  {
    "name": "t node::BlobBindingData::~BlobBindingData()",
    "type": "CPP"
  },
  {
    "name": "t node::BlobBindingData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::BlobBindingData::StoredDataObject::StoredDataObject(node::BlobBindingData::StoredDataObject const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_pointer<v8::BackingStore*, std::__1::default_delete<v8::BackingStore>, std::__1::allocator<v8::BackingStore> >::__on_zero_shared()",
    "type": "CPP"
  },
  {
    "name": "t node::BaseObjectPtrImpl<node::BlobBindingData, false> node::MakeBaseObject<node::BlobBindingData, node::Environment*, v8::Local<v8::Object>&>(node::Environment*&&, v8::Local<v8::Object>&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<node::FastStringKey, node::BaseObjectPtrImpl<node::BaseObject, false> >, void*>, std::__1::__hash_node_destructor<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<node::FastStringKey, node::BaseObjectPtrImpl<node::BaseObject, false> >, void*> > > > std::__1::__hash_table<std::__1::__hash_value_type<node::FastStringKey, node::BaseObjectPtrImpl<node::BaseObject, false> >, std::__1::__unordered_map_hasher<node::FastStringKey, std::__1::__hash_value_type<node::FastStringKey, node::BaseObjectPtrImpl<node::BaseObject, false> >, node::FastStringKey::Hash, true>, std::__1::__unordered_map_equal<node::FastStringKey, std::__1::__hash_value_type<node::FastStringKey, node::BaseObjectPtrImpl<node::BaseObject, false> >, std::__1::equal_to<node::FastStringKey>, true>, std::__1::allocator<std::__1::__hash_value_type<node::FastStringKey, node::BaseObjectPtrImpl<node::BaseObject, false> > > >::__construct_node_hash<node::FastStringKey const&, node::BaseObjectPtrImpl<node::v8_utils::BindingData, false>&>(unsigned long, node::FastStringKey const&, node::BaseObjectPtrImpl<node::v8_utils::BindingData, false>&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<node::FastStringKey, node::BaseObjectPtrImpl<node::BaseObject, false> >, std::__1::__unordered_map_hasher<node::FastStringKey, std::__1::__hash_value_type<node::FastStringKey, node::BaseObjectPtrImpl<node::BaseObject, false> >, node::FastStringKey::Hash, true>, std::__1::__unordered_map_equal<node::FastStringKey, std::__1::__hash_value_type<node::FastStringKey, node::BaseObjectPtrImpl<node::BaseObject, false> >, std::__1::equal_to<node::FastStringKey>, true>, std::__1::allocator<std::__1::__hash_value_type<node::FastStringKey, node::BaseObjectPtrImpl<node::BaseObject, false> > > >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<node::FastStringKey, node::BaseObjectPtrImpl<node::BaseObject, false> >, std::__1::__unordered_map_hasher<node::FastStringKey, std::__1::__hash_value_type<node::FastStringKey, node::BaseObjectPtrImpl<node::BaseObject, false> >, node::FastStringKey::Hash, true>, std::__1::__unordered_map_equal<node::FastStringKey, std::__1::__hash_value_type<node::FastStringKey, node::BaseObjectPtrImpl<node::BaseObject, false> >, std::__1::equal_to<node::FastStringKey>, true>, std::__1::allocator<std::__1::__hash_value_type<node::FastStringKey, node::BaseObjectPtrImpl<node::BaseObject, false> > > >::__rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<node::FastStringKey, node::BaseObjectPtrImpl<node::BaseObject, false> >, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<node::FastStringKey, node::BaseObjectPtrImpl<node::BaseObject, false> >, std::__1::__unordered_map_hasher<node::FastStringKey, std::__1::__hash_value_type<node::FastStringKey, node::BaseObjectPtrImpl<node::BaseObject, false> >, node::FastStringKey::Hash, true>, std::__1::__unordered_map_equal<node::FastStringKey, std::__1::__hash_value_type<node::FastStringKey, node::BaseObjectPtrImpl<node::BaseObject, false> >, std::__1::equal_to<node::FastStringKey>, true>, std::__1::allocator<std::__1::__hash_value_type<node::FastStringKey, node::BaseObjectPtrImpl<node::BaseObject, false> > > >::find<node::FastStringKey>(node::FastStringKey const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::enable_if<(__is_cpp17_forward_iterator<node::BlobEntry*>::value) && (is_constructible<node::BlobEntry, std::__1::iterator_traits<node::BlobEntry*>::reference>::value), void>::type std::__1::vector<node::BlobEntry, std::__1::allocator<node::BlobEntry> >::assign<node::BlobEntry*>(node::BlobEntry*, node::BlobEntry*)",
    "type": "CPP"
  },
  {
    "name": "t void node::MemoryTracker::TrackField<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, node::BlobBindingData::StoredDataObject>(char const*, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, node::BlobBindingData::StoredDataObject> const&, char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, node::BlobBindingData::StoredDataObject>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, node::BlobBindingData::StoredDataObject>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, node::BlobBindingData::StoredDataObject>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, node::BlobBindingData::StoredDataObject> > >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, node::BlobBindingData::StoredDataObject>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, node::BlobBindingData::StoredDataObject>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, node::BlobBindingData::StoredDataObject>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, node::BlobBindingData::StoredDataObject> > >::erase(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, node::BlobBindingData::StoredDataObject>, void*>*>)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<v8::TracingController::TraceStateObserver*, std::__1::hash<v8::TracingController::TraceStateObserver*>, std::__1::equal_to<v8::TracingController::TraceStateObserver*>, std::__1::allocator<v8::TracingController::TraceStateObserver*> >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<v8::TracingController::TraceStateObserver*, void*>*>)",
    "type": "CPP"
  },
  {
    "name": "T node::Buffer::HasInstance(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::Buffer::HasInstance(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::Buffer::Data(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::Buffer::Data(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::Buffer::Length(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::Buffer::Length(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::Buffer::New(node::Environment*, v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::Buffer::New(v8::Isolate*, v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::Buffer::New(v8::Isolate*, v8::Local<v8::String>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "T node::Buffer::New(v8::Isolate*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::Buffer::New(node::Environment*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::Buffer::Copy(v8::Isolate*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::Buffer::Copy(node::Environment*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::Buffer::New(v8::Isolate*, char*, unsigned long, void (*)(char*, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "T node::Buffer::New(node::Environment*, char*, unsigned long, void (*)(char*, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "T node::Buffer::New(v8::Isolate*, char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::Buffer::New(node::Environment*, char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::Buffer::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::SetBufferPrototype(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::CreateFromString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::ByteLengthUtf8(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::Copy(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::Compare(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::CompareOffset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::Fill(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::IndexOfBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::IndexOfNumber(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::IndexOfString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::Swap16(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::Swap32(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::Swap64(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::EncodeInto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::EncodeUtf8String(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)0>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)2>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)7>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)4>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)5>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)3>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)1>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)0>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)2>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)7>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)4>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)5>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)3>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)1>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::GetZeroFillToggle(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::DetachArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::CopyArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T _register_buffer()",
    "type": "CPP"
  },
  {
    "name": "T _register_external_reference_buffer(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::CallbackInfo::OnBackingStoreFree()",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::CallbackInfo::CleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::CallbackInfo::CreateTrackedArrayBuffer(node::Environment*, char*, unsigned long, void (*)(char*, void*), void*)::'lambda'(void*, unsigned long, void*)::__invoke(void*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::Buffer::(anonymous namespace)::CallbackInfo::OnBackingStoreFree()::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::Buffer::(anonymous namespace)::CallbackInfo::OnBackingStoreFree()::'lambda'(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::Buffer::(anonymous namespace)::CallbackInfo::OnBackingStoreFree()::'lambda'(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::New(node::Environment*, char*, unsigned long)::$_0::__invoke(char*, void*)",
    "type": "CPP"
  },
  {
    "name": "t unsigned long node::SearchString<unsigned short>(unsigned short const*, unsigned long, unsigned short const*, unsigned long, unsigned long, bool)",
    "type": "CPP"
  },
  {
    "name": "t unsigned long node::SearchString<unsigned char>(unsigned char const*, unsigned long, unsigned char const*, unsigned long, unsigned long, bool)",
    "type": "CPP"
  },
  {
    "name": "t node::stringsearch::StringSearch<unsigned short>::Search(node::stringsearch::Vector<unsigned short const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::stringsearch::StringSearch<unsigned short>::BoyerMooreHorspoolSearch(node::stringsearch::Vector<unsigned short const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::stringsearch::StringSearch<unsigned short>::BoyerMooreSearch(node::stringsearch::Vector<unsigned short const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::stringsearch::StringSearch<unsigned short>::InitialSearch(node::stringsearch::Vector<unsigned short const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::stringsearch::StringSearch<unsigned short>::LinearSearch(node::stringsearch::Vector<unsigned short const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::stringsearch::StringSearch<unsigned short>::PopulateBoyerMooreTable()",
    "type": "CPP"
  },
  {
    "name": "t unsigned long node::stringsearch::FindFirstCharacter<unsigned short>(node::stringsearch::Vector<unsigned short const>, node::stringsearch::Vector<unsigned short const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::stringsearch::StringSearch<unsigned char>::Search(node::stringsearch::Vector<unsigned char const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::stringsearch::StringSearch<unsigned char>::BoyerMooreHorspoolSearch(node::stringsearch::Vector<unsigned char const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::stringsearch::StringSearch<unsigned char>::BoyerMooreSearch(node::stringsearch::Vector<unsigned char const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::stringsearch::StringSearch<unsigned char>::InitialSearch(node::stringsearch::Vector<unsigned char const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::stringsearch::StringSearch<unsigned char>::LinearSearch(node::stringsearch::Vector<unsigned char const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::stringsearch::StringSearch<unsigned char>::PopulateBoyerMooreTable()",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::GetZeroFillToggle(v8::FunctionCallbackInfo<v8::Value> const&)::$_1::__invoke(void*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "t node::Buffer::(anonymous namespace)::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "T _register_config()",
    "type": "CPP"
  },
  {
    "name": "t node::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::DefineConstants(v8::Isolate*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::DefineErrnoConstants(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::DefineSystemConstants(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::DefineCryptoConstants(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::ContextifyContext(node::Environment*, v8::Local<v8::Object>, node::contextify::ContextOptions const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::CreateV8Context(node::Environment*, v8::Local<v8::Object>, node::contextify::ContextOptions const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::WeakCallback(v8::WeakCallbackInfo<node::contextify::ContextifyContext> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::CleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::ContextifyContext(node::Environment*, v8::Local<v8::Object>, node::contextify::ContextOptions const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::~ContextifyContext()",
    "type": "CPP"
  },
  {
    "name": "t node::AsyncHooks::RemoveContext(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::~ContextifyContext()",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::CreateDataWrapper(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::PropertyGetterCallback(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::PropertySetterCallback(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::PropertyDescriptorCallback(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::PropertyDeleterCallback(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Boolean> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::PropertyEnumeratorCallback(v8::PropertyCallbackInfo<v8::Array> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::PropertyDefinerCallback(v8::Local<v8::Name>, v8::PropertyDescriptor const&, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::IndexedPropertyGetterCallback(unsigned int, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::IndexedPropertySetterCallback(unsigned int, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::IndexedPropertyDescriptorCallback(unsigned int, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::IndexedPropertyDeleterCallback(unsigned int, v8::PropertyCallbackInfo<v8::Boolean> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::IndexedPropertyDefinerCallback(unsigned int, v8::PropertyDescriptor const&, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::Init(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::MakeContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::IsContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::CompileFunction(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyContext::ContextFromContextifiedSandbox(node::Environment*, v8::Local<v8::Object> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyScript::Init(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyScript::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyScript::CreateCachedData(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyScript::RunInContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyScript::RunInThisContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyScript::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyScript::ContextifyScript(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyScript::InstanceOf(node::Environment*, v8::Local<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyScript::EvalMachine(node::Environment*, long long, bool, bool, bool, std::__1::shared_ptr<v8::MicrotaskQueue>, v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyScript::ContextifyScript(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyScript::~ContextifyScript()",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyScript::~ContextifyScript()",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::ContextifyScript::~ContextifyScript()",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::CompiledFnEntry::CompiledFnEntry(node::Environment*, v8::Local<v8::Object>, unsigned int, v8::Local<v8::ScriptOrModule>)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::CompiledFnEntry::WeakCallback(v8::WeakCallbackInfo<node::contextify::CompiledFnEntry> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::CompiledFnEntry::~CompiledFnEntry()",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::CompiledFnEntry::CompiledFnEntry(node::Environment*, v8::Local<v8::Object>, unsigned int, v8::Local<v8::ScriptOrModule>)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::CompiledFnEntry::~CompiledFnEntry()",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::CompiledFnEntry::~CompiledFnEntry()",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::MicrotaskQueueWrap::MicrotaskQueueWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::MicrotaskQueueWrap::MicrotaskQueueWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::MicrotaskQueueWrap::microtask_queue() const",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::MicrotaskQueueWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::MicrotaskQueueWrap::Init(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::MicrotaskQueueWrap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "t node::contextify::StartSigintWatchdog(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::contextify::StopSigintWatchdog(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::contextify::WatchdogHasPendingSigint(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::contextify::MeasureMemory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::contextify::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "T _register_contextify()",
    "type": "CPP"
  },
  {
    "name": "T _register_external_reference_contextify(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "t node::contextify::ContextifyScript::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::contextify::CompiledFnEntry::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::contextify::MicrotaskQueueWrap::~MicrotaskQueueWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::contextify::MicrotaskQueueWrap::~MicrotaskQueueWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::contextify::MicrotaskQueueWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >::seekpos(std::__1::fpos<__mbstate_t>, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, node::contextify::ContextifyScript*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, node::contextify::ContextifyScript*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, node::contextify::ContextifyScript*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, node::contextify::ContextifyScript*> > >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, node::contextify::CompiledFnEntry*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, node::contextify::CompiledFnEntry*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, node::contextify::CompiledFnEntry*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, node::contextify::CompiledFnEntry*> > >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::credentials::SafeGetenv(char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::credentials::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "t node::credentials::SafeGetenv(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::credentials::GetUid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::credentials::GetEUid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::credentials::GetGid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::credentials::GetEGid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::credentials::GetGroups(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::credentials::InitGroups(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::credentials::SetEGid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::credentials::SetEUid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::credentials::SetGid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::credentials::SetUid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::credentials::SetGroups(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T _register_credentials()",
    "type": "CPP"
  },
  {
    "name": "T _register_external_reference_credentials(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t v8::MaybeLocal<v8::Value> node::ToV8Value<unsigned int>(v8::Local<v8::Context>, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >::__append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::credentials::gid_by_name(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "t node::credentials::uid_by_name(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "t node::credentials::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs_dir::DirHandle::DirHandle(node::Environment*, v8::Local<v8::Object>, uv_dir_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs_dir::DirHandle::DirHandle(node::Environment*, v8::Local<v8::Object>, uv_dir_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs_dir::DirHandle::New(node::Environment*, uv_dir_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs_dir::DirHandle::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::fs_dir::DirHandle::~DirHandle()",
    "type": "CPP"
  },
  {
    "name": "t node::fs_dir::DirHandle::GCClose()",
    "type": "CPP"
  },
  {
    "name": "T node::fs_dir::DirHandle::~DirHandle()",
    "type": "CPP"
  },
  {
    "name": "T node::fs_dir::DirHandle::~DirHandle()",
    "type": "CPP"
  },
  {
    "name": "T node::fs_dir::DirHandle::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::fs_dir::AfterClose(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs_dir::DirHandle::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::GetReqWrap(v8::FunctionCallbackInfo<v8::Value> const&, int, bool)",
    "type": "CPP"
  },
  {
    "name": "T node::fs_dir::DirHandle::Read(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs_dir::AfterDirRead(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::fs_dir::DirentListToArray(node::Environment*, uv_dirent_s*, int, node::encoding, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs_dir::AfterOpenDir(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs_dir::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "t node::fs_dir::OpenDir(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::fs_dir::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "T _register_fs_dir()",
    "type": "CPP"
  },
  {
    "name": "T _register_external_reference_fs_dir(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "t node::fs_dir::DirHandle::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::'lambda'(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSReqBase::FSReqBase(node::fs::BindingData*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, bool)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long long, v8::BigUint64Array, void> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long long, v8::BigUint64Array, void> >::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long long, v8::BigUint64Array, void> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long long, v8::BigUint64Array, void> >::Reject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long long, v8::BigUint64Array, void> >::Resolve(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long long, v8::BigUint64Array, void> >::ResolveStat(uv_stat_t const*)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long long, v8::BigUint64Array, void> >::SetReturnValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "t node::AliasedBufferBase<unsigned long long, v8::BigUint64Array, void>::AliasedBufferBase(v8::Isolate*, unsigned long, unsigned long const*)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::ResolveStat(uv_stat_t const*)",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "T node::MakeLibuvRequestCallback<uv_fs_s, void (*)(uv_fs_s*)>::Wrapper(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::vector<uv_dirent_s, std::__1::allocator<uv_dirent_s> >::__append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::shared_ptr<node::KVStore>::~shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "T node::RealEnvStore::Get(char const*) const",
    "type": "CPP"
  },
  {
    "name": "T node::RealEnvStore::Get(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "T node::RealEnvStore::Set(v8::Isolate*, v8::Local<v8::String>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "T node::RealEnvStore::Query(char const*) const",
    "type": "CPP"
  },
  {
    "name": "T node::RealEnvStore::Query(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "T node::RealEnvStore::Delete(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "T node::RealEnvStore::Enumerate(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "T node::KVStore::Clone(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "T node::KVStore::CreateMapKVStore()",
    "type": "CPP"
  },
  {
    "name": "T node::MapKVStore::Get(char const*) const",
    "type": "CPP"
  },
  {
    "name": "T node::MapKVStore::Get(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "T node::MapKVStore::Set(v8::Isolate*, v8::Local<v8::String>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "T node::MapKVStore::Query(char const*) const",
    "type": "CPP"
  },
  {
    "name": "T node::MapKVStore::Query(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "T node::MapKVStore::Delete(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "T node::MapKVStore::Enumerate(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "T node::MapKVStore::Clone(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "T node::KVStore::AssignFromObject(v8::Local<v8::Context>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::CreateEnvVarProxy(v8::Local<v8::Context>, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "t node::EnvGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::EnvSetter(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::EnvQuery(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Integer> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::EnvDeleter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Boolean> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::EnvEnumerator(v8::PropertyCallbackInfo<v8::Array> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::RegisterEnvVarExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "T _register_external_reference_env_var(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "t node::MapKVStore::~MapKVStore()",
    "type": "CPP"
  },
  {
    "name": "t node::MapKVStore::~MapKVStore()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<node::MapKVStore, std::__1::allocator<node::MapKVStore> >::~__shared_ptr_emplace()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<node::MapKVStore, std::__1::allocator<node::MapKVStore> >::~__shared_ptr_emplace()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<node::MapKVStore, std::__1::allocator<node::MapKVStore> >::__on_zero_shared()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::unordered_map(std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > > const&)",
    "type": "CPP"
  },
  {
    "name": "t __GLOBAL__sub_I_node_env_var.cc",
    "type": "CPP"
  },
  {
    "name": "T node::IsExceptionDecorated(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::PrintStackTrace(v8::Isolate*, v8::Local<v8::StackTrace>)",
    "type": "CPP"
  },
  {
    "name": "t node::GetErrorSource(v8::Isolate*, v8::Local<v8::Context>, v8::Local<v8::Message>, bool*)",
    "type": "CPP"
  },
  {
    "name": "T node::PrintCaughtException(v8::Isolate*, v8::Local<v8::Context>, v8::TryCatch const&)",
    "type": "CPP"
  },
  {
    "name": "T node::Assert(node::AssertionInfo const&)",
    "type": "CPP"
  },
  {
    "name": "T node::AppendExceptionLine(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Message>, node::ErrorHandlingMode)",
    "type": "CPP"
  },
  {
    "name": "T node::Abort()",
    "type": "CPP"
  },
  {
    "name": "T node::FatalError(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::OnFatalError(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::errors::TryCatchScope::~TryCatchScope()",
    "type": "CPP"
  },
  {
    "name": "t node::ReportFatalException(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Message>, node::EnhanceFatalException)",
    "type": "CPP"
  },
  {
    "name": "T node::errors::TryCatchScope::~TryCatchScope()",
    "type": "CPP"
  },
  {
    "name": "T node::errors::errno_string(int)",
    "type": "CPP"
  },
  {
    "name": "T node::errors::PerIsolateMessageListener(v8::Local<v8::Message>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "T node::errors::TriggerUncaughtException(v8::Isolate*, v8::Local<v8::Value>, v8::Local<v8::Message>, bool)",
    "type": "CPP"
  },
  {
    "name": "T node::errors::SetPrepareStackTraceCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::errors::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "t node::errors::SetSourceMapsEnabled(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::errors::SetEnhanceStackForFatalException(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::errors::NoSideEffectsToString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::errors::TriggerUncaughtException(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::errors::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::errors::DecorateErrorStack(node::Environment*, node::errors::TryCatchScope const&)",
    "type": "CPP"
  },
  {
    "name": "T node::errors::TriggerUncaughtException(v8::Isolate*, v8::TryCatch const&)",
    "type": "CPP"
  },
  {
    "name": "T _register_errors()",
    "type": "CPP"
  },
  {
    "name": "T _register_external_reference_errors(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > node::ToBaseString<3u, node::Utf8Value>(node::Utf8Value const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > node::ToBaseString<4u, node::Utf8Value>(node::Utf8Value const&)",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "t virtual thunk to std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "t virtual thunk to std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >::seekpos(std::__1::fpos<__mbstate_t>, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > node::ToStringHelper::BaseConvert<3u, char*, 0>(char*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > node::ToStringHelper::BaseConvert<4u, char*, 0>(char*)",
    "type": "CPP"
  },
  {
    "name": "t __GLOBAL__sub_I_node_errors.cc",
    "type": "CPP"
  },
  {
    "name": "T node::ExternalReferenceRegistry::external_references()",
    "type": "CPP"
  },
  {
    "name": "T node::ExternalReferenceRegistry::ExternalReferenceRegistry()",
    "type": "CPP"
  },
  {
    "name": "T node::ExternalReferenceRegistry::ExternalReferenceRegistry()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::Basename(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FSContinuationData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FSReqBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::FileHandle(node::fs::BindingData*, v8::Local<v8::Object>, int)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::FileHandle(node::fs::BindingData*, v8::Local<v8::Object>, int)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::New(node::fs::BindingData*, int, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FileHandle::Close()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::fs::FileHandle::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::TransferData::TransferData(int)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::TransferData::TransferData(int)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::TransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::__1::unique_ptr<node::worker::TransferData, std::__1::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::CloseReq::Resolve()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::CloseReq::Reject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::CloseReq::file_handle()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::CloseReq::CloseReq(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Promise>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::CloseReq::CloseReq(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Promise>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::CloseReq::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::ClosePromise()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::ReleaseFD(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::AfterClose()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandleReadWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandleReadWrap::FileHandleReadWrap(node::fs::FileHandle*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandleReadWrap::FileHandleReadWrap(node::fs::FileHandle*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FileHandle::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FileHandle::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::fs::FileHandle::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::fs::FileHandle::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::fs::FileHandle::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FileHandle::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::fs::FileHandle::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FSReqCallback::Reject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FSReqCallback::ResolveStat(uv_stat_t const*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FSReqCallback::Resolve(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FillGlobalStatsArray(node::fs::BindingData*, bool, uv_stat_t const*, bool)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FSReqBase::binding_data()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FSReqCallback::SetReturnValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::NewFSReqCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FSReqAfterScope::FSReqAfterScope(node::fs::FSReqBase*, uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FSReqAfterScope::FSReqAfterScope(node::fs::FSReqBase*, uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FSReqAfterScope::~FSReqAfterScope()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FSReqAfterScope::Clear()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FSReqAfterScope::~FSReqAfterScope()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FSReqAfterScope::Reject(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FSReqAfterScope::Proceed()",
    "type": "CPP"
  },
  {
    "name": "T node::fs::AfterNoArgs(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::AfterStat(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::AfterInteger(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::AfterOpenFileHandle(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::FromNamespacedPath(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::AfterMkdirp(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::AfterStringPath(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::AfterStringPtr(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::AfterScanDir(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::AfterScanDirWithTypes(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::Access(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::MKDirpSync(uv_loop_s*, uv_fs_s*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, void (*)(uv_fs_s*))",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSContinuationData::PushPath(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSContinuationData::PushPath(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::MKDirpAsync(uv_loop_s*, uv_fs_s*, char const*, int, void (*)(uv_fs_s*))",
    "type": "CPP"
  },
  {
    "name": "T node::fs::CallMKDirpSync(node::Environment*, v8::FunctionCallbackInfo<v8::Value> const&, node::fs::FSReqWrapSync*, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::BindingData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t void node::MemoryTracker::TrackField<std::__1::vector<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>, std::__1::allocator<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false> > >, std::__1::__wrap_iter<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false> const*> >(char const*, std::__1::vector<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>, std::__1::allocator<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false> > > const&, char const*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::BindingData::BindingData(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::BindingData::BindingData(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::BindingData::Deserialize(v8::Local<v8::Context>, v8::Local<v8::Object>, int, node::InternalFieldInfo*)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::BindingData* node::Environment::AddBindingData<node::fs::BindingData>(v8::Local<v8::Context>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::BindingData::PrepareForSerialization(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::BindingData::Serialize(int)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::Open(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::OpenFileHandle(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::Read(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::ReadBuffers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::Fdatasync(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::Fsync(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::Rename(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FTruncate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::RMDir(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::MKDir(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::ReadDir(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::InternalModuleReadJSON(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::InternalModuleStat(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::Stat(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::LStat(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FStat(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::Link(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::Symlink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::ReadLink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::Unlink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::WriteBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::WriteBuffers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::WriteString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::RealPath(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::CopyFile(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::Chmod(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FChmod(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::Chown(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FChown(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::LChown(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::UTimes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FUTimes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::LUTimes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::Mkdtemp(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::fs::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "T _register_fs()",
    "type": "CPP"
  },
  {
    "name": "T _register_external_reference_fs(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSContinuationData::~FSContinuationData()",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSContinuationData::~FSContinuationData()",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSContinuationData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSReqCallback::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSReqCallback::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FileHandleReadWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FileHandleReadWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FileHandle::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::crypto::KeyPairGenConfig<node::crypto::RsaKeyPairParams>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FileHandle::GetFD()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::fs::FileHandle::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::fs::FileHandle::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::fs::FileHandle::GetFD()",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FileHandle::TransferData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t icu_69::UCharsTrieBuilder::getMaxLinearMatchLength() const",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FileHandle::CloseReq::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::fs::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "t node::fs::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "t node::v8_utils::BindingData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::'lambda'(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FileHandle::ClosePromise()::$_0::__invoke(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FileHandle::ReadStart()::$_1::__invoke(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FileHandle::DoShutdown(node::ShutdownWrap*)::$_2::__invoke(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "t void node::fs::FillStatsArray<double, v8::Float64Array>(node::AliasedBufferBase<double, v8::Float64Array, std::__1::enable_if<std::is_scalar<double>::value, void>::type>*, uv_stat_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::MKDirpAsync(uv_loop_s*, uv_fs_s*, char const*, int, void (*)(uv_fs_s*))::$_3::__invoke(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::MKDirpAsync(uv_loop_s*, uv_fs_s*, char const*, int, void (*)(uv_fs_s*))::$_3::operator()(uv_fs_s*) const::'lambda'(uv_fs_s*)::__invoke(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::fs::FSReqBase::Init(char const*, char const*, unsigned long, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "t node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false> node::MakeBaseObject<node::fs::FileHandleReadWrap, node::fs::FileHandle*, v8::Local<v8::Object>&>(node::fs::FileHandle*&&, v8::Local<v8::Object>&)",
    "type": "CPP"
  },
  {
    "name": "t node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::SimpleShutdownWrap(node::StreamBase*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "t node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::SimpleShutdownWrap<node::AsyncWrap>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "T _register_http_parser()",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::InitializeHttpParser(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::Free(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::Execute(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::Finish(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::Initialize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::(anonymous namespace)::Parser::Pause<true>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t void node::(anonymous namespace)::Parser::Pause<false>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::Consume(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::Unconsume(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::GetCurrentBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::BindingData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::BindingData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::BindingData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::~Parser()",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::~Parser()",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::(anonymous namespace)::Parser::~Parser()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::(anonymous namespace)::Parser::~Parser()",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::(anonymous namespace)::Parser::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to node::(anonymous namespace)::Parser::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::Execute(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(), &(node::(anonymous namespace)::Parser::on_message_begin())>::Raw(llhttp__internal_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(char const*, unsigned long), &(node::(anonymous namespace)::Parser::on_url(char const*, unsigned long))>::Raw(llhttp__internal_s*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(char const*, unsigned long), &(node::(anonymous namespace)::Parser::on_status(char const*, unsigned long))>::Raw(llhttp__internal_s*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(char const*, unsigned long), &(node::(anonymous namespace)::Parser::on_header_field(char const*, unsigned long))>::Raw(llhttp__internal_s*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(char const*, unsigned long), &(node::(anonymous namespace)::Parser::on_header_value(char const*, unsigned long))>::Raw(llhttp__internal_s*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(), &(node::(anonymous namespace)::Parser::on_headers_complete())>::Raw(llhttp__internal_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(char const*, unsigned long), &(node::(anonymous namespace)::Parser::on_body(char const*, unsigned long))>::Raw(llhttp__internal_s*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(), &(node::(anonymous namespace)::Parser::on_message_complete())>::Raw(llhttp__internal_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(), &(node::(anonymous namespace)::Parser::on_chunk_header())>::Raw(llhttp__internal_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(), &(node::(anonymous namespace)::Parser::on_chunk_complete())>::Raw(llhttp__internal_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::Flush()",
    "type": "CPP"
  },
  {
    "name": "t node::(anonymous namespace)::Parser::CreateHeaders()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::Callbacks::Callbacks(bool)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Scope::Http2Scope(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Scope::Http2Scope(node::http2::Http2Session*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Scope::Http2Scope(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Scope::Http2Scope(node::http2::Http2Session*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Scope::~Http2Scope()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::MaybeScheduleWrite()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Scope::~Http2Scope()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Options::Http2Options(node::http2::Http2State*, node::http2::SessionType)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Options::Http2Options(node::http2::Http2State*, node::http2::SessionType)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Settings::Init(node::http2::Http2State*, nghttp2_settings_entry*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Settings::Http2Settings(node::http2::Http2Session*, v8::Local<v8::Object>, v8::Local<v8::Function>, unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Settings::Http2Settings(node::http2::Http2Session*, v8::Local<v8::Object>, v8::Local<v8::Function>, unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Settings::callback() const",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Settings::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Settings::Pack()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Settings::Pack(node::Environment*, unsigned long, nghttp2_settings_entry const*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Settings::Pack(node::http2::Http2State*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Settings::Update(node::http2::Http2Session*, unsigned int (*)(nghttp2_session*, nghttp2_settings_id))",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Settings::RefreshDefaults(node::http2::Http2State*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Settings::Send()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Settings::Done(bool)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Priority::Http2Priority(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Priority::Http2Priority(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::TypeName() const",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Origins::Origins(node::Environment*, v8::Local<v8::String>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Origins::Origins(node::Environment*, v8::Local<v8::String>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::Callbacks::Callbacks(bool)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::OnBeginHeadersCallback(nghttp2_session*, nghttp2_frame const*, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::OnHeaderCallback(nghttp2_session*, nghttp2_frame const*, nghttp2_rcbuf*, nghttp2_rcbuf*, unsigned char, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::OnFrameReceive(nghttp2_session*, nghttp2_frame const*, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::OnStreamClose(nghttp2_session*, int, unsigned int, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::OnDataChunkReceived(nghttp2_session*, unsigned char, int, unsigned char const*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::OnFrameNotSent(nghttp2_session*, nghttp2_frame const*, int, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::OnInvalidHeader(nghttp2_session*, nghttp2_frame const*, nghttp2_rcbuf*, nghttp2_rcbuf*, unsigned char, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::OnNghttpError(nghttp2_session*, char const*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::OnSendData(nghttp2_session*, nghttp2_frame*, unsigned char const*, unsigned long, nghttp2_data_source*, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::OnInvalidFrame(nghttp2_session*, nghttp2_frame const*, int, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::OnFrameSent(nghttp2_session*, nghttp2_frame const*, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::OnSelectPadding(nghttp2_session*, nghttp2_frame const*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::StopTrackingRcbuf(nghttp2_rcbuf*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::CheckAllocatedSize(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::IncreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::DecreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::Http2Session(node::http2::Http2State*, v8::Local<v8::Object>, node::http2::SessionType)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::Http2Session(node::http2::Http2State*, v8::Local<v8::Object>, node::http2::SessionType)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t void node::MemoryTracker::TrackField<std::__1::vector<node::http2::NgHttp2StreamWrite, std::__1::allocator<node::http2::NgHttp2StreamWrite> >, std::__1::__wrap_iter<node::http2::NgHttp2StreamWrite const*> >(char const*, std::__1::vector<node::http2::NgHttp2StreamWrite, std::__1::allocator<node::http2::NgHttp2StreamWrite> > const&, char const*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::diagnostic_name() const",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2StreamPerformanceEntryTraits::GetDetails(node::Environment*, node::performance::PerformanceEntry<node::http2::Http2StreamPerformanceEntryTraits> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2SessionPerformanceEntryTraits::GetDetails(node::Environment*, node::performance::PerformanceEntry<node::http2::Http2SessionPerformanceEntryTraits> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::EmitStatistics()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::EmitStatistics()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::Close(unsigned int, bool)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::SendPendingData()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::PopPing()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Ping::DetachFromSession()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::FindStream(int)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::CanAddStream()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::AddStream(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unordered_map<int, node::BaseObjectPtrImpl<node::http2::Http2Stream, false>, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<int const, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> > > >::operator[](int&&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::RemoveStream(int)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::OnDWordAlignedPadding(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::OnMaxFrameSizePadding(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::ConsumeHTTP2Data()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::GetFrameID(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::New(node::http2::Http2Session*, int, nghttp2_headers_category, int)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::StartHeaders(nghttp2_headers_category)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::AddHeader(nghttp2_rcbuf*, nghttp2_rcbuf*, unsigned char)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::SubmitRstStream(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::HandleDataFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::HandleHeadersFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::HandleSettingsFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::HandlePriorityFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::HandleGoawayFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::HandlePingFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::HandleAltSvcFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::HandleOriginFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Close(int)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Destroy()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2StreamListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2StreamListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Ping::Done(bool, unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::PopSettings()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::ClearOutgoing(int)",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::http2::Http2Session::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::MaybeStopReading()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::FlushRstStream()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::PushOutgoingBuffer(node::http2::NgHttp2StreamWrite&&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::CopyDataIntoOutgoing(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::http2::NgHttp2StreamWrite::~NgHttp2StreamWrite()",
    "type": "CPP"
  },
  {
    "name": "t node::StreamBase::Write(uv_buf_t*, unsigned long, uv_stream_s*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::SubmitRequest(node::http2::Http2Priority const&, node::NgHeaders<node::http2::Http2HeadersTraits> const&, int*, int)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Provider::Stream::Stream(int)",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2Stream::Provider::Stream::~Stream()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::AllocatedBuffer::release()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::http2::Http2Session::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "t node::AllocatedBuffer::Resize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::http2::Http2Session::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::HasWritesOnSocketForStream(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::Consume(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::Receive(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Http2Stream(node::http2::Http2Session*, v8::Local<v8::Object>, int, nghttp2_headers_category, int)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Http2Stream(node::http2::Http2Session*, v8::Local<v8::Object>, int, nghttp2_headers_category, int)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::vector<node::NgHeader<node::http2::Http2HeaderTraits>, std::__1::allocator<node::NgHeader<node::http2::Http2HeaderTraits> > >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::StreamBase::Shutdown(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2StreamListener::~Http2StreamListener()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t void node::MemoryTracker::TrackField<std::__1::vector<node::NgHeader<node::http2::Http2HeaderTraits>, std::__1::allocator<node::NgHeader<node::http2::Http2HeaderTraits> > >, std::__1::__wrap_iter<node::NgHeader<node::http2::Http2HeaderTraits> const*> >(char const*, std::__1::vector<node::NgHeader<node::http2::Http2HeaderTraits>, std::__1::allocator<node::NgHeader<node::http2::Http2HeaderTraits> > > const&, char const*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::diagnostic_name() const",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::operator*() const",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::stream() const",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::http2::Http2Stream::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::http2::Http2Stream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::SubmitResponse(node::NgHeaders<node::http2::Http2HeadersTraits> const&, int)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Provider::Stream::Stream(node::http2::Http2Stream*, int)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::SubmitInfo(node::NgHeaders<node::http2::Http2HeadersTraits> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::OnTrailers()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::SubmitTrailers(node::NgHeaders<node::http2::Http2HeadersTraits> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::SubmitPriority(node::http2::Http2Priority const&, bool)",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2Session::AddPendingRstStream(int)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::SubmitPushPromise(node::NgHeaders<node::http2::Http2HeadersTraits> const&, int*, int)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::http2::Http2Stream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::http2::Http2Stream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::IncrementAvailableOutboundLength(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to node::http2::Http2Stream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::NgHeader<node::http2::Http2HeaderTraits>::length() const",
    "type": "CPP"
  },
  {
    "name": "t node::NgHeader<node::http2::Http2HeaderTraits>::~NgHeader()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Provider::Provider(node::http2::Http2Stream*, int)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Provider::Provider(node::http2::Http2Stream*, int)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Provider::Provider(int)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Provider::Provider(int)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Provider::~Provider()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Provider::~Provider()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Provider::~Provider()",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Provider::Stream::Stream(int)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Provider::Stream::OnRead(nghttp2_session*, int, unsigned char*, unsigned long, unsigned int*, nghttp2_data_source*, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Provider::Stream::Stream(node::http2::Http2Stream*, int)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::DecrementAvailableOutboundLength(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::HttpErrorString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::PackSettings(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::RefreshDefaultSettings(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::SetNextStreamID(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::SetLocalWindowSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::RefreshState(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::Consume(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::Destroy(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::Request(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::Goaway(unsigned int, int, unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::Goaway(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::ArrayBufferViewContents<unsigned char, 64ul>::Read(v8::Local<v8::ArrayBufferView>)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::UpdateChunksSent(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::RstStream(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Respond(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Info(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Trailers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::GetID(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Destroy(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::PushPromise(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::Priority(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Stream::RefreshState(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::AltSvc(int, unsigned char*, unsigned long, unsigned char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::Origin(node::http2::Origins const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::AltSvc(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::Origin(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::Ping(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::ArrayBufferViewContents<unsigned char, 8ul>::Read(v8::Local<v8::ArrayBufferView>)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::AddPing(unsigned char const*, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::Settings(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Session::AddSettings(v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Ping::Send(unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Ping::Http2Ping(node::http2::Http2Session*, v8::Local<v8::Object>, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Ping::Http2Ping(node::http2::Http2Session*, v8::Local<v8::Object>, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Ping::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2Ping::callback() const",
    "type": "CPP"
  },
  {
    "name": "T node::http2::NgHttp2StreamWrite::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::http2::SetCallbackFunctions(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Http2State::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::http2::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2State* node::Environment::AddBindingData<node::http2::Http2State>(v8::Local<v8::Context>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T void node::http2::Http2Session::RefreshSettings<&(nghttp2_session_get_local_settings)>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T void node::http2::Http2Session::RefreshSettings<&(nghttp2_session_get_remote_settings)>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T _register_http2()",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2State::~Http2State()",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2State::~Http2State()",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2State::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::crypto::CipherJob<node::crypto::RSACipherTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::http2::NgHttp2StreamWrite::~NgHttp2StreamWrite()",
    "type": "CPP"
  },
  {
    "name": "t node::http2::NgHttp2StreamWrite::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::worker::JSTransferable::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2Settings::~Http2Settings()",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2Settings::~Http2Settings()",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2Settings::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::worker::MessagePortData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2Session::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2Session::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::StopTrackingMemory(void*)",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2StreamListener::~Http2StreamListener()",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2Stream::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2Stream::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2Ping::~Http2Ping()",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2Ping::~Http2Ping()",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2Ping::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__deque_base<node::BaseObjectPtrImpl<node::http2::Http2Ping, false>, std::__1::allocator<node::BaseObjectPtrImpl<node::http2::Http2Ping, false> > >::clear()",
    "type": "CPP"
  },
  {
    "name": "t node::StreamReq::Dispose()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<char*, std::__1::unique_ptr<v8::BackingStore, std::__1::default_delete<v8::BackingStore> > >, std::__1::__unordered_map_hasher<char*, std::__1::__hash_value_type<char*, std::__1::unique_ptr<v8::BackingStore, std::__1::default_delete<v8::BackingStore> > >, std::__1::hash<char*>, true>, std::__1::__unordered_map_equal<char*, std::__1::__hash_value_type<char*, std::__1::unique_ptr<v8::BackingStore, std::__1::default_delete<v8::BackingStore> > >, std::__1::equal_to<char*>, true>, std::__1::allocator<std::__1::__hash_value_type<char*, std::__1::unique_ptr<v8::BackingStore, std::__1::default_delete<v8::BackingStore> > > > >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::AllocatedBuffer::AllocatedBuffer(node::Environment*, uv_buf_t)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__deque_base<node::http2::NgHttp2StreamWrite, std::__1::allocator<node::http2::NgHttp2StreamWrite> >::clear()",
    "type": "CPP"
  },
  {
    "name": "t node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::~NgRcBufPointer()",
    "type": "CPP"
  },
  {
    "name": "t node::NgHeader<node::http2::Http2HeaderTraits>::~NgHeader()",
    "type": "CPP"
  },
  {
    "name": "t node::NgHeader<node::http2::Http2HeaderTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::NgHeader<node::http2::Http2HeaderTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::NgHeader<node::http2::Http2HeaderTraits>::GetName(node::http2::Http2Session*) const",
    "type": "CPP"
  },
  {
    "name": "t node::NgHeader<node::http2::Http2HeaderTraits>::GetValue(node::http2::Http2Session*) const",
    "type": "CPP"
  },
  {
    "name": "t node::NgHeader<node::http2::Http2HeaderTraits>::name() const",
    "type": "CPP"
  },
  {
    "name": "t node::NgHeader<node::http2::Http2HeaderTraits>::value() const",
    "type": "CPP"
  },
  {
    "name": "t node::NgHeader<node::http2::Http2HeaderTraits>::flags() const",
    "type": "CPP"
  },
  {
    "name": "t node::NgHeaderBase<node::http2::Http2Session>::ToString() const",
    "type": "CPP"
  },
  {
    "name": "t node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::~NgRcBufPointer()",
    "type": "CPP"
  },
  {
    "name": "t node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unordered_map<char const*, v8::Eternal<v8::String>, std::__1::hash<char const*>, std::__1::equal_to<char const*>, std::__1::allocator<std::__1::pair<char const* const, v8::Eternal<v8::String> > > >::operator[](char const* const&)",
    "type": "CPP"
  },
  {
    "name": "t v8::MaybeLocal<v8::String> node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::New<node::http2::Http2Session>(node::http2::Http2Session*, node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<char const*, v8::Eternal<v8::String> >, std::__1::__unordered_map_hasher<char const*, std::__1::__hash_value_type<char const*, v8::Eternal<v8::String> >, std::__1::hash<char const*>, true>, std::__1::__unordered_map_equal<char const*, std::__1::__hash_value_type<char const*, v8::Eternal<v8::String> >, std::__1::equal_to<char const*>, true>, std::__1::allocator<std::__1::__hash_value_type<char const*, v8::Eternal<v8::String> > > >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::~External()",
    "type": "CPP"
  },
  {
    "name": "t node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::~External()",
    "type": "CPP"
  },
  {
    "name": "t node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::data() const",
    "type": "CPP"
  },
  {
    "name": "t node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::length() const",
    "type": "CPP"
  },
  {
    "name": "t node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::str() const",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2State::~Http2State()",
    "type": "CPP"
  },
  {
    "name": "t node::AliasedStruct<node::http2::SessionJSFields>::AliasedStruct<>(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "T node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::MallocImpl(unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::FreeImpl(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::CallocImpl(unsigned long, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::ReallocImpl(void*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "t void node::MemoryTracker::TrackField<int const, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> >(char const*, std::__1::pair<int const, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> > const&, char const*)",
    "type": "CPP"
  },
  {
    "name": "t void node::MemoryTracker::TrackField<std::__1::deque<node::BaseObjectPtrImpl<node::http2::Http2Ping, false>, std::__1::allocator<node::BaseObjectPtrImpl<node::http2::Http2Ping, false> > >, std::__1::__deque_iterator<node::BaseObjectPtrImpl<node::http2::Http2Ping, false>, node::BaseObjectPtrImpl<node::http2::Http2Ping, false> const*, node::BaseObjectPtrImpl<node::http2::Http2Ping, false> const&, node::BaseObjectPtrImpl<node::http2::Http2Ping, false> const* const*, long, 512l> >(char const*, std::__1::deque<node::BaseObjectPtrImpl<node::http2::Http2Ping, false>, std::__1::allocator<node::BaseObjectPtrImpl<node::http2::Http2Ping, false> > > const&, char const*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "t void node::MemoryTracker::TrackField<std::__1::deque<node::BaseObjectPtrImpl<node::http2::Http2Settings, false>, std::__1::allocator<node::BaseObjectPtrImpl<node::http2::Http2Settings, false> > >, std::__1::__deque_iterator<node::BaseObjectPtrImpl<node::http2::Http2Settings, false>, node::BaseObjectPtrImpl<node::http2::Http2Settings, false> const*, node::BaseObjectPtrImpl<node::http2::Http2Settings, false> const&, node::BaseObjectPtrImpl<node::http2::Http2Settings, false> const* const*, long, 512l> >(char const*, std::__1::deque<node::BaseObjectPtrImpl<node::http2::Http2Settings, false>, std::__1::allocator<node::BaseObjectPtrImpl<node::http2::Http2Settings, false> > > const&, char const*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Stream::EmitStatistics()::$_0>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Stream::EmitStatistics()::$_0>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Stream::EmitStatistics()::$_0>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t node::performance::PerformanceEntry<node::http2::Http2StreamPerformanceEntryTraits>::Notify(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::EmitStatistics()::$_1>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::EmitStatistics()::$_1>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::EmitStatistics()::$_1>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t node::performance::PerformanceEntry<node::http2::Http2SessionPerformanceEntryTraits>::Notify(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > node::ToStringHelper::BaseConvert<3u, unsigned int, 0>(unsigned int const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > node::ToStringHelper::BaseConvert<4u, unsigned int, 0>(unsigned int const&)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::Close(unsigned int, bool)::$_2>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::Close(unsigned int, bool)::$_2>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::Close(unsigned int, bool)::$_2>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<int, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> > > >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t unsigned long std::__1::__hash_table<std::__1::__hash_value_type<int, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> > > >::__erase_unique<int>(int const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > node::ToStringHelper::BaseConvert<4u, unsigned long, 0>(unsigned long const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > node::ToStringHelper::BaseConvert<4u, long, 0>(long const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > node::ToStringHelper::BaseConvert<4u, unsigned char, 0>(unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::MaybeScheduleWrite()::$_4>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::MaybeScheduleWrite()::$_4>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::MaybeScheduleWrite()::$_4>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t void node::MemoryTracker::TrackField<std::__1::deque<node::http2::NgHttp2StreamWrite, std::__1::allocator<node::http2::NgHttp2StreamWrite> >, std::__1::__deque_iterator<node::http2::NgHttp2StreamWrite, node::http2::NgHttp2StreamWrite const*, node::http2::NgHttp2StreamWrite const&, node::http2::NgHttp2StreamWrite const* const*, long, 128l> >(char const*, std::__1::deque<node::http2::NgHttp2StreamWrite, std::__1::allocator<node::http2::NgHttp2StreamWrite> > const&, char const*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Stream::Destroy()::$_5>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Stream::Destroy()::$_5>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "t node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Stream::Destroy()::$_5>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::deque<node::tracing::NodeTraceWriter::WriteRequest, std::__1::allocator<node::tracing::NodeTraceWriter::WriteRequest> >::__add_back_capacity()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__split_buffer<int*, std::__1::allocator<int*> >::push_front(int*&&)",
    "type": "CPP"
  },
  {
    "name": "t node::NgHeaders<node::http2::Http2HeadersTraits>::NgHeaders(node::Environment*, v8::Local<v8::Array>)",
    "type": "CPP"
  },
  {
    "name": "t node::http2::Http2State::Http2State(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::AliasedBufferBase<double, v8::Float64Array, void>::AliasedBufferBase(v8::Isolate*, unsigned long, unsigned long, node::AliasedBufferBase<unsigned char, v8::Uint8Array, void> const&, unsigned long const*)",
    "type": "CPP"
  },
  {
    "name": "t node::AliasedBufferBase<unsigned int, v8::Uint32Array, void>::AliasedBufferBase(v8::Isolate*, unsigned long, unsigned long, node::AliasedBufferBase<unsigned char, v8::Uint8Array, void> const&, unsigned long const*)",
    "type": "CPP"
  },
  {
    "name": "t ___cxx_global_array_dtor",
    "type": "CPP"
  },
  {
    "name": "t __GLOBAL__sub_I_node_http2.cc",
    "type": "CPP"
  },
  {
    "name": "T node::i18n::Converter::Converter(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::i18n::Converter::set_subst_chars(char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::i18n::Converter::Converter(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::i18n::Converter::Converter(UConverter*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::i18n::Converter::Converter(UConverter*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::i18n::Converter::reset()",
    "type": "CPP"
  },
  {
    "name": "T node::i18n::Converter::min_char_size() const",
    "type": "CPP"
  },
  {
    "name": "T node::i18n::Converter::max_char_size() const",
    "type": "CPP"
  },
  {
    "name": "T node::i18n::ConverterObject::Has(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::i18n::ConverterObject::Create(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::i18n::ConverterObject::ConverterObject(node::Environment*, v8::Local<v8::Object>, UConverter*, int, char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::i18n::ConverterObject::Decode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::MaybeStackBuffer<char16_t, 1024ul>::AllocateSufficientStorage(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::i18n::ConverterObject::ConverterObject(node::Environment*, v8::Local<v8::Object>, UConverter*, int, char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::i18n::InitializeICUDirectory(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::i18n::SetDefaultTimeZone(char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::i18n::ToUnicode(node::MaybeStackBuffer<char, 1024ul>*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::i18n::ToASCII(node::MaybeStackBuffer<char, 1024ul>*, char const*, unsigned long, node::i18n::idna_mode)",
    "type": "CPP"
  },
  {
    "name": "T node::i18n::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "t node::i18n::ToUnicode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::i18n::ToASCII(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::i18n::GetStringWidth(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::i18n::(anonymous namespace)::ICUErrorName(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::i18n::(anonymous namespace)::Transcode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::i18n::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "T _register_icu()",
    "type": "CPP"
  },
  {
    "name": "T _register_external_reference_icu(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "t node::i18n::ConverterObject::~ConverterObject()",
    "type": "CPP"
  },
  {
    "name": "t node::i18n::ConverterObject::~ConverterObject()",
    "type": "CPP"
  },
  {
    "name": "t node::i18n::ConverterObject::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::i18n::(anonymous namespace)::Transcode(node::Environment*, char const*, char const*, char const*, unsigned long, UErrorCode*)",
    "type": "CPP"
  },
  {
    "name": "t node::i18n::(anonymous namespace)::TranscodeToUcs2(node::Environment*, char const*, char const*, char const*, unsigned long, UErrorCode*)",
    "type": "CPP"
  },
  {
    "name": "t node::i18n::(anonymous namespace)::TranscodeUcs2FromUtf8(node::Environment*, char const*, char const*, char const*, unsigned long, UErrorCode*)",
    "type": "CPP"
  },
  {
    "name": "t node::i18n::(anonymous namespace)::TranscodeUtf8FromUcs2(node::Environment*, char const*, char const*, char const*, unsigned long, UErrorCode*)",
    "type": "CPP"
  },
  {
    "name": "t node::i18n::(anonymous namespace)::TranscodeFromUcs2(node::Environment*, char const*, char const*, char const*, unsigned long, UErrorCode*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unique_ptr<node::ExternalReferenceRegistry, std::__1::default_delete<node::ExternalReferenceRegistry> >::~unique_ptr()",
    "type": "CPP"
  },
  {
    "name": "T node::NodeMainInstance::NodeMainInstance(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::NodeMainInstance::NodeMainInstance(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::NodeMainInstance::CollectExternalReferences()",
    "type": "CPP"
  },
  {
    "name": "T node::NodeMainInstance::Create(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::NodeMainInstance::NodeMainInstance(v8::Isolate::CreateParams*, uv_loop_s*, node::MultiIsolatePlatform*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const*)",
    "type": "CPP"
  },
  {
    "name": "T node::NodeMainInstance::NodeMainInstance(v8::Isolate::CreateParams*, uv_loop_s*, node::MultiIsolatePlatform*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const*)",
    "type": "CPP"
  },
  {
    "name": "T node::NodeMainInstance::Dispose()",
    "type": "CPP"
  },
  {
    "name": "T node::NodeMainInstance::~NodeMainInstance()",
    "type": "CPP"
  },
  {
    "name": "T node::NodeMainInstance::~NodeMainInstance()",
    "type": "CPP"
  },
  {
    "name": "T node::NodeMainInstance::Run(node::EnvSerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "T node::NodeMainInstance::CreateMainEnvironment(int*, node::EnvSerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "T node::NodeMainInstance::Run(int*, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "t __GLOBAL__sub_I_node_main_instance.cc",
    "type": "CPP"
  },
  {
    "name": "T node::BaseObject::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "T node::BaseObject::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "T node::BaseObject::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "T node::BaseObject::NestedTransferables() const",
    "type": "CPP"
  },
  {
    "name": "T node::BaseObject::FinalizeTransferRead(v8::Local<v8::Context>, v8::ValueDeserializer*)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::TransferData::FinalizeTransferWrite(v8::Local<v8::Context>, v8::ValueSerializer*)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::Message::Message(node::MallocedBuffer<char>&&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::Message::Message(node::MallocedBuffer<char>&&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::Message::IsCloseMessage() const",
    "type": "CPP"
  },
  {
    "name": "T node::worker::Message::Deserialize(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "t node::worker::(anonymous namespace)::DeserializerDelegate::~DeserializerDelegate()",
    "type": "CPP"
  },
  {
    "name": "T node::worker::Message::AddSharedArrayBuffer(std::__1::shared_ptr<v8::BackingStore>)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::vector<std::__1::shared_ptr<v8::BackingStore>, std::__1::allocator<std::__1::shared_ptr<v8::BackingStore> > >::emplace_back<std::__1::shared_ptr<v8::BackingStore> >(std::__1::shared_ptr<v8::BackingStore>&&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::Message::AddTransferable(std::__1::unique_ptr<node::worker::TransferData, std::__1::default_delete<node::worker::TransferData> >&&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::Message::AddWASMModule(v8::CompiledWasmModule&&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::Message::Serialize(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Value>, node::MaybeStackBuffer<v8::Local<v8::Value>, 8ul> const&, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::worker::(anonymous namespace)::SerializerDelegate::AddHostObject(node::BaseObjectPtrImpl<node::BaseObject, false>)",
    "type": "CPP"
  },
  {
    "name": "t node::worker::(anonymous namespace)::SerializerDelegate::~SerializerDelegate()",
    "type": "CPP"
  },
  {
    "name": "T node::worker::Message::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t void node::MemoryTracker::TrackField<std::__1::vector<std::__1::shared_ptr<v8::BackingStore>, std::__1::allocator<std::__1::shared_ptr<v8::BackingStore> > >, std::__1::__wrap_iter<std::__1::shared_ptr<v8::BackingStore> const*> >(char const*, std::__1::vector<std::__1::shared_ptr<v8::BackingStore>, std::__1::allocator<std::__1::shared_ptr<v8::BackingStore> > > const&, char const*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "t void node::MemoryTracker::TrackField<std::__1::vector<std::__1::unique_ptr<node::worker::TransferData, std::__1::default_delete<node::worker::TransferData> >, std::__1::allocator<std::__1::unique_ptr<node::worker::TransferData, std::__1::default_delete<node::worker::TransferData> > > >, std::__1::__wrap_iter<std::__1::unique_ptr<node::worker::TransferData, std::__1::default_delete<node::worker::TransferData> > const*> >(char const*, std::__1::vector<std::__1::unique_ptr<node::worker::TransferData, std::__1::default_delete<node::worker::TransferData> >, std::__1::allocator<std::__1::unique_ptr<node::worker::TransferData, std::__1::default_delete<node::worker::TransferData> > > > const&, char const*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePortData::MessagePortData(node::worker::MessagePort*)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePortData::MessagePortData(node::worker::MessagePort*)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePortData::~MessagePortData()",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePortData::Disentangle()",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePortData::~MessagePortData()",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePortData::~MessagePortData()",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePortData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "t void node::MemoryTracker::TrackField<std::__1::deque<std::__1::shared_ptr<node::worker::Message>, std::__1::allocator<std::__1::shared_ptr<node::worker::Message> > >, std::__1::__deque_iterator<std::__1::shared_ptr<node::worker::Message>, std::__1::shared_ptr<node::worker::Message> const*, std::__1::shared_ptr<node::worker::Message> const&, std::__1::shared_ptr<node::worker::Message> const* const*, long, 256l> >(char const*, std::__1::deque<std::__1::shared_ptr<node::worker::Message>, std::__1::allocator<std::__1::shared_ptr<node::worker::Message> > > const&, char const*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePortData::AddToIncomingQueue(std::__1::shared_ptr<node::worker::Message>)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::TriggerAsync()",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePortData::Entangle(node::worker::MessagePortData*, node::worker::MessagePortData*)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::SiblingGroup::Entangle(std::initializer_list<node::worker::MessagePortData*>)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::SiblingGroup::Disentangle(node::worker::MessagePortData*)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::~MessagePort()",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::Detach()",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::~MessagePort()",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::~MessagePort()",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::MessagePort(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::MessagePort(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::Close(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::New(node::Environment*, v8::Local<v8::Context>, std::__1::unique_ptr<node::worker::MessagePortData, std::__1::default_delete<node::worker::MessagePortData> >, std::__1::shared_ptr<node::worker::SiblingGroup>)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::GetMessagePortConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::SiblingGroup::Entangle(node::worker::MessagePortData*)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::ReceiveMessage(v8::Local<v8::Context>, node::worker::MessagePort::MessageProcessingMode, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::OnMessage(node::worker::MessagePort::MessageProcessingMode)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::OnClose()",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePortData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::__1::unique_ptr<node::worker::TransferData, std::__1::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::PostMessage(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Value>, node::MaybeStackBuffer<v8::Local<v8::Value>, 8ul> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePortData::Dispatch(std::__1::shared_ptr<node::worker::Message>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::SiblingGroup::Dispatch(node::worker::MessagePortData*, std::__1::shared_ptr<node::worker::Message>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::PostMessage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::worker::ReadIterable(node::Environment*, v8::Local<v8::Context>, node::MaybeStackBuffer<v8::Local<v8::Value>, 8ul>&, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "t node::worker::Message::~Message()",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::Start()",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::Stop()",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::Stop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::CheckType(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::Drain(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::ReceiveMessage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::MoveToContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::Entangle(node::worker::MessagePort*, node::worker::MessagePort*)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::Entangle(node::worker::MessagePort*, node::worker::MessagePortData*)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::MessagePort::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "T node::worker::JSTransferable::JSTransferable(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::JSTransferable::JSTransferable(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::JSTransferable::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::JSTransferable::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "T node::worker::JSTransferable::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "T node::worker::JSTransferable::TransferOrClone(node::BaseObject::TransferMode) const",
    "type": "CPP"
  },
  {
    "name": "T node::worker::JSTransferable::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "T node::worker::JSTransferable::NestedTransferables() const",
    "type": "CPP"
  },
  {
    "name": "T node::worker::JSTransferable::FinalizeTransferRead(v8::Local<v8::Context>, v8::ValueDeserializer*)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::JSTransferable::Data::Data(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&, v8::Global<v8::Value>&&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::JSTransferable::Data::Data(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&, v8::Global<v8::Value>&&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::JSTransferable::Data::Deserialize(node::Environment*, v8::Local<v8::Context>, std::__1::unique_ptr<node::worker::TransferData, std::__1::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::JSTransferable::Data::FinalizeTransferWrite(v8::Local<v8::Context>, v8::ValueSerializer*)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::SiblingGroup::Get(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::weak_ptr<node::worker::SiblingGroup>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::weak_ptr<node::worker::SiblingGroup> > > >::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::SiblingGroup::CheckSiblingGroup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::SiblingGroup::SiblingGroup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::SiblingGroup::SiblingGroup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::worker::SiblingGroup::~SiblingGroup()",
    "type": "CPP"
  },
  {
    "name": "T node::worker::SiblingGroup::~SiblingGroup()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::weak_ptr<node::worker::SiblingGroup>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::weak_ptr<node::worker::SiblingGroup> > > >::~unordered_map()",
    "type": "CPP"
  },
  {
    "name": "T _register_messaging()",
    "type": "CPP"
  },
  {
    "name": "T _register_external_reference_messaging(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "t node::worker::Message::~Message()",
    "type": "CPP"
  },
  {
    "name": "t node::worker::Message::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::worker::MessagePortData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::worker::MessagePort::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::worker::MessagePort::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "t node::worker::JSTransferable::~JSTransferable()",
    "type": "CPP"
  },
  {
    "name": "t node::worker::JSTransferable::~JSTransferable()",
    "type": "CPP"
  },
  {
    "name": "t node::worker::JSTransferable::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::worker::JSTransferable::Data::~Data()",
    "type": "CPP"
  },
  {
    "name": "t node::worker::JSTransferable::Data::~Data()",
    "type": "CPP"
  },
  {
    "name": "t node::worker::JSTransferable::Data::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "t node::worker::(anonymous namespace)::DeserializerDelegate::~DeserializerDelegate()",
    "type": "CPP"
  },
  {
    "name": "t node::worker::(anonymous namespace)::DeserializerDelegate::ReadHostObject(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "t node::worker::(anonymous namespace)::DeserializerDelegate::GetWasmModuleFromId(v8::Isolate*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t node::worker::(anonymous namespace)::DeserializerDelegate::GetSharedArrayBufferFromId(v8::Isolate*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t node::worker::(anonymous namespace)::SerializerDelegate::~SerializerDelegate()",
    "type": "CPP"
  },
  {
    "name": "t node::worker::(anonymous namespace)::SerializerDelegate::ThrowDataCloneError(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "t node::worker::(anonymous namespace)::SerializerDelegate::WriteHostObject(v8::Isolate*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "t node::worker::(anonymous namespace)::SerializerDelegate::GetSharedArrayBufferId(v8::Isolate*, v8::Local<v8::SharedArrayBuffer>)",
    "type": "CPP"
  },
  {
    "name": "t node::worker::(anonymous namespace)::SerializerDelegate::GetWasmModuleTransferId(v8::Isolate*, v8::Local<v8::WasmModuleObject>)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::allocator_traits<std::__1::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > >::construct<node::BaseObjectPtrImpl<node::BaseObject, false>, node::BaseObjectPtrImpl<node::BaseObject, false> const&>(std::__1::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> >&, node::BaseObjectPtrImpl<node::BaseObject, false>*, node::BaseObjectPtrImpl<node::BaseObject, false> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::worker::(anonymous namespace)::GetDOMException(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::enable_if<(__is_cpp17_forward_iterator<node::BaseObjectPtrImpl<node::BaseObject, false>*>::value) && (is_constructible<node::BaseObjectPtrImpl<node::BaseObject, false>, std::__1::iterator_traits<node::BaseObjectPtrImpl<node::BaseObject, false>*>::reference>::value), void>::type std::__1::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::__1::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > >::assign<node::BaseObjectPtrImpl<node::BaseObject, false>*>(node::BaseObjectPtrImpl<node::BaseObject, false>*, node::BaseObjectPtrImpl<node::BaseObject, false>*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::enable_if<__is_cpp17_forward_iterator<node::BaseObjectPtrImpl<node::BaseObject, false>*>::value, void>::type std::__1::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::__1::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > >::__construct_at_end<node::BaseObjectPtrImpl<node::BaseObject, false>*>(node::BaseObjectPtrImpl<node::BaseObject, false>*, node::BaseObjectPtrImpl<node::BaseObject, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__deque_base<std::__1::shared_ptr<node::worker::Message>, std::__1::allocator<std::__1::shared_ptr<node::worker::Message> > >::clear()",
    "type": "CPP"
  },
  {
    "name": "t node::worker::MessagePort::MessagePort(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Object>)::$_1::__invoke(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "t node::MaybeStackBuffer<v8::Local<v8::Value>, 8ul>::AllocateSufficientStorage(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t node::worker::Message::~Message()",
    "type": "CPP"
  },
  {
    "name": "t node::worker::(anonymous namespace)::InitMessaging(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "t node::worker::(anonymous namespace)::MessageChannel(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::worker::(anonymous namespace)::SetDeserializerCreateObjectFunction(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t node::worker::(anonymous namespace)::BroadcastChannel(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::deque<std::__1::pair<unsigned long, unsigned long>, std::__1::allocator<std::__1::pair<unsigned long, unsigned long> > >::__add_back_capacity()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<node::worker::SiblingGroup, std::__1::allocator<node::worker::SiblingGroup> >::~__shared_ptr_emplace()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<node::worker::SiblingGroup, std::__1::allocator<node::worker::SiblingGroup> >::~__shared_ptr_emplace()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<node::worker::SiblingGroup, std::__1::allocator<node::worker::SiblingGroup> >::__on_zero_shared()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<node::worker::Message, std::__1::allocator<node::worker::Message> >::~__shared_ptr_emplace()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<node::worker::Message, std::__1::allocator<node::worker::Message> >::~__shared_ptr_emplace()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<node::inspector::NodeInspectorClient, std::__1::allocator<node::inspector::NodeInspectorClient> >::__on_zero_shared()",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::allocator_traits<std::__1::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > >::construct<node::BaseObjectPtrImpl<node::BaseObject, false>, node::BaseObject*>(std::__1::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> >&, node::BaseObjectPtrImpl<node::BaseObject, false>*, node::BaseObject*&&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::weak_ptr<node::worker::SiblingGroup> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::weak_ptr<node::worker::SiblingGroup> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::weak_ptr<node::worker::SiblingGroup> >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::weak_ptr<node::worker::SiblingGroup> > > >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_bad_weak_ptr()",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__tree_remove<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)",
    "type": "CPP"
  },
  {
    "name": "t __GLOBAL__sub_I_node_messaging.cc",
    "type": "CPP"
  },
  {
    "name": "T node::Metadata::Metadata()",
    "type": "CPP"
  },
  {
    "name": "t node::Metadata::~Metadata()",
    "type": "CPP"
  },
  {
    "name": "T node::GetOpenSSLVersion()",
    "type": "CPP"
  },
  {
    "name": "T node::Metadata::Versions::InitializeIntlVersions()",
    "type": "CPP"
  },
  {
    "name": "T node::Metadata::Versions::Versions()",
    "type": "CPP"
  },
  {
    "name": "T node::Metadata::Versions::Versions()",
    "type": "CPP"
  },
  {
    "name": "T node::Metadata::Release::Release()",
    "type": "CPP"
  },
  {
    "name": "T node::Metadata::Release::Release()",
    "type": "CPP"
  },
  {
    "name": "T node::Metadata::Metadata()",
    "type": "CPP"
  },
  {
    "name": "t node::Metadata::Versions::~Versions()",
    "type": "CPP"
  },
  {
    "name": "t __GLOBAL__sub_I_node_metadata.cc",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleLoader::NativeModuleLoader()",
    "type": "CPP"
  },
  {
    "name": "t node::native_module::NativeModuleLoader::~NativeModuleLoader()",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleLoader::NativeModuleLoader()",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleLoader::GetInstance()",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleLoader::Exists(char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleLoader::Add(char const*, node::UnionBytes const&)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleLoader::GetSourceObject(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "t node::UnionBytes::ToStringChecked(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleLoader::GetConfigString(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleLoader::GetModuleIds()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleLoader::InitializeModuleCategories()",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleLoader::GetCannotBeRequired()",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleLoader::GetCanBeRequired()",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleLoader::CanBeRequired(char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleLoader::CannotBeRequired(char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleLoader::code_cache()",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleLoader::GetCodeCache(char const*) const",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleLoader::CompileAsModule(v8::Local<v8::Context>, char const*, node::native_module::NativeModuleLoader::Result*)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleLoader::LookupAndCompile(v8::Local<v8::Context>, char const*, std::__1::vector<v8::Local<v8::String>, std::__1::allocator<v8::Local<v8::String> > >*, node::native_module::NativeModuleLoader::Result*)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleLoader::LoadBuiltinModuleSource(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t node::native_module::NativeModuleLoader::~NativeModuleLoader()",
    "type": "CPP"
  },
  {
    "name": "t node::NonOwningExternalTwoByteResource::data() const",
    "type": "CPP"
  },
  {
    "name": "t node::NonOwningExternalTwoByteResource::length() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*, long> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, node::UnionBytes>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, node::UnionBytes>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, node::UnionBytes>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, node::UnionBytes>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, node::UnionBytes> > >::__emplace_unique_impl<char const*&, node::UnionBytes const&>(char const*&, node::UnionBytes const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::__emplace_unique_impl<char const (&) [37]>(char const (&) [37])",
    "type": "CPP"
  },
  {
    "name": "t unsigned long std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::__count_unique<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::unique_ptr<v8::ScriptCompiler::CachedData, std::__1::default_delete<v8::ScriptCompiler::CachedData> > >, void*>, std::__1::__hash_node_destructor<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::unique_ptr<v8::ScriptCompiler::CachedData, std::__1::default_delete<v8::ScriptCompiler::CachedData> > >, void*> > > > std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::unique_ptr<v8::ScriptCompiler::CachedData, std::__1::default_delete<v8::ScriptCompiler::CachedData> > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::unique_ptr<v8::ScriptCompiler::CachedData, std::__1::default_delete<v8::ScriptCompiler::CachedData> > >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::unique_ptr<v8::ScriptCompiler::CachedData, std::__1::default_delete<v8::ScriptCompiler::CachedData> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::unique_ptr<v8::ScriptCompiler::CachedData, std::__1::default_delete<v8::ScriptCompiler::CachedData> > > > >::__construct_node<char const*&, std::__1::unique_ptr<v8::ScriptCompiler::CachedData, std::__1::default_delete<v8::ScriptCompiler::CachedData> > >(char const*&, std::__1::unique_ptr<v8::ScriptCompiler::CachedData, std::__1::default_delete<v8::ScriptCompiler::CachedData> >&&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::unique_ptr<v8::ScriptCompiler::CachedData, std::__1::default_delete<v8::ScriptCompiler::CachedData> > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::unique_ptr<v8::ScriptCompiler::CachedData, std::__1::default_delete<v8::ScriptCompiler::CachedData> > >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::unique_ptr<v8::ScriptCompiler::CachedData, std::__1::default_delete<v8::ScriptCompiler::CachedData> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::unique_ptr<v8::ScriptCompiler::CachedData, std::__1::default_delete<v8::ScriptCompiler::CachedData> > > > >::rehash(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t __GLOBAL__sub_I_node_native_module.cc",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::ToJsSet(v8::Local<v8::Context>, std::__1::set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleEnv::Add(char const*, node::UnionBytes const&)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleEnv::Exists(char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleEnv::GetSourceObject(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleEnv::GetConfigString(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleEnv::GetModuleCategories(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::set(std::__1::set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleEnv::GetCacheUsage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "t v8::MaybeLocal<v8::Value> node::ToV8Value<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(v8::Local<v8::Context>, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleEnv::ModuleIdsGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleEnv::ConfigStringGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleEnv::RecordResult(char const*, node::native_module::NativeModuleLoader::Result, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleEnv::CompileFunction(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleEnv::LookupAndCompile(v8::Local<v8::Context>, char const*, std::__1::vector<v8::Local<v8::String>, std::__1::allocator<v8::Local<v8::String> > >*, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::HasCachedBuiltins(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleEnv::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "T node::native_module::NativeModuleEnv::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "T _register_native_module()",
    "type": "CPP"
  },
  {
    "name": "T _register_external_reference_native_module(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "T node::DebugOptions::CheckOptions(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "Abort.ExtraWide",
    "timestamp": 46741,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation",
    "type": "SHARED_LIB"
  },
  {
    "name": "t +[NSObject(NSObject) load]",
    "type": "CPP"
  },
  {
    "name": "t ___26+[NSObject(NSObject) load]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T ___CFInitialize",
    "type": "CPP"
  },
  {
    "name": "t ___CFInitializeLinkCheck",
    "type": "CPP"
  },
  {
    "name": "t __CoreFoundationLinkedOnAfter",
    "type": "CPP"
  },
  {
    "name": "T __CFLibraryVersionCompare",
    "type": "CPP"
  },
  {
    "name": "t ___exceptionInit",
    "type": "CPP"
  },
  {
    "name": "T __CFStringGetUserDefaultEncoding",
    "type": "CPP"
  },
  {
    "name": "T __CFGetEUID",
    "type": "CPP"
  },
  {
    "name": "T __CFGetUGIDs",
    "type": "CPP"
  },
  {
    "name": "t ____CFCanChangeEUIDs_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFGetUGIDs_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t _____CFGetUGIDs_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFgetenv",
    "type": "CPP"
  },
  {
    "name": "T __CFRuntimeBridgeClasses",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberGetTypeID",
    "type": "CPP"
  },
  {
    "name": "t ___CFNumberGetTypeID_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFExecutableLinkedOnOrAfter",
    "type": "CPP"
  },
  {
    "name": "t ____CFExecutableLinkedOnOrAfter_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFExecutableLinkedOnOrAfterProgramSDK",
    "type": "CPP"
  },
  {
    "name": "t ___CFCharacterSetInitialize",
    "type": "CPP"
  },
  {
    "name": "t _____CFCharacterSetInitialize_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFXPreferencesInitialize",
    "type": "CPP"
  },
  {
    "name": "t _____CFXPreferencesInitialize_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFMachPortGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFURLGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopTimerGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFErrorGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateWithCString",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringCreateImmutableFunnel3",
    "type": "CPP"
  },
  {
    "name": "T ___CFStringComputeEightBitStringEncoding",
    "type": "CPP"
  },
  {
    "name": "t ___CFSearchStringROM",
    "type": "CPP"
  },
  {
    "name": "t ___CFStrHashEightBit2",
    "type": "CPP"
  },
  {
    "name": "T __CFRuntimeCreateInstance",
    "type": "CPP"
  },
  {
    "name": "T ___CFAllocatorRespectsHintZeroWhenAllocating",
    "type": "CPP"
  },
  {
    "name": "T _CFAllocatorAllocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorSystemAllocate",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayCreate",
    "type": "CPP"
  },
  {
    "name": "t _____FoundationPresent_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSArrayImmutablePlaceholder",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray initWithObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSSingleObjectArrayI_new",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocateObject",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString retain]",
    "type": "CPP"
  },
  {
    "name": "T __CFNonObjCRetain",
    "type": "CPP"
  },
  {
    "name": "T _CFRetain",
    "type": "CPP"
  },
  {
    "name": "T __CFProcessPath",
    "type": "CPP"
  },
  {
    "name": "t ___CFProcessIsRestricted",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin",
    "type": "CPP"
  },
  {
    "name": "T ___CFOAInitialize",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringInitializeSystemEncoding",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetSystemEncoding",
    "type": "CPP"
  },
  {
    "name": "t _CFStringEncodingGetConverter",
    "type": "CPP"
  },
  {
    "name": "t ___CFGetConverter",
    "type": "CPP"
  },
  {
    "name": "t ___CFSetCharToUniCharFunc",
    "type": "CPP"
  },
  {
    "name": "t ___CFFromMacRoman",
    "type": "CPP"
  },
  {
    "name": "t ___CFMakeNSBlockClasses",
    "type": "CPP"
  },
  {
    "name": "T __CFGetHandleForInsertedOrInterposingLibrary",
    "type": "CPP"
  },
  {
    "name": "T __CFGetExecutableLinkedLibraryVersion",
    "type": "CPP"
  },
  {
    "name": "T __CFGetTSD",
    "type": "CPP"
  },
  {
    "name": "T __CFGetTSDCreateIfNeeded",
    "type": "CPP"
  },
  {
    "name": "t ___CFTSDGetTable",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionaryCreateMutable",
    "type": "CPP"
  },
  {
    "name": "t ___NSCFDictionaryCreateMutable",
    "type": "CPP"
  },
  {
    "name": "t ___CFDictionaryCreateGeneric",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashCreate",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashGetPtrIndex",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashGetPtrIndex_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFRuntimeSetInstanceTypeIDAndIsa",
    "type": "CPP"
  },
  {
    "name": "T __CFRuntimeSetInstanceTypeID",
    "type": "CPP"
  },
  {
    "name": "t +[NSDictionary allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSDictionaryMutablePlaceholder",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDictionary init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDictionary initWithCapacity:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSDictionaryM_new",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionarySetValue",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashSetValue",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashAddValue",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashRehash",
    "type": "CPP"
  },
  {
    "name": "T _CFGetAllocator",
    "type": "CPP"
  },
  {
    "name": "T _CFAllocatorDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFTypeCollectionRetain",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionaryGetValue",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashFindBucket",
    "type": "CPP"
  },
  {
    "name": "T __CFSetTSD",
    "type": "CPP"
  },
  {
    "name": "T __CFRuntimeRegisterClass",
    "type": "CPP"
  },
  {
    "name": "T _CFStringConvertEncodingToNSStringEncoding",
    "type": "CPP"
  },
  {
    "name": "t +[NSTaggedPointerString _setAsTaggedStringClass]",
    "type": "CPP"
  },
  {
    "name": "t __CFStringInitializeTaggedStrings",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString length]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetLength",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString getCString:maxLength:encoding:]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringConvertNSStringEncodingToEncoding",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetCString",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t __CFStringEqual",
    "type": "CPP"
  },
  {
    "name": "T _CFErrorSetCallBackBlockForDomain",
    "type": "CPP"
  },
  {
    "name": "t __CFErrorInitializeCallBackTable",
    "type": "CPP"
  },
  {
    "name": "T _CFHash",
    "type": "CPP"
  },
  {
    "name": "T ___CFStringHash",
    "type": "CPP"
  },
  {
    "name": "t _blockCopyValueCallBack",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringCollectionCopy",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateCopy",
    "type": "CPP"
  },
  {
    "name": "t __CFNonObjCStringCreateCopy",
    "type": "CPP"
  },
  {
    "name": "t ___CFRuntimeIsConstant",
    "type": "CPP"
  },
  {
    "name": "T _CFEqual",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorSystemDeallocate",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSSetImmutablePlaceholder",
    "type": "CPP"
  },
  {
    "name": "t +[__NSPlaceholderSet initialize]",
    "type": "CPP"
  },
  {
    "name": "t ___32+[__NSPlaceholderSet initialize]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___NSSetI_new",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet initWithObjects:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderSet initWithObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSSingleObjectSetI_new",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberCreate",
    "type": "CPP"
  },
  {
    "name": "t ___CFNumberInit",
    "type": "CPP"
  },
  {
    "name": "t +[NSDictionary dictionaryWithObjects:forKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSDictionaryImmutablePlaceholder",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDictionary initWithObjects:forKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSDictionaryI_new",
    "type": "CPP"
  },
  {
    "name": "t _____NSDictionaryI_new_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString hash]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFConstantString copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber release]",
    "type": "CPP"
  },
  {
    "name": "T __CFNonObjCRelease",
    "type": "CPP"
  },
  {
    "name": "T _CFRelease",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFConstantString copy]",
    "type": "CPP"
  },
  {
    "name": "T __CFAutoreleasePoolPush",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleGetMainBundle",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateWithFileSystemRepresentation",
    "type": "CPP"
  },
  {
    "name": "T _CFStringFileSystemEncoding",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateWithFileSystemPath",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetCharacterAtIndex",
    "type": "CPP"
  },
  {
    "name": "T _CFStringHasPrefix",
    "type": "CPP"
  },
  {
    "name": "T _CFStringFindWithOptionsAndLocale",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringFillCharacterSetInlineBuffer",
    "type": "CPP"
  },
  {
    "name": "t __CFStringGetCStringPtrInternal",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetCharactersPtr",
    "type": "CPP"
  },
  {
    "name": "t _POSIXPathToURLPath",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetMaximumSizeOfFileSystemRepresentation",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetFastestEncoding",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetFileSystemRepresentation",
    "type": "CPP"
  },
  {
    "name": "T __CFStringGetFileSystemRepresentationWithErrorStatus",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetCStringPtr",
    "type": "CPP"
  },
  {
    "name": "t _CreateStringFromFileSystemRepresentationByAddingPercentEscapes",
    "type": "CPP"
  },
  {
    "name": "t ___AddAuthorityToFileURL_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateWithBytes",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCopyBundleURLForExecutableURL",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyResolvedURLForExecutableURL",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCopyAbsoluteURL",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCopyFileSystemPath",
    "type": "CPP"
  },
  {
    "name": "T _CFURLGetBaseURL",
    "type": "CPP"
  },
  {
    "name": "T _CFURLGetString",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetMaximumSizeForEncoding",
    "type": "CPP"
  },
  {
    "name": "t _CanonicalFileURLStringToFileSystemRepresentation",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetBytes",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetCharacters",
    "type": "CPP"
  },
  {
    "name": "t ___CFStrConvertBytesToUnicode",
    "type": "CPP"
  },
  {
    "name": "t __CFLengthAfterDeletingLastPathComponent",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateWithCharacters",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateWithFileSystemPathRelativeToBase",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString length]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString characterAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString fastestEncoding]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString _fastCharacterContents]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString _fastCStringContents:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString getCharacters:range:]",
    "type": "CPP"
  },
  {
    "name": "T _CFUniCharDecomposeWithErrorLocation",
    "type": "CPP"
  },
  {
    "name": "t ___CFUniCharLoadDecompositionTable",
    "type": "CPP"
  },
  {
    "name": "t _CFUniCharGetMappingData",
    "type": "CPP"
  },
  {
    "name": "t ___CFUniCharLoadFile",
    "type": "CPP"
  },
  {
    "name": "T _CFUniCharGetBitmapPtrForPlane",
    "type": "CPP"
  },
  {
    "name": "t ___CFUniCharLoadBitmapData",
    "type": "CPP"
  },
  {
    "name": "t _CFUniCharGetNumberOfPlanesForUnicodePropertyData",
    "type": "CPP"
  },
  {
    "name": "T _CFUniCharGetUnicodePropertyDataForPlane",
    "type": "CPP"
  },
  {
    "name": "t ___CFUniCharGetUnicodePropertyDataForPlane_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFURLIsFileReferenceURL",
    "type": "CPP"
  },
  {
    "name": "t _resolveAbsoluteURLString",
    "type": "CPP"
  },
  {
    "name": "t _resolveAbsoluteURLStringBuffer",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateMutable",
    "type": "CPP"
  },
  {
    "name": "t __netLocationRange",
    "type": "CPP"
  },
  {
    "name": "t __resolvedPath",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateWithCharactersNoCopy",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringDeallocate",
    "type": "CPP"
  },
  {
    "name": "T _CFStringAppendCharacters",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringChangeSizeMultiple",
    "type": "CPP"
  },
  {
    "name": "t ___CFStrAllocateMutableContents",
    "type": "CPP"
  },
  {
    "name": "t __CFURLCreateWithArbitraryString",
    "type": "CPP"
  },
  {
    "name": "t __CFURLCreateWithURLString",
    "type": "CPP"
  },
  {
    "name": "t __parseComponents",
    "type": "CPP"
  },
  {
    "name": "t _constructBuffers",
    "type": "CPP"
  },
  {
    "name": "t ___SupportDeprecatedParameterComponent_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __rangeForComponent",
    "type": "CPP"
  },
  {
    "name": "t _scanCharacters",
    "type": "CPP"
  },
  {
    "name": "t ___CFStrDeallocateMutableContents",
    "type": "CPP"
  },
  {
    "name": "t ___CFURLDeallocate",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateStringWithFileSystemPath",
    "type": "CPP"
  },
  {
    "name": "t __retainedComponentString",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateWithSubstring",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateStringByReplacingPercentEscapes",
    "type": "CPP"
  },
  {
    "name": "T _CFURLHasDirectoryPath",
    "type": "CPP"
  },
  {
    "name": "t __CFStartOfLastPathComponent",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleGetPlatformExecutablesSubdirectoryName",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString isEqual:]",
    "type": "CPP"
  },
  {
    "name": "T __NSIsNSString",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString isNSString__]",
    "type": "CPP"
  },
  {
    "name": "t _isEqualToString",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString getCharacters:range:]",
    "type": "CPP"
  },
  {
    "name": "T __CFStringCheckAndGetCharacters",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCreateMain",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFURLGetFileSystemRepresentation",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateFromFileSystemRepresentation",
    "type": "CPP"
  },
  {
    "name": "t __CFURLCreateWithFileSystemRepresentation",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleGetBundleVersionForURL",
    "type": "CPP"
  },
  {
    "name": "T _CFStringHasSuffix",
    "type": "CPP"
  },
  {
    "name": "t __CFIterateDirectory",
    "type": "CPP"
  },
  {
    "name": "t ____CFBundleGetBundleVersionForURL_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCompareWithOptions",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCompareWithOptionsAndLocale",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleGetInfoDictionary",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleRefreshInfoDictionaryAlreadyLocked",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyInfoDictionaryInDirectoryWithVersion",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateWithString",
    "type": "CPP"
  },
  {
    "name": "t ____CFBundleCopyInfoDictionaryInDirectoryWithVersion_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateDataAndPropertiesFromResource",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCopyScheme",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCompare",
    "type": "CPP"
  },
  {
    "name": "t __CFReadBytesFromFile",
    "type": "CPP"
  },
  {
    "name": "T _CFDataCreateWithBytesNoCopy",
    "type": "CPP"
  },
  {
    "name": "t __CFDataInit",
    "type": "CPP"
  },
  {
    "name": "t ___CFDataShouldUseAllocator",
    "type": "CPP"
  },
  {
    "name": "T _CFPropertyListCreateWithData",
    "type": "CPP"
  },
  {
    "name": "T _CFDataGetLength",
    "type": "CPP"
  },
  {
    "name": "t ___CFTryParseBinaryPlist",
    "type": "CPP"
  },
  {
    "name": "T _CFDataGetBytePtr",
    "type": "CPP"
  },
  {
    "name": "T ___CFBinaryPlistGetTopLevelInfo",
    "type": "CPP"
  },
  {
    "name": "t __CFPropertyListCreateFromUTF8Data",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFAllocatorGetDefault",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashSetCapacity",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieCreateWithOptions",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionaryGetValueIfPresent",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberGetValue",
    "type": "CPP"
  },
  {
    "name": "t ___CFDictionaryDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashDrain",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayCreateMutable",
    "type": "CPP"
  },
  {
    "name": "t ___NSArrayMutablePlaceholder",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray initWithCapacity:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSArrayM_new",
    "type": "CPP"
  },
  {
    "name": "t _createTopLevelKeypaths",
    "type": "CPP"
  },
  {
    "name": "t _skipXMLProcessingInstruction",
    "type": "CPP"
  },
  {
    "name": "t _parseXMLElement",
    "type": "CPP"
  },
  {
    "name": "t _getContentObject",
    "type": "CPP"
  },
  {
    "name": "t ___CFPropertyListCreateSplitKeypaths",
    "type": "CPP"
  },
  {
    "name": "t _parseStringTag",
    "type": "CPP"
  },
  {
    "name": "t __createUniqueStringWithUTF8Bytes",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieContainsUTF8String",
    "type": "CPP"
  },
  {
    "name": "t _traverseCFBurstTrieWithCursor",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayGetCount",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM count]",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieAddUTF8String",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieAddUTF8StringWithWeight",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayAppendValue",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM addObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM insertObject:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFConstantString retain]",
    "type": "CPP"
  },
  {
    "name": "t _checkForCloseTag",
    "type": "CPP"
  },
  {
    "name": "T __CFDictionarySetCapacity",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM __setObject:forKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM _mutate]",
    "type": "CPP"
  },
  {
    "name": "t _findCFBurstTrieList",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean retain]",
    "type": "CPP"
  },
  {
    "name": "t _mdict_rehashd",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionaryGetCount",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM count]",
    "type": "CPP"
  },
  {
    "name": "t _containsKey",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayGetValueAtIndex",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM objectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString hash]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringHashISOLatin1CString",
    "type": "CPP"
  },
  {
    "name": "t __NSTaggedPointerStringEqualCFString",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM objectForKey:]",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieRelease",
    "type": "CPP"
  },
  {
    "name": "t _finalizeCFBurstTrie",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM dealloc]",
    "type": "CPP"
  },
  {
    "name": "t ___RELEASE_OBJECTS_IN_THE_ARRAY__",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFConstantString release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString release]",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionaryGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFGetTypeID",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary _cfTypeID]",
    "type": "CPP"
  },
  {
    "name": "t ___CFDataDeallocate",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleInfoPlistProcessInfoDictionary",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionaryGetKeysAndValues",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary getObjects:andKeys:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM getObjects:andKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "T __CFMZEnabled",
    "type": "CPP"
  },
  {
    "name": "T _CFStringFind",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetTypeID",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleGrokBinaryType",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleGrokFileType",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleInitializeMainBundleInfoDictionaryAlreadyLocked",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyExecutableName",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCheckWorkarounds",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleGetVersionNumber",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetDoubleValue",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringScanDouble",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleInitPlugIn",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyBundleURL",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionaryContainsKey",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashGetCountOfKey",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionaryAddValue",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashAddValue",
    "type": "CPP"
  },
  {
    "name": "T _CFStringIsEncodingAvailable",
    "type": "CPP"
  },
  {
    "name": "T ___CFStringDecodeByteStream3",
    "type": "CPP"
  },
  {
    "name": "t ___CFFromUTF8",
    "type": "CPP"
  },
  {
    "name": "T _CFStringHashCharacters",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString copy]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFType retain]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:]",
    "type": "CPP"
  },
  {
    "name": "T ___CFStringEncodeByteStream",
    "type": "CPP"
  },
  {
    "name": "t _CFStringEncodingIsValidEncoding",
    "type": "CPP"
  },
  {
    "name": "T _CFStringEncodingUnicodeToBytes",
    "type": "CPP"
  },
  {
    "name": "t ___CFToUTF8",
    "type": "CPP"
  },
  {
    "name": "t -[NSUserDefaults _setContainer:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSUserDefaults _setIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectArrayI mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM replaceObjectAtIndex:withObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM copy]",
    "type": "CPP"
  },
  {
    "name": "t ___NSArrayM_copy",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray initWithArray:range:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "T __NSIsNSArray",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray isNSArray__]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM getObjects:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectArrayI count]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectArrayI objectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "T __CFXPreferencesReplaceValuesInNamedVolatileSource",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsCurrentProcessIsCFPrefsD",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsCopyDefaultPreferences_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferencesHandle init]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences init]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferencesHandle copyPrefs]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences replaceValuesInVolatileSourceNamed:withValues:]",
    "type": "CPP"
  },
  {
    "name": "t _withKeysAndValues",
    "type": "CPP"
  },
  {
    "name": "t ___65-[_CFXPreferences replaceValuesInVolatileSourceNamed:withValues:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences(SourceAdditions) withNamedVolatileSourceForIdentifier:perform:]",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsGetCacheStringForBundleID",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences(SourceAdditions) withNamedVolatileSources:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences(SourceAdditions) alreadylocked_withNamedVolatileSources:]",
    "type": "CPP"
  },
  {
    "name": "t ___81-[_CFXPreferences(SourceAdditions) withNamedVolatileSourceForIdentifier:perform:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource initWithContainingPreferences:]",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsArmPendingKVOSlot",
    "type": "CPP"
  },
  {
    "name": "t ___65-[_CFXPreferences replaceValuesInVolatileSourceNamed:withValues:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource replaceAllValuesWithValues:forKeys:count:from:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource copyKeyList]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource alreadylocked_copyKeyList]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource alreadylocked_copyDictionary]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArray0 retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArray0 count]",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayGetValues",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray getObjects:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource alreadylocked_setPrecopiedValues:forKeys:count:from:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArray0 release]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences _deliverPendingKVONotifications]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM dealloc]",
    "type": "CPP"
  },
  {
    "name": "t _cow_cleanup",
    "type": "CPP"
  },
  {
    "name": "T _CFPreferencesCopyAppValue",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesCopyAppValueWithContainerAndConfiguration",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsCopyUserForContainer",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleGetIdentifier",
    "type": "CPP"
  },
  {
    "name": "t __CFStringCopyBundleUnloadingProtectedString",
    "type": "CPP"
  },
  {
    "name": "t __CFStringSlowPathCopyBundleUnloadingProtectedString",
    "type": "CPP"
  },
  {
    "name": "t ___108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences(SearchListAdditions) withSearchLists:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences(SearchListAdditions) alreadylocked_withSearchLists:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource initWithIdentifier:containingPreferences:]",
    "type": "CPP"
  },
  {
    "name": "t ___shouldPreventGlobalDomainFallbackForIdentifier_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource addManagedSourceForIdentifier:user:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences(PlistSourceAdditions) withManagedSourceForIdentifier:user:perform:]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateWithFormat",
    "type": "CPP"
  },
  {
    "name": "T __CFStringCreateWithFormatAndArgumentsAux2",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringAppendFormatCore",
    "type": "CPP"
  },
  {
    "name": "t __CFStringGetFormatSpecifierConfiguration",
    "type": "CPP"
  },
  {
    "name": "T ___CFStringAppendBytes",
    "type": "CPP"
  },
  {
    "name": "t ___CFCopyFormattingDescription",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringCopyFormattingDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFStringAppend",
    "type": "CPP"
  },
  {
    "name": "t _CFStrIsUnicode",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences(SourceAdditions) withSources:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences(SourceAdditions) alreadylocked_withSources:]",
    "type": "CPP"
  },
  {
    "name": "t ___85-[_CFXPreferences(PlistSourceAdditions) withManagedSourceForIdentifier:user:perform:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsManagedSource initWithDomain:user:byHost:containingPreferences:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource initWithDomain:user:byHost:containerPath:containingPreferences:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource setDomainIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource setUserIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource setContainer:]",
    "type": "CPP"
  },
  {
    "name": "t ___62-[CFPrefsSearchListSource addManagedSourceForIdentifier:user:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource addSource:]",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayContainsValue",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource addNamedVolatileSourceForIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t ___63-[CFPrefsSearchListSource addNamedVolatileSourceForIdentifier:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource copyCloudConfigurationWithURL:outConfigFileSource:outStoreName:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource addSourceForIdentifier:user:byHost:container:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences(SourceAdditions) withSourceForIdentifier:user:byHost:container:cloud:perform:]",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsExtractQuadrupleFromPathIfPossible",
    "type": "CPP"
  },
  {
    "name": "t ___96-[_CFXPreferences(SourceAdditions) withSourceForIdentifier:user:byHost:container:cloud:perform:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___CF_USED",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsCreateCacheKeyForQuintuplet",
    "type": "CPP"
  },
  {
    "name": "t ___96-[_CFXPreferences(SourceAdditions) withSourceForIdentifier:user:byHost:container:cloud:perform:]_block_invoke.213",
    "type": "CPP"
  },
  {
    "name": "T _CFCopyHomeDirectoryURLForUser",
    "type": "CPP"
  },
  {
    "name": "t __CFCopyHomeDirURLForUser",
    "type": "CPP"
  },
  {
    "name": "t __CFURLExists",
    "type": "CPP"
  },
  {
    "name": "t __CFGetFileProperties",
    "type": "CPP"
  },
  {
    "name": "t __CFGetPathProperties",
    "type": "CPP"
  },
  {
    "name": "t ___96-[_CFXPreferences(SourceAdditions) withSourceForIdentifier:user:byHost:container:cloud:perform:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___72-[CFPrefsSearchListSource addSourceForIdentifier:user:byHost:container:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource addSuiteSourceForIdentifier:user:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences(SearchListAdditions) withSuiteSearchListForIdentifier:user:locked:perform:]",
    "type": "CPP"
  },
  {
    "name": "t ___93-[_CFXPreferences(SearchListAdditions) withSuiteSearchListForIdentifier:user:locked:perform:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource freeze]",
    "type": "CPP"
  },
  {
    "name": "t ___60-[CFPrefsSearchListSource addSuiteSourceForIdentifier:user:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___76-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource copyValueForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource alreadylocked_copyValueForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource alreadylocked_getDictionary:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource alreadylocked_generationCountFromListOfSources:count:]",
    "type": "CPP"
  },
  {
    "name": "t _generationCountFromListOfSources",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource createRequestNewContentMessageForDaemon:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource createRequestNewContentMessageForDaemon:]",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsDirectMode",
    "type": "CPP"
  },
  {
    "name": "t ___isOnDirectModeBlackList_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsDirectMode_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___62-[CFPrefsPlistSource createRequestNewContentMessageForDaemon:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsInstalliWorkWorkaround_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource volatilizeIfInvalidHomeDir]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences euid]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource userIdentifier]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource createSynchronizeMessage]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource domainIdentifier]",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsEncodeValueIntoMessage",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsManagedSource managed]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource container]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource attachAccessTokenToMessage:accessType:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource addPIDImpersonationIfNecessary:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource createRequestNewContentMessageForDaemon:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource managed]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource createMultiMessageWithContainedMessages:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences currentUserHasInvalidHomeDirectory]",
    "type": "CPP"
  },
  {
    "name": "t __CFUnsandboxedHomeDirectoryForCurrentUser",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource synchronouslySendDaemonMessage:andAgentMessage:andDirectMessage:replyHandler:]",
    "type": "CPP"
  },
  {
    "name": "t _CFPREFERENCES_IS_WAITING_FOR_SYSTEM_AND_USER_CFPREFSDS",
    "type": "CPP"
  },
  {
    "name": "t ___104-[CFPrefsSearchListSource synchronouslySendDaemonMessage:andAgentMessage:andDirectMessage:replyHandler:]_block_invoke.119",
    "type": "CPP"
  },
  {
    "name": "t ___104-[CFPrefsSearchListSource synchronouslySendDaemonMessage:andAgentMessage:andDirectMessage:replyHandler:]_block_invoke_2.120",
    "type": "CPP"
  },
  {
    "name": "t ___104-[CFPrefsSearchListSource synchronouslySendDaemonMessage:andAgentMessage:andDirectMessage:replyHandler:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences withConnectionForRole:performBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences _copyDaemonConnectionSettingUpIfNecessaryForRole:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences canLookUpAgents]",
    "type": "CPP"
  },
  {
    "name": "T __CFGetProcessPath",
    "type": "CPP"
  },
  {
    "name": "t ___34-[_CFXPreferences canLookUpAgents]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o",
    "type": "CPP"
  },
  {
    "name": "t ___104-[CFPrefsSearchListSource synchronouslySendDaemonMessage:andAgentMessage:andDirectMessage:replyHandler:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___80-[CFPrefsSearchListSource alreadylocked_generationCountFromListOfSources:count:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource handleReply:toRequestNewDataMessage:onConnection:retryCount:error:]",
    "type": "CPP"
  },
  {
    "name": "t ___93-[CFPrefsSearchListSource handleReply:toRequestNewDataMessage:onConnection:retryCount:error:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource handleReply:toRequestNewDataMessage:onConnection:retryCount:error:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences shmemForRole:name:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource handleErrorReply:retryCount:retryContinuation:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource handleErrorReply:fromMessageSettingKeys:toValues:count:retryCount:retryContinuation:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource handlePossibleOversizedMessage:]",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsClientLog",
    "type": "CPP"
  },
  {
    "name": "t ___makeLogHandles_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFBinaryPlistCreateObjectFiltered",
    "type": "CPP"
  },
  {
    "name": "t ___CFArrayCreateTransfer",
    "type": "CPP"
  },
  {
    "name": "t ___CFDictionaryCreateTransfer",
    "type": "CPP"
  },
  {
    "name": "t ___NSCFDictionaryCreateTransfer",
    "type": "CPP"
  },
  {
    "name": "t ___CFTypeCollectionRelease",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionaryCreateMutableCopy",
    "type": "CPP"
  },
  {
    "name": "t ___NSSingleEntryDictionaryI_new",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionary0 retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI _cfMutableCopy]",
    "type": "CPP"
  },
  {
    "name": "t __NSDictionaryI_mutableCopyWithZone",
    "type": "CPP"
  },
  {
    "name": "T _CFDateCreate",
    "type": "CPP"
  },
  {
    "name": "t +[NSDate allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSPlaceholderDate initialize]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI getObjects:andKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray retain]",
    "type": "CPP"
  },
  {
    "name": "t ___33+[__NSPlaceholderDate initialize]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray release]",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateGetTypeID_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDate initWithTimeIntervalSinceReferenceDate:]",
    "type": "CPP"
  },
  {
    "name": "t _decodeTaggedTimeInterval",
    "type": "CPP"
  },
  {
    "name": "T _CFDataCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFDataReplaceBytes",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionary0 release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFData retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFData release]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource mergeIntoDictionary:sourceDictionary:cloudKeyEvaluator:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource alreadylocked_copyDictionary]",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionaryCreateCopy",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t __cow_create",
    "type": "CPP"
  },
  {
    "name": "t __cow_copy",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsDictionaryApplyBlock",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionaryApplyFunction",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenDictionaryM __apply:context:]",
    "type": "CPP"
  },
  {
    "name": "t _applyBlockApplier",
    "type": "CPP"
  },
  {
    "name": "t ___72-[CFPrefsSource mergeIntoDictionary:sourceDictionary:cloudKeyEvaluator:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary __addObject:forKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM setObject:forKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenDictionaryM dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource alreadylocked_copyDictionary]",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionaryCreate",
    "type": "CPP"
  },
  {
    "name": "t ___NSCFDictionaryCreate",
    "type": "CPP"
  },
  {
    "name": "t ___55-[CFPrefsSearchListSource alreadylocked_copyDictionary]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary _cfMutableCopy]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDictionary initWithDictionary:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary initWithDictionary:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "T __NSIsNSDictionary",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary isNSDictionary__]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionary0 count]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionary0 getObjects:andKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM __apply:context:]",
    "type": "CPP"
  },
  {
    "name": "t ___57-[CFPrefsSearchListSource alreadylocked_copyValueForKey:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray containsObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "T __CFArrayFastEnumeration",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray arrayByAddingObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray count]",
    "type": "CPP"
  },
  {
    "name": "t __CFNonObjCArrayGetCount",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray getObjects:range:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSArrayI_new",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale currentLocale]",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleCopyCurrent",
    "type": "CPP"
  },
  {
    "name": "t __CFLocaleCopyCurrentGuts",
    "type": "CPP"
  },
  {
    "name": "t ___CFXPreferencesCopyCurrentApplicationStateWithDeadlockAvoidance",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences copyDictionaryForApp:withContainer:]",
    "type": "CPP"
  },
  {
    "name": "t ___54-[_CFXPreferences copyDictionaryForApp:withContainer:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource copyDictionary]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM _cfMutableCopy]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t _CFBundleAllowMixedLocalizations",
    "type": "CPP"
  },
  {
    "name": "t ___CFBundleAllowMixedLocalizations_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleGetInfoDictionaryBoolean",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyBundleLocalizations",
    "type": "CPP"
  },
  {
    "name": "t ___CFBundleFollowParentLocalization_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyResourcesDirectoryURL",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyResourcesDirectoryURLInDirectory",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyLProjDirectoriesForURL",
    "type": "CPP"
  },
  {
    "name": "t ____CFBundleCopyLProjDirectoriesForURL_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString substringWithRange:]",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleGetDevelopmentRegion",
    "type": "CPP"
  },
  {
    "name": "t ___CFBundleGetDevelopmentRegion_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFLocaleCopyPreferredLanguagesFromPrefs",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayGetTypeID",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray objectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "T __CFArrayCheckAndGetValueAtIndex",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleCreateCanonicalLanguageIdentifierFromString",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString _getCString:maxLength:encoding:]",
    "type": "CPP"
  },
  {
    "name": "t __CompareTestEntryToTableEntryKey",
    "type": "CPP"
  },
  {
    "name": "t __UpdateFullLocaleString",
    "type": "CPP"
  },
  {
    "name": "t __CompareLowerTestEntryPrefixToTableEntryKey",
    "type": "CPP"
  },
  {
    "name": "t __CheckForTag",
    "type": "CPP"
  },
  {
    "name": "t __CompareTestEntryPrefixToTableEntryKey",
    "type": "CPP"
  },
  {
    "name": "t __RemoveSubstringsIfPresent",
    "type": "CPP"
  },
  {
    "name": "t __AppendKeyValueString",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray _cfTypeID]",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyLocalizationsForPreferences",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyPreferredLanguagesInList",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCreateMutableArrayOfFallbackLanguages",
    "type": "CPP"
  },
  {
    "name": "t ____CFBundleCreateMutableArrayOfFallbackLanguages_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __NSTaggedPointerStringGetBytes",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleResourceLogger",
    "type": "CPP"
  },
  {
    "name": "t ____CFBundleResourceLogger_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFLocaleCopyLanguageIdentifierWithScriptCodeForLocaleIdentifier",
    "type": "CPP"
  },
  {
    "name": "t __CFLocaleCopyLocaleIdentifierByAddingLikelySubtags",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleCreateComponentsFromLocaleIdentifier",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenDictionaryM objectForKey:]",
    "type": "CPP"
  },
  {
    "name": "T _CFCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSObject) _copyDescription]",
    "type": "CPP"
  },
  {
    "name": "T __CFAutoreleasePoolPop",
    "type": "CPP"
  },
  {
    "name": "t ___CFRuntimeSetRC",
    "type": "CPP"
  },
  {
    "name": "t __setCachedCurrentLocale",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFLocale retain]",
    "type": "CPP"
  },
  {
    "name": "T _CFNotificationCenterGetLocalCenter",
    "type": "CPP"
  },
  {
    "name": "t ___CFNotificationCenterGetLocalCenter_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFXNotificationCenterCreate",
    "type": "CPP"
  },
  {
    "name": "t ____CFXNotificationCenterCreate_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar initWithOptions:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationContainer initWithParent:]",
    "type": "CPP"
  },
  {
    "name": "t +[_CFXNotificationRegistrar childClass]",
    "type": "CPP"
  },
  {
    "name": "t +[_CFXNotificationNameRegistration keyCallbacks]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationContainer initWithParent:childKeyCallbacks:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationBase initWithParent:]",
    "type": "CPP"
  },
  {
    "name": "t +[_CFXNotificationRegistrationBase keyCallbacks]",
    "type": "CPP"
  },
  {
    "name": "T _CFNotificationCenterGetDarwinNotifyCenter",
    "type": "CPP"
  },
  {
    "name": "t ___CFNotificationCenterGetDarwinNotifyCenter_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[_CFXNotificationObjectRegistration stringKeyCallbacks]",
    "type": "CPP"
  },
  {
    "name": "t ___56+[_CFXNotificationObjectRegistration stringKeyCallbacks]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFNotificationCenterAddObserver",
    "type": "CPP"
  },
  {
    "name": "T __CFXNotificationRegisterObserver",
    "type": "CPP"
  },
  {
    "name": "t _____CFXNotificationCenterDarwinQueue_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[_CFXNotificationTokenRegistration createTokenRegistration:token:connection:notifyToken:options:queue:handler:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationDarwinTokenRegistration initWithToken:notifyToken:options:queue:handler:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenRegistration initWithToken:options:queue:handler:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationBase init]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenRegistration setQueue:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSBlock copy]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar add:object:observer:tokenRegistration:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar acquireWildcardObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationNameRegistration initWithName:options:parent:]",
    "type": "CPP"
  },
  {
    "name": "t +[_CFXNotificationNameWildcardObjectRegistration childClass]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationNameRegistration key]",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationChildrenAddValue",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenRegistration options]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationNameWildcardObjectRegistration acquireObserver:options:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObserverRegistration initWithObserver:parent:]",
    "type": "CPP"
  },
  {
    "name": "t +[_CFXNotificationObserverRegistration childClass]",
    "type": "CPP"
  },
  {
    "name": "t +[_CFXNotificationTokenRegistration keyCallbacks]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObserverRegistration key]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenRegistration addToObserver:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationContainer addChild:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationBase setParent:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenRegistration key]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar addChild:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenRegistration token]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber hash]",
    "type": "CPP"
  },
  {
    "name": "T __CFNonObjCHash",
    "type": "CPP"
  },
  {
    "name": "t ___CFNumberHash",
    "type": "CPP"
  },
  {
    "name": "t ___CFNumberGetValue",
    "type": "CPP"
  },
  {
    "name": "t ___initDayChangedNotification",
    "type": "CPP"
  },
  {
    "name": "t _____initDayChangedNotification_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___postAndResetMidnight",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSPlaceholderLocale initWithLocaleIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleCreateCanonicalLocaleIdentifierFromString",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFLocale objectForKey:]",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleGetValue",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCopyCodes",
    "type": "CPP"
  },
  {
    "name": "t ___CFToBytesCheapEightBitWrapper",
    "type": "CPP"
  },
  {
    "name": "t ___CFToASCII",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFLocale displayNameForKey:value:]",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleCopyDisplayNameForPropertyValue",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleLanguageName",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI count]",
    "type": "CPP"
  },
  {
    "name": "T __CFXPreferencesRegisterDefaultValues",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences registerDefaultValues:]",
    "type": "CPP"
  },
  {
    "name": "t ___41-[_CFXPreferences registerDefaultValues:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___41-[_CFXPreferences registerDefaultValues:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource setValues:forKeys:count:copyValues:from:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource setValues:forKeys:count:copyValues:removeValuesForKeys:count:from:]",
    "type": "CPP"
  },
  {
    "name": "t _createDeepCopyOfValueForKey",
    "type": "CPP"
  },
  {
    "name": "T _CFPropertyListCreateDeepCopy",
    "type": "CPP"
  },
  {
    "name": "t ___CFPropertyListIsValidAux",
    "type": "CPP"
  },
  {
    "name": "T __CFKeyedArchiverUIDGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFSetCreateMutable",
    "type": "CPP"
  },
  {
    "name": "t ___CFSetCreateGeneric",
    "type": "CPP"
  },
  {
    "name": "T _CFSetAddValue",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayApplyFunction",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI objectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFPropertyListIsArrayPlistAux",
    "type": "CPP"
  },
  {
    "name": "T _CFSetRemoveValue",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashRemoveValue",
    "type": "CPP"
  },
  {
    "name": "t ___CFSetDeallocate",
    "type": "CPP"
  },
  {
    "name": "t __arrayDeepImmutableCopy",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI getObjects:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource forEachObserver:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFLocale release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectArrayI dealloc]",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesRegisterStandardUserDefaultsExists",
    "type": "CPP"
  },
  {
    "name": "t ____CFPreferencesRegisterStandardUserDefaultsExists_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopGetCurrent",
    "type": "CPP"
  },
  {
    "name": "T __CFRunLoopGet0",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopCreate",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopFindMode",
    "type": "CPP"
  },
  {
    "name": "T _CFSetGetValue",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32r",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopModeHash",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopAddCommonMode",
    "type": "CPP"
  },
  {
    "name": "T _CFSetContainsValue",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleGetIdentifier",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI count]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary enumerateKeysAndObjectsUsingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI enumerateKeysAndObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSDICTIONARY_IS_CALLING_OUT_TO_A_BLOCK__",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary __apply:context:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFPropertyListIsDictPlistAux",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary count]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary getObjects:andKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberGetType",
    "type": "CPP"
  },
  {
    "name": "T __CFXNotificationGetTaskCenter",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM objectForKeyedSubscript:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString hasPrefix:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "T __CFAppVersionCheckLessThan",
    "type": "CPP"
  },
  {
    "name": "t ____bundleInfo_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObjcObserverRegistration initWithObserver:parent:]",
    "type": "CPP"
  },
  {
    "name": "T __NSObjectStoreWeak",
    "type": "CPP"
  },
  {
    "name": "T __CFXNotificationPost",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFConstantString autorelease]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar find:object:observer:enumerator:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(__NSCFType) _cfTypeID]",
    "type": "CPP"
  },
  {
    "name": "T _CFTypeGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesGetAppBooleanValueWithContainer",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsCopyBackstopAppleLocaleOrLanguageForKey",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesGetBooleanValueWithValue",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexOfObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectArrayI countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary initWithObjectsAndKeys:]",
    "type": "CPP"
  },
  {
    "name": "T __CFXNotificationGetHostCenter",
    "type": "CPP"
  },
  {
    "name": "T _CFNotificationCenterGetDistributedCenter",
    "type": "CPP"
  },
  {
    "name": "t ___CFNotificationCenterGetDistributedCenter_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFXNotificationCenterSetupConnection",
    "type": "CPP"
  },
  {
    "name": "t ___checkDelivImmed",
    "type": "CPP"
  },
  {
    "name": "T __CFSuddenTerminationDisable",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationDistributedTokenRegistration initWithToken:connection:options:queue:handler:]",
    "type": "CPP"
  },
  {
    "name": "t _____send_xpc_message_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFSuddenTerminationEnable",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesCopyAppValueWithContainer",
    "type": "CPP"
  },
  {
    "name": "T _CFDataGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionaryContainsValue",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary containsObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSKindOfAdditions) isNSString__]",
    "type": "CPP"
  },
  {
    "name": "T _CFDataCreateMutableCopy",
    "type": "CPP"
  },
  {
    "name": "T _CFDataSetLength",
    "type": "CPP"
  },
  {
    "name": "T _CFDataGetMutableBytePtr",
    "type": "CPP"
  },
  {
    "name": "T _CFDataCreateCopy",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary containsKey:]",
    "type": "CPP"
  },
  {
    "name": "T _CFBagCreateMutable",
    "type": "CPP"
  },
  {
    "name": "t ___CFBagCreateGeneric",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM setObject:forKeyedSubscript:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary release]",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet set]",
    "type": "CPP"
  },
  {
    "name": "t ___NSSetMutablePlaceholder",
    "type": "CPP"
  },
  {
    "name": "t ___NSSetM_new",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM count]",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray array]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArray0 autorelease]",
    "type": "CPP"
  },
  {
    "name": "T __CFDoExceptionOperation",
    "type": "CPP"
  },
  {
    "name": "T _CFAbsoluteTimeGetCurrent",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopTimerCreateWithHandler",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopTimerCreate",
    "type": "CPP"
  },
  {
    "name": "t ___CFTimeIntervalToTSR",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopGetMain",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopAddTimer",
    "type": "CPP"
  },
  {
    "name": "T _CFSetCreateCopy",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashCreateCopy",
    "type": "CPP"
  },
  {
    "name": "T _CFSetApplyFunction",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashApply",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashGetBucket",
    "type": "CPP"
  },
  {
    "name": "t ___CFSetApplyFunction_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopAddItemToCommonModes",
    "type": "CPP"
  },
  {
    "name": "t ___CFArrayCreateMutable0",
    "type": "CPP"
  },
  {
    "name": "t ___CFArrayCreateInit",
    "type": "CPP"
  },
  {
    "name": "t ___CFRepositionTimerInMode",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopInsertionIndexInTimerArray",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayInsertValueAtIndex",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayReplaceValues",
    "type": "CPP"
  },
  {
    "name": "t ___CFArmNextTimerInMode",
    "type": "CPP"
  },
  {
    "name": "t ___CFTSRToNanoseconds",
    "type": "CPP"
  },
  {
    "name": "t ___CFTSRToDispatchTime",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopModeEqual",
    "type": "CPP"
  },
  {
    "name": "T ___CFRunLoopSetOptionsReason",
    "type": "CPP"
  },
  {
    "name": "t _____CFRunLoopSetOptionsReason_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFAppSleepInit1_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32b",
    "type": "CPP"
  },
  {
    "name": "T __NSIsNSNumber",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean integerValue]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean longValue]",
    "type": "CPP"
  },
  {
    "name": "T _CFBooleanGetValue",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleGetMainBundleIfLooksLikeBundle",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleGetValueForInfoDictionaryKey",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleGetLocalInfoDictionary",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyResourceURL",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCopyFindResources",
    "type": "CPP"
  },
  {
    "name": "t __CFCreateLastPathComponent",
    "type": "CPP"
  },
  {
    "name": "t __hasDrive",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateMutableCopy",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleLayoutVersion",
    "type": "CPP"
  },
  {
    "name": "t __copyResourceURLsFromBundle",
    "type": "CPP"
  },
  {
    "name": "t __copyQueryTable",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyLanguageSearchListInBundle",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyUserLanguages",
    "type": "CPP"
  },
  {
    "name": "t __createQueryTableAtPath",
    "type": "CPP"
  },
  {
    "name": "t __CFAppendPathComponent2",
    "type": "CPP"
  },
  {
    "name": "t __CFAppendTrailingPathSlash2",
    "type": "CPP"
  },
  {
    "name": "t _copyBlocks",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleReadDirectory",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleGetProductNameSuffix",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleGetPlatformNameSuffix",
    "type": "CPP"
  },
  {
    "name": "t ____CFBundleReadDirectory_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleSplitFileName",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleVersionForFileName",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleAddValueForType",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringDelete",
    "type": "CPP"
  },
  {
    "name": "t __CFAppendPathExtension2",
    "type": "CPP"
  },
  {
    "name": "t __CFGetSlash",
    "type": "CPP"
  },
  {
    "name": "T _CFPropertyListCreateFromXMLData",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCopyLastPathComponent",
    "type": "CPP"
  },
  {
    "name": "t __rangeOfLastPathComponent",
    "type": "CPP"
  },
  {
    "name": "T _CFStringFindWithOptions",
    "type": "CPP"
  },
  {
    "name": "t ___CFURLEqual",
    "type": "CPP"
  },
  {
    "name": "t __cow_mutate_slow",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringFoldCharacterClusterAtIndex",
    "type": "CPP"
  },
  {
    "name": "T _CFSetGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFDateGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFBooleanGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFDateGetAbsoluteTime",
    "type": "CPP"
  },
  {
    "name": "t -[__NSTaggedDate timeIntervalSinceReferenceDate]",
    "type": "CPP"
  },
  {
    "name": "T _CFTimeZoneCopyDefault",
    "type": "CPP"
  },
  {
    "name": "t +[NSTimeZone defaultTimeZone]",
    "type": "CPP"
  },
  {
    "name": "t +[NSTimeZone systemTimeZone]",
    "type": "CPP"
  },
  {
    "name": "t +[NSTimeZone timeZoneWithName:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSTimeZone allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderTimeZone initWithName:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderTimeZone __initWithName:cache:]",
    "type": "CPP"
  },
  {
    "name": "t ___tryParseGMTName",
    "type": "CPP"
  },
  {
    "name": "t ___nameStringOK",
    "type": "CPP"
  },
  {
    "name": "t ___NSTimeZone_newWithCache",
    "type": "CPP"
  },
  {
    "name": "t +[__NSTimeZone initialize]",
    "type": "CPP"
  },
  {
    "name": "t ___26+[__NSTimeZone initialize]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache init]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache setName:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache setObject:forKey:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSCheckReentrancy",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache setObject:forKey:cost:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSCacheKeyRetain",
    "type": "CPP"
  },
  {
    "name": "t ___NSCacheValueRetain",
    "type": "CPP"
  },
  {
    "name": "t ___NSCacheKeyHash",
    "type": "CPP"
  },
  {
    "name": "T _CFAbsoluteTimeGetGregorianDate",
    "type": "CPP"
  },
  {
    "name": "T _CFTimeZoneGetSecondsFromGMT",
    "type": "CPP"
  },
  {
    "name": "t +[NSDate dateWithTimeIntervalSinceReferenceDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSTimeZone secondsFromGMTForDate:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFYMDFromAbsolute",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenDictionaryM count]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenDictionaryM getObjects:andKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "T __CFXPCCreateXPCObjectFromCFObject",
    "type": "CPP"
  },
  {
    "name": "T _CFNullGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberIsFloatType",
    "type": "CPP"
  },
  {
    "name": "T __CFXPCCreateCFObjectFromXPCObject",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI objectForKey:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFNumberGetValueCompat",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "T ___CFRunLoopSetOptions",
    "type": "CPP"
  },
  {
    "name": "t _____CFRunLoopSetOptionsReason_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "T __CFGetProgname",
    "type": "CPP"
  },
  {
    "name": "t __CFAppSleepSetupLaunchServices",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleEntryDictionaryI objectForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleEntryDictionaryI dealloc]",
    "type": "CPP"
  },
  {
    "name": "t __isForegroundApp",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayCreateCopy",
    "type": "CPP"
  },
  {
    "name": "T __CFArrayIsMutable",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectArrayI copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFType release]",
    "type": "CPP"
  },
  {
    "name": "t __CFAppSleepSetupCoreGraphics",
    "type": "CPP"
  },
  {
    "name": "T __CFRuntimeInitStaticInstance",
    "type": "CPP"
  },
  {
    "name": "T _CFStringLowercase",
    "type": "CPP"
  },
  {
    "name": "t __CFStrGetLanguageIdentifierForLocale",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleGetNullLocale",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCopyCollatorID",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleSetNullLocale",
    "type": "CPP"
  },
  {
    "name": "t __CFAppSleepSetupAppSleepDebug",
    "type": "CPP"
  },
  {
    "name": "t ____CFAppSleepSetupAppSleepDebug_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFPreferencesGetAppIntegerValue",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesGetAppIntegerValueWithContainer",
    "type": "CPP"
  },
  {
    "name": "T _CFPreferencesGetAppBooleanValue",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32r40r",
    "type": "CPP"
  },
  {
    "name": "t _____CFRunLoopSetOptionsReason_block_invoke_5",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCopyPathExtension",
    "type": "CPP"
  },
  {
    "name": "T __CFGetPathExtensionRangesFromPathComponent",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCopyResourcePropertyForKey",
    "type": "CPP"
  },
  {
    "name": "t __CFURLHasFileURLScheme",
    "type": "CPP"
  },
  {
    "name": "T ___CFURLResourceInfoPtr",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLCopyResourcePropertyForKey_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFLookupCoreServicesInternalFunction",
    "type": "CPP"
  },
  {
    "name": "t _____CFLookupCoreServicesInternalFunction_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamCreateWithAllocatedBuffers",
    "type": "CPP"
  },
  {
    "name": "t __CFStreamCreateWithConstantCallbacks",
    "type": "CPP"
  },
  {
    "name": "t __CFStreamCreate",
    "type": "CPP"
  },
  {
    "name": "t _writeDataCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamOpen",
    "type": "CPP"
  },
  {
    "name": "t __CFStreamOpen",
    "type": "CPP"
  },
  {
    "name": "t __CFStreamGetStatus",
    "type": "CPP"
  },
  {
    "name": "t _writeDataOpen",
    "type": "CPP"
  },
  {
    "name": "T _CFPropertyListWriteToStream",
    "type": "CPP"
  },
  {
    "name": "T _CFPropertyListWrite",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI __apply:context:]",
    "type": "CPP"
  },
  {
    "name": "T ___CFBinaryPlistWrite",
    "type": "CPP"
  },
  {
    "name": "t ___CFBinaryPlistWriteOrPresize",
    "type": "CPP"
  },
  {
    "name": "T __CFArraySetCapacity",
    "type": "CPP"
  },
  {
    "name": "T __CFSetSetCapacity",
    "type": "CPP"
  },
  {
    "name": "t __flattenPlist",
    "type": "CPP"
  },
  {
    "name": "T _CFSetGetCount",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashGetCount",
    "type": "CPP"
  },
  {
    "name": "t _bufferWrite",
    "type": "CPP"
  },
  {
    "name": "t __appendObject",
    "type": "CPP"
  },
  {
    "name": "t __appendString",
    "type": "CPP"
  },
  {
    "name": "t __appendInt",
    "type": "CPP"
  },
  {
    "name": "t ___CFArrayDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFArrayReleaseValues",
    "type": "CPP"
  },
  {
    "name": "t _writeBytes",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamWrite",
    "type": "CPP"
  },
  {
    "name": "t _dataWrite",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamCopyProperty",
    "type": "CPP"
  },
  {
    "name": "t _dataCopyProperty",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamClose",
    "type": "CPP"
  },
  {
    "name": "t __CFStreamClose",
    "type": "CPP"
  },
  {
    "name": "t ___CFStreamDeallocate",
    "type": "CPP"
  },
  {
    "name": "t _writeDataFinalize",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM replaceObjectsInRange:withObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM insertObjects:count:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleEntryDictionaryI count]",
    "type": "CPP"
  },
  {
    "name": "t +[NSURL __unurl]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleEntryDictionaryI copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleEntryDictionaryI getObjects:andKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "t ___16+[NSURL __unurl]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFURLIsFileURL",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber isNSNumber__]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber isEqualToNumber:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber compare:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber objCType]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber longLongValue]",
    "type": "CPP"
  },
  {
    "name": "T _CFPreferencesCopyValue",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesCopyValueWithContainer",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences copyValueForKey:identifier:user:host:container:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences(SearchListAdditions) with23930198HackSourceForIdentifier:user:byHost:container:cloud:perform:]",
    "type": "CPP"
  },
  {
    "name": "t ___66-[_CFXPreferences copyValueForKey:identifier:user:host:container:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource copyValueForKey:]",
    "type": "CPP"
  },
  {
    "name": "t __copyValueForKey",
    "type": "CPP"
  },
  {
    "name": "T _CFDataCreateMutable",
    "type": "CPP"
  },
  {
    "name": "t ___CFDataAllocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFDataGrow",
    "type": "CPP"
  },
  {
    "name": "T ___CFSafelyReallocate",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateWithCStringNoCopy",
    "type": "CPP"
  },
  {
    "name": "T _CFMachPortCreateWithPort",
    "type": "CPP"
  },
  {
    "name": "T _CFMachPortIsValid",
    "type": "CPP"
  },
  {
    "name": "T __CFMachPortSetOptions",
    "type": "CPP"
  },
  {
    "name": "T _CFMachPortGetPort",
    "type": "CPP"
  },
  {
    "name": "T _CFMachPortCreateRunLoopSource",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopSourceCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopContainsSource",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopSourceHash",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopAddSource",
    "type": "CPP"
  },
  {
    "name": "T _CFBagAddValue",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashIncSlotCount",
    "type": "CPP"
  },
  {
    "name": "t ___CFMachPortHash",
    "type": "CPP"
  },
  {
    "name": "T _CFDataIncreaseLength",
    "type": "CPP"
  },
  {
    "name": "T _CFPreferencesAppSynchronize",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences appSynchronizeWithIdentifier:container:]",
    "type": "CPP"
  },
  {
    "name": "t ___58-[_CFXPreferences appSynchronizeWithIdentifier:container:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource synchronize]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource alreadylocked_requestNewData]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource synchronize]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource synchronize]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString isEqualToString:]",
    "type": "CPP"
  },
  {
    "name": "T ___CFStartSearchPathEnumeration",
    "type": "CPP"
  },
  {
    "name": "t -[NSEnumerator countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "T ___CFGetNextSearchPathEnumeration",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray arrayWithArray:]",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyFromTablesForURL",
    "type": "CPP"
  },
  {
    "name": "t ____useUnsafeUnretainedTables_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFURLHash",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString fastestEncoding]",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleGetBundleWithIdentifier",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleGetFromTables",
    "type": "CPP"
  },
  {
    "name": "T ___CFSetLastAllocationEventName",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayGetFirstIndexOfValue",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayRemoveValueAtIndex",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache setEvictsObjectsWithDiscardedContent:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache setCountLimit:]",
    "type": "CPP"
  },
  {
    "name": "T ___CFBinaryPlistGetOffsetForValueFromDictionary3",
    "type": "CPP"
  },
  {
    "name": "T ___CFBinaryPlistCreateObject",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectSetI countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "T ___CFBinaryPlistGetOffsetForValueFromArray2",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray lastObject]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectSetI containsObject:]",
    "type": "CPP"
  },
  {
    "name": "T __CFCreateArrayStorage",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray _initByAdoptingBuffer:count:size:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSArrayI_transferNew",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString classForCoder]",
    "type": "CPP"
  },
  {
    "name": "T ___CFStringMtbl",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI_Transfer count]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary initWithObjects:forKeys:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI_Transfer getObjects:range:]",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionaryRemoveValue",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI_Transfer dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM removeLastObject]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM removeObjectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM removeObjectsInRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectSetI dealloc]",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray arrayWithObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString characterAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "T __CFStringCheckAndGetCharacterAtIndex",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber unsignedIntegerValue]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber unsignedLongValue]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean boolValue]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache objectForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString UTF8String]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray initWithArray:]",
    "type": "CPP"
  },
  {
    "name": "t ___initWithArrayDontCopyItems",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray reverseObjectEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayReverseEnumerator initWithObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayReverseEnumerator nextObject]",
    "type": "CPP"
  },
  {
    "name": "t ___NSCacheKeyEqual",
    "type": "CPP"
  },
  {
    "name": "t ___24-[NSCache objectForKey:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache evictsObjectsWithDiscardedContent]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderSet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderSet initWithCapacity:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet setWithObject:]",
    "type": "CPP"
  },
  {
    "name": "t ___createSet",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM removeObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM dealloc]",
    "type": "CPP"
  },
  {
    "name": "t ___RELEASE_OBJECTS_IN_THE_SET__",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM containsObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM addObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet allObjects]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM getObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObjcObserverRegistration observer]",
    "type": "CPP"
  },
  {
    "name": "T __NSObjectLoadWeak",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationTokenRefEqual",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationTokenRefHash",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString isEqualToString:]",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopSourceGetContext",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopSourceEqual",
    "type": "CPP"
  },
  {
    "name": "t -[__NSGlobalBlock copy]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSGlobalBlock retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSGlobalBlock release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSMallocBlock retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSMallocBlock release]",
    "type": "CPP"
  },
  {
    "name": "t +[NSDictionary dictionaryWithObject:forKey:]",
    "type": "CPP"
  },
  {
    "name": "t ___createDictionary",
    "type": "CPP"
  },
  {
    "name": "t +[NSMethodSignature signatureWithObjCTypes:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSMS1",
    "type": "CPP"
  },
  {
    "name": "t ___NSGetSizeAndAlignment",
    "type": "CPP"
  },
  {
    "name": "t ___NSMethodFrameArgInfoDestroy",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature _typeString]",
    "type": "CPP"
  },
  {
    "name": "T __CFAutoreleasePoolAddObject",
    "type": "CPP"
  },
  {
    "name": "t _typeStringHash",
    "type": "CPP"
  },
  {
    "name": "T _CFStringHashCString",
    "type": "CPP"
  },
  {
    "name": "t _typeStringRetain",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature _argInfo:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature numberOfArguments]",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet setWithObjects:]",
    "type": "CPP"
  },
  {
    "name": "t _____NSSetI_new_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature _signatureForBlockAtArgumentIndex:]",
    "type": "CPP"
  },
  {
    "name": "t _typeStringEqual",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature _classForObjectAtArgumentIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI containsObject:]",
    "type": "CPP"
  },
  {
    "name": "t ___27-[__NSSetI containsObject:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___forwarding_prep_0___",
    "type": "CPP"
  },
  {
    "name": "t ____forwarding___",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature _frameDescriptor]",
    "type": "CPP"
  },
  {
    "name": "t +[NSInvocation _invocationWithMethodSignature:frame:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature frameLength]",
    "type": "CPP"
  },
  {
    "name": "t ___magic_cookie_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation methodSignature]",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation selector]",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation getArgument:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSI1",
    "type": "CPP"
  },
  {
    "name": "t ___NSI0",
    "type": "CPP"
  },
  {
    "name": "t -[NSBlock copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSGlobalBlock copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString UTF8String]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString isNSString__]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerStringCStringContainer release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI copy]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSMS6",
    "type": "CPP"
  },
  {
    "name": "t +[NSInvocation invocationWithMethodSignature:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSData supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation _addAttachedObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation setArgument:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSICreateBackingForArgumentIfNeeded",
    "type": "CPP"
  },
  {
    "name": "t ___NSI2",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation setTarget:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation invoke]",
    "type": "CPP"
  },
  {
    "name": "t ___invoking___",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature methodReturnType]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSKindOfAdditions) isNSNumber__]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSKindOfAdditions) isNSDate__]",
    "type": "CPP"
  },
  {
    "name": "T __NSIsNSObject",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSKindOfAdditions) isNSObject__]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM removeAllObjects]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString appendFormat:]",
    "type": "CPP"
  },
  {
    "name": "T __CFStringAppendFormatAndArgumentsAux2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString appendString:]",
    "type": "CPP"
  },
  {
    "name": "T ___CFStringCheckAndReplace",
    "type": "CPP"
  },
  {
    "name": "t -[__NSStackBlock retain]",
    "type": "CPP"
  },
  {
    "name": "t _validatePointerBoundary",
    "type": "CPP"
  },
  {
    "name": "t ___NSMS3a_x86_64",
    "type": "CPP"
  },
  {
    "name": "t ___NSMS3b_x86_64",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI keyEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSFastEnumerationEnumerator allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFastEnumerationEnumerator initWithObject:]",
    "type": "CPP"
  },
  {
    "name": "t ___48-[__NSFastEnumerationEnumerator initWithObject:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSEnumerator allObjects]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFastEnumerationEnumerator nextObject]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "t _____CFHandleFinishedEnumerating_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFastEnumerationEnumerator dealloc]",
    "type": "CPP"
  },
  {
    "name": "t +[NSDictionary(NSSharedKeySetDictionary) sharedKeySetForKeys:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSSharedKeySet keySetWithKeys:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet initWithKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI count]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI dealloc]",
    "type": "CPP"
  },
  {
    "name": "t _compareHashesAscending",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSKGraph initWithNumberOfVertices:numberOfEdges:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSKGraph addEdgeWithH1:withH2:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSKGraph isAcyclic]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSKGraph isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSKGraph numOfEdges]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSKGraph dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature _protocolsForObjectAtArgumentIndex:]",
    "type": "CPP"
  },
  {
    "name": "t _cow_copy_instance",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet setWithArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet initWithArray:range:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI mutableCopy]",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray arrayWithObjects:]",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopPerformBlock",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopWakeUp",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet setByAddingObjectsFromArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSStackBlock release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI getObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray arrayWithObject:]",
    "type": "CPP"
  },
  {
    "name": "t ___createArray",
    "type": "CPP"
  },
  {
    "name": "T __CFURLRegisterFilePropertyProvider",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet setWithObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__RegisterFilePropertyProvider_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFURLRegisterFilePropertyWithOptions",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__RegisterFilePropertyWithOptions_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T ___CFURLSetResourceInfoPtr",
    "type": "CPP"
  },
  {
    "name": "T __CFURLFileCacheGetPropertyValueForKey",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FileCacheGetPropertyValueForKey_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ______forwarding____block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[NSInvocation requiredStackSizeForSignature:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation _initWithMethodSignature:frame:buffer:size:]",
    "type": "CPP"
  },
  {
    "name": "T _CFArraySortValues",
    "type": "CPP"
  },
  {
    "name": "T _CFQSortArray",
    "type": "CPP"
  },
  {
    "name": "T _CFSortIndexes",
    "type": "CPP"
  },
  {
    "name": "t ___CFSimpleMergeSort",
    "type": "CPP"
  },
  {
    "name": "t ___CFQSortArray_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFArrayCompareValues",
    "type": "CPP"
  },
  {
    "name": "t +[NSURL supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCopyPath",
    "type": "CPP"
  },
  {
    "name": "t _URLPathToPOSIXPath",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateStringByReplacingPercentEscapesUsingEncoding",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber unsignedLongLongValue]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSKindOfAdditions) isNSCFConstantString__]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString _fastCStringContents:]",
    "type": "CPP"
  },
  {
    "name": "T __CFNonObjCStringGetCStringPtr",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFConstantString isNSCFConstantString__]",
    "type": "CPP"
  },
  {
    "name": "T __CFURLFileCacheGetFlags",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FileCacheGetFlags_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFURLFileCacheGetName",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FileCacheGetName_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM copy]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString lowercaseStringWithLocale:]",
    "type": "CPP"
  },
  {
    "name": "T __CFURLFileCacheSetPropertyValueForKey",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FileCacheSetPropertyValueForKey_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFDataEqual",
    "type": "CPP"
  },
  {
    "name": "T _CFDataAppendBytes",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI copy]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI objectForKeyedSubscript:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenArrayM mutableCopy]",
    "type": "CPP"
  },
  {
    "name": "t _cow_copy_storage",
    "type": "CPP"
  },
  {
    "name": "t _cow_set_cow",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenArrayM dealloc]",
    "type": "CPP"
  },
  {
    "name": "T _CFSetSetValue",
    "type": "CPP"
  },
  {
    "name": "T _CFUUIDCreateFromUUIDBytes",
    "type": "CPP"
  },
  {
    "name": "t ___CFUUIDCreateWithBytesPrimitive",
    "type": "CPP"
  },
  {
    "name": "t _____CFUUIDCreateWithBytesPrimitive_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFhashUUIDBytes",
    "type": "CPP"
  },
  {
    "name": "T _CFHashBytes",
    "type": "CPP"
  },
  {
    "name": "T _CFUUIDCreateString",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateWithBytesNoCopy",
    "type": "CPP"
  },
  {
    "name": "t ___rehashs",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM removeObjectForKey:]",
    "type": "CPP"
  },
  {
    "name": "t _mdict_removeObjectForKey",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenArrayM count]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenArrayM objectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "T __CFURLGetObjectInformationNoIO",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLGetObjectInformationNoIO_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCopyResourcePropertyValuesAndFlags",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLCopyResourcePropertyValuesAndFlags_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[NSURL resourceValuesForKeys:fromBookmarkData:]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateResourcePropertiesForKeysFromBookmarkData",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__CFURLCreateResourcePropertiesForKeysFromBookmarkData_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenDictionaryM objectForKeyedSubscript:]",
    "type": "CPP"
  },
  {
    "name": "T __CFCopySystemVersionDictionary",
    "type": "CPP"
  },
  {
    "name": "t ____CFCopySystemVersionDictionary_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFCopyVersionDictionary",
    "type": "CPP"
  },
  {
    "name": "t __CFCopyLocalizedVersionKey",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyLocalizedString",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyLocalizedStringForLocalization",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleGetStringsFilesShared",
    "type": "CPP"
  },
  {
    "name": "t __CFDataCreateFromURL",
    "type": "CPP"
  },
  {
    "name": "t ___CFBundleCopyLocalizedStringForLocalization_block_invoke.10",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleLocalizedStringLogger",
    "type": "CPP"
  },
  {
    "name": "t ____CFBundleLocalizedStringLogger_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateFromFileSystemRepresentationRelativeToBase",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenDictionaryM mutableCopy]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI mutableCopy]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary addEntriesFromDictionary:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleEntryDictionaryI mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateCopyDeletingLastPathComponent",
    "type": "CPP"
  },
  {
    "name": "t +[NSDictionary dictionary]",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32r40r",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionary0 autorelease]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary __apply:context:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary enumerateKeysAndObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSDictionaryParameterCheckIterate",
    "type": "CPP"
  },
  {
    "name": "t ___NSDictionaryEnumerate",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCopyResourcePropertyForKeyFromCache",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLCopyResourcePropertyForKeyFromCache_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL getResourceValue:forKey:error:]",
    "type": "CPP"
  },
  {
    "name": "T ___CFURLBeginResourcePropertyCacheAccess",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLBeginResourcePropertyCacheAccess_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T ___CFURLEndResourcePropertyCacheAccess",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLEndResourcePropertyCacheAccess_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCreateUnique",
    "type": "CPP"
  },
  {
    "name": "T _CFURLSetTemporaryResourcePropertyForKey",
    "type": "CPP"
  },
  {
    "name": "t ___CFCoreServicesInternal__FSURLSetResourcePropertyForKey",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLSetResourcePropertyForKey_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFAutorelease",
    "type": "CPP"
  },
  {
    "name": "t ___CFBundleDeallocate",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleUnloadExecutable",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleDeallocatePlugIn",
    "type": "CPP"
  },
  {
    "name": "t ___CFBundleGetPlugInData",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationDistributedTokenQueueRegistration setQueue:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar acquireName:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationNameRegistration acquireObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObjectRegistration initWithObject:parent:]",
    "type": "CPP"
  },
  {
    "name": "t +[_CFXNotificationObjectRegistration childClass]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObjectRegistration key]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObjectRegistration acquireObserver:options:]",
    "type": "CPP"
  },
  {
    "name": "t +[_CFXNotificationNameRegistration childClass]",
    "type": "CPP"
  },
  {
    "name": "T _NSGetSizeAndAlignment",
    "type": "CPP"
  },
  {
    "name": "t ___hashPtr",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM indexOfObjectIdenticalTo:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSObject) description]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray description]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray descriptionWithLocale:indent:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSKindOfAdditions) isNSDictionary__]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSKindOfAdditions) isNSArray__]",
    "type": "CPP"
  },
  {
    "name": "T __NSIsNSData",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSKindOfAdditions) isNSData__]",
    "type": "CPP"
  },
  {
    "name": "t ___40-[NSArray descriptionWithLocale:indent:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T ___CFSafelyReallocateWithAllocator",
    "type": "CPP"
  },
  {
    "name": "T _CFAllocatorReallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorSystemReallocate",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectArrayI firstObject]",
    "type": "CPP"
  },
  {
    "name": "T __CFRunLoopCurrentIsMain",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopObserverCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopAddObserver",
    "type": "CPP"
  },
  {
    "name": "T _CFUUIDGetTypeID",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber floatValue]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber doubleValue]",
    "type": "CPP"
  },
  {
    "name": "T __CFAppVersionCheck",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayReverseEnumerator dealloc]",
    "type": "CPP"
  },
  {
    "name": "T __CFGetPathExtensionRangesFromPathComponentUniChars",
    "type": "CPP"
  },
  {
    "name": "t +[NSDictionary dictionaryWithObjectsAndKeys:]",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyLoadedImagePathForPointer",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleEnsureBundleExistsForImagePath",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCopyFrameworkURLForExecutablePath",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateMutableWithExternalCharactersNoCopy",
    "type": "CPP"
  },
  {
    "name": "t __CFLengthAfterDeletingPathExtension",
    "type": "CPP"
  },
  {
    "name": "t __CFStartOfPathExtension",
    "type": "CPP"
  },
  {
    "name": "T _CFStringSetExternalCharactersNoCopy",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCouldBeBundle",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleDlfcnCheckLoaded",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyExecutableURL",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyExecutableURLInDirectory2",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyExecutableURLRaw",
    "type": "CPP"
  },
  {
    "name": "t ___CFgetenvIfNotRestricted",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM objectAtIndexedSubscript:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString hasSuffix:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray subarrayWithRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI objectAtIndexedSubscript:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSNull null]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet initWithArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionary0 objectForKey:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFBundleCopyLocalizedStringForLocalization_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetCreateWithCharactersInString",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet retain]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringFindCharacterFromSet",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetInitInlineBuffer",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString substringWithRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary objectForKey:]",
    "type": "CPP"
  },
  {
    "name": "t _comparisonUsingOrdering",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache setMinimumObjectCount:]",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyPreferredLocalizationsFromArray",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDictionary initWithContentsOfURL:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray count]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray getObjects:range:]",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayCreateMutableCopy",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray initWithArray:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray initWithObjects:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray addObjectsFromArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM _mutate]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObjectsFromArray:range:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectArrayI getObjects:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray initWithArray:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet release]",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashReplaceValue",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM keyEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM removeAllObjects]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenDictionaryM countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray componentsJoinedByString:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary allKeys]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM mutableCopy]",
    "type": "CPP"
  },
  {
    "name": "T _CFAllocatorCreate",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString replaceOccurrencesOfString:withString:options:range:]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringFindAndReplace",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI_Transfer objectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber integerValue]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber longValue]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringReplaceAll",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCapitalize",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSMutableArray arrayWithCapacity:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObject:]",
    "type": "CPP"
  },
  {
    "name": "T __CFPropertyListCopyShared",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore__CSGetNamedData_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFLookupCarbonCoreFunction",
    "type": "CPP"
  },
  {
    "name": "t _____CFLookupCarbonCoreFunction_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFFrozenPlistCreateThawedItem",
    "type": "CPP"
  },
  {
    "name": "T _CFSetCreate",
    "type": "CPP"
  },
  {
    "name": "T __CFIsObjC",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber unsignedIntValue]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLGetBytes",
    "type": "CPP"
  },
  {
    "name": "T _CFURLGetByteRangeForComponent",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCopyFragment",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateArrayBySeparatingStrings",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateArrayWithFindResults",
    "type": "CPP"
  },
  {
    "name": "T __CFIsDeallocating",
    "type": "CPP"
  },
  {
    "name": "T __CFTryRetain",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL isFileReferenceURL]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFSet classForCoder]",
    "type": "CPP"
  },
  {
    "name": "T __CFSetIsMutable",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFSet count]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFSet getObjects:]",
    "type": "CPP"
  },
  {
    "name": "T _CFSetGetValues",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashGetElements",
    "type": "CPP"
  },
  {
    "name": "t +[NSNull supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "t +[NSNull allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSNull autorelease]",
    "type": "CPP"
  },
  {
    "name": "t -[NSNull retain]",
    "type": "CPP"
  },
  {
    "name": "t -[NSNull release]",
    "type": "CPP"
  },
  {
    "name": "t ___rangeRetain",
    "type": "CPP"
  },
  {
    "name": "t ___rangeRelease",
    "type": "CPP"
  },
  {
    "name": "t ___alreadylocked_requestNewDataIfStale_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource alreadylocked_requestNewData]",
    "type": "CPP"
  },
  {
    "name": "t ___50-[CFPrefsPlistSource alreadylocked_requestNewData]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource sendRequestNewDataMessage:toConnection:retryCount:error:]",
    "type": "CPP"
  },
  {
    "name": "t _CFPREFERENCES_IS_WAITING_FOR_USER_CFPREFSD",
    "type": "CPP"
  },
  {
    "name": "t ___78-[CFPrefsPlistSource sendRequestNewDataMessage:toConnection:retryCount:error:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFToMacRoman",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsRegisterUserDefaultsInstance",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsRegisterUserDefaultsInstanceWithCloudConfigurationURL",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences registerUserDefaultsInstance:configurationURL:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSUserDefaults _identifier]",
    "type": "CPP"
  },
  {
    "name": "t -[NSUserDefaults _container]",
    "type": "CPP"
  },
  {
    "name": "t ___65-[_CFXPreferences registerUserDefaultsInstance:configurationURL:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSUserDefaults _observingCFPreferences]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource addPreferencesObserver:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource alreadylocked_reloadCacheIfStale]",
    "type": "CPP"
  },
  {
    "name": "t ___59-[CFPrefsSearchListSource alreadylocked_reloadCacheIfStale]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource alreadylocked_addPreferencesObserver:]",
    "type": "CPP"
  },
  {
    "name": "t -[__CFPrefsWeakObservers init]",
    "type": "CPP"
  },
  {
    "name": "t -[__CFPrefsWeakObservers addObject:]",
    "type": "CPP"
  },
  {
    "name": "t _visit",
    "type": "CPP"
  },
  {
    "name": "t ___36-[__CFPrefsWeakObservers addObject:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource alreadylocked_updateObservingRemoteChanges]",
    "type": "CPP"
  },
  {
    "name": "t -[__CFPrefsWeakObservers approximateCount]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource alreadylocked_setObservingContents:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource alreadylocked_updateObservingRemoteChanges]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource isVolatile]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource alreadylocked_createObserverUpdateMessageWithOperation:forRole:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource alreadylocked_createObserverUpdateMessageWithOperation:forRole:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet unionSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM _mutate]",
    "type": "CPP"
  },
  {
    "name": "T __NSIsNSSet",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet isNSSet__]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectSetI count]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectSetI getObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectSetI countForObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString _newSubstringWithRange:zone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleEntryDictionaryI keyEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectEnumerator initWithObject:collection:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectEnumerator nextObject]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray enumerateObjectsUsingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM enumerateObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSARRAY_IS_CALLING_OUT_TO_A_BLOCK__",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray descriptionWithLocale:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringsDictMergeApplyFunction",
    "type": "CPP"
  },
  {
    "name": "t ___CFPlatformSpecificStringDictionaryApplyFunction",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocalizedFormatStringApplyFunction",
    "type": "CPP"
  },
  {
    "name": "t __CFStringCopyWithFomatStringConfiguration",
    "type": "CPP"
  },
  {
    "name": "t ___CFLookUpClass",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFVariableWidthStringDictionaryApplyFunction",
    "type": "CPP"
  },
  {
    "name": "t __CFStringHasStrongRTL",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet makeObjectsPerformSelector:]",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetGetPredefined",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet characterIsMember:]",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetIsCharacterMember",
    "type": "CPP"
  },
  {
    "name": "T _CFUniCharIsMemberOf",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString uppercaseStringWithLocale:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray makeObjectsPerformSelector:withObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectEnumerator dealloc]",
    "type": "CPP"
  },
  {
    "name": "t ___CFTSDFinalize",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationNameRegistration find:observer:matching:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObjectRegistration find:matching:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObjcObserverRegistration find:]",
    "type": "CPP"
  },
  {
    "name": "T __NSObjectLoadWeakRetained",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObserverRegistration find:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenRegistration isRegistered]",
    "type": "CPP"
  },
  {
    "name": "t ____CFXNotificationPost_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationTokenRegistrationCopyObserver",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationBase parent]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObjcObserverRegistration retainedObserver]",
    "type": "CPP"
  },
  {
    "name": "t __CFXRegistrationPost1",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenRegistration queue]",
    "type": "CPP"
  },
  {
    "name": "t ____CFXRegistrationPost1_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenRegistration copyHandler]",
    "type": "CPP"
  },
  {
    "name": "t ___CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__",
    "type": "CPP"
  },
  {
    "name": "T _CFNotificationCenterPostNotificationWithOptions",
    "type": "CPP"
  },
  {
    "name": "t -[__CFNotification initWithName:object:userInfo:foundation:]",
    "type": "CPP"
  },
  {
    "name": "t -[__CFNotification name]",
    "type": "CPP"
  },
  {
    "name": "t -[__CFNotification object]",
    "type": "CPP"
  },
  {
    "name": "t -[__CFNotification userInfo]",
    "type": "CPP"
  },
  {
    "name": "T _CFPropertyListCreateData",
    "type": "CPP"
  },
  {
    "name": "T _CFPropertyListCreateXMLData",
    "type": "CPP"
  },
  {
    "name": "t __plistAppendCharacters",
    "type": "CPP"
  },
  {
    "name": "t __CFAppendXML0",
    "type": "CPP"
  },
  {
    "name": "t __appendEscapedString",
    "type": "CPP"
  },
  {
    "name": "t __plistAppendFormat",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateWithFormatAndArguments",
    "type": "CPP"
  },
  {
    "name": "t ___CFNumberCopyFormattingDescription",
    "type": "CPP"
  },
  {
    "name": "t _emit128",
    "type": "CPP"
  },
  {
    "name": "t __plistAppendString",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateExternalRepresentation",
    "type": "CPP"
  },
  {
    "name": "t __CFDataCreateDispatchData",
    "type": "CPP"
  },
  {
    "name": "t ____CFDataCreateDispatchData_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__CFNotification dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString compare:options:range:locale:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenArrayM countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "T __CFAppVersionLessThan",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject(NSObject) instanceMethodSignatureForSelector:]",
    "type": "CPP"
  },
  {
    "name": "t ___methodDescriptionForSelector",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature methodReturnLength]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenArrayM enumerateObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray enumerateObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSArrayParameterCheckIterate",
    "type": "CPP"
  },
  {
    "name": "t ___NSArrayEnumerate",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI enumerateObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber intValue]",
    "type": "CPP"
  },
  {
    "name": "T __CFUserNotificationSetWarningThread",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopObserverCreateWithHandler",
    "type": "CPP"
  },
  {
    "name": "t +[NSDate distantFuture]",
    "type": "CPP"
  },
  {
    "name": "t +[NSDate distantPast]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate isEqualToDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDate timeIntervalSinceReferenceDate]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate timeIntervalSinceNow]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateCopyAppendingPathComponent",
    "type": "CPP"
  },
  {
    "name": "T _CFStringInsert",
    "type": "CPP"
  },
  {
    "name": "T _CFErrorCreate",
    "type": "CPP"
  },
  {
    "name": "t __CFErrorCreateEmptyDictionary",
    "type": "CPP"
  },
  {
    "name": "T _CFErrorCreateWithUserInfoKeysAndValues",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFError retain]",
    "type": "CPP"
  },
  {
    "name": "t ___CFErrorDeallocate",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFError release]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateCopyAppendingPathExtension",
    "type": "CPP"
  },
  {
    "name": "T __CFExtensionIsValidToAppend",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray initWithContentsOfURL:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFData length]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFData bytes]",
    "type": "CPP"
  },
  {
    "name": "t __CFDataGetBytePtrNonObjC",
    "type": "CPP"
  },
  {
    "name": "t __cfmp_record_intent_to_invalidate",
    "type": "CPP"
  },
  {
    "name": "t ____cfmp_records_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __cfmp_hash",
    "type": "CPP"
  },
  {
    "name": "t __cfmp_deallocation_record_retain",
    "type": "CPP"
  },
  {
    "name": "t ____CFMachPortQueue_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFMachPortSetInvalidationCallBack",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopSourceSignal",
    "type": "CPP"
  },
  {
    "name": "t _CFPREFERENCES_IS_WAITING_FOR_SYSTEM_CFPREFSD",
    "type": "CPP"
  },
  {
    "name": "T _CFMessagePortCreatePerProcessLocal",
    "type": "CPP"
  },
  {
    "name": "t ___CFMessagePortCreateLocal",
    "type": "CPP"
  },
  {
    "name": "t ___CFMessagePortCreateSanitizedStringName",
    "type": "CPP"
  },
  {
    "name": "T _CFMachPortCreate",
    "type": "CPP"
  },
  {
    "name": "t __cfmp_equal",
    "type": "CPP"
  },
  {
    "name": "T _CFMessagePortCreateRunLoopSource",
    "type": "CPP"
  },
  {
    "name": "T _CFMessagePortIsValid",
    "type": "CPP"
  },
  {
    "name": "t ___CFMessagePortGetPort",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardCreate",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardLogInit_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache init]",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardCreate_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardSetupInstance",
    "type": "CPP"
  },
  {
    "name": "t __CFPBXPCSendMessageWithReplySync",
    "type": "CPP"
  },
  {
    "name": "t ___CFisEqualUUIDBytes",
    "type": "CPP"
  },
  {
    "name": "t __CFPasteboardAccessPasteboardMap",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardSetupInstance_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardWeakRef initWithPasteboard:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFType _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFType hash]",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardRecognizeGenerationChange",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache clearForGeneration:]",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayRemoveAllValues",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM removeAllObjects]",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionaryRemoveAllValues",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashRemoveAllValues",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache setChangeCount:]",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardGetGenerationCount",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardGetGenerationCount_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardUpdateCacheCounts",
    "type": "CPP"
  },
  {
    "name": "T _CFUUIDGetUUIDBytes",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache generation]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache changeCount]",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardCopyData",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFType description]",
    "type": "CPP"
  },
  {
    "name": "t ___CFUUIDCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardCopyData_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardRebuildCacheIfNecessary",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardRebuildCache_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache entryForGeneration:itemIdentifier:flavor:errorCode:]",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleCopyPreferredLanguages",
    "type": "CPP"
  },
  {
    "name": "T __CFLocaleCopyPreferredLanguagesForCurrentUser",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyResourceURLInDirectory",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyLanguageSearchListInDirectory",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyInfoDictionaryInDirectory",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary __getValue:forKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary isEqualToDictionary:]",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardRebuildCache_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry initFromXPCObject:fromConnection:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache addEntry:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry itemIdentifier]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry flavorName]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry hasData]",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardRequestDataFromDaemon",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry createXPCObjectWithMetadataOnly:]",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40r48r56r",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32r40r48r",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry extensionConsumed]",
    "type": "CPP"
  },
  {
    "name": "t _____kCFPasteboardFilenamesFlavor_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet _mutate]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet getObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFSet countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "T __CFSetFastEnumeration",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashFastEnumeration",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet countForObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFSet member:]",
    "type": "CPP"
  },
  {
    "name": "T _CFSetGetValueIfPresent",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFSet addObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFSet retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFSet copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFSet release]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary allValues]",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardRequestDataFromDaemon_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopRunInMode",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopRunSpecific",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry createDataAndReturnError:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry dataFlags]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry setData:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry _setLocalPromiseState:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry dealloc]",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40r48r56r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32r40r48r",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayGetCountOfValue",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopModeIsEmpty",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopRun",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopDoObservers",
    "type": "CPP"
  },
  {
    "name": "t ___CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopObserverInvalidate",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopCopyAllModes",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopGetModeName",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopRemoveObserver",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopRemoveItemFromCommonModes",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopObserverCancel",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopObserverDeallocate",
    "type": "CPP"
  },
  {
    "name": "t __runLoopObserverWithBlockContext",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopDoBlocks",
    "type": "CPP"
  },
  {
    "name": "t ___CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary objectForKeyedSubscript:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopDoSources0",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopCollectSources0",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopDoSource0",
    "type": "CPP"
  },
  {
    "name": "t ___CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__",
    "type": "CPP"
  },
  {
    "name": "T __CFMachPortCopyCurrentBoost",
    "type": "CPP"
  },
  {
    "name": "T ___CFMachMessageCheckForAndDestroyUnsentMessage",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopServiceMachPort",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopDoSource1",
    "type": "CPP"
  },
  {
    "name": "t ___CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray sortedArrayUsingSelector:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray sortedArrayWithOptions:usingComparator:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray sortedArrayFromRange:options:usingComparator:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray sortedArrayFromRange:options:usingComparator:]",
    "type": "CPP"
  },
  {
    "name": "t ___56-[NSArray sortedArrayFromRange:options:usingComparator:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___36-[NSArray sortedArrayUsingSelector:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFRunLoopGet2",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopCopyCurrentMode",
    "type": "CPP"
  },
  {
    "name": "t ___61-[_CFXNotificationRegistrar find:object:observer:enumerator:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFXNotificationRemoveObservers",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar match:object:observer:enumerator:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationNameRegistration match:observer:matching:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObjectRegistration match:matching:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObserverRegistration match:]",
    "type": "CPP"
  },
  {
    "name": "t ____CFXNotificationRemoveObservers_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar remove:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar invalidate:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenRegistration removeFromParent:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenRegistration invalidate]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationBase removeFromParent:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationContainer removeChild:token:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenRegistration dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationBase dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationBase .cxx_destruct]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleEntryDictionaryI enumerateKeysAndObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[__CFPrefsWeakObservers borrowObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t ___46-[__CFPrefsWeakObservers borrowObjects:count:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___83-[CFPrefsSource setValues:forKeys:count:copyValues:removeValuesForKeys:count:from:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource domainIdentifier]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource handleChangeNotificationForDomainIdentifier:isRemote:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource generationCount]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource deferredNotifyCausedByLoadingOfChangesFromDictionary:toDictionary:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPrefsPendingKVONotification setSource:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPrefsPendingKVONotification setValues:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPrefsPendingKVONotification setOldValues:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource _getPendingNotifications]",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsDeliverPendingKVONotificationsGuts",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPrefsPendingKVONotification source]",
    "type": "CPP"
  },
  {
    "name": "t ___CFDictionaryApplyFunction_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsDeliverPendingKVONotificationsGuts_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPrefsPendingKVONotification oldValues]",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsDeliverPendingKVONotificationsGuts_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPrefsPendingKVONotification values]",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsDeliverPendingKVONotificationsGuts_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource _notifyObserversOfChangeFromValuesForKeys:toValuesForKeys:]",
    "type": "CPP"
  },
  {
    "name": "t ___75-[CFPrefsSource _notifyObserversOfChangeFromValuesForKeys:toValuesForKeys:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM enumerateKeysAndObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPrefsPendingKVONotification dealloc]",
    "type": "CPP"
  },
  {
    "name": "t +[NSFileSecurity allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSPlaceholderFileSecurity immutablePlaceholder]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderFileSecurity init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderFileSecurity initWithFileSec:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSFileSecurity __new:]",
    "type": "CPP"
  },
  {
    "name": "T _CFFileSecuritySetAccessControlList",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity setAccessControlList:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL setResourceValue:forKey:error:]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLSetResourcePropertyForKey",
    "type": "CPP"
  },
  {
    "name": "T _CFFileSecurityCopyAccessControlList",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity copyAccessControlList:]",
    "type": "CPP"
  },
  {
    "name": "T _CFFileSecurityGetOwner",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity getOwner:]",
    "type": "CPP"
  },
  {
    "name": "T _CFFileSecurityGetGroup",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity getGroup:]",
    "type": "CPP"
  },
  {
    "name": "T _CFFileSecurityGetMode",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity getMode:]",
    "type": "CPP"
  },
  {
    "name": "T _CFFileSecurityCopyOwnerUUID",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity getOwnerUUID:]",
    "type": "CPP"
  },
  {
    "name": "T _CFFileSecurityCopyGroupUUID",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity getGroupUUID:]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLEnumeratorCreateForDirectoryURL",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__URLEnumeratorCreateForDirectoryURL_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray hash]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLEnumeratorGetNextURL",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__URLEnumeratorGetNextURL_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL resourceValuesForKeys:error:]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCopyResourcePropertiesForKeys",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLCopyResourcePropertiesForKeys_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber description]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber descriptionWithLocale:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet anyObject]",
    "type": "CPP"
  },
  {
    "name": "t _____CFXNotificationCenterSetupConnection_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFXNotificationPostToken",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar find:]",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40o48o",
    "type": "CPP"
  },
  {
    "name": "t ___CFXPCDictionaryApplier",
    "type": "CPP"
  },
  {
    "name": "t +[NSDictionary dictionaryWithDictionary:]",
    "type": "CPP"
  },
  {
    "name": "T _CFDataGetBytes",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature getArgumentTypeAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM mutableCopy]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDate retain]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray arrayByAddingObjectsFromArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDate release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber boolValue]",
    "type": "CPP"
  },
  {
    "name": "t +[NSDate timeIntervalSinceReferenceDate]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet setByAddingObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache setDelegate:]",
    "type": "CPP"
  },
  {
    "name": "T _CFMakeCollectable",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCreate",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsSetScheme",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsSchemeIsValid",
    "type": "CPP"
  },
  {
    "name": "t __CFURIParserAlphaAllowed",
    "type": "CPP"
  },
  {
    "name": "t __CFURIParserValidateComponent",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsSetPath",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsGetURLPathAllowedCharacterSet",
    "type": "CPP"
  },
  {
    "name": "t ___InitializeURLAllowedCharacterSets_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetCreateMutable",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetAddCharactersInString",
    "type": "CPP"
  },
  {
    "name": "t ___CFCSetMakeBitmap",
    "type": "CPP"
  },
  {
    "name": "t ___CFCSetGetBitmap",
    "type": "CPP"
  },
  {
    "name": "t ___CFCSetMakeCompact",
    "type": "CPP"
  },
  {
    "name": "t ___CFCreateCompactBitmap",
    "type": "CPP"
  },
  {
    "name": "T __CFStringCreateByAddingPercentEncodingWithAllowedCharacters",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCopyURL",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCopyURLRelativeToURL",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCopyString",
    "type": "CPP"
  },
  {
    "name": "t ___CFURLComponentsDeallocate",
    "type": "CPP"
  },
  {
    "name": "T _CFPreferencesSetAppValue",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesSetAppValueWithContainerAndConfiguration",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences setValue:forKey:appIdentifier:container:configurationURL:]",
    "type": "CPP"
  },
  {
    "name": "t ___76-[_CFXPreferences setValue:forKey:appIdentifier:container:configurationURL:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource setValue:forKey:from:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource alreadylocked_setPrecopiedValues:forKeys:count:from:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource alreadylocked_setPrecopiedValues:forKeys:count:from:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource transitionIntoDirectModeIfNeededWithRetryBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource transitionIntoDirectModeIfNeededWithRetryBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource _shouldEnableDirectMode]",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleEnsureBundlesUpToDateWithHint",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleDYLDCopyLoadedImagePathsForHint",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleEnsureBundlesExistForImagePaths",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDictionary initWithContentsOfFile:]",
    "type": "CPP"
  },
  {
    "name": "t _skipXMLComment",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexesOfObjectsPassingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexesOfObjectsWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSArrayGetIndexesPassingTest",
    "type": "CPP"
  },
  {
    "name": "t ___NSARRAY_IS_CALLING_OUT_TO_A_BOOL_BLOCK__",
    "type": "CPP"
  },
  {
    "name": "t ___CFUUIDDeallocate",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleEntryDictionaryI __apply:context:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectsAtIndexes:]",
    "type": "CPP"
  },
  {
    "name": "T __NSIsNSIndexSet",
    "type": "CPP"
  },
  {
    "name": "t ___28-[NSArray objectsAtIndexes:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "t +[NSDate supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationNameWildcardObjectRegistration match:matching:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObjcObserverRegistration dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationContainer dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationContainer invalidate]",
    "type": "CPP"
  },
  {
    "name": "t +[NSMutableDictionary(NSSharedKeySetDictionary) dictionaryWithSharedKeySet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t +[NSSharedKeyDictionary sharedKeyDictionaryWithKeySet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary initWithKeySet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet count]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary setObject:forKeyedSubscript:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary setObject:forKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet indexForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary objectForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArray0 copy]",
    "type": "CPP"
  },
  {
    "name": "T __CFNonObjCEqual",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber stringValue]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectArrayI enumerateObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSMallocBlock _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSMallocBlock _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSOrderedSetImmutablePlaceholder",
    "type": "CPP"
  },
  {
    "name": "t +[__NSPlaceholderOrderedSet initialize]",
    "type": "CPP"
  },
  {
    "name": "t ___39+[__NSPlaceholderOrderedSet initialize]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___NSOrderedSetI_new",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderOrderedSet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderOrderedSet initWithObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL checkResourceIsReachableAndReturnError:]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLResourceIsReachable",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLResourceIsReachable_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexOfObject:inSortedRange:options:usingComparator:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM mutableCopy]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsAtIndexes:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray isEqualToArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM copy]",
    "type": "CPP"
  },
  {
    "name": "t ___NSSetM_copy",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet initWithSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderSet initWithSet:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet initWithSet:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet intersectSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM countForObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSFrozenSetM_mutableCopy",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t __NSSetI_mutableCopyWithZone",
    "type": "CPP"
  },
  {
    "name": "T _CFTreeCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFTreeSetContext",
    "type": "CPP"
  },
  {
    "name": "T _CFTreeFindRoot",
    "type": "CPP"
  },
  {
    "name": "T _CFTreeGetContext",
    "type": "CPP"
  },
  {
    "name": "T _CFTreeGetFirstChild",
    "type": "CPP"
  },
  {
    "name": "T _CFTreeApplyFunctionToChildren",
    "type": "CPP"
  },
  {
    "name": "T _CFTreeRemoveAllChildren",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray sortedArrayUsingComparator:]",
    "type": "CPP"
  },
  {
    "name": "T _CFTreeAppendChild",
    "type": "CPP"
  },
  {
    "name": "T __CFExtensionUniCharsIsValidToAppend",
    "type": "CPP"
  },
  {
    "name": "T _CFTreeGetParent",
    "type": "CPP"
  },
  {
    "name": "T _CFTreeGetNextSibling",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationNameWildcardObjectRegistration find:matching:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray arrayByApplyingSelector:]",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsSetHost",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsGetURLHostAllowedCharacterSet",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectAtIndexedSubscript:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingGetExternalConverter",
    "type": "CPP"
  },
  {
    "name": "t ___CFCarbonCore_CreateTextToUnicodeInfoNoInit",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_CreateTextToUnicodeInfoNoInit_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingGetICUName",
    "type": "CPP"
  },
  {
    "name": "t _CFStringEncodingCharLengthForBytes",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingICUCharLength",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingICUToUnicode",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingConverterReleaseICUConverter",
    "type": "CPP"
  },
  {
    "name": "T _CFStringEncodingBytesToUnicode",
    "type": "CPP"
  },
  {
    "name": "t __CFCompareStringsWithLocale",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringCreateCollator",
    "type": "CPP"
  },
  {
    "name": "t ___CompareTextDefault",
    "type": "CPP"
  },
  {
    "name": "t ___extendLocationBackward",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFTimer retain]",
    "type": "CPP"
  },
  {
    "name": "T _CFGregorianDateGetAbsoluteTime",
    "type": "CPP"
  },
  {
    "name": "t ___CFAbsoluteFromYMD",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet addCharactersInRange:]",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetAddCharactersInRange",
    "type": "CPP"
  },
  {
    "name": "t ___CFCSetAddNonBMPPlanesInRange",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet invert]",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetInvert",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetCreateCopy",
    "type": "CPP"
  },
  {
    "name": "t __CFCharacterSetCreateCopy",
    "type": "CPP"
  },
  {
    "name": "t ___CFCharacterSetDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingICUToBytes",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopTimerIsValid",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopTimerGetContext",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet addObjectsFromArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectArrayI lastObject]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate initWithTimeIntervalSinceNow:]",
    "type": "CPP"
  },
  {
    "name": "T __NSIsNSDate",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary hash]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray setArray:]",
    "type": "CPP"
  },
  {
    "name": "T __CFPropertyListShare",
    "type": "CPP"
  },
  {
    "name": "T __CFPropertyListCreateFrozen",
    "type": "CPP"
  },
  {
    "name": "t _countNodes",
    "type": "CPP"
  },
  {
    "name": "t _countDict",
    "type": "CPP"
  },
  {
    "name": "t _freezePlist",
    "type": "CPP"
  },
  {
    "name": "t _freezeDictItems",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore__CSSetNamedData_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[NSDate dateWithTimeIntervalSinceNow:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate timeIntervalSince1970]",
    "type": "CPP"
  },
  {
    "name": "T _CFUUIDCreate",
    "type": "CPP"
  },
  {
    "name": "t ___CFUUIDCreate_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet getObjects:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean intValue]",
    "type": "CPP"
  },
  {
    "name": "T __CFURLPromiseCopyPhysicalURL",
    "type": "CPP"
  },
  {
    "name": "T _CFStringConvertEncodingToIANACharSetName",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingGetCanonicalName",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale preferredLanguages]",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleGetLocalizationInfoForLocalization",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleGetLanguageRegionEncodingForLocaleIdentifier",
    "type": "CPP"
  },
  {
    "name": "t _CompareLocaleToLegacyCodesEntries",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexOfObjectPassingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexOfObjectWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSArrayGetIndexPassingTest",
    "type": "CPP"
  },
  {
    "name": "t __DescriptionWithStringProxyFunc",
    "type": "CPP"
  },
  {
    "name": "t __DescriptionWithLocaleFunc",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString replaceCharactersInRange:withString:]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateFromExternalRepresentation",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectArrayI isEqualToArray:]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateByCombiningStrings",
    "type": "CPP"
  },
  {
    "name": "T _CFTreeRemove",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenArrayM objectAtIndexedSubscript:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary removeObjectsForKeys:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean charValue]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleEntryDictionaryI countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate isEqual:]",
    "type": "CPP"
  },
  {
    "name": "T _CFServiceControllerRegisterProvider",
    "type": "CPP"
  },
  {
    "name": "t _____CFServiceControllerInitialize_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFMessagePortCreateLocal",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDate init]",
    "type": "CPP"
  },
  {
    "name": "T __CFKeyedArchiverUIDCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFArraySetValueAtIndex",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM setObject:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "T ___CFBinaryPlistWriteToStreamWithOptions",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSObject) methodSignatureForSelector:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet containsObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation retainArguments]",
    "type": "CPP"
  },
  {
    "name": "t ___NSI3",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation setSelector:]",
    "type": "CPP"
  },
  {
    "name": "T _CFBagGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFBagGetValue",
    "type": "CPP"
  },
  {
    "name": "T __CFLogvEx3",
    "type": "CPP"
  },
  {
    "name": "t _also_do_stderr",
    "type": "CPP"
  },
  {
    "name": "t __CFLogvEx2Predicate",
    "type": "CPP"
  },
  {
    "name": "t __populateBanner",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation target]",
    "type": "CPP"
  },
  {
    "name": "t __logToStderr",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation argumentsRetained]",
    "type": "CPP"
  },
  {
    "name": "t +[NSDate date]",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsCopyAppDictionaryWithContainer",
    "type": "CPP"
  },
  {
    "name": "T _CFStringUppercase",
    "type": "CPP"
  },
  {
    "name": "t ___NSOrderedSetMutablePlaceholder",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderOrderedSet initWithCapacity:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSOrderedSetM_new",
    "type": "CPP"
  },
  {
    "name": "t ___NSArrayM_transferNew",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString setString:]",
    "type": "CPP"
  },
  {
    "name": "T __cfmp_record_nsmachport_is_interested",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesAppSynchronizeWithContainer",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsSynchronizeForProcessTermination",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences synchronizeEverything]",
    "type": "CPP"
  },
  {
    "name": "T _CFMachPortGetContext",
    "type": "CPP"
  },
  {
    "name": "t ___40-[_CFXPreferences synchronizeEverything]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _synchronizeApplier",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation invokeWithTarget:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM count]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSKindOfAdditions) isNSSet__]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature dealloc]",
    "type": "CPP"
  },
  {
    "name": "t ___NSCacheKeyRelease",
    "type": "CPP"
  },
  {
    "name": "t ___NSCacheValueRelease",
    "type": "CPP"
  },
  {
    "name": "t ___NSCacheCallDelegateWillEvictObjectCallbackWithValue",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM exchangeObjectAtIndex:withObjectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet addCharactersInString:]",
    "type": "CPP"
  },
  {
    "name": "T _CFStreamCreatePairWithSocketToHost",
    "type": "CPP"
  },
  {
    "name": "t _createPair",
    "type": "CPP"
  },
  {
    "name": "t _initializeCFNetworkSupport",
    "type": "CPP"
  },
  {
    "name": "t ___CFLookupCFNetworkFunction",
    "type": "CPP"
  },
  {
    "name": "t _____CFLookupCFNetworkFunction_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet isSubsetOfSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM containsObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM dealloc]",
    "type": "CPP"
  },
  {
    "name": "t ___RELEASE_OBJECTS_IN_THE_ORDEREDSET__",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCopyUserName",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCopyHostName",
    "type": "CPP"
  },
  {
    "name": "T _CFURLGetPortNumber",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCreateWithURL",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCreateWithString",
    "type": "CPP"
  },
  {
    "name": "t __CFURIParserParseURIReference",
    "type": "CPP"
  },
  {
    "name": "t __CFURIParserURLStringIsValid",
    "type": "CPP"
  },
  {
    "name": "t __CFURIParserGetUserinfoNameRange",
    "type": "CPP"
  },
  {
    "name": "t __CFURIParserGetUserinfoPasswordRange",
    "type": "CPP"
  },
  {
    "name": "t __CFURIParserGetPathRange",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCopyScheme",
    "type": "CPP"
  },
  {
    "name": "t __CFURIParserGetSchemeRange",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCopyPercentEncodedUser",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCopyPercentEncodedHost",
    "type": "CPP"
  },
  {
    "name": "t __CFURIParserGetHostRange",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCopyPort",
    "type": "CPP"
  },
  {
    "name": "t __SetValidPortComponent",
    "type": "CPP"
  },
  {
    "name": "t __CFURIParserGetPortRange",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCopyPercentEncodedQuery",
    "type": "CPP"
  },
  {
    "name": "t __CFURIParserGetQueryRange",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCopyPercentEncodedFragment",
    "type": "CPP"
  },
  {
    "name": "t __CFURIParserGetFragmentRange",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCopyParameterString",
    "type": "CPP"
  },
  {
    "name": "t ___CFURLCopyParameterString_block_invoke.38",
    "type": "CPP"
  },
  {
    "name": "t __CFOSLog",
    "type": "CPP"
  },
  {
    "name": "t ____CFOSLog_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCopyQueryString",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI countForObject:]",
    "type": "CPP"
  },
  {
    "name": "t ___27-[__NSSetI countForObject:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI mutableCopy]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet minusSet:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSDate dateWithTimeIntervalSince1970:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM setObject:atIndexedSubscript:]",
    "type": "CPP"
  },
  {
    "name": "t ___104-[CFPrefsSearchListSource synchronouslySendDaemonMessage:andAgentMessage:andDirectMessage:replyHandler:]_block_invoke.123",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamCreate",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream setDelegate:]",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamSetClient",
    "type": "CPP"
  },
  {
    "name": "t __CFStreamSetClient",
    "type": "CPP"
  },
  {
    "name": "t __initializeClient",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream setDelegate:]",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamSetClient",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream setProperty:forKey:]",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamSetProperty",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayAppendArray",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream setProperty:forKey:]",
    "type": "CPP"
  },
  {
    "name": "t __CFGetSlashStr",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamSetProperty",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCreateRelativeURLFromBaseAndPath",
    "type": "CPP"
  },
  {
    "name": "T __CFRunLoopGet0b",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray sortedArrayUsingFunction:context:]",
    "type": "CPP"
  },
  {
    "name": "t ___44-[NSArray sortedArrayUsingFunction:context:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[NSMutableSet setWithCapacity:]",
    "type": "CPP"
  },
  {
    "name": "T _CFMergeSortArray",
    "type": "CPP"
  },
  {
    "name": "t ___CFMergeSortArray_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream open]",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamOpen",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray sortUsingFunction:context:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray sortWithOptions:usingComparator:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray sortRange:options:usingComparator:]",
    "type": "CPP"
  },
  {
    "name": "t ___52-[NSMutableArray sortRange:options:usingComparator:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___44-[NSMutableArray sortUsingFunction:context:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI copy]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean isEqualToNumber:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean compare:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean objCType]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean longLongValue]",
    "type": "CPP"
  },
  {
    "name": "t +[NSMutableDictionary dictionaryWithCapacity:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopDoTimers",
    "type": "CPP"
  },
  {
    "name": "t ____CFEnableMotionHack_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopDoTimer",
    "type": "CPP"
  },
  {
    "name": "t ___CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopTimerInvalidate",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopRemoveTimer",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFTimer release]",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopTimerDeallocate",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionary0 keyEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary description]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary descriptionWithLocale:indent:]",
    "type": "CPP"
  },
  {
    "name": "t ___45-[NSDictionary descriptionWithLocale:indent:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___45-[NSDictionary descriptionWithLocale:indent:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean description]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean descriptionWithLocale:]",
    "type": "CPP"
  },
  {
    "name": "T _CFUniCharMapCaseTo",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary getObjects:andKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray sortUsingSelector:]",
    "type": "CPP"
  },
  {
    "name": "t ___36-[NSMutableArray sortUsingSelector:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary initWithDictionary:]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringAppendFormat",
    "type": "CPP"
  },
  {
    "name": "T _CFStringAppendFormatAndArguments",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray sortUsingComparator:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet array]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetArrayProxy initWithOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetArrayProxy count]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet addObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM _mutate]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM insertObject:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSOrderedSetHashKey",
    "type": "CPP"
  },
  {
    "name": "t ___NSOrderedSetEquateKeys",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexOfObjectIdenticalTo:]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringOpenUText",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringUTextInit",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringClone",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringLength",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringAccess",
    "type": "CPP"
  },
  {
    "name": "t _doAccess",
    "type": "CPP"
  },
  {
    "name": "t ___pinIndex",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringClose",
    "type": "CPP"
  },
  {
    "name": "T __CFDictionaryIsMutable",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberGetByteSize",
    "type": "CPP"
  },
  {
    "name": "t -[NSNull description]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary descriptionWithLocale:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenDictionaryM copy]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray retain]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray objectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "T __CFCreateContainerURLForSecurityApplicationGroupIdentifier",
    "type": "CPP"
  },
  {
    "name": "T __CFCreateContainerURLForSecurityApplicationIdentifierGroupIdentifierAndUser",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource copyOSLogDescription]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource isByHost]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource goVolatileAfterTryingToWriteKeys:values:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource writeFailedForKeys:values:count:]",
    "type": "CPP"
  },
  {
    "name": "T _CFDataDeleteBytes",
    "type": "CPP"
  },
  {
    "name": "T _CFAllocatorGetContext",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary objectForKey:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSCalendar initialize]",
    "type": "CPP"
  },
  {
    "name": "t ___24+[NSCalendar initialize]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[NSCalendar currentCalendar]",
    "type": "CPP"
  },
  {
    "name": "t +[_NSCopyOnWriteCalendarWrapper currentCalendar]",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarCopyCurrent",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCopyCalendarID",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCopyICUKeyword",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleCreateCopy",
    "type": "CPP"
  },
  {
    "name": "t __CFLocaleCreateCopyGuts",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleGetPrefs",
    "type": "CPP"
  },
  {
    "name": "t ___CFCalendarCreateUCalendar",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenDictionaryM mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleCreateLocaleIdentifierFromComponents",
    "type": "CPP"
  },
  {
    "name": "t ___CStringFromString",
    "type": "CPP"
  },
  {
    "name": "T _CFTimeZoneGetName",
    "type": "CPP"
  },
  {
    "name": "t -[__NSTimeZone name]",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_open",
    "type": "CPP"
  },
  {
    "name": "t ____NSCFCalendarLogger_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_getAttribute",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_getGregorianChange",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_setGregorianChange",
    "type": "CPP"
  },
  {
    "name": "t ___CFCalendarApplyUserSettingsFromLocale",
    "type": "CPP"
  },
  {
    "name": "t +[NSCalendar allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper _initWithCalendar:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper _init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar retain]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSRefcountedPthreadMutex init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar release]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSRefcountedPthreadMutex lock]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSRefcountedPthreadMutex unlock]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar component:fromDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper components:fromDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar components:fromDate:]",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarDecomposeAbsoluteTime",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_clear",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_setMillis",
    "type": "CPP"
  },
  {
    "name": "t ___CFCalendarGetICUFieldCodeFromChar",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_get",
    "type": "CPP"
  },
  {
    "name": "t +[NSDateComponents allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents init]",
    "type": "CPP"
  },
  {
    "name": "T _CFDateComponentsCreate",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents setMonth:]",
    "type": "CPP"
  },
  {
    "name": "T _CFDateComponentsSetValue",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents setLeapMonth:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents valueForComponent:]",
    "type": "CPP"
  },
  {
    "name": "T _CFDateComponentsGetValue",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents setYear:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale localeIdentifier]",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCopyLocaleID",
    "type": "CPP"
  },
  {
    "name": "t +[NSTimeZone localTimeZone]",
    "type": "CPP"
  },
  {
    "name": "t ___27+[NSTimeZone localTimeZone]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSLocalTimeZoneI retain]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone secondsFromGMT]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSLocalTimeZone secondsFromGMTForDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSLocalTimeZoneI release]",
    "type": "CPP"
  },
  {
    "name": "t +[NSDate now]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate timeIntervalSinceDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents dealloc]",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateComponentsDeallocate",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber charValue]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet setByAddingObjectsFromSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFError domain]",
    "type": "CPP"
  },
  {
    "name": "T _CFErrorGetDomain",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFError code]",
    "type": "CPP"
  },
  {
    "name": "T _CFErrorGetCode",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFError userInfo]",
    "type": "CPP"
  },
  {
    "name": "T _CFErrorCopyUserInfo",
    "type": "CPP"
  },
  {
    "name": "t __CFErrorGetUserInfo",
    "type": "CPP"
  },
  {
    "name": "T __CFErrorCreateDebugDescription",
    "type": "CPP"
  },
  {
    "name": "t __CFErrorFormatDebugDescriptionAux",
    "type": "CPP"
  },
  {
    "name": "t __CFErrorCopyUserInfoKey",
    "type": "CPP"
  },
  {
    "name": "t __CFErrorCopyUserInfoKeyFromUserInfo",
    "type": "CPP"
  },
  {
    "name": "t __CFErrorCopyUserInfoKeyFromCallBack",
    "type": "CPP"
  },
  {
    "name": "T _CFErrorCopyCallBackBlockForDomain",
    "type": "CPP"
  },
  {
    "name": "t _____CFErrorSetCallBackForDomainNoLock_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFErrorCocoaCallBack",
    "type": "CPP"
  },
  {
    "name": "t _userInfoKeyValueShow",
    "type": "CPP"
  },
  {
    "name": "t ___CFURLCopyFormattingDescription",
    "type": "CPP"
  },
  {
    "name": "t __CFErrorPOSIXCallBack",
    "type": "CPP"
  },
  {
    "name": "T _CFStringReplace",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream open]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean _getValue:forType:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream scheduleInRunLoop:forMode:]",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamScheduleWithRunLoop",
    "type": "CPP"
  },
  {
    "name": "t __CFStreamScheduleWithRunLoop",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream hash]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream scheduleInRunLoop:forMode:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray isEqual:]",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamScheduleWithRunLoop",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFType isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream hash]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream streamStatus]",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamGetStatus",
    "type": "CPP"
  },
  {
    "name": "T _CFBagRemoveValue",
    "type": "CPP"
  },
  {
    "name": "T _CFBagGetCountOfValue",
    "type": "CPP"
  },
  {
    "name": "t ___CFMachPortEqual",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopSourceIsValid",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopRemoveSource",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream removeFromRunLoop:forMode:]",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamUnscheduleFromRunLoop",
    "type": "CPP"
  },
  {
    "name": "t __CFStreamUnscheduleFromRunLoop",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream removeFromRunLoop:forMode:]",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamUnscheduleFromRunLoop",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopSourceInvalidate",
    "type": "CPP"
  },
  {
    "name": "T _CFBagApplyFunction",
    "type": "CPP"
  },
  {
    "name": "t ___CFBagDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopSourceDeallocate",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream propertyForKey:]",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamCopyProperty",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary setDictionary:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream close]",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamClose",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream close]",
    "type": "CPP"
  },
  {
    "name": "T _CFMachPortInvalidate",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString cStringUsingEncoding:]",
    "type": "CPP"
  },
  {
    "name": "T __cfmp_record_nsmachport_deallocation",
    "type": "CPP"
  },
  {
    "name": "t ____CFMachPortCreateWithPort2_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __cfmp_source_invalidated",
    "type": "CPP"
  },
  {
    "name": "t ___CFMachPortDeallocate",
    "type": "CPP"
  },
  {
    "name": "t __cfmp_deallocation_record_release",
    "type": "CPP"
  },
  {
    "name": "t __cfmp_record_deallocation",
    "type": "CPP"
  },
  {
    "name": "t __cfmp_cleanup",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream streamStatus]",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamGetStatus",
    "type": "CPP"
  },
  {
    "name": "T __CFRunLoopIsCurrent",
    "type": "CPP"
  },
  {
    "name": "t __CFRunLoopGetButDontCreateCurrent",
    "type": "CPP"
  },
  {
    "name": "T __CFRunLoopFinished",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFTSRToTimeInterval",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray objectAtIndexedSubscript:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFData isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetArrayProxy dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray release]",
    "type": "CPP"
  },
  {
    "name": "t ___CFArrayCreate0",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberCompare",
    "type": "CPP"
  },
  {
    "name": "T _CFGetRetainCount",
    "type": "CPP"
  },
  {
    "name": "T _CFStringFold",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar initWithCalendarIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarCreateWithIdentifier",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleGetSystem",
    "type": "CPP"
  },
  {
    "name": "t +[NSTimeZone timeZoneForSecondsFromGMT:]",
    "type": "CPP"
  },
  {
    "name": "t ___copyNameForSecondsFromGMT",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper setTimeZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar setTimeZone:]",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarSetTimeZone",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_close",
    "type": "CPP"
  },
  {
    "name": "t ___CFCalendarSetupCal",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_setAttribute",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents setDay:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents setCalendar:]",
    "type": "CPP"
  },
  {
    "name": "T _CFDateComponentsSetCalendar",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarCreateCopy",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarCopyTimeZone",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar _copyTimeZone]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper timeZone]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar timeZone]",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarCopyLocale",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar _copyLocale]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper locale]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar locale]",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarCopyGregorianStartDate",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar _copyGregorianStartDate]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper gregorianStartDate]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar gregorianStartDate]",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarGetFirstWeekday",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper firstWeekday]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar firstWeekday]",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarGetMinimumDaysInFirstWeek",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper minimumDaysInFirstWeek]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar minimumDaysInFirstWeek]",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarGetIdentifier",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper calendarIdentifier]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar calendarIdentifier]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents setTimeZone:]",
    "type": "CPP"
  },
  {
    "name": "T _CFDateComponentsSetTimeZone",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents date]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray copy]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents timeZone]",
    "type": "CPP"
  },
  {
    "name": "T _CFDateComponentsCopyTimeZone",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents calendar]",
    "type": "CPP"
  },
  {
    "name": "T _CFDateComponentsCopyCalendar",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar dateFromComponents:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents era]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents year]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents quarter]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents weekOfYear]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents week]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents weekOfMonth]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents yearForWeekOfYear]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents weekday]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents weekdayOrdinal]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents month]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents isLeapMonth]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents day]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents hour]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents minute]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents second]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents nanosecond]",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarComposeAbsoluteTime",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_set",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_getMillis",
    "type": "CPP"
  },
  {
    "name": "t ___CFCalendarGetTimeRangeOfTimeZoneTransition",
    "type": "CPP"
  },
  {
    "name": "t ___calcNextDaylightSavingTimeTransition",
    "type": "CPP"
  },
  {
    "name": "t ___CFCalendarDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleDeallocate",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleLoadExecutableAndReturnError",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM member:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSKindOfAdditions) isNSOrderedSet__]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary count]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "T __CFDictionaryFastEnumeration",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFSet removeAllObjects]",
    "type": "CPP"
  },
  {
    "name": "T _CFSetRemoveAllValues",
    "type": "CPP"
  },
  {
    "name": "t _____NSDictionaryEnumerate_block_invoke.13",
    "type": "CPP"
  },
  {
    "name": "T _CFBitVectorCreate",
    "type": "CPP"
  },
  {
    "name": "t ___CFBitVectorInit",
    "type": "CPP"
  },
  {
    "name": "T _CFBitVectorGetBitAtIndex",
    "type": "CPP"
  },
  {
    "name": "T _CFBitVectorGetCount",
    "type": "CPP"
  },
  {
    "name": "T _CFBitVectorGetBits",
    "type": "CPP"
  },
  {
    "name": "t ___CFBitVectorInternalMap",
    "type": "CPP"
  },
  {
    "name": "t ___CFBitVectorDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ____CFXPCCreateCFObjectFromXPCObject_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFPreferencesSynchronize",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesSynchronizeWithContainer",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences synchronizeIdentifier:user:host:container:]",
    "type": "CPP"
  },
  {
    "name": "t ___61-[_CFXPreferences synchronizeIdentifier:user:host:container:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature _isAllObjects]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateAbsoluteURLWithBytes",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar removeChild:token:]",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationChildrenRemoveValue",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationNameRegistration dealloc]",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopTimeout",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopTimeoutCancel",
    "type": "CPP"
  },
  {
    "name": "T __CFErrorCreateLocalizedDescription",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM count]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM getObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsSetUser",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsGetURLUserAllowedCharacterSet",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleDlfcnLoadBundle",
    "type": "CPP"
  },
  {
    "name": "T _CFCopySearchPathForDirectoriesInDomains",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache setTotalCostLimit:]",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketCreateWithNative",
    "type": "CPP"
  },
  {
    "name": "t ___CFSocketGetTypeID_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFSocketManager",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketGetNative",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketGetSocketFlags",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketSetSocketFlags",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketEnableCallBacks",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopSourceGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketCreateRunLoopSource",
    "type": "CPP"
  },
  {
    "name": "t ___CFSocketSchedule",
    "type": "CPP"
  },
  {
    "name": "t ___CFArrayGetCallBacks",
    "type": "CPP"
  },
  {
    "name": "t ___CFArrayCreateMutableCopy0",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopIsWaiting",
    "type": "CPP"
  },
  {
    "name": "t __calcMinTimeout_locked",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketIsValid",
    "type": "CPP"
  },
  {
    "name": "t ___CFSocketCopyRunLoopToWakeUp",
    "type": "CPP"
  },
  {
    "name": "t ___CFSocketPerformV0",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamSignalEvent",
    "type": "CPP"
  },
  {
    "name": "t __CFStreamSignalEvent",
    "type": "CPP"
  },
  {
    "name": "t __cfstream_solo_signalEventSync",
    "type": "CPP"
  },
  {
    "name": "t __signalEventSync",
    "type": "CPP"
  },
  {
    "name": "t __inputStreamCallbackFunc",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamSignalEvent",
    "type": "CPP"
  },
  {
    "name": "t __outputStreamCallbackFunc",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectIdenticalTo:]",
    "type": "CPP"
  },
  {
    "name": "T ___CFSocketRead",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateWithBytes",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray makeObjectsPerformSelector:]",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyResourceURLsOfType",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject(NSObject) methodSignatureForSelector:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInRange:inArray:range:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet setWithArray:range:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberFormatterCreate",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_unum_open",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t ______CFICULoggingEnabled_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_unum_toPattern",
    "type": "CPP"
  },
  {
    "name": "t ___CFNumberFormatterCreateCompressedString",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_unum_getAttribute",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_unum_setAttribute",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_unum_setContext",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberFormatterGetFormat",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberFormatterSetProperty",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_unum_setTextAttribute",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberFormatterCreateStringWithValue",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumInitWithInt64",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumToCString",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_unum_formatDecimal",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberFormatterSetFormat",
    "type": "CPP"
  },
  {
    "name": "t ___CFNumberFormatterApplyPattern",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_unum_applyPattern",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberFormatterGetLocale",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray arrayByExcludingObjectsInArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenArrayM getObjects:range:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopAddItemsToCommonMode",
    "type": "CPP"
  },
  {
    "name": "t ___CFMachPortPerform",
    "type": "CPP"
  },
  {
    "name": "t __CFMachPortBoostCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopStop",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesSetAppValueWithContainer",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet isEqualToSet:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFFinalizeRunLoop",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopRemoveAllSources",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopCleanseSources",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopDeallocateSources",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopDeallocateObservers",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopDeallocateTimers",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopModeDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32r",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopRemoveSourcesFromCommonMode",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary objectEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryObjectEnumerator nextObject]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary setObject:forKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber unsignedShortValue]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFLocale hash]",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleHash",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFLocale isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleEqual",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetCreateWithBitmapRepresentation",
    "type": "CPP"
  },
  {
    "name": "t ___CFCharacterSetHash",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetCreateMutableCopy",
    "type": "CPP"
  },
  {
    "name": "T __CFCharacterSetCompact",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionaryReplaceValue",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary replaceObject:forKey:]",
    "type": "CPP"
  },
  {
    "name": "T _CFTreeGetChildCount",
    "type": "CPP"
  },
  {
    "name": "T _CFTreeGetChildAtIndex",
    "type": "CPP"
  },
  {
    "name": "t _chcompar",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet invertedSet]",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetCreateInvertedSet",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetIsLongCharacterMember",
    "type": "CPP"
  },
  {
    "name": "t +[NSDictionary dictionaryWithObjects:forKeys:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber _reverseCompare:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectArrayI objectEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean doubleValue]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet objectsPassingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet objectsWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSSetEnumerate",
    "type": "CPP"
  },
  {
    "name": "t ___NSSET_IS_CALLING_OUT_TO_A_BLOCK__",
    "type": "CPP"
  },
  {
    "name": "t ___40-[NSSet objectsWithOptions:passingTest:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet setWithSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray enumerateObjectsAtIndexes:options:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardGetChangeCount",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardGetChangeCount_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardCopyItemsAndFlavors",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardCopyItemsAndFlavors_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache copyItemsAndFlavors]",
    "type": "CPP"
  },
  {
    "name": "t _lineNumber",
    "type": "CPP"
  },
  {
    "name": "t ___CFPropertyListCreateError",
    "type": "CPP"
  },
  {
    "name": "t ___CFCreateOldStylePropertyListOrStringsFile",
    "type": "CPP"
  },
  {
    "name": "t _advanceToNonSpace",
    "type": "CPP"
  },
  {
    "name": "t _parsePlistObject",
    "type": "CPP"
  },
  {
    "name": "t _parsePlistDictContent",
    "type": "CPP"
  },
  {
    "name": "t _parsePlistString",
    "type": "CPP"
  },
  {
    "name": "t _parseQuotedPlistString",
    "type": "CPP"
  },
  {
    "name": "t __uniqueStringForCharacters",
    "type": "CPP"
  },
  {
    "name": "t _parseUnquotedPlistString",
    "type": "CPP"
  },
  {
    "name": "t ___CFCharacterSetEqual",
    "type": "CPP"
  },
  {
    "name": "t ___CFCSetIsEqualBitmap",
    "type": "CPP"
  },
  {
    "name": "t ___CFCSetIsEqualAnnex",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArray0 copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetCreateWithCharactersInRange",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI_Transfer countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFArrayCreateCopy0",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet initWithArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet initWithArray:range:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetI count]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject(NSObject) description]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexOfObjectAtIndexes:options:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSOrderedSetParameterCheckIterate",
    "type": "CPP"
  },
  {
    "name": "t ___NSOrderedSetGetIndexPassingTest",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM getObjects:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString _isCString]",
    "type": "CPP"
  },
  {
    "name": "T ___CFStringIsEightBit",
    "type": "CPP"
  },
  {
    "name": "T _CFStorageCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFStorageInsertValues",
    "type": "CPP"
  },
  {
    "name": "t ___CFStorageInsertUnfrozen",
    "type": "CPP"
  },
  {
    "name": "T _CFStorageReplaceValues",
    "type": "CPP"
  },
  {
    "name": "T _CFStorageGetValueAtIndex",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionary0 copy]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenDictionaryM enumerateKeysAndObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL setResourceValues:error:]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLSetResourcePropertiesForKeys",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLSetResourcePropertiesForKeys_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFStringAppendCString",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateStringByAddingPercentEscapes",
    "type": "CPP"
  },
  {
    "name": "t __stringContainsCharacter",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionary0 copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSNull copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectSetI copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString insertString:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleFindResourcesWithPredicate",
    "type": "CPP"
  },
  {
    "name": "T __CFURLFileCacheGetFinderInfo",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FileCacheGetFinderInfo_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCopyComponents",
    "type": "CPP"
  },
  {
    "name": "t _decomposeToRFC1808",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCanBeDecomposed",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCreateFromComponents",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleGetLanguageAndRegionCodes",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateWithPascalString",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenDictionaryM copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache removeAllObjects]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFData copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "T ___CFDataMtbl",
    "type": "CPP"
  },
  {
    "name": "T _CFPreferencesCopyMultiple",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesCopyMultipleWithContainer",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences copyValuesForKeys:identifier:user:host:container:]",
    "type": "CPP"
  },
  {
    "name": "t ___68-[_CFXPreferences copyValuesForKeys:identifier:user:host:container:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFUniCharDecomposeCharacter",
    "type": "CPP"
  },
  {
    "name": "t ___CFUniCharRecursivelyDecomposeCharacter",
    "type": "CPP"
  },
  {
    "name": "T _CFUniCharPrioritySort",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet isEqual:]",
    "type": "CPP"
  },
  {
    "name": "T _CFPropertyListIsValid",
    "type": "CPP"
  },
  {
    "name": "T __CFMessagePortSetOptions",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringCreateCopy",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringGetString",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringGetAttributes",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetRangeOfCharacterClusterAtIndex",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleEntryDictionaryI isEqualToDictionary:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean stringValue]",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamCreateWithBytesNoCopy",
    "type": "CPP"
  },
  {
    "name": "t _readDataCreate",
    "type": "CPP"
  },
  {
    "name": "t _readDataOpen",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamRead",
    "type": "CPP"
  },
  {
    "name": "t _dataRead",
    "type": "CPP"
  },
  {
    "name": "t _readDataFinalize",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleDlfcnLoadFramework",
    "type": "CPP"
  },
  {
    "name": "t ___collatorFinalize",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate descriptionWithLocale:]",
    "type": "CPP"
  },
  {
    "name": "t ___32-[NSDate descriptionWithLocale:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFTimeZoneCreateWithTimeIntervalFromGMT",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderTimeZone __initWithName:data:cache:]",
    "type": "CPP"
  },
  {
    "name": "T _CFDateFormatterCreate",
    "type": "CPP"
  },
  {
    "name": "t ___CreateCFDateFormatter",
    "type": "CPP"
  },
  {
    "name": "t ___ResetUDateFormat",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_open",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_setLenient",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_set2DigitYearStart",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_getCalendar",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_clone",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_setTimeZone",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_setCalendar",
    "type": "CPP"
  },
  {
    "name": "t ___substituteFormatStringFromPrefsDF",
    "type": "CPP"
  },
  {
    "name": "t ___ApplyUDateFormatSymbol",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_toPattern",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateFormatterCreateForcedString",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_applyPattern",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateFormatterSetProperty",
    "type": "CPP"
  },
  {
    "name": "T _CFDateFormatterSetProperty",
    "type": "CPP"
  },
  {
    "name": "T _CFDateFormatterCopyProperty",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_close",
    "type": "CPP"
  },
  {
    "name": "T _CFDateFormatterSetFormat",
    "type": "CPP"
  },
  {
    "name": "T _CFDateFormatterCreateStringWithDate",
    "type": "CPP"
  },
  {
    "name": "T _CFDateFormatterCreateStringWithAbsoluteTime",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_format",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectsInRange:withObjectsFromArray:range:]",
    "type": "CPP"
  },
  {
    "name": "T __CFPropertyListCreateFiltered",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray initWithContentsOfFile:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI member:]",
    "type": "CPP"
  },
  {
    "name": "t ___19-[__NSSetI member:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T ___CFBinaryPlistWriteToStream",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopSourceComparator",
    "type": "CPP"
  },
  {
    "name": "T __CFMachPortCreateBoost",
    "type": "CPP"
  },
  {
    "name": "t ___CFBagApplyFunction_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopSourceRemoveFromRunLoop",
    "type": "CPP"
  },
  {
    "name": "T __CFRunLoop01",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFTimer setTolerance:]",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopTimerSetTolerance",
    "type": "CPP"
  },
  {
    "name": "t __runLoopTimerWithBlockContext",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopTimerSetNextFireDate",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary enumerateKeysAndObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet keyAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFMachPortBoostDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__",
    "type": "CPP"
  },
  {
    "name": "t _____CFRunLoopSetOptionsReason_block_invoke_5.107",
    "type": "CPP"
  },
  {
    "name": "t _____CFRunLoopSetOptionsReason_block_invoke_3.100",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32b",
    "type": "CPP"
  },
  {
    "name": "t _____CFRunLoopSetOptionsReason_block_invoke.61",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFNotificationCenterAddObserver_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40o48o",
    "type": "CPP"
  },
  {
    "name": "t ____CFXPCCreateCFObjectFromXPCObject_block_invoke.9",
    "type": "CPP"
  },
  {
    "name": "t _startedDrawing",
    "type": "CPP"
  },
  {
    "name": "t _becameVisible",
    "type": "CPP"
  },
  {
    "name": "t _____CFRunLoopSetOptionsReason_block_invoke_2.63",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "T __CFLocaleGetNoteCount",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberFormatterCreateStringWithNumber",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper dateByAddingComponents:toDate:options:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar dateByAddingComponents:toDate:options:]",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarAddComponentsV",
    "type": "CPP"
  },
  {
    "name": "t ___CFCalendarAdd",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_add",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate isNSDate__]",
    "type": "CPP"
  },
  {
    "name": "T __CFTimeZoneGetNoteCount",
    "type": "CPP"
  },
  {
    "name": "T __CFCalendarGetMidnightNoteCount",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_setContext",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_toPatternRelativeDate",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_toPatternRelativeTime",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_applyPatternRelative",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateFormatterDeallocate",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper dateFromComponents:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents setHour:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents setMinute:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary keysSortedByValueUsingSelector:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary keysSortedByValueWithOptions:usingComparator:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale init]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectAtIndexedSubscript:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM objectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetI objectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetI dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet intersectsSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar dateBySettingHour:minute:second:ofDate:options:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper rangeOfUnit:startDate:interval:forDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar rangeOfUnit:startDate:interval:forDate:]",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarGetTimeRangeOfUnit",
    "type": "CPP"
  },
  {
    "name": "t ___CFCalendarSetToFirstInstant",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_getLimit",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents setSecond:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate dateByAddingTimeInterval:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSTaggedDate allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar nextDateAfterDate:matchingComponents:options:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents _dateComponents]",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarEnumerateDates",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarGetMaximumRangeOfUnit",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarGetMinimumRangeOfUnit",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarFindHighestSetUnitInDateComponents",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarCreateMatchingDateAfterStartDateMatchingComponents",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarGetComponentFromDate",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarGetTimeRangeOfUnitForDate",
    "type": "CPP"
  },
  {
    "name": "T _CFDateCompare",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate compare:]",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarCheckDateContainsMatchingComponents",
    "type": "CPP"
  },
  {
    "name": "T _CFDateComponentsIsLeapMonth",
    "type": "CPP"
  },
  {
    "name": "T _CFDateComponentsIsLeapMonthSet",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarCreateDateComponentsFromDate",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateComponentsEqual",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarCreateBumpedDateUpToNextHigherUnitInComponents",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarNextHigherUnit",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarCreateDateByAddingValueOfUnitToDate",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarAddComponents",
    "type": "CPP"
  },
  {
    "name": "t ___88-[__NSCFCalendar enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___59-[NSCalendar nextDateAfterDate:matchingComponents:options:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar dateByAddingUnit:value:toDate:options:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents setValue:forComponent:]",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberFormatterCopyProperty",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFNumberFormatterDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_unum_close",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_unum_formatDouble",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet enumerateObjectsUsingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM enumerateObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM countForObject:]",
    "type": "CPP"
  },
  {
    "name": "t __CFStringInlineBufferGetComposedRange",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringGetLongCharacterFromInlineBuffer",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringGetExtendedPictographicSequenceComponent",
    "type": "CPP"
  },
  {
    "name": "T __NSMessageBuilder",
    "type": "CPP"
  },
  {
    "name": "t +[__NSMessageBuilder initialize]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSMessageBuilder methodSignatureForSelector:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSMessageBuilder forwardInvocation:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation getReturnValue:]",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopTimerGetNextFireDate",
    "type": "CPP"
  },
  {
    "name": "T __CFErrorCreateLocalizedFailureReason",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenDictionaryM keyEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenArrayM copy]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet enumerateObjectsUsingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetI enumerateObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSORDEREDSET_IS_CALLING_OUT_TO_A_BLOCK__",
    "type": "CPP"
  },
  {
    "name": "t ___CFStorageDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFStorageClearRootNode",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMostCommonChineseCharsKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS init]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS initWithKeys:keyLenghtInBytes:count:type:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS setSelect:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS setC:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS setM:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS setFactor:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS setNumKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS setSeeds:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS setG:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS setRankTable:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS setKeys1:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS setKeyLen:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS setType:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS setSubSharedKeySet:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMostCommonJapaneseCharsKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMostCommonKoreanCharsKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSChineseBigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS setKeys2:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSChineseBigramKeySet_SKS init]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSChineseBigramKeySet_SKS_SKS init]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSJapaneseBigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSKoreanBigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSKoreanBigramKeySet_SKS init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin1TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS setCkeys:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin2TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin3TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin4TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin5TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin6TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin7TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin8TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin9TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin10TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO88595TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO88596TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO88597TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO88598TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO885911TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows874TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1251TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1252TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1250TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1253TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1254TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1255TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1256TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1257TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1258TrigramKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArray0 objectEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSEnumerator0 retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSEnumerator0 nextObject]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSEnumerator0 release]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary allKeysForObject:]",
    "type": "CPP"
  },
  {
    "name": "t __CFCopyResolvedFormatStringWithConfiguration",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM indexOfObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet enumerateObjectsAtIndexes:options:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSOrderedSetEnumerate",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsAtIndexes:]",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamCreateWithFile",
    "type": "CPP"
  },
  {
    "name": "t __CFStreamCreateWithFile",
    "type": "CPP"
  },
  {
    "name": "t _fileCreate",
    "type": "CPP"
  },
  {
    "name": "t _fileOpen",
    "type": "CPP"
  },
  {
    "name": "T _CFPropertyListCreateWithStream",
    "type": "CPP"
  },
  {
    "name": "t _fileRead",
    "type": "CPP"
  },
  {
    "name": "t _fdRead",
    "type": "CPP"
  },
  {
    "name": "t _fileClose",
    "type": "CPP"
  },
  {
    "name": "t _fileFinalize",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyBuiltInPlugInsURL",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenQueueRegistration setQueue:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFToISOLatin1",
    "type": "CPP"
  },
  {
    "name": "T _CFStorageDeleteValues",
    "type": "CPP"
  },
  {
    "name": "t ___CFStorageDeleteUnfrozen",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet orderedSet]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetI countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet initWithSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet initWithSet:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet sortWithOptions:usingComparator:]",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyResourceURLForLocalization",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateFormatterSetSymbolsArray",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_setSymbols",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateFormatterCopySymbolsArray",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_countSymbols",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_getSymbols",
    "type": "CPP"
  },
  {
    "name": "T _CFDateFormatterCreateDateFromString",
    "type": "CPP"
  },
  {
    "name": "T _CFDateFormatterGetAbsoluteTimeFromString",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_clone",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_parseCalendar",
    "type": "CPP"
  },
  {
    "name": "T _CFStorageGetValues",
    "type": "CPP"
  },
  {
    "name": "T __CFDataFindBytes",
    "type": "CPP"
  },
  {
    "name": "t ___CFDataSearchBoyerMoore",
    "type": "CPP"
  },
  {
    "name": "t __computeGoodSubstringShift",
    "type": "CPP"
  },
  {
    "name": "T _CFStringConvertIANACharSetNameToEncoding",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingGetFromCanonicalName",
    "type": "CPP"
  },
  {
    "name": "t ___CFCanonicalNameHash",
    "type": "CPP"
  },
  {
    "name": "t ___CFCanonicalNameCompare",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetArrayProxy objectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary removeObjectForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFLocale _nullLocale]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber shortValue]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetIntValue",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringScanInteger",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t _CFUniCharGetBitmapForPlane",
    "type": "CPP"
  },
  {
    "name": "t _CFUniCharGetNumberOfPlanes",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM copy]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenOrderedSetM count]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenOrderedSetM dealloc]",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet orderedSetWithObject:]",
    "type": "CPP"
  },
  {
    "name": "t ___createOrderedSet",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet removeCharactersInString:]",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetRemoveCharactersInString",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsSetPercentEncodedPath",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet firstObject]",
    "type": "CPP"
  },
  {
    "name": "T __CFBagFastEnumeration",
    "type": "CPP"
  },
  {
    "name": "T _CFStringNormalize",
    "type": "CPP"
  },
  {
    "name": "T __NSIsNSValue",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSKindOfAdditions) isNSValue__]",
    "type": "CPP"
  },
  {
    "name": "T __CFXPreferencesCopyDictionaryForNamedVolatileSource",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences copyDictionaryForVolatileSourceWithName:]",
    "type": "CPP"
  },
  {
    "name": "t ___59-[_CFXPreferences copyDictionaryForVolatileSourceWithName:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet formUnionWithCharacterSet:]",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetUnion",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetParagraphBounds",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringGetLineOrParagraphBounds",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetRangeOfComposedCharactersAtIndex",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFTimer invalidate]",
    "type": "CPP"
  },
  {
    "name": "t _stoppedDrawing",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet addObjectsFromArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObjectsFromArray:range:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObjects:count:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleSetupXPCBootstrap",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyLocalizationForLocalizationInfo",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyLocaleAbbreviationForRegionCode",
    "type": "CPP"
  },
  {
    "name": "T __CFXPCCreateCFObjectFromXPCMessage",
    "type": "CPP"
  },
  {
    "name": "t ___CFBinaryPlistCreate15",
    "type": "CPP"
  },
  {
    "name": "t ___readObject15",
    "type": "CPP"
  },
  {
    "name": "t +[NSDictionary newDictionaryWithObjects:forKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray newArrayWithObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet description]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet descriptionWithLocale:indent:]",
    "type": "CPP"
  },
  {
    "name": "t _launchServicesCallback",
    "type": "CPP"
  },
  {
    "name": "T _CFNotificationCenterSetSuspended",
    "type": "CPP"
  },
  {
    "name": "T __CFXNotificationSetSuspended",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString cStringUsingEncoding:]",
    "type": "CPP"
  },
  {
    "name": "t _____initDayChangedNotification_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "T _CFNotificationCenterPostNotification",
    "type": "CPP"
  },
  {
    "name": "t ___CFTreeDeallocate",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents setEra:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate initWithTimeIntervalSince1970:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopKillOneTimer",
    "type": "CPP"
  },
  {
    "name": "T _CFUUIDCreateFromString",
    "type": "CPP"
  },
  {
    "name": "t __byteFromHexChars",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFRunArrayCreate",
    "type": "CPP"
  },
  {
    "name": "T __CFRunArrayCreateWithGuts",
    "type": "CPP"
  },
  {
    "name": "t ___CFAttributedStringCreateAttributesDictionary",
    "type": "CPP"
  },
  {
    "name": "T _CFRunArrayInsert",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunArraySetBlockCapacity",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringGetAttribute",
    "type": "CPP"
  },
  {
    "name": "T _CFRunArrayGetValueAtIndex",
    "type": "CPP"
  },
  {
    "name": "t _blockForLocation",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringCreateMutableCopy",
    "type": "CPP"
  },
  {
    "name": "T ___CFAttributedStringCreateMutableWithSubstring",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringCreateMutable",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringReplaceString",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringSetAttributes",
    "type": "CPP"
  },
  {
    "name": "T _CFRunArrayReplace",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringGetLength",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringGetAttributesAndLongestEffectiveRange",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringSetAttribute",
    "type": "CPP"
  },
  {
    "name": "t ___CFAttributedStringDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunArrayDeallocate",
    "type": "CPP"
  },
  {
    "name": "T _CFLog",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream streamError]",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamCopyError",
    "type": "CPP"
  },
  {
    "name": "t __CFStreamCopyError",
    "type": "CPP"
  },
  {
    "name": "t __CFStreamCreateErrorFromStreamError",
    "type": "CPP"
  },
  {
    "name": "t ___CFSocketCancel",
    "type": "CPP"
  },
  {
    "name": "t __CFErrorOSStatusCallBack",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_GetMacOSStatusCommentString_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_GetMacOSStatusErrorString_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketInvalidate",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream streamError]",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamCopyError",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream hasBytesAvailable]",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamHasBytesAvailable",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream read:maxLength:]",
    "type": "CPP"
  },
  {
    "name": "T __CFXNotificationGetSuspended",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream propertyForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream hasSpaceAvailable]",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamCanAcceptBytes",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream write:maxLength:]",
    "type": "CPP"
  },
  {
    "name": "t __wakeUpRunLoop",
    "type": "CPP"
  },
  {
    "name": "t __CFStreamCopyRunLoopsAndModes",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenQueueRegistration queue]",
    "type": "CPP"
  },
  {
    "name": "T __CFCopyServerVersionDictionary",
    "type": "CPP"
  },
  {
    "name": "t ____CFCopyServerVersionDictionary_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFDataHash",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleFlushCaches",
    "type": "CPP"
  },
  {
    "name": "t ___CFBooleanHash",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardCopyName",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate _cfTypeID]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetArrayProxy copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLDestroyResource",
    "type": "CPP"
  },
  {
    "name": "t __CFDeleteFile",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet descriptionWithLocale:]",
    "type": "CPP"
  },
  {
    "name": "T __NSIsNSOrderedSet",
    "type": "CPP"
  },
  {
    "name": "t +[NSMutableOrderedSet orderedSetWithCapacity:]",
    "type": "CPP"
  },
  {
    "name": "T __CFOperatingSystemVersionGetCurrent",
    "type": "CPP"
  },
  {
    "name": "t ____CFOperatingSystemVersionGetCurrent_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFCopySystemVersionDictionaryValue",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateByResolvingBookmarkData",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__CFURLCreateByResolvingBookmarkData_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFTimeIntervalUntilTSR",
    "type": "CPP"
  },
  {
    "name": "T __CFURLGetVolumePropertyFlags",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLGetVolumePropertyFlags_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFNumberEqual",
    "type": "CPP"
  },
  {
    "name": "T _CFStringTrimWhitespace",
    "type": "CPP"
  },
  {
    "name": "T _CFGetSystemUptime",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray release]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate initWithTimeInterval:sinceDate:]",
    "type": "CPP"
  },
  {
    "name": "T __CFReadStreamSignalEventDelayed",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary count]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper components:fromDate:toDate:options:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar components:fromDate:toDate:options:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSArrayChunkIterate",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarGetComponentDifferenceV",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_getFieldDifference",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet removeAllObjects]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet reversedOrderedSet]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetReversed initWithOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet unionOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet isNSOrderedSet__]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetReversed count]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet getObjects:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetReversed objectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenOrderedSetM objectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet countForObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetReversed indexOfObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenOrderedSetM indexOfObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetReversed dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenArrayM copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSOrderedSetChunkIterate",
    "type": "CPP"
  },
  {
    "name": "t ___NSORDEREDSET_IS_CALLING_OUT_TO_A_BOOL_BLOCK__",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectsAtIndexes:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFSocketDeallocate",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenOrderedSetM mutableCopy]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM enumerateObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t __CFRunLoopCacheLookup",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM removeObjectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet hash]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexesOfObjectsPassingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexesOfObjectsWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t _____CFXNotificationRegisterObserver1_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___NSOrderedSetGetIndexesPassingTest",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenRegistration name]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary keysOfEntriesPassingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM keysOfEntriesWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "T _mdict_keysOfEntriesWithOptionsPassingTest",
    "type": "CPP"
  },
  {
    "name": "t ___CFCarbonCore_DisposeTextToUnicodeInfoNoInit",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_DisposeTextToUnicodeInfoNoInit_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingPlatformCharLengthForBytes",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingPlatformBytesToUnicode",
    "type": "CPP"
  },
  {
    "name": "t ___CFCarbonCore_ConvertFromTextToUnicodeNoInit",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_ConvertFromTextToUnicodeNoInit_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS indexForKey:length:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexesOfObjectsAtIndexes:options:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean _cfNumberType]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObjects:atIndexes:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenOrderedSetM getObjects:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache removeObjectForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet minusSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM mutableCopy]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary getObjects:andKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "T __CFURLFileCacheClearPropertyValueForKey",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FileCacheClearPropertyValueForKey_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFURLClearResourcePropertyCache",
    "type": "CPP"
  },
  {
    "name": "t ___CFCoreServicesInternal__FSURLClearResourcePropertyCacheForKey",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLClearResourcePropertyCacheForKey_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFNumberCopyFormattingDescriptionAsFloat64",
    "type": "CPP"
  },
  {
    "name": "t ___CFNumberCreateFormattingDescriptionAsFloat64",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS indexForBytes:length:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString getLineStart:end:contentsEnd:forRange:]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetLineBounds",
    "type": "CPP"
  },
  {
    "name": "t _CFStringEncodingGetAddressForSelector",
    "type": "CPP"
  },
  {
    "name": "t ___CFToUnicodeCheapMultiByteWrapper",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFTimer setFireDate:]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLEnumeratorGetDescendentLevel",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__URLEnumeratorGetDescendentLevel_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFURLEnumeratorSkipDescendents",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__URLEnumeratorSkipDescendents_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeAllObjects]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM countForObject:]",
    "type": "CPP"
  },
  {
    "name": "t _____CFRunLoopFindMode_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFXPCCreateXPCMessageWithCFObject",
    "type": "CPP"
  },
  {
    "name": "t ___CFBinaryPlistWrite15",
    "type": "CPP"
  },
  {
    "name": "t ___writeObject15",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketDisableCallBacks",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource sendMessageSettingValues:forKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsEncodeKeyValuePairsIntoMessage",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsDomainSizeAcceptabilityForByteCount",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource sendFullyPreparedMessage:toConnection:settingValues:forKeys:count:retryCount:]",
    "type": "CPP"
  },
  {
    "name": "t ___99-[CFPrefsPlistSource sendFullyPreparedMessage:toConnection:settingValues:forKeys:count:retryCount:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource deferredNotifyCausedByLocalWriteOfChangesToKey:fromValue:toValue:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFTimer isValid]",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingGetFromICUName",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_TECGetTextEncodingFromInternetName_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingGetFromWindowsCodePage",
    "type": "CPP"
  },
  {
    "name": "T _CFCopyUserName",
    "type": "CPP"
  },
  {
    "name": "T __NSURLCreateNSImageWithIconRef",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFError copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI_Transfer objectAtIndexedSubscript:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI_Transfer copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFDefaultToBytesFallbackProc",
    "type": "CPP"
  },
  {
    "name": "t ___CFFromWinLatin1",
    "type": "CPP"
  },
  {
    "name": "T _CFUniCharFillDestinationBuffer",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet removeCharactersInRange:]",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetRemoveCharactersInRange",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource alreadylocked_copyValueForKey:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingGetWindowsCodePage",
    "type": "CPP"
  },
  {
    "name": "T _CFSetCreateMutableCopy",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFSet removeObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL filePathURL]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateFilePathURL",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCopyNetLocation",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCopyResourceSpecifier",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateBookmarkData",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__CFURLCreateBookmarkData_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFURLGetResourcePropertyFlags",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLGetResourcePropertyFlags_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateCopyDeletingPathExtension",
    "type": "CPP"
  },
  {
    "name": "T __CFXPreferencesCopyDictionaryForSourceWithBundleID",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences copyDictionaryForSourceWithIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t ___57-[_CFXPreferences copyDictionaryForSourceWithIdentifier:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCopyPassword",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetMostCompatibleMacStringEncoding",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingGetMostCompatibleMacScript",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingPlatformUnicodeToBytes",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_CreateUnicodeToTextInfoNoInit_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFCarbonCore_ConvertFromUnicodeToTextNoInit",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_ConvertFromUnicodeToTextNoInit_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFCarbonCore_DisposeUnicodeToTextInfoNoInit",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_DisposeUnicodeToTextInfoNoInit_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache dealloc]",
    "type": "CPP"
  },
  {
    "name": "T _CFNotificationCenterRemoveObserver",
    "type": "CPP"
  },
  {
    "name": "t ___104-[CFPrefsSearchListSource synchronouslySendDaemonMessage:andAgentMessage:andDirectMessage:replyHandler:]_block_invoke.124",
    "type": "CPP"
  },
  {
    "name": "t ___68-[_CFXPreferences _copyDaemonConnectionSettingUpIfNecessaryForRole:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___68-[_CFXPreferences _copyDaemonConnectionSettingUpIfNecessaryForRole:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40o",
    "type": "CPP"
  },
  {
    "name": "t ___68-[_CFXPreferences _copyDaemonConnectionSettingUpIfNecessaryForRole:]_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences(SearchListAdditions) updateSearchListsForIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t ___71-[_CFXPreferences(SearchListAdditions) updateSearchListsForIdentifier:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _notifySearchListOfRemoteChangesCallback",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSuiteSearchListSource handleChangeNotificationForDomainIdentifier:isRemote:]",
    "type": "CPP"
  },
  {
    "name": "t ___85-[CFPrefsSuiteSearchListSource handleChangeNotificationForDomainIdentifier:isRemote:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource domainIdentifier]",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40o",
    "type": "CPP"
  },
  {
    "name": "t __createUTF8DataFromString",
    "type": "CPP"
  },
  {
    "name": "t ___CFBooleanCopyFormattingDescription",
    "type": "CPP"
  },
  {
    "name": "t _fileCanRead",
    "type": "CPP"
  },
  {
    "name": "t _fdCanRead",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject(NSObject) _copyDescription]",
    "type": "CPP"
  },
  {
    "name": "T _CFPreferencesAppValueIsForced",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences appValueIsForcedForKey:appIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t ___56-[_CFXPreferences appValueIsForcedForKey:appIdentifier:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___56-[_CFXPreferences appValueIsForcedForKey:appIdentifier:]_block_invoke.78",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray arrayByAddingObjectsFromArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFData hash]",
    "type": "CPP"
  },
  {
    "name": "t __appendPercentEscapesForCharacter",
    "type": "CPP"
  },
  {
    "name": "t __CFURLAllocateExtraDataspace",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale internetServicesRegion]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet initWithOrderedSet:range:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetI getObjects:range:]",
    "type": "CPP"
  },
  {
    "name": "T _CFFileDescriptorCreate",
    "type": "CPP"
  },
  {
    "name": "t ___fdQueue",
    "type": "CPP"
  },
  {
    "name": "t ___CFFileDescriptorCreate_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFFileDescriptorGetTypeID_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFFileDescriptorCreateRunLoopSource",
    "type": "CPP"
  },
  {
    "name": "T _CFFileDescriptorIsValid",
    "type": "CPP"
  },
  {
    "name": "t ___CFFileDescriptorCreateRunLoopSource_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFFileDescriptorSchedule",
    "type": "CPP"
  },
  {
    "name": "T _CFFileDescriptorEnableCallBacks",
    "type": "CPP"
  },
  {
    "name": "t ___CFFileDescriptorEnableCallBacks_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _cffd_is_readable",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource alreadylocked_copyValueForKey:]",
    "type": "CPP"
  },
  {
    "name": "t _____initDayChangedNotification_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCopyInfoPlistURL",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopySupportFilesDirectoryURL",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleLoadExecutable",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleGetFunctionPointerForName",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleDlfcnGetSymbolByNameWithSearch",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCreateWithExecutableURLIfMightBeBundle",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCreateWithExecutableURLIfLooksLikeBundle",
    "type": "CPP"
  },
  {
    "name": "t __CFStartOfLastPathComponent2",
    "type": "CPP"
  },
  {
    "name": "t __CFLengthAfterDeletingPathExtension2",
    "type": "CPP"
  },
  {
    "name": "t __CFStartOfPathExtension2",
    "type": "CPP"
  },
  {
    "name": "t ___96-[_CFXPreferences(SourceAdditions) withSourceForIdentifier:user:byHost:container:cloud:perform:]_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t __CFPreferencesDoesNSUserDefaultsExist",
    "type": "CPP"
  },
  {
    "name": "t __CFPreferencesCopyStandardUserDefaults",
    "type": "CPP"
  },
  {
    "name": "t +[NSCalendar calendarWithIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t __CFLocaleCreateCopyWithNewCalendarIdentifier",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCopyCalendar",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarCreateCoWWithIdentifier",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarSetLocale",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper setLocale:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar setLocale:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFNotificationCenterGetLocalCenter_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet isSupersetOfSet:]",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetIsSupersetOfSet",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar compareDate:toDate:toUnitGranularity:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFFileDescriptorCreate_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t __CFRunLoopSourceWakeUpRunLoops",
    "type": "CPP"
  },
  {
    "name": "T _CFBagCreateCopy",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopSourceWakeUpLoop",
    "type": "CPP"
  },
  {
    "name": "t ___CFFileDescriptorPerform",
    "type": "CPP"
  },
  {
    "name": "t _____CFFileDescriptorPerform_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFFileDescriptorGetNativeDescriptor",
    "type": "CPP"
  },
  {
    "name": "t -[_NSRefcountedPthreadMutex dealloc]",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamCreateWithFile",
    "type": "CPP"
  },
  {
    "name": "t _fileSetProperty",
    "type": "CPP"
  },
  {
    "name": "t _fileWrite",
    "type": "CPP"
  },
  {
    "name": "t _fdWrite",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFTimer _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleGetPackageInfo",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleGetPackageInfoInDirectoryWithInfoDictionary",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyExecutableArchitectures",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyArchitecturesForExecutable",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenQueueRegistration dealloc]",
    "type": "CPP"
  },
  {
    "name": "T _CFPreferencesSetValue",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesSetValueWithContainer",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences setValue:forKey:identifier:user:host:container:]",
    "type": "CPP"
  },
  {
    "name": "t ___66-[_CFXPreferences setValue:forKey:identifier:user:host:container:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFLocaleCopyPreferred",
    "type": "CPP"
  },
  {
    "name": "T _CFMessagePortCreateRemote",
    "type": "CPP"
  },
  {
    "name": "T _CFMessagePortSetInvalidationCallBack",
    "type": "CPP"
  },
  {
    "name": "T _CFMessagePortSendRequest",
    "type": "CPP"
  },
  {
    "name": "t ___CFMessagePortCreateMessage",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFTimer userInfo]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate hash]",
    "type": "CPP"
  },
  {
    "name": "T ___NSMakeSpecialForwardingCaptureBlock",
    "type": "CPP"
  },
  {
    "name": "t ___forwarding_prep_b___",
    "type": "CPP"
  },
  {
    "name": "t ___block_forwarding___",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar startOfDayForDate:]",
    "type": "CPP"
  },
  {
    "name": "T __CFURLGetEncoding",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale countryCode]",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCreateFromPropertyListRepresentation",
    "type": "CPP"
  },
  {
    "name": "T _CFGregorianDateIsValid",
    "type": "CPP"
  },
  {
    "name": "T _CFAbsoluteTimeGetDayOfWeek",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayBSearchValues",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCopyPropertyListRepresentation",
    "type": "CPP"
  },
  {
    "name": "t ___CFURLCopyPropertyListKeysAndValues",
    "type": "CPP"
  },
  {
    "name": "T __CFRuntimeGetClassWithTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFPropertyListCreateFromStream",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCreateBundlesFromDirectory",
    "type": "CPP"
  },
  {
    "name": "t __CFCreateContentsOfDirectory",
    "type": "CPP"
  },
  {
    "name": "t ___CFDictionaryEqual",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashEqual",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashesAreEqual",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashesAreEqual_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___68-[_CFXPreferences _copyDaemonConnectionSettingUpIfNecessaryForRole:]_block_invoke.195",
    "type": "CPP"
  },
  {
    "name": "t _lineNumberStrings",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLParserCreate",
    "type": "CPP"
  },
  {
    "name": "t ___CFXMLParserInit",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLNodeGetTypeID",
    "type": "CPP"
  },
  {
    "name": "t __initializeInputStream",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLParserParse",
    "type": "CPP"
  },
  {
    "name": "t __openInputStream",
    "type": "CPP"
  },
  {
    "name": "t __inputStreamGetEncoding",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLNodeGetTypeCode",
    "type": "CPP"
  },
  {
    "name": "t __inputStreamPeekCharacter",
    "type": "CPP"
  },
  {
    "name": "t __inputStreamGetCharacter",
    "type": "CPP"
  },
  {
    "name": "t _parseProcessingInstruction",
    "type": "CPP"
  },
  {
    "name": "t __inputStreamScanXMLName",
    "type": "CPP"
  },
  {
    "name": "t _dropMark",
    "type": "CPP"
  },
  {
    "name": "t _growCharacterBuffer",
    "type": "CPP"
  },
  {
    "name": "t _loadCharacters",
    "type": "CPP"
  },
  {
    "name": "t __inputStreamReturnCharacter",
    "type": "CPP"
  },
  {
    "name": "t __inputStreamSkipWhitespace",
    "type": "CPP"
  },
  {
    "name": "t __inputStreamScanToCharacters",
    "type": "CPP"
  },
  {
    "name": "t _parseWhitespace",
    "type": "CPP"
  },
  {
    "name": "t _reportNewLeaf",
    "type": "CPP"
  },
  {
    "name": "t _parseTag",
    "type": "CPP"
  },
  {
    "name": "t _parseAttributeValue",
    "type": "CPP"
  },
  {
    "name": "t __inputStreamSetMark",
    "type": "CPP"
  },
  {
    "name": "t __inputStreamAtEOF",
    "type": "CPP"
  },
  {
    "name": "t __inputStreamGetCharactersFromMark",
    "type": "CPP"
  },
  {
    "name": "T _CFAllocatorGetPreferredSizeForSize",
    "type": "CPP"
  },
  {
    "name": "t __inputStreamClearMark",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLNodeGetString",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLNodeGetInfoPtr",
    "type": "CPP"
  },
  {
    "name": "t _pushXMLNode",
    "type": "CPP"
  },
  {
    "name": "t __inputStreamMatchString",
    "type": "CPP"
  },
  {
    "name": "t __inputStreamBackUpToMark",
    "type": "CPP"
  },
  {
    "name": "t _restoreToMark",
    "type": "CPP"
  },
  {
    "name": "t __inputStreamComposingErrorOccurred",
    "type": "CPP"
  },
  {
    "name": "t _parseEntityReference",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLCreateStringByUnescapingEntities",
    "type": "CPP"
  },
  {
    "name": "t ___CFXMLParserDeallocate",
    "type": "CPP"
  },
  {
    "name": "t __freeInputStream",
    "type": "CPP"
  },
  {
    "name": "t ___CFXMLNodeDeallocate",
    "type": "CPP"
  },
  {
    "name": "t _CFPreferencesIsManaged",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsIsUserManaged",
    "type": "CPP"
  },
  {
    "name": "t _locked_getManagedStateCache",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsGetPathForManagedBundleID",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsGetPathForManagedBundleID_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringBeginEditing",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringEndEditing",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString length]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString attributesAtIndex:effectiveRange:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale characterDirectionForLanguage:]",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleGetLanguageCharacterDirection",
    "type": "CPP"
  },
  {
    "name": "T _CFStorageCreateWithSubrange",
    "type": "CPP"
  },
  {
    "name": "t __CFStorageFindNodeContainingByteRange",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectSetI enumerateObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "T __CFDiscorporateMemoryAllocate",
    "type": "CPP"
  },
  {
    "name": "T __CFDiscorporateMemoryDeallocate",
    "type": "CPP"
  },
  {
    "name": "T __CFDiscorporateMemoryDematerialize",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale canonicalLocaleIdentifierFromString:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale canonicalLanguageIdentifierFromString:]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringTokenizerCreate",
    "type": "CPP"
  },
  {
    "name": "t _____CFSTLoadCoreNLP_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFStringTokenizerAdvanceToNextToken",
    "type": "CPP"
  },
  {
    "name": "T _CFStringTokenizerGetCurrentTokenRange",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringTokenizerDeallocate",
    "type": "CPP"
  },
  {
    "name": "T _CFPreferencesCopyKeyList",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesCopyKeyListWithContainer",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences copyKeyListForIdentifier:user:host:container:]",
    "type": "CPP"
  },
  {
    "name": "t ___64-[_CFXPreferences copyKeyListForIdentifier:user:host:container:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource alreadylocked_copyKeyList]",
    "type": "CPP"
  },
  {
    "name": "t ___CFStorageReleaseNode",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsGetRangeOfFragment",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsGetRangeOfQuery",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCopyHost",
    "type": "CPP"
  },
  {
    "name": "T __CFStringCreateByRemovingPercentEncoding",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCopyFragment",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCopyPercentEncodedPath",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray firstObject]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet setSet:]",
    "type": "CPP"
  },
  {
    "name": "T __CFOperatingSystemVersionIsAtLeastVersion",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM setObservationInfo:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSDictionaryM automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray _mutate]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObjects:count:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet setByAddingObjectsFromArray:]",
    "type": "CPP"
  },
  {
    "name": "T _CFServiceControllerCopyServicesEntries",
    "type": "CPP"
  },
  {
    "name": "T _CFServiceControllerCopyServicesEntriesForLocalizations",
    "type": "CPP"
  },
  {
    "name": "t __CFPreferencesFlushBundleID",
    "type": "CPP"
  },
  {
    "name": "t ___CFServicesCopyLoadedLocalizationsFromServicePList",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFSet mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFSet isEqual:]",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetIntersect",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringIsRegionalIndicatorAtIndex",
    "type": "CPP"
  },
  {
    "name": "t _____NSSetEnumerate_block_invoke.8",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyInfoDictionaryForURL",
    "type": "CPP"
  },
  {
    "name": "t __CFIsResourceAtURL",
    "type": "CPP"
  },
  {
    "name": "t __CFIsResourceCommon",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetPascalStringPtr",
    "type": "CPP"
  },
  {
    "name": "T _CFStringEncodingIsValidCombiningCharacterForLatin1",
    "type": "CPP"
  },
  {
    "name": "T _CFDateFormatterGetFormat",
    "type": "CPP"
  },
  {
    "name": "T _CFDateFormatterCreateDateFormatFromTemplate",
    "type": "CPP"
  },
  {
    "name": "t _useTemplatePatternGenerator",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udatpg_open",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateFormatterCreateDateFormatFromTemplate_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udatpg_getSkeleton",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udatpg_getBestPattern",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary enumerateKeysAndObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexOfObject:inRange:]",
    "type": "CPP"
  },
  {
    "name": "T _CFBitVectorContainsBit",
    "type": "CPP"
  },
  {
    "name": "t ___CFBitVectorCountBits",
    "type": "CPP"
  },
  {
    "name": "T __CFWriteStreamSignalEventDelayed",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray getObjects:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM objectEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate description]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFTimer fire]",
    "type": "CPP"
  },
  {
    "name": "t ___CFFireTimer",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFTimer timeInterval]",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopTimerGetInterval",
    "type": "CPP"
  },
  {
    "name": "t _becameInvisible",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray addObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray insertObject:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCreateByResolvingAliasFile",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__URLCreateByResolvingAliasFile_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet sortUsingComparator:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet isSubsetOfSet:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet orderedSetWithOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet orderedSetWithArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet isEqualToOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet sortedArrayUsingComparator:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet sortedArrayFromRange:options:usingComparator:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet sortedArrayFromRange:options:usingComparator:]",
    "type": "CPP"
  },
  {
    "name": "T _CFUUIDGetConstantUUIDWithBytes",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInRegisterFactoryFunction",
    "type": "CPP"
  },
  {
    "name": "t __CFPFactoryCommonCreateLocked",
    "type": "CPP"
  },
  {
    "name": "t ____CFBundlePluginLogger_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInRegisterPlugInType",
    "type": "CPP"
  },
  {
    "name": "t __CFPlugInRegisterPlugInTypeLocked",
    "type": "CPP"
  },
  {
    "name": "t __CFPFactoryFindLocked",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInInstanceCreate",
    "type": "CPP"
  },
  {
    "name": "t ___CFPLUGIN_IS_CALLING_OUT_TO_A_FACTORY_FUNCTION__",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInAddInstanceForFactory",
    "type": "CPP"
  },
  {
    "name": "t _CFPlugInAddInstanceForFactory.cold.1",
    "type": "CPP"
  },
  {
    "name": "T _CFBundlePreflightExecutable",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleDlfcnPreflight",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObserverRegistration observer]",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL startAccessingSecurityScopedResource]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLStartAccessingSecurityScopedResource",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__CFURLStartAccessingSecurityScopedResource_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString deleteCharactersInRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary objectsForKeys:notFoundMarker:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet set]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetSetProxy initWithOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetSetProxy dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetI copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetSetProxy count]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetSetProxy objectEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetSetProxy member:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetI indexOfObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectsInRange:withObjectsFromArray:]",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberFormatterGetValueFromString",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_unum_parseDecimal",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumInitWithInt16",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM mutableCopy]",
    "type": "CPP"
  },
  {
    "name": "t ___61-[NSOrderedSet sortedArrayFromRange:options:usingComparator:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate laterDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet sortRange:options:usingComparator:]",
    "type": "CPP"
  },
  {
    "name": "t ___57-[NSMutableOrderedSet sortRange:options:usingComparator:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectsInRange:withObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM containsObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFSet objectEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t +[NSException raise:format:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSException exceptionWithName:reason:userInfo:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSException initWithName:reason:userInfo:]",
    "type": "CPP"
  },
  {
    "name": "t ___exceptionPreprocess",
    "type": "CPP"
  },
  {
    "name": "t _objectIsKindOfClass",
    "type": "CPP"
  },
  {
    "name": "t -[NSException userInfo]",
    "type": "CPP"
  },
  {
    "name": "t ___exceptionMatch",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamSetDispatchQueue",
    "type": "CPP"
  },
  {
    "name": "t __CFStreamSetDispatchQueue",
    "type": "CPP"
  },
  {
    "name": "t ____legacyStreamRunLoop_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __legacyStreamRunLoop_workThread",
    "type": "CPP"
  },
  {
    "name": "t _fileSchedule",
    "type": "CPP"
  },
  {
    "name": "t _constructCFFD",
    "type": "CPP"
  },
  {
    "name": "t __fs_retain",
    "type": "CPP"
  },
  {
    "name": "t _fileCallBack",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamGetInfoPointer",
    "type": "CPP"
  },
  {
    "name": "t ____signalEventQueue_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __fs_release",
    "type": "CPP"
  },
  {
    "name": "t __cfstream_shared_signalEventSync",
    "type": "CPP"
  },
  {
    "name": "t _fileCopyProperty",
    "type": "CPP"
  },
  {
    "name": "t __CFFileDescriptorInduceFakeReadCallBack",
    "type": "CPP"
  },
  {
    "name": "t ____CFFileDescriptorInduceFakeReadCallBack_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamCopyDispatchQueue",
    "type": "CPP"
  },
  {
    "name": "t __CFStreamCopyDispatchQueue",
    "type": "CPP"
  },
  {
    "name": "t _fileUnschedule",
    "type": "CPP"
  },
  {
    "name": "t ___CFFileDescriptorCancel",
    "type": "CPP"
  },
  {
    "name": "T _CFFileDescriptorInvalidate",
    "type": "CPP"
  },
  {
    "name": "t ___CFFileDescriptorInvalidate_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFFileDescriptorCreate_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t ___CFFileDescriptorDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFFileDescriptorCreate_block_invoke_5",
    "type": "CPP"
  },
  {
    "name": "t _____CFFileDescriptorDeallocate_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet setByAddingObjectsFromSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSException dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexOfObject:inSortedRange:options:usingComparator:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray removeObjectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleFullName",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCopyUsesMetric",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleGetMeasurementSystemGuts",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleGetMeasurementSystemForPreferences",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale componentsFromLocaleIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale localeIdentifierFromComponents:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet orderedSetWithSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper ordinalityOfUnit:inUnit:forDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar ordinalityOfUnit:inUnit:forDate:]",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarGetOrdinalityOfUnit",
    "type": "CPP"
  },
  {
    "name": "t ___CFCalendarGetOrdinalityOfUnit3",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamCreateWithData",
    "type": "CPP"
  },
  {
    "name": "T _CFTimeZoneCopySystem",
    "type": "CPP"
  },
  {
    "name": "T _CFDateFormatterCreateISO8601Formatter",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarSetFirstWeekday",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarSetMinimumDaysInFirstWeek",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsSetQueryItems",
    "type": "CPP"
  },
  {
    "name": "t __CFURLComponentsSetQueryItemsInternal",
    "type": "CPP"
  },
  {
    "name": "t ____CFURLComponentsSetQueryItemsInternal_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsGetURLQueryAllowedCharacterSet",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsSetPercentEncodedQuery",
    "type": "CPP"
  },
  {
    "name": "t __hasNet",
    "type": "CPP"
  },
  {
    "name": "t _CFUniCharGetConditionalCaseMappingFlags",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI objectEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t ___NSMS2a_x86_64",
    "type": "CPP"
  },
  {
    "name": "t ___NSMS2b_x86_64a",
    "type": "CPP"
  },
  {
    "name": "t ___NSMS2b_x86_64b",
    "type": "CPP"
  },
  {
    "name": "t ___extendLocationForward",
    "type": "CPP"
  },
  {
    "name": "t ____CFMachPortCreateWithPort2_block_invoke.3",
    "type": "CPP"
  },
  {
    "name": "t ___CFMachPortCheck",
    "type": "CPP"
  },
  {
    "name": "t _____CFMachPortChecker_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFMessagePortInvalidationCallBack",
    "type": "CPP"
  },
  {
    "name": "T _CFMessagePortInvalidate",
    "type": "CPP"
  },
  {
    "name": "t ___CFMessagePortDeallocate",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreatePropertyFromResource",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateFileReferenceURL",
    "type": "CPP"
  },
  {
    "name": "t __CFURLCopyFileReferenceURLPath",
    "type": "CPP"
  },
  {
    "name": "t ____CFURLCopyFileReferenceURLPath_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _createFileReferencePath",
    "type": "CPP"
  },
  {
    "name": "t _FileReferenceURLPathToFullURLPath",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSCreatePathForFileID_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleGetDataPointerForName",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCopySecurityScopeFromFileURL",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__URLCopySecurityScopeFromFileURL_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFURLAttachSecurityScopeToFileURL",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__URLAttachSecurityScopeToFileURL_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation setReturnValue:]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLEnumeratorCreateForMountedVolumes",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__URLEnumeratorCreateForMountedVolumes_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean hash]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary _mutate]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenArrayM mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSMS2c",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFTimer fireDate]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet intersectOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t ___61-[NSDictionary keysSortedByValueWithOptions:usingComparator:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___47-[NSDictionary keysSortedByValueUsingSelector:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFType _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionaryGetCountOfKey",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar acquireWildcardName:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper rangeOfUnit:inUnit:forDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar rangeOfUnit:inUnit:forDate:]",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarGetRangeOfUnit",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI enumerateObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleIsExecutableLoaded",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFData _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFData _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashReplaceValue",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashSuppressRC",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashUnsuppressRC",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper _copyWrappedCalendar]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper maximumRangeOfUnit:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar maximumRangeOfUnit:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents setWeekday:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone isEqualToTimeZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents setWeekOfYear:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper isDateInWeekend:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar isDateInWeekend:]",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarIsDateInWeekend",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_isWeekend",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet reverseObjectEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetReverseEnumerator initWithObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetReverseEnumerator nextObject]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetReverseEnumerator dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet lastObject]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet orderedSetWithOrderedSet:range:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsGetURLFragmentAllowedCharacterSet",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate earlierDate:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSTimeZone timeZoneWithAbbreviation:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSTimeZone abbreviationDictionary]",
    "type": "CPP"
  },
  {
    "name": "T __NSIsNSTimeZone",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone isNSTimeZone__]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationDistributedTokenRegistration invalidate]",
    "type": "CPP"
  },
  {
    "name": "t ___58-[_CFXNotificationDistributedTokenRegistration invalidate]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone hash]",
    "type": "CPP"
  },
  {
    "name": "T __CFSuddenTerminationExitIfTerminationEnabled",
    "type": "CPP"
  },
  {
    "name": "T __CFVolumeObserverCreate",
    "type": "CPP"
  },
  {
    "name": "t ____InitializeDiskArbitrationKeys_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFVolumeObserverGetTypeID_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFDiskArbitration_DASessionCreate_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFLookupDiskArbitrationFunction",
    "type": "CPP"
  },
  {
    "name": "t ____CFLookupDiskArbitrationFunction_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFDiskArbitration_DARegisterDiskAppearedCallback_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFDiskArbitration_DARegisterDiskDescriptionChangedCallback_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFDiskArbitration_DARegisterDiskDisappearedCallback_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFDiskArbitration_DARegisterDiskUnmountApprovalCallback_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFDiskArbitration_DARegisterIdleCallback_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFDiskArbitration_DASessionSetDispatchQueue",
    "type": "CPP"
  },
  {
    "name": "t _____CFDiskArbitration_DASessionSetDispatchQueue_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __VolumeObserverDiskAppearedCallback",
    "type": "CPP"
  },
  {
    "name": "t ___CFDiskArbitration_DADiskCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t _____CFDiskArbitration_DADiskCopyDescription_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __IsDataVolume",
    "type": "CPP"
  },
  {
    "name": "t __VolumeIsAutomounted",
    "type": "CPP"
  },
  {
    "name": "t __VolumeObserverIdleCallback",
    "type": "CPP"
  },
  {
    "name": "t ____VolumeObserverInstallIdleTimer_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___cf_atfork_prepare",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArray0 retainCount]",
    "type": "CPP"
  },
  {
    "name": "T __CFURLIsPromiseName",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopRemoveSourceFromMode",
    "type": "CPP"
  },
  {
    "name": "T ___CFRunLoopEnableAuxiliaryAppNapNotifications",
    "type": "CPP"
  },
  {
    "name": "t _____CFRunLoopEnableAuxiliaryAppNapNotifications_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFBitVectorCreateMutable",
    "type": "CPP"
  },
  {
    "name": "T _CFBitVectorSetCount",
    "type": "CPP"
  },
  {
    "name": "T _CFBitVectorSetAllBits",
    "type": "CPP"
  },
  {
    "name": "T _CFBitVectorSetBitAtIndex",
    "type": "CPP"
  },
  {
    "name": "t _____CFRunLoopSetOptionsReason_block_invoke_4.105",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCreateInfoDictFromMainExecutable",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleGetSectData",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCreateInfoDictFromData",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopRun",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCopyInfoDictionaryInResourceFork",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyInfoDictionaryInResourceForkWithAllocator",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleForksCouldBeResourceFile",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL stopAccessingSecurityScopedResource]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLStopAccessingSecurityScopedResource",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__CFURLStopAccessingSecurityScopedResource_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray initWithObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL removeCachedResourceValueForKey:]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLClearResourcePropertyCacheForKey",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents setNanosecond:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSLocalTimeZone copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSLocalTimeZone name]",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale localeWithLocaleIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleEnsureAllBundlesUpToDate",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleDYLDCopyLoadedImagePathsIfChanged",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCreateCurrentDirectoryURL",
    "type": "CPP"
  },
  {
    "name": "t __CFGetCurrentDirectory",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM copy]",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCopyQueryItems",
    "type": "CPP"
  },
  {
    "name": "t __CFURLComponentsCopyQueryItemsInternal",
    "type": "CPP"
  },
  {
    "name": "T _CFSetGetCountOfValue",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone abbreviation]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSLocalTimeZone abbreviationForDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSTimeZone abbreviationForDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSTimeZone daylightSavingTimeOffsetForDate:]",
    "type": "CPP"
  },
  {
    "name": "t _getTimeZoneDisplayName",
    "type": "CPP"
  },
  {
    "name": "t _readDataSchedule",
    "type": "CPP"
  },
  {
    "name": "t _dataCanRead",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderTimeZone initWithName:data:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSDate dateWithTimeInterval:sinceDate:]",
    "type": "CPP"
  },
  {
    "name": "t __CFProcessNameString",
    "type": "CPP"
  },
  {
    "name": "t ___88-[CFPrefsPlistSource handleReply:toRequestNewDataMessage:onConnection:retryCount:error:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFStringConvertWindowsCodepageToEncoding",
    "type": "CPP"
  },
  {
    "name": "T _CFStringConvertEncodingToWindowsCodepage",
    "type": "CPP"
  },
  {
    "name": "t ___CFToWinLatin1",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsApplyChangesQueueToDictionary",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDictionary release]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeAllObjects]",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleEffectiveLayoutVersion",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean unsignedIntegerValue]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean unsignedLongValue]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents setWeekdayOrdinal:]",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleURLLooksLikeBundle",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCreateIfLooksLikeBundle",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleGetTypeID",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet classForCoder]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray classForCoder]",
    "type": "CPP"
  },
  {
    "name": "T _CFCopySystemVersionString",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary classForCoder]",
    "type": "CPP"
  },
  {
    "name": "t ___CFArrayCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T __CFSuddenTerminationExitWhenTerminationEnabled",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar weekdaySymbols]",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCreateCopy",
    "type": "CPP"
  },
  {
    "name": "T __CFWriteStreamInitialize",
    "type": "CPP"
  },
  {
    "name": "T __CFWriteStreamDeallocate",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar componentsInTimeZone:fromDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents setQuarter:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents setWeekOfMonth:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents setYearForWeekOfYear:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents _initWithCFDateComponents:]",
    "type": "CPP"
  },
  {
    "name": "T _CFDateComponentsCreateCopy",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents hash]",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateComponentsHash",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar isDate:equalToDate:toUnitGranularity:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL fileReferenceURL]",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSGetFileSystemRepresentationForFileID_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFPropertyListCreateFromXMLString",
    "type": "CPP"
  },
  {
    "name": "T __CFPropertyListCreateFromXMLStringError",
    "type": "CPP"
  },
  {
    "name": "t ___CFActiveProcessorCount",
    "type": "CPP"
  },
  {
    "name": "t ____deque_enumerateObjectsWithOptionsBlock_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopySharedSupportURL",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationPost.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFStringEncodingByteLengthForCharacters",
    "type": "CPP"
  },
  {
    "name": "t ___CFToUTF8Len",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFError classForCoder]",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyXPCBootstrapMainBundleLanguages",
    "type": "CPP"
  },
  {
    "name": "t ____CFBundleCopyXPCBootstrapMainBundleLanguages_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFBundleCopyXPCBootstrapMainBundleLanguages_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate addTimeInterval:]",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesAddSuitePreferencesToAppWithContainer",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences addSuitePreferences:toAppIdentifier:container:]",
    "type": "CPP"
  },
  {
    "name": "t ___65-[_CFXPreferences addSuitePreferences:toAppIdentifier:container:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___65-[_CFXPreferences addSuitePreferences:toAppIdentifier:container:]_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t ___65-[_CFXPreferences addSuitePreferences:toAppIdentifier:container:]_block_invoke_4",
    "type": "CPP"
  },
  {
    "name": "t ___65-[_CFXPreferences addSuitePreferences:toAppIdentifier:container:]_block_invoke.106",
    "type": "CPP"
  },
  {
    "name": "t ___65-[_CFXPreferences addSuitePreferences:toAppIdentifier:container:]_block_invoke.107",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences(SearchListAdditions) replaceSearchList:withSearchList:]",
    "type": "CPP"
  },
  {
    "name": "t ___73-[_CFXPreferences(SearchListAdditions) replaceSearchList:withSearchList:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource replaceSource:withSource:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource dealloc]",
    "type": "CPP"
  },
  {
    "name": "t ___65-[_CFXPreferences addSuitePreferences:toAppIdentifier:container:]_block_invoke.114",
    "type": "CPP"
  },
  {
    "name": "t ___65-[_CFXPreferences addSuitePreferences:toAppIdentifier:container:]_block_invoke_2.115",
    "type": "CPP"
  },
  {
    "name": "t ___65-[_CFXPreferences addSuitePreferences:toAppIdentifier:container:]_block_invoke_3.116",
    "type": "CPP"
  },
  {
    "name": "t ___65-[_CFXPreferences addSuitePreferences:toAppIdentifier:container:]_block_invoke_4.117",
    "type": "CPP"
  },
  {
    "name": "t ___65-[_CFXPreferences addSuitePreferences:toAppIdentifier:container:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary removeObjectForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet description]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet descriptionWithLocale:indent:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSTimeZone data]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSLocalTimeZone classForCoder]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSLocalTimeZone encodeWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "T _CFCopyHomeDirectoryURL",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences currentUserHasInvalidHomeDirectory].cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleGrokObjCImageInfoFromMainExecutable",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCreateErrorDebug",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInCreate",
    "type": "CPP"
  },
  {
    "name": "t __registerFactoryLocked",
    "type": "CPP"
  },
  {
    "name": "t __CFPlugInRegisterFactoryFunctionByNameLocked",
    "type": "CPP"
  },
  {
    "name": "t __registerTypeLocked",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInGetBundle",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInFindFactoriesForPlugInTypeInPlugIn",
    "type": "CPP"
  },
  {
    "name": "t __CFBundlePlugInLoaded",
    "type": "CPP"
  },
  {
    "name": "t __CFPFactoryAddInstanceLocked",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleUnscheduleForUnloading",
    "type": "CPP"
  },
  {
    "name": "t ____CFBundleLoadingLogger_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInRemoveInstanceForFactory",
    "type": "CPP"
  },
  {
    "name": "t __CFPFactoryRemoveInstanceLocked",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleScheduleForUnloading",
    "type": "CPP"
  },
  {
    "name": "t __CFGetHandleForLoadedLibrary",
    "type": "CPP"
  },
  {
    "name": "t __CFIsMatchingLibrary",
    "type": "CPP"
  },
  {
    "name": "T __CFSuddenTerminationDisablingCount",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationDistributedTokenQueueRegistration queue]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale languageCode]",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsCopyBackstopAppleLocaleOrLanguageForKey_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents description]",
    "type": "CPP"
  },
  {
    "name": "t __CFDateComponentsCopyDescriptionInner",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopAddSource_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFRunLoopError_MainThreadHasExited",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopWakeUp_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopWakeUp_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "T __CFPropertyListCopyTopLevelKeys",
    "type": "CPP"
  },
  {
    "name": "t ___CFBinaryPlistCopyTopLevelKeys",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyResourceURLsOfTypeInDirectory",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_unum_getSymbol",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberFormatterCreateNumberFromString",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary keysSortedByValueUsingComparator:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet __applyValues:context:]",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleCopyAvailableLocaleIdentifiers",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleCopyISOLanguageCodes",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCopyCStringsAsArray",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCopyExemplarCharSet",
    "type": "CPP"
  },
  {
    "name": "T __CFCreateCharacterSetFromUSet",
    "type": "CPP"
  },
  {
    "name": "t ___CFCSetIsBitmapEqualToRange",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet classForCoder]",
    "type": "CPP"
  },
  {
    "name": "T __CFCharacterSetIsMutable",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet encodeWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "T __CFCharacterSetIsInverted",
    "type": "CPP"
  },
  {
    "name": "T __CFCharacterSetGetKeyedCodingType",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet bitmapRepresentation]",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetCreateBitmapRepresentation",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateData",
    "type": "CPP"
  },
  {
    "name": "t _CFUniCharCompatibilityDecompose",
    "type": "CPP"
  },
  {
    "name": "t _CFUniCharPrecomposeCharacter",
    "type": "CPP"
  },
  {
    "name": "t ___CFUniCharLoadPrecompositionTable",
    "type": "CPP"
  },
  {
    "name": "t ___CFUniCharRecursivelyCompatibilityDecomposeCharacter",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesWriteDomainDictionaryToPath",
    "type": "CPP"
  },
  {
    "name": "T _CFURLWriteDataAndPropertiesToResource",
    "type": "CPP"
  },
  {
    "name": "t __CFWriteBytesToFile",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesManagementStatusChangedForDomains",
    "type": "CPP"
  },
  {
    "name": "t __handleExternalNotification",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences flushManagedSources]",
    "type": "CPP"
  },
  {
    "name": "t ___38-[_CFXPreferences flushManagedSources]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___38-[_CFXPreferences flushManagedSources]_block_invoke.69",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsResetManagedPreferencesStateCache",
    "type": "CPP"
  },
  {
    "name": "T _CFGetUserName",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet _cfTypeID]",
    "type": "CPP"
  },
  {
    "name": "t __CFGetCachedUnsandboxedHomeDirectoryForCurrentUser",
    "type": "CPP"
  },
  {
    "name": "t ____CFGetCachedUnsandboxedHomeDirectoryForCurrentUser_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsGetImpersonatedApplicationAuditToken",
    "type": "CPP"
  },
  {
    "name": "t ____CFAuditTokenForSelf_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _locallySetValueOverlayMergeFunc",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopContainsObserver",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopObserverGetContext",
    "type": "CPP"
  },
  {
    "name": "T __CFURLIsItemPromiseAtURL",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone daylightSavingTimeOffset]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSLocalTimeZone daylightSavingTimeOffsetForDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache setEvictsObjectsWhenApplicationEntersBackground:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexOfObjectAtIndexes:options:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar nextDateAfterDate:matchingHour:minute:second:options:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSException reason]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexOfObjectPassingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexOfObjectWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI_Transfer mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenOrderedSetM copy]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI_Transfer enumerateObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation invokeUsingIMP:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenOrderedSetM copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringHashNSString",
    "type": "CPP"
  },
  {
    "name": "t ___32-[NSDictionary __apply:context:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDate timeIntervalSinceReferenceDate]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDate dealloc]",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayGetLastIndexOfValue",
    "type": "CPP"
  },
  {
    "name": "T __CFGetProductName",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet minusOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSCalendar autoupdatingCurrentCalendar]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM enumerateObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet containsObject:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSTimeZone resetSystemTimeZone]",
    "type": "CPP"
  },
  {
    "name": "t ___resetTimeZone",
    "type": "CPP"
  },
  {
    "name": "t ___CFCalendarResetCurrentCalendar",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString _isCString]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetHyphenationLocationBeforeIndex",
    "type": "CPP"
  },
  {
    "name": "t __CFHyphenationGetHyphenationLocations",
    "type": "CPP"
  },
  {
    "name": "T _CFStringIsHyphenationAvailableForLocale",
    "type": "CPP"
  },
  {
    "name": "t ___CFHyphenationCopyTrieInstance",
    "type": "CPP"
  },
  {
    "name": "t ___CFHyphenationCreateDictionaryPathForLanguageAndRegion",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieCreateFromFile",
    "type": "CPP"
  },
  {
    "name": "t _getTokenizersForLocale",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieContains",
    "type": "CPP"
  },
  {
    "name": "t _findCFBurstTrieMappedLevel",
    "type": "CPP"
  },
  {
    "name": "t _findCFBurstTrieCompactMappedLevel",
    "type": "CPP"
  },
  {
    "name": "t _findCFBurstTrieMappedPage",
    "type": "CPP"
  },
  {
    "name": "t ___CFHyphenationGetHyphensForString",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieContainsCharacters",
    "type": "CPP"
  },
  {
    "name": "t _burstTrieConvertCharactersToUTF8",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString attributesAtIndex:longestEffectiveRange:inRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString string]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFData _providesConcreteBacking]",
    "type": "CPP"
  },
  {
    "name": "t -[NSException name]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper hash]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar hash]",
    "type": "CPP"
  },
  {
    "name": "t ___CFCalendarHash",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObjcObserverRegistration resetObserverAndChildren:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationContainer resetChildren]",
    "type": "CPP"
  },
  {
    "name": "T __CFSetOutOfMemoryErrorCallBack",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsGetCompatibilitySource",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString retain]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray initWithArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString autorelease]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectSetI member:]",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCopyFileURL",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FileCacheCreateShallowCopy_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "T ___CFStringIsMutable",
    "type": "CPP"
  },
  {
    "name": "T __CFNumberGetType2",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleGrokMachTypeForFatFile",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCurrentArchitecture",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInRegisterFactoryFunctionByName",
    "type": "CPP"
  },
  {
    "name": "t ___CFDictionaryHash",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashHash",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber unsignedCharValue]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean unsignedIntValue]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSDate allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "T __CFDiscorporateMemoryMaterialize",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar invalidate]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLGetFSRef",
    "type": "CPP"
  },
  {
    "name": "t __CFGetFSRefFromURL",
    "type": "CPP"
  },
  {
    "name": "t ___CFCarbonCore_FSPathMakeRef",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_FSPathMakeRef_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFPropertyListCreateSingleValue",
    "type": "CPP"
  },
  {
    "name": "t ___CFBinaryPlistIsDictionary",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString _fastCharacterContents]",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashGetCountOfValue",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashGetCountOfValue_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFPasteboardSetup_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardHandleMessageFromDaemon",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardHandleInvalidatedDaemonConnection_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFPasteboardAccessPendingPromiseEntryMap",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardHandleInvalidatedDaemonConnection_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t __CFPasteboardAccessPendingChangePasteboardMap",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardHandleInvalidatedDaemonConnection_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardDeallocate",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache dealloc]",
    "type": "CPP"
  },
  {
    "name": "t ___CFDictionaryCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashCopyDescription_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences ingestVolatileStateFromPreferences:]",
    "type": "CPP"
  },
  {
    "name": "t ___54-[_CFXPreferences ingestVolatileStateFromPreferences:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___54-[_CFXPreferences ingestVolatileStateFromPreferences:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___54-[_CFXPreferences ingestVolatileStateFromPreferences:]_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature isOneway]",
    "type": "CPP"
  },
  {
    "name": "T _CFPreferencesCopyApplicationList",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsCreatePreferencesDirectoryURLForTriplet",
    "type": "CPP"
  },
  {
    "name": "t __CFPreferencesCopySuffixForHost",
    "type": "CPP"
  },
  {
    "name": "t __CFPreferencesCopyApplicationListInDirectory",
    "type": "CPP"
  },
  {
    "name": "T _CFNotificationCenterRemoveEveryObserver",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationDarwinTokenRegistration invalidate]",
    "type": "CPP"
  },
  {
    "name": "T _CFPreferencesSetMultiple",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences setValuesForKeys:removingValuesForKeys:identifier:user:host:container:]",
    "type": "CPP"
  },
  {
    "name": "t ___89-[_CFXPreferences setValuesForKeys:removingValuesForKeys:identifier:user:host:container:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___89-[_CFXPreferences setValuesForKeys:removingValuesForKeys:identifier:user:host:container:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___CFToCanonicalUnicodeCheapEightBitWrapper",
    "type": "CPP"
  },
  {
    "name": "t ___CFFromASCII",
    "type": "CPP"
  },
  {
    "name": "t __VolumeObserverDiskDescriptionChangedCallback",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary hash]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary keyEnumerator]",
    "type": "CPP"
  },
  {
    "name": "T _CFBitVectorSetBits",
    "type": "CPP"
  },
  {
    "name": "T _CFBagSetValue",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarDecomposeAbsoluteTimeV",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarComposeAbsoluteTimeV",
    "type": "CPP"
  },
  {
    "name": "T _CFBagGetCount",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieSetCursorForBytes",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieCursorAdvanceForBytes",
    "type": "CPP"
  },
  {
    "name": "t _advanceMapCursor",
    "type": "CPP"
  },
  {
    "name": "t _advanceCursorMappedLevel",
    "type": "CPP"
  },
  {
    "name": "T __CFURLBookmarkDataCompare",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__CFURLCompareBookmarkData_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFFileSecurityCreateFromFilesec",
    "type": "CPP"
  },
  {
    "name": "t __CFAppSleepMonitorSystemAudioVolumeChanges",
    "type": "CPP"
  },
  {
    "name": "t ____CFAppSleepMonitorSystemAudioVolumeChanges_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsGetRangeOfPath",
    "type": "CPP"
  },
  {
    "name": "T _CFUUIDCreateWithBytes",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar minimumRangeOfUnit:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents setWeek:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents isLeapMonthSet]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM member:]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateResourcePropertyForKeyFromBookmarkData",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__CFURLCreateResourcePropertyForKeyFromBookmarkData_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_unum_setSymbol",
    "type": "CPP"
  },
  {
    "name": "t ___CFArrayEqual",
    "type": "CPP"
  },
  {
    "name": "T __CFStreamInstanceSize",
    "type": "CPP"
  },
  {
    "name": "T _CFStringTransform",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringTransformCreate",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringReplaceableLength",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringReplaceableChar32At",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringReplaceableCharAt",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringReplaceableCopy",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringReplaceableReplace",
    "type": "CPP"
  },
  {
    "name": "T _CFStringTokenizerSetStringWithOptions",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObjects:atIndexes:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringGetBidiLevelsAndResolvedDirections",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringGetAttributeAndLongestEffectiveRange",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL setTemporaryResourceValue:forKey:]",
    "type": "CPP"
  },
  {
    "name": "T __CFURLPromiseSetPhysicalURL",
    "type": "CPP"
  },
  {
    "name": "T __CFURLSetPermanentResourcePropertyForKey",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLSetPermanentResourcePropertyForKey_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray allObjects]",
    "type": "CPP"
  },
  {
    "name": "t _____NSSetEnumerate_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__CFPrefsWeakObservers mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t ___46-[__CFPrefsWeakObservers mutableCopyWithZone:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__CFPrefsWeakObservers dealloc]",
    "type": "CPP"
  },
  {
    "name": "T __CFMachPortInstallNotifyPort",
    "type": "CPP"
  },
  {
    "name": "t ___CFMessagePortReplyCallBack",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCStringIsPromiseName",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSuiteSearchListSource deferredNotifyCausedByLoadingOfChangesFromDictionary:toDictionary:]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetPascalString",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCreateFileReferenceURLFromFSRef",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLCreateFileReferenceURLFromFSRef_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateFromFSRef",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore__FSGetFSRefInformationFast_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFCreateURLFromFSRef",
    "type": "CPP"
  },
  {
    "name": "t ___CFCarbonCore_FSRefMakePath",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_FSRefMakePath_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleOpenBundleResourceMap",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleOpenBundleResourceFiles",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyResourceForkURLMayBeLocal",
    "type": "CPP"
  },
  {
    "name": "t ___CFBundleGetResourceData",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleOpenResourceFile",
    "type": "CPP"
  },
  {
    "name": "t ____CFBundleForksCouldBeResourceFile_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFCarbonCore_FSOpenResourceFileMapped",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_FSOpenResourceFileMapped_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleGetFunctionPointersForNames",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleGetDataPointersForNames",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCopyNumberFormat",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary getObjects:]",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardHandleInvalidateCacheMessage_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardWeakRef tryRetainPasteboard]",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardInvalidateCacheForGeneration_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet makeObjectsPerformSelector:withObject:]",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyBundleDevelopmentRegionFromVersResource",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyAuxiliaryExecutableURL",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectSetI objectEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString appendCharacters:length:]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringPad",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray firstObjectCommonWithArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObject:inRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean unsignedCharValue]",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale systemLocale]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar getEra:year:month:day:fromDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar dateWithEra:year:month:day:hour:minute:second:nanosecond:]",
    "type": "CPP"
  },
  {
    "name": "t ___forgetLockHandler",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet initWithObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet enumerateObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "T _CFBagCreateMutableCopy",
    "type": "CPP"
  },
  {
    "name": "T _CFBagRemoveAllValues",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry isHidden]",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardGetDataFlags",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardGetDataFlags_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray hash]",
    "type": "CPP"
  },
  {
    "name": "t ___CFArrayHash",
    "type": "CPP"
  },
  {
    "name": "t ___CFBooleanCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary keysOfEntriesWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t ___53-[NSDictionary keysOfEntriesWithOptions:passingTest:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectsInRange:withObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray replaceObjectAtIndex:withObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFLocale _prefs]",
    "type": "CPP"
  },
  {
    "name": "t -[NSBlockInvocation invoke]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar isDateInToday:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL removeAllCachedResourceValues]",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFBinaryHeapGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFBitVectorGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFStorageGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFTreeGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInInstanceGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFMessagePortGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFMachPortBoostGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFStringTokenizerGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopObserverGetTypeID",
    "type": "CPP"
  },
  {
    "name": "t __CFRetain",
    "type": "CPP"
  },
  {
    "name": "t __CFURLCreateWithFileSystemPath",
    "type": "CPP"
  },
  {
    "name": "T _CFUniCharDecompose",
    "type": "CPP"
  },
  {
    "name": "T __CFStringGetLength2",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCreate",
    "type": "CPP"
  },
  {
    "name": "T __CFStringGetFileSystemRepresentation",
    "type": "CPP"
  },
  {
    "name": "t ___CFDataInit",
    "type": "CPP"
  },
  {
    "name": "t __CFPropertyListCreateWithData",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEqual",
    "type": "CPP"
  },
  {
    "name": "T __CFArrayReplaceValues",
    "type": "CPP"
  },
  {
    "name": "t ___CFGetUGIDs",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource lock]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource unlock]",
    "type": "CPP"
  },
  {
    "name": "t ___CFXPreferencesCopyCurrentApplicationState",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsValidateValueForKey",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashRemoveValue",
    "type": "CPP"
  },
  {
    "name": "T __CFXPreferencesSetUserDefaultsPointer",
    "type": "CPP"
  },
  {
    "name": "t _mergeFunc",
    "type": "CPP"
  },
  {
    "name": "t ___CFBundleCopyFrameworkURLForExecutablePath",
    "type": "CPP"
  },
  {
    "name": "T ___CFStringDecodeByteStream2",
    "type": "CPP"
  },
  {
    "name": "T __CFGetPlatformName",
    "type": "CPP"
  },
  {
    "name": "t ___CFCharacterSetCreateCopy",
    "type": "CPP"
  },
  {
    "name": "T __CFURLIsFileReferenceURL",
    "type": "CPP"
  },
  {
    "name": "t __CFIsResourceAtPath",
    "type": "CPP"
  },
  {
    "name": "T __CFMachPortCreateWithPort2",
    "type": "CPP"
  },
  {
    "name": "t ___CFMachPortGetPort",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCreateStandardError",
    "type": "CPP"
  },
  {
    "name": "T __CFStringCreateWithBytesNoCopy",
    "type": "CPP"
  },
  {
    "name": "T _CFMakeUncollectable",
    "type": "CPP"
  },
  {
    "name": "t ___65-[__NSDictionaryI enumerateKeysAndObjectsWithOptions:usingBlock:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___53-[__NSArrayI enumerateObjectsWithOptions:usingBlock:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyInfoDictionaryInDirectory",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyLocalizationsForPreferences",
    "type": "CPP"
  },
  {
    "name": "T __CFRunLoopSetCurrent",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorDeallocate",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray setObject:atIndexedSubscript:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber getValue:]",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleLoadExecutableAndReturnError",
    "type": "CPP"
  },
  {
    "name": "T __CFPropertyListCreateXMLData",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamSetDispatchQueue",
    "type": "CPP"
  },
  {
    "name": "T ___CFSocketEnableCallBacks",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopGetNextTimerFireDate",
    "type": "CPP"
  },
  {
    "name": "t ___CFMessagePortCreateRemote",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFData mutableBytes]",
    "type": "CPP"
  },
  {
    "name": "T __CFLogvEx2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInRange:]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetNameOfEncoding",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingGetName",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesIsManaged",
    "type": "CPP"
  },
  {
    "name": "T __CFAttributedStringGetLength",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet hash]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFUniCharPrioritySort",
    "type": "CPP"
  },
  {
    "name": "T __CFPropertyListCreateFromXMLData",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyResourceURLsOfTypeForLocalization",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamGetError",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketCopyPeerAddress",
    "type": "CPP"
  },
  {
    "name": "T ___CFSocketSetSocketReadBufferAttrs",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t ___NSCollectionsShouldCopy",
    "type": "CPP"
  },
  {
    "name": "t _____NSCollectionsShouldCopy_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFErrorSetCallBackForDomain",
    "type": "CPP"
  },
  {
    "name": "t ___exceptionFinalize",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary removeAllObjects]",
    "type": "CPP"
  },
  {
    "name": "t +[NSDateComponents supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyInfoDictionaryInExecutable",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCreateInfoDictFromFile",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopTimerDoesRepeat",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet init]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet setSelect:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet setM:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet setFactor:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet setNumKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet setSeeds:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet setG:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet setRankTable:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet setKeys:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet setSubSharedKeySet:]",
    "type": "CPP"
  },
  {
    "name": "T __CFURLGetCatalogInfo",
    "type": "CPP"
  },
  {
    "name": "T __CFURLGetFSRef",
    "type": "CPP"
  },
  {
    "name": "t ___CFAttributedStringHash",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary countForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar isDate:inSameDayAsDate:]",
    "type": "CPP"
  },
  {
    "name": "T _CFErrorCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet intersectSet:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale ISOCountryCodes]",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleCopyISOCountryCodes",
    "type": "CPP"
  },
  {
    "name": "T __CFWebServicesCopyProviderInfo",
    "type": "CPP"
  },
  {
    "name": "t __CFWebServicesCopyProviderInfoForKey",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardBeginGeneration",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardSetData",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectsAtIndexes:withObjects:]",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udatpg_close",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringGetBidiLevels",
    "type": "CPP"
  },
  {
    "name": "t ___51-[__NSSetI enumerateObjectsWithOptions:usingBlock:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[NSURL bookmarkDataWithContentsOfURL:error:]",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateBookmarkDataFromFile",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCopyAliasFromPropertyListRepresentation",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCreateBookmarkDataFromAliasRecord",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardCreateDataForString",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardGetItemCount",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardPromiseData",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardBeginDragAndDrop",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardEndDragAndDrop",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardGetItemAtIndex",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumInitWithInt32",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray containsObjectIdenticalTo:]",
    "type": "CPP"
  },
  {
    "name": "t ___58-[__NSOrderedSetI enumerateObjectsWithOptions:usingBlock:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSException raise]",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleGetValueForInfoKey",
    "type": "CPP"
  },
  {
    "name": "T __CFRunLoopStopMode",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString cString]",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyExecutableArchitecturesForURL",
    "type": "CPP"
  },
  {
    "name": "T _CFFileSecurityCreateCopy",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity _filesec]",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocalePrefsChanged",
    "type": "CPP"
  },
  {
    "name": "t _____CFLocalePrefsChanged_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale availableLocaleIdentifiers]",
    "type": "CPP"
  },
  {
    "name": "t ___CFSortIndexesN",
    "type": "CPP"
  },
  {
    "name": "t _____CFSortIndexesN_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFSortIndexesNMerge",
    "type": "CPP"
  },
  {
    "name": "T __CFLocaleCopyAsIfCurrentWithOverrides",
    "type": "CPP"
  },
  {
    "name": "T _CFPreferencesFlushCaches",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource _sharedCleanup]",
    "type": "CPP"
  },
  {
    "name": "t _____CFLocaleResetCurrent_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFStorageGetCount",
    "type": "CPP"
  },
  {
    "name": "T _CFBagContainsValue",
    "type": "CPP"
  },
  {
    "name": "t +[NSException raise:format:arguments:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSException description]",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardResolveAllPromisedData",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardCopyFlavorsForItem",
    "type": "CPP"
  },
  {
    "name": "t __CFPlugInWillUnload",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleDlfcnUnload",
    "type": "CPP"
  },
  {
    "name": "T __CFStringCreateWithFormatAndArgumentsAux",
    "type": "CPP"
  },
  {
    "name": "t ___71-[NSSharedKeyDictionary enumerateKeysAndObjectsWithOptions:usingBlock:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet intersectsSet:]",
    "type": "CPP"
  },
  {
    "name": "T __CFStringTokenizerCreateNamePartsArrayWithString",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_unum_setDoubleAttribute",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet longCharacterIsMember:]",
    "type": "CPP"
  },
  {
    "name": "T __CFCharacterSetCreateKeyedCodingString",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "T _CFBagGetValues",
    "type": "CPP"
  },
  {
    "name": "T __CFStringCompareForHFS",
    "type": "CPP"
  },
  {
    "name": "t ___CFToUnicodeCheapEightBitWrapper",
    "type": "CPP"
  },
  {
    "name": "t ___forwarding_prep_1___",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSException callStackSymbols]",
    "type": "CPP"
  },
  {
    "name": "t __monitorDeviceIDForAudioVolumeChanges",
    "type": "CPP"
  },
  {
    "name": "t __synchronizeMute",
    "type": "CPP"
  },
  {
    "name": "t ___CFMessagePortPerform",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCloseBundleResourceMap",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean getValue:]",
    "type": "CPP"
  },
  {
    "name": "T _CFFileSecurityCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFFileSecuritySetMode",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity setMode:]",
    "type": "CPP"
  },
  {
    "name": "T _CFFileSecurityClearProperties",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity clearProperties:]",
    "type": "CPP"
  },
  {
    "name": "T __CFFileSecurityGetFilesec",
    "type": "CPP"
  },
  {
    "name": "T __CFRunLoopModeContainsMode",
    "type": "CPP"
  },
  {
    "name": "t _percentEscapeDecodeBuffer",
    "type": "CPP"
  },
  {
    "name": "T _CFStringTrim",
    "type": "CPP"
  },
  {
    "name": "T _CFFileDescriptorDisableCallBacks",
    "type": "CPP"
  },
  {
    "name": "t ___CFFileDescriptorDisableCallBacks_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _clearInvalidFileDescriptors",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCreateDisplayPathComponentsArray",
    "type": "CPP"
  },
  {
    "name": "t ___CFBitVectorGetBits",
    "type": "CPP"
  },
  {
    "name": "T __CFXPreferencesGetByHostIdentifierString",
    "type": "CPP"
  },
  {
    "name": "t ____CFXPreferencesGetByHostIdentifierString_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFStringTokenizerSetString",
    "type": "CPP"
  },
  {
    "name": "T __CFStringTokenizerTokenize",
    "type": "CPP"
  },
  {
    "name": "T __CFStringTokenizerTokenizeWithTranscriptions",
    "type": "CPP"
  },
  {
    "name": "T __CFURLReplaceObject",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArray0 init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArray0 dealloc]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSArray0 allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArray0 objectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "T _CFArrayExchangeValuesAtIndices",
    "type": "CPP"
  },
  {
    "name": "t __CFArraySortValues",
    "type": "CPP"
  },
  {
    "name": "t -[_NSJapaneseBigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSJapaneseBigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSJapaneseBigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t ___CFAttributedStringEqual",
    "type": "CPP"
  },
  {
    "name": "t ___CFAttributedStringCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringCreateWithSubstring",
    "type": "CPP"
  },
  {
    "name": "T __CFAttributedStringCreateWithRuns",
    "type": "CPP"
  },
  {
    "name": "T __CFAttributedStringGetNumberOfRuns",
    "type": "CPP"
  },
  {
    "name": "T __CFAttributedStringGetRuns",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringGetMutableString",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringRemoveAttribute",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringReplaceAttributedString",
    "type": "CPP"
  },
  {
    "name": "T __CFAttributedStringIsMutable",
    "type": "CPP"
  },
  {
    "name": "T ___CFAttributedStringMtbl",
    "type": "CPP"
  },
  {
    "name": "T __CFAttributedStringCheckAndReplace",
    "type": "CPP"
  },
  {
    "name": "T __CFAttributedStringCheckAndReplaceAttributed",
    "type": "CPP"
  },
  {
    "name": "T __CFAttributedStringCheckAndSetAttributes",
    "type": "CPP"
  },
  {
    "name": "T __CFAttributedStringCheckAndSetAttribute",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin_probe",
    "type": "CPP"
  },
  {
    "name": "t ___CFBagEqual",
    "type": "CPP"
  },
  {
    "name": "t ___CFBagHash",
    "type": "CPP"
  },
  {
    "name": "t ___CFBagCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t ___CFBagCreateTransfer",
    "type": "CPP"
  },
  {
    "name": "T _CFBagCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFBagGetValueIfPresent",
    "type": "CPP"
  },
  {
    "name": "T __CFBagIsMutable",
    "type": "CPP"
  },
  {
    "name": "T __CFBagSetCapacity",
    "type": "CPP"
  },
  {
    "name": "T _CFBagReplaceValue",
    "type": "CPP"
  },
  {
    "name": "t ___HALT",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorGetAllocator",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFAllocatorGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFAllocatorSetDefault",
    "type": "CPP"
  },
  {
    "name": "T __CFGetOutOfMemoryErrorCallBack",
    "type": "CPP"
  },
  {
    "name": "T ___CFRangeMake",
    "type": "CPP"
  },
  {
    "name": "t ___CFNullDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFNullCopyFormattingDescription",
    "type": "CPP"
  },
  {
    "name": "t ___CFNullCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFCollection_non_gc_storage_error",
    "type": "CPP"
  },
  {
    "name": "T __CFRuntimeSetCFMPresent",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorCustomSize",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorCustomMalloc",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorCustomCalloc",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorCustomValloc",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorCustomFree",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorCustomRealloc",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorNullDestroy",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorZoneIntrospectNoOp",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorCustomGoodSize",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorZoneIntrospectTrue",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorNullSize",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorNullMalloc",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorNullCalloc",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorNullValloc",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorNullFree",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorNullRealloc",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorNullAllocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorNullReallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorNullGoodSize",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocatorCustomDestroy",
    "type": "CPP"
  },
  {
    "name": "t +[__NSOrderedSetI automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSOrderedSetI allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet addObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet removeObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet addObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet addObjectsFromArray:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet addObjectsFromOrderedSet:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet addObjectsFromOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet addObjectsFromSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet intersectOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet minusOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet removeObjectsInArray:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet removeObjectsInArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet removeObjectsInOrderedSet:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet removeObjectsInOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet removeObjectsInSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet removeObjectsWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t ___53-[NSMutableSet removeObjectsWithOptions:passingTest:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet removeObjectsPassingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet replaceObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet setObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet setArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet setOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet unionOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet initWithCapacity:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet initWithObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "T _CFUniCharGetBidiCategory",
    "type": "CPP"
  },
  {
    "name": "T _CFUniCharGetFirstBidiParagraphLength",
    "type": "CPP"
  },
  {
    "name": "T _CFUniCharApplyUnicodeBidiAlgorithm",
    "type": "CPP"
  },
  {
    "name": "t _resolveExplicit",
    "type": "CPP"
  },
  {
    "name": "T _CFUniCharGetDefaultWritingDirection",
    "type": "CPP"
  },
  {
    "name": "t ___CFUniCharGetBooleanValueForKey",
    "type": "CPP"
  },
  {
    "name": "t ___CFRelativeDateTimeFormatterDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFRelativeDateTimeFormatterCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T __CFRelativeDateTimeFormatterGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T __CFRelativeDateTimeFormatterCreate",
    "type": "CPP"
  },
  {
    "name": "T __CFRelativeDateTimeFormatterCreateStringWithCalendarUnit",
    "type": "CPP"
  },
  {
    "name": "t +[NSTaggedPointerStringCStringContainer taggedPointerStringCStringContainer]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerStringCStringContainer retain]",
    "type": "CPP"
  },
  {
    "name": "t +[NSTaggedPointerString automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString smallestEncoding]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSArrayM automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSArrayM allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSFrozenArrayM automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenArrayM indexOfObjectIdenticalTo:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSFrozenArrayM allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32b40r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32b40r",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1252TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1252TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1252TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t ___CFBinaryHeapDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFBinaryHeapEqual",
    "type": "CPP"
  },
  {
    "name": "t ___CFBinaryHeapHash",
    "type": "CPP"
  },
  {
    "name": "t ___CFBinaryHeapCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFBinaryHeapCreate",
    "type": "CPP"
  },
  {
    "name": "t ___CFBinaryHeapCreateInit",
    "type": "CPP"
  },
  {
    "name": "T _CFBinaryHeapCreateCopy",
    "type": "CPP"
  },
  {
    "name": "T _CFBinaryHeapGetCount",
    "type": "CPP"
  },
  {
    "name": "T _CFBinaryHeapGetCountOfValue",
    "type": "CPP"
  },
  {
    "name": "T _CFBinaryHeapContainsValue",
    "type": "CPP"
  },
  {
    "name": "T _CFBinaryHeapGetMinimum",
    "type": "CPP"
  },
  {
    "name": "T _CFBinaryHeapGetMinimumIfPresent",
    "type": "CPP"
  },
  {
    "name": "T _CFBinaryHeapGetValues",
    "type": "CPP"
  },
  {
    "name": "T _CFBinaryHeapRemoveMinimumValue",
    "type": "CPP"
  },
  {
    "name": "T _CFBinaryHeapApplyFunction",
    "type": "CPP"
  },
  {
    "name": "T _CFBinaryHeapAddValue",
    "type": "CPP"
  },
  {
    "name": "T _CFBinaryHeapRemoveAllValues",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray count]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray objectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray insertObject:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray removeObjectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray replaceObjectAtIndex:withObject:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSPlaceholderArray allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin2TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin2TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin2TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSKoreanBigramKeySet_SKS dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSKoreanBigramKeySet_SKS initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSKoreanBigramKeySet_SKS isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t ___CFKeyedArchiverUIDCopyFormattingDescription",
    "type": "CPP"
  },
  {
    "name": "t ___CFKeyedArchiverUIDCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T __CFKeyedArchiverUIDGetValue",
    "type": "CPP"
  },
  {
    "name": "T ___CFBinaryPlistWriteToStreamWithEstimate",
    "type": "CPP"
  },
  {
    "name": "t ___CFBinaryPlistCreateDataUsingExternalBufferAllocator",
    "type": "CPP"
  },
  {
    "name": "t ___CFBinaryPlistIsArray",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO88596TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO88596TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO88596TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t ___CFBitVectorEqual",
    "type": "CPP"
  },
  {
    "name": "t ___CFBitVectorHash",
    "type": "CPP"
  },
  {
    "name": "t ___CFBitVectorCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFBitVectorCreateCopy",
    "type": "CPP"
  },
  {
    "name": "T _CFBitVectorCreateMutableCopy",
    "type": "CPP"
  },
  {
    "name": "T _CFBitVectorGetCountOfBit",
    "type": "CPP"
  },
  {
    "name": "T _CFBitVectorGetFirstIndexOfBit",
    "type": "CPP"
  },
  {
    "name": "T _CFBitVectorGetLastIndexOfBit",
    "type": "CPP"
  },
  {
    "name": "T _CFBitVectorFlipBitAtIndex",
    "type": "CPP"
  },
  {
    "name": "T _CFBitVectorFlipBits",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin6TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin6TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin6TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "T _CFStringEncodingPrecomposeLatinCharacter",
    "type": "CPP"
  },
  {
    "name": "t ___CFFromISOLatin1",
    "type": "CPP"
  },
  {
    "name": "t ___CFToISOLatin1Precompose",
    "type": "CPP"
  },
  {
    "name": "t ___CFToMacRomanPrecompose",
    "type": "CPP"
  },
  {
    "name": "t ___CFToWinLatin1Precompose",
    "type": "CPP"
  },
  {
    "name": "t ___CFToNextStepLatin",
    "type": "CPP"
  },
  {
    "name": "t ___CFFromNextStepLatin",
    "type": "CPP"
  },
  {
    "name": "t ___CFToNextStepLatinPrecompose",
    "type": "CPP"
  },
  {
    "name": "t ___CFFromUTF8Len",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCopyMainBundleExecutableURL",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleSetMainBundle",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleSupportsFHSBundles",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleLoadingLogger",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleMainBundleInfoDictionaryComesFromResourceFork",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCreateIfMightBeBundle",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleFlushBundleCaches",
    "type": "CPP"
  },
  {
    "name": "t ___CFBundleCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleGetExistingBundleWithBundleURL",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleGetHasChanged",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleSetStringsFilesShared",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyAppStoreReceiptURLInDirectory",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCopyAppStoreReceiptURL",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleGetExecutableType",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleSetCFMConnectionID",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCreateError",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleGetPlugIn",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleGetBundleWithIdentifierAndLibraryName",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleGetAllBundles",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCopyAllBundles",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCopyPrivateFrameworksURL",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyPrivateFrameworksURL",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCopySharedFrameworksURL",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopySharedFrameworksURL",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCopySharedSupportURL",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyBuiltInPlugInsURL",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleFlushCachesForURL",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleFlushQueryTableCache",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCopyResourceURLForLanguage",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCopyResourceURLsOfTypeForLanguage",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32r40r48r56r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32r40r48r56r",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleGetSupportedPlatforms",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleGetCurrentPlatform",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleAddResourceURL",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleRemoveResourceURL",
    "type": "CPP"
  },
  {
    "name": "t ___CFCharacterSetIsMutable",
    "type": "CPP"
  },
  {
    "name": "t ___CFCharacterSetCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t __CFCharacterSetCreateMutableCopy",
    "type": "CPP"
  },
  {
    "name": "t __CFCharacterSetIsLongCharacterMember",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetIsSurrogatePairMember",
    "type": "CPP"
  },
  {
    "name": "T _CFCharacterSetHasMemberInPlane",
    "type": "CPP"
  },
  {
    "name": "t ___CFCheckForExpandedSet",
    "type": "CPP"
  },
  {
    "name": "t ___CFApplySurrogatesInString",
    "type": "CPP"
  },
  {
    "name": "T __CFCharacterSetFast",
    "type": "CPP"
  },
  {
    "name": "T __CFCharacterSetGetKeyedCodingBuiltinType",
    "type": "CPP"
  },
  {
    "name": "T __CFCharacterSetGetKeyedCodingRange",
    "type": "CPP"
  },
  {
    "name": "T __CFCharacterSetSetIsInverted",
    "type": "CPP"
  },
  {
    "name": "t _fdCanWrite",
    "type": "CPP"
  },
  {
    "name": "T __CFReadStreamCreateFromFileDescriptor",
    "type": "CPP"
  },
  {
    "name": "T __CFWriteStreamCreateFromFileDescriptor",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamCreateWithBuffer",
    "type": "CPP"
  },
  {
    "name": "t _fileCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t _fileCanWrite",
    "type": "CPP"
  },
  {
    "name": "t _readDataCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t _dataGetBuffer",
    "type": "CPP"
  },
  {
    "name": "t _writeDataCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t _dataCanWrite",
    "type": "CPP"
  },
  {
    "name": "t _writeDataSchedule",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObject:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectAtIndex:withObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet _mutate]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet addObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet addObjectsFromArray:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet addObjectsFromOrderedSet:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet addObjectsFromOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet addObjectsFromSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet exchangeObjectAtIndex:withObjectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObjectsFromArray:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObjectsFromOrderedSet:range:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObjectsFromOrderedSet:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObjectsFromSet:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet moveObjectsAtIndexes:toIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeFirstObject]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeLastObject]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObject:inRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInRange:inArray:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInRange:inArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInArray:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInRange:inOrderedSet:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInRange:inOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInOrderedSet:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInRange:inSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsAtIndexes:options:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsPassingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObject:inRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectsAtIndexes:withObjects:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectsInRange:withObjectsFromArray:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectsInRange:withObjectsFromArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectsInRange:withObjectsFromOrderedSet:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectsInRange:withObjectsFromOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectsInRange:withObjectsFromSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet setArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet setObject:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet setObject:atIndexedSubscript:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet setObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet setOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet setSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet unionSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet initWithCapacity:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet initWithObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFDataCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t __CFDataCreateFixedMutableWithBuffer",
    "type": "CPP"
  },
  {
    "name": "T _CFDataFind",
    "type": "CPP"
  },
  {
    "name": "t +[__NSDictionaryI automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40b48r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40b48r",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI keyOfEntryWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t ___53-[__NSDictionaryI keyOfEntryWithOptions:passingTest:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40b48r56r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40b48r56r",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI keysOfEntriesWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t ___56-[__NSDictionaryI keysOfEntriesWithOptions:passingTest:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40b48o56r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40b48o56r",
    "type": "CPP"
  },
  {
    "name": "t +[__NSDictionaryI allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI _clumpingFactor]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI _clumpingInterestingThreshold]",
    "type": "CPP"
  },
  {
    "name": "t ___CLUMPINESS_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCopyExecutableURLInDirectory",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCopyOtherExecutableURLInDirectory",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin3TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin3TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin3TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSSingleObjectSetI automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t ___63-[__NSSingleObjectSetI enumerateObjectsWithOptions:usingBlock:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[__NSSingleObjectSetI allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "T _CFAbsoluteTimeAddGregorianUnits",
    "type": "CPP"
  },
  {
    "name": "T _CFAbsoluteTimeGetDifferenceAsGregorianUnits",
    "type": "CPP"
  },
  {
    "name": "T _CFAbsoluteTimeGetDayOfYear",
    "type": "CPP"
  },
  {
    "name": "T _CFAbsoluteTimeGetWeekOfYear",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin1TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin1TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin1TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "T _CFDateFormatterCreateDateFormatsFromTemplates",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateFormatterCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFDateFormatterGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFDateFormatterGetLocale",
    "type": "CPP"
  },
  {
    "name": "T _CFDateFormatterGetDateStyle",
    "type": "CPP"
  },
  {
    "name": "T _CFDateFormatterGetTimeStyle",
    "type": "CPP"
  },
  {
    "name": "T __CFDateFormatterCreateAttributedStringAndFieldsWithAbsoluteTime",
    "type": "CPP"
  },
  {
    "name": "t ___useTemplatePatternGenerator_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___useTemplatePatternGenerator_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t _____CFDateFormatterCreateForcedString_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFDateFormatterCreateForcedString_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateFormatterStoreSymbolPrefs",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateFormatterCorrectTimeWithTarget",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateFormatterCorrectTimeToARangeAroundCurrentDate",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateFormatterGetMaxYearGivenJapaneseEra",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionaryGetCountOfValue",
    "type": "CPP"
  },
  {
    "name": "T _CFDictionaryGetKeyIfPresent",
    "type": "CPP"
  },
  {
    "name": "t _CFDictionaryApply",
    "type": "CPP"
  },
  {
    "name": "t ___CFDictionaryApply_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFDictionaryGetKVOBit",
    "type": "CPP"
  },
  {
    "name": "T __CFDictionarySetKVOBit",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin4TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin4TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin4TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t __cow_allocation_failure",
    "type": "CPP"
  },
  {
    "name": "T __CFDoubledStringCreate",
    "type": "CPP"
  },
  {
    "name": "T __CFAccentuatedStringCreate",
    "type": "CPP"
  },
  {
    "name": "T __CFAffixedStringCreate",
    "type": "CPP"
  },
  {
    "name": "T __CFRLORightToLeftStringCreate",
    "type": "CPP"
  },
  {
    "name": "t _____CFAccentuatedStringCreateWithAcceptableAccentChars_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationTokenRefCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenRegistration _invalidate]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenRegistration _removeFromParent]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenRegistration object]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenRegistration observer]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationTokenRegistration handler]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationDarwinTokenRegistration notifyToken]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationDarwinTokenQueueRegistration dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationDarwinTokenQueueRegistration queue]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationDarwinTokenQueueRegistration setQueue:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationDistributedTokenQueueRegistration dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderSet count]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderSet member:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderSet objectEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderSet addObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderSet removeObject:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSPlaceholderSet allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderSet retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderSet release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderSet retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderSet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t ___CFErrorEqual",
    "type": "CPP"
  },
  {
    "name": "t ___CFErrorHash",
    "type": "CPP"
  },
  {
    "name": "t ___CFErrorCopyFormattingDescription",
    "type": "CPP"
  },
  {
    "name": "t ___CFErrorCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T __CFErrorCreateLocalizedRecoverySuggestion",
    "type": "CPP"
  },
  {
    "name": "T __CFErrorCreateRedactedDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFErrorCopyFailureReason",
    "type": "CPP"
  },
  {
    "name": "T _CFErrorCopyRecoverySuggestion",
    "type": "CPP"
  },
  {
    "name": "T _CFErrorGetCallBackBlockForDomain",
    "type": "CPP"
  },
  {
    "name": "t ___CFErrorSetCallBackForDomain_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFErrorGetCallBackForDomain",
    "type": "CPP"
  },
  {
    "name": "t _blockReleaseValueCallBack",
    "type": "CPP"
  },
  {
    "name": "t __CFErrorMachCallBack",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsSizeOfValue",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsSizeOfValue_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsDecodeKeyValuePairFromXPCMessage",
    "type": "CPP"
  },
  {
    "name": "t +[CFPDDataBuffer newBufferFromCFData:]",
    "type": "CPP"
  },
  {
    "name": "t +[CFPDDataBuffer newBufferFromFile:allowMappingIfSafe:]",
    "type": "CPP"
  },
  {
    "name": "t +[CFPDDataBuffer newBufferFromPropertyList:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDDataBuffer bytes]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDDataBuffer length]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDDataBuffer copyCFData]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDDataBuffer copyXPCData]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDDataBuffer copyPropertyListWithMutability:error:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDDataBuffer validatePlist]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDDataBuffer quicklyValidatePlistAndOnFailureInvokeBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDDataBuffer beginAccessing]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDDataBuffer endAccessing]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDDataBuffer purgable]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDCFDataBuffer initWithCFData:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDCFDataBuffer bytes]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDCFDataBuffer length]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDCFDataBuffer dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDCFDataBuffer copyCFData]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDCFDataBuffer copyXPCData]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDPurgeableBuffer initWithFileDescriptor:size:]",
    "type": "CPP"
  },
  {
    "name": "t _allocatePurgeable",
    "type": "CPP"
  },
  {
    "name": "t _deallocatePurgeable",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDPurgeableBuffer initWithPropertyList:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDPurgeableBuffer bytes]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDPurgeableBuffer length]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDPurgeableBuffer beginAccessing]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDPurgeableBuffer endAccessing]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDPurgeableBuffer purgable]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDPurgeableBuffer dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData length]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData bytes]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData _copyWillRetain]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData _isCompact]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData _providesConcreteBacking]",
    "type": "CPP"
  },
  {
    "name": "t +[NSConstantData new]",
    "type": "CPP"
  },
  {
    "name": "t +[NSConstantData allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData initWithBytes:length:copy:deallocator:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData initWithData:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData initWithBytes:length:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData initWithBytesNoCopy:length:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData initWithBytesNoCopy:length:freeWhenDone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData init]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData autorelease]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData retain]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData release]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData copy]",
    "type": "CPP"
  },
  {
    "name": "t ___CFFileDescriptorCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFFileDescriptorGetTypeID",
    "type": "CPP"
  },
  {
    "name": "t ___CFFileDescriptorCreate_block_invoke_4",
    "type": "CPP"
  },
  {
    "name": "T _CFFileDescriptorGetContext",
    "type": "CPP"
  },
  {
    "name": "t _cffd_is_writeable",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32r40r48r56r64r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32r40r48r56r64r",
    "type": "CPP"
  },
  {
    "name": "t __CFCopyExtensionForAbstractType",
    "type": "CPP"
  },
  {
    "name": "t __CFCreateDirectory",
    "type": "CPP"
  },
  {
    "name": "t __CFRemoveDirectory",
    "type": "CPP"
  },
  {
    "name": "t __CFIsAbsolutePath",
    "type": "CPP"
  },
  {
    "name": "t __CFStripTrailingPathSlashes",
    "type": "CPP"
  },
  {
    "name": "t __CFAppendConditionalTrailingPathSlash2",
    "type": "CPP"
  },
  {
    "name": "t __CFAppendPathComponent",
    "type": "CPP"
  },
  {
    "name": "t __CFAppendPathExtension",
    "type": "CPP"
  },
  {
    "name": "t __CFTransmutePathSlashes",
    "type": "CPP"
  },
  {
    "name": "t __CFMachPortDeallocationFailure",
    "type": "CPP"
  },
  {
    "name": "t __cfmp_log_failure",
    "type": "CPP"
  },
  {
    "name": "t __cfmp_copy_description",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleEntryDictionaryI objectEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSSingleEntryDictionaryI automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSSingleEntryDictionaryI allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "T __CFPropertListCreateFromFrozen",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1250TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1250TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1250TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T __CFLocaleResetCurrent",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleResetCurrent",
    "type": "CPP"
  },
  {
    "name": "T __CFLocaleCopyNumberingSystemForLocaleIdentifier",
    "type": "CPP"
  },
  {
    "name": "T __CFLocaleCopyValidNumberingSystemsForLocaleIdentifier",
    "type": "CPP"
  },
  {
    "name": "T __CFLocaleCreateLocaleIdentiferByReplacingLanguageCodeAndScriptCode",
    "type": "CPP"
  },
  {
    "name": "T __CFLocaleCopyAsIfCurrent",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleCopyISOCurrencyCodes",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCopyUEnumerationAsArray",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleCopyCommonISOCurrencyCodes",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier",
    "type": "CPP"
  },
  {
    "name": "T _CFLocaleGetLanguageLineDirection",
    "type": "CPP"
  },
  {
    "name": "T __CFLocaleGetCalendarDirection",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCopyPreferredLanguagesForCurrentUser",
    "type": "CPP"
  },
  {
    "name": "T __CFLocaleSetPreferredMeasurementSystem",
    "type": "CPP"
  },
  {
    "name": "t __CFLocalePostChangeNotification",
    "type": "CPP"
  },
  {
    "name": "T __CFLocaleCopyPreferredMeasurementSystem",
    "type": "CPP"
  },
  {
    "name": "T __CFLocaleSetPreferredTemperatureUnit",
    "type": "CPP"
  },
  {
    "name": "t __CFLocaleGetTemperatureUnitForPreferences",
    "type": "CPP"
  },
  {
    "name": "T __CFLocaleCopyPreferredTemperatureUnit",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleSetNOP",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCountryName",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleScriptName",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleVariantName",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleNoName",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCalendarName",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCopyCollationID",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCollationName",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCopyMeasurementSystem",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCopyTemperatureUnit",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCopyNumberFormat2",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCurrencyShortName",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCurrencyFullName",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleCopyDelimiter",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleICUKeywordValueName",
    "type": "CPP"
  },
  {
    "name": "t ___CFLocaleICUCurrencyName",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleDlfcnGetSymbolByName",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleGetCFMFunctionPointerForName",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleGetCFMFunctionPointersForNames",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFDictionary automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary setObservationInfo:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFDictionary allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSConstantArrayEnumerator initWithConstantArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSConstantArrayEnumerator allObjects]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSConstantArrayEnumerator nextObject]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray initWithObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSConstantArray automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray objectEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray objectAtIndexedSubscript:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSConstantArray new]",
    "type": "CPP"
  },
  {
    "name": "t +[NSConstantArray allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray mutableCopy]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray init]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray autorelease]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFMachPortCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFMachPortGetInvalidationCallBack",
    "type": "CPP"
  },
  {
    "name": "T _CFMachPortGetQueuedMessageCount",
    "type": "CPP"
  },
  {
    "name": "t ___CFDescribeCFMachPortPerformCallout",
    "type": "CPP"
  },
  {
    "name": "t _____CFDescribeCFMachPortPerformCallout_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar init]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar registrar]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar acquireDoubleWildcard:options:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar enumerateRegistrations:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar _copyDebugDescription]",
    "type": "CPP"
  },
  {
    "name": "t ___50-[_CFXNotificationRegistrar _copyDebugDescription]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFMessagePortCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T __CFMessagePortCreateLocalEx",
    "type": "CPP"
  },
  {
    "name": "T _CFMessagePortCreatePerProcessRemote",
    "type": "CPP"
  },
  {
    "name": "T _CFMessagePortIsRemote",
    "type": "CPP"
  },
  {
    "name": "T _CFMessagePortGetName",
    "type": "CPP"
  },
  {
    "name": "T _CFMessagePortSetName",
    "type": "CPP"
  },
  {
    "name": "t ___CFMessagePortDummyCallback",
    "type": "CPP"
  },
  {
    "name": "T _CFMessagePortGetContext",
    "type": "CPP"
  },
  {
    "name": "T _CFMessagePortGetInvalidationCallBack",
    "type": "CPP"
  },
  {
    "name": "T _CFMessagePortSetDispatchQueue",
    "type": "CPP"
  },
  {
    "name": "t ___CFMessagePortSetDispatchQueue_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFMessagePortSetDispatchQueue_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___CFMessagePortSetDispatchQueue_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t ___CFMessagePortSetDispatchQueue_block_invoke_4",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1254TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1254TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1254TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t ___CFNotificationCenterDeallocate",
    "type": "CPP"
  },
  {
    "name": "T _CFNotificationCenterGetTypeID",
    "type": "CPP"
  },
  {
    "name": "t ___CFNotificationCenterGetLocalCenter_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t -[__CFNotification hash]",
    "type": "CPP"
  },
  {
    "name": "t -[__CFNotification isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[__CFNotification copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "T __CFXNotificationCenterCopyDebugInfo",
    "type": "CPP"
  },
  {
    "name": "t ____CFXNotificationCenterCopyDebugInfo_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFXNotificationRegisterObserver2",
    "type": "CPP"
  },
  {
    "name": "t ___CFXNotificationRegisterObserver1",
    "type": "CPP"
  },
  {
    "name": "T __CFXNotificationCancelToken",
    "type": "CPP"
  },
  {
    "name": "t __CFXRegistrationPost2",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40r48r56r64r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40r48r56r64r",
    "type": "CPP"
  },
  {
    "name": "T __CFXNotificationCenterIsEmpty",
    "type": "CPP"
  },
  {
    "name": "T _CFNotificationCenterIsSuspended",
    "type": "CPP"
  },
  {
    "name": "T __CFXNotificationResetSessionForTask",
    "type": "CPP"
  },
  {
    "name": "t ____CFXNotificationResetSessionForTask_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFXNotificationRegisterObserver2_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFXRegistrationPost2_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFBooleanDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFNumberCreateFormattingDescription",
    "type": "CPP"
  },
  {
    "name": "t ___CFNumberCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t __CFNumberInitBool",
    "type": "CPP"
  },
  {
    "name": "t __CFNumberInitInt8",
    "type": "CPP"
  },
  {
    "name": "t __CFNumberInitUInt8",
    "type": "CPP"
  },
  {
    "name": "t __CFNumberInitInt16",
    "type": "CPP"
  },
  {
    "name": "t __CFNumberInitUInt16",
    "type": "CPP"
  },
  {
    "name": "t __CFNumberInitInt32",
    "type": "CPP"
  },
  {
    "name": "t __CFNumberInitUInt32",
    "type": "CPP"
  },
  {
    "name": "t __CFNumberInitInt",
    "type": "CPP"
  },
  {
    "name": "t __CFNumberInitUInt",
    "type": "CPP"
  },
  {
    "name": "t __CFNumberInitInt64",
    "type": "CPP"
  },
  {
    "name": "t __CFNumberInitUInt64",
    "type": "CPP"
  },
  {
    "name": "t __CFNumberInitFloat",
    "type": "CPP"
  },
  {
    "name": "t __CFNumberInitDouble",
    "type": "CPP"
  },
  {
    "name": "t ___CFNumberFormatterCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberFormatterGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberFormatterGetStyle",
    "type": "CPP"
  },
  {
    "name": "T _CFNumberFormatterGetDecimalInfoForCurrencyCode",
    "type": "CPP"
  },
  {
    "name": "T __CFNumberFormatterGetFormatter",
    "type": "CPP"
  },
  {
    "name": "t ___CFNumberFormatterApplySymbolPrefs",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFConstantString retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFConstantString redactedDescription]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString retainCount]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFString automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString cStringLength]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString smallestEncoding]",
    "type": "CPP"
  },
  {
    "name": "t _mutateError",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFAttributedString automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString attribute:atIndex:effectiveRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString attributedSubstringFromRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString attribute:atIndex:longestEffectiveRange:inRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString isEqualToAttributedString:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString classForCoder]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString replaceCharactersInRange:withString:]",
    "type": "CPP"
  },
  {
    "name": "t _mutateError2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString setAttributes:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString replaceCharactersInRange:withAttributedString:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString insertAttributedString:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString appendAttributedString:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString deleteCharactersInRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString setAttributedString:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString addAttributes:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString addAttribute:value:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFAttributedString removeAttribute:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber retainCount]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFNumber automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber _cfTypeID]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber _cfNumberType]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber _getValue:forType:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean retainCount]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFBoolean automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean shortValue]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean unsignedShortValue]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean unsignedLongLongValue]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean floatValue]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean _cfTypeID]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean _reverseCompare:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFError isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFError hash]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFError _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFError _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFError retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFError initWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFError automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet retainCount]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFCharacterSet automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet hasMemberInPlane:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet formIntersectionWithCharacterSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet makeCharacterSetCompact]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet makeCharacterSetFast]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFCharacterSet supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCharacterSet initWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFData retainCount]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFData automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFData setLength:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFData classForCoder]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFTimer isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFTimer hash]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFTimer _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFTimer retainCount]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFTimer automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFTimer allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFTimer tolerance]",
    "type": "CPP"
  },
  {
    "name": "t ___CFDescribeTimer",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFTimer _cfTypeID]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFTimer initWithFireDate:interval:target:selector:userInfo:repeats:]",
    "type": "CPP"
  },
  {
    "name": "t __timerRetain",
    "type": "CPP"
  },
  {
    "name": "t __timerRelease",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFTimer init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream retainCount]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFInputStream automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFInputStream allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream initWithData:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream initWithFileAtPath:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream initWithURL:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream delegate]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream getBuffer:length:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream _setCFClientFlags:callback:context:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream _scheduleInCFRunLoop:forMode:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFInputStream _unscheduleFromCFRunLoop:forMode:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream retainCount]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFOutputStream automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFOutputStream allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream initToMemory]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream initToBuffer:capacity:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream initToFileAtPath:append:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream initWithURL:append:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream delegate]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream _setCFClientFlags:callback:context:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream _scheduleInCFRunLoop:forMode:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFOutputStream _unscheduleFromCFRunLoop:forMode:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFLocale _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFLocale _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFLocale retainCount]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFLocale automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFLocale initWithLocaleIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFLocale _setNullLocale]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsConfigurationFileSource initWithConfigurationPropertyList:containingPreferences:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardCreateUnique",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardGetItemCount_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardGetItemAtIndex_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardCopyFlavorsForItem_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardGetFlavorCount",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardGetFlavorCount_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFPasteboardAttachSecurityScopeFromDataToURL",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardAttachSecurityScopeToURL",
    "type": "CPP"
  },
  {
    "name": "t __CFPasteboardConsumeSandboxExtensionData",
    "type": "CPP"
  },
  {
    "name": "t __applyDictBlock",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardConsumeSandboxExtensionData_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardRequestLocalPromiseData",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardIsDataPromised",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardIsDataPromised_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardApplyFunction",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardApplyFunction_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardInvalidateCacheIfMissingAvailableData",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardEnumeratePasteboardUsingBlock",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardEnumeratePasteboardUsingBlock_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardBeginGeneration_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardSetDataFlags",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardSetDataFlags_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFPasteboardIssueSandboxExtensionForPath",
    "type": "CPP"
  },
  {
    "name": "t __CFPasteboardCreateSecurityScopeDataForPaths",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardCreateSecurityScopeDataForPaths_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardCreateSecurityScopeDataForURL",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardSetData_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardSetData",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardSetPasteLocation",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardSetPasteLocation_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardSetPasteFileType",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardSetPasteFileType_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardCreateUniquePromiseFileURL",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardCreateUniquePromiseFileURL_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardCreateUniquePromiseFileURL_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardMakeGenerationLocalOnly",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardMakeGenerationLocalOnly_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardSetExpirationDate",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardSetExpirationDate_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardPromiseDataUsingBlock",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardPromiseData_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardPromiseDataUsingBlock_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardPromiseDataUsingBlock_block_invoke.126",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardPromiseDataUsingBlock_block_invoke.130",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardFlushLocalEntriesIfNecessary",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardMarkLocalChange",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardPromiseSandboxExtensionDataIfNecessary",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardResolvePromisedData",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardResolvePromisedData_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFPBXPCSendMessageWithReply",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardResolvePromisedData_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardResolveAllPromisedData_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardCreateStringFromData",
    "type": "CPP"
  },
  {
    "name": "T ___CFPBStart",
    "type": "CPP"
  },
  {
    "name": "T ___CFPasteboardStartInProcessServer",
    "type": "CPP"
  },
  {
    "name": "t _____CFPasteboardStartInProcessServer_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFPasteboardStartInProcessServer_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "T ___CFPasteboardAdoptPboardEndpointForTest",
    "type": "CPP"
  },
  {
    "name": "t _____CFPasteboardAdoptPboardEndpointForTest_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T ___CFPasteboardCreateInProcessPboardEndpointForTest",
    "type": "CPP"
  },
  {
    "name": "T __CFPasteboardInvalidateCache",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardInvalidateCache_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardEnableBatching",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardEnableBatching_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardFlushEntries",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardFlushEntries_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardRestrictSandboxExtensionAccess",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardRestrictSandboxExtensionAccess_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardAllowSandboxExtensionAccessForPID",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardAllowSandboxExtensionAccessForPID_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFPasteboardAllowSandboxExtensionAccessForProcess",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardAllowSandboxExtensionAccessForProcess_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry initWithFlavorName:itemIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry description]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry _createShmemIfNecessaryLength:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry hasLocalPromise]",
    "type": "CPP"
  },
  {
    "name": "t ___55-[_CFPasteboardEntry initFromXPCObject:fromConnection:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___55-[_CFPasteboardEntry initFromXPCObject:fromConnection:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry promiseDataWithBlock:forPasteboard:generation:]",
    "type": "CPP"
  },
  {
    "name": "t ___68-[_CFPasteboardEntry promiseDataWithBlock:forPasteboard:generation:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry resolveLocalPromisedData]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry resolveClientPromisedDataWithQueue:completionHandler:]",
    "type": "CPP"
  },
  {
    "name": "t ___75-[_CFPasteboardEntry resolveClientPromisedDataWithQueue:completionHandler:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___75-[_CFPasteboardEntry resolveClientPromisedDataWithQueue:completionHandler:]_block_invoke.186",
    "type": "CPP"
  },
  {
    "name": "t ___75-[_CFPasteboardEntry resolveClientPromisedDataWithQueue:completionHandler:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40b48b",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40b48b",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40o48b56b",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40o48b56b",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry setDataFlags:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry promiseUUID]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry setHidden:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry isPendingFlush]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry setIsPendingFlush:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry setExtensionConsumed:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache updateEntry:]",
    "type": "CPP"
  },
  {
    "name": "t ___34-[_CFPasteboardCache updateEntry:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache itemCount]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache itemAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache flavorCountForItemIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache copyFlavorsForItemIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache indexForItem:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache bumpChangeCount]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache orderedEntries]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardPendingPromise initWithEntry:pasteboard:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardPendingPromise dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardPendingPromise pasteboard]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardWeakRef .cxx_destruct]",
    "type": "CPP"
  },
  {
    "name": "t _____CFPasteboardDeallocate_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardRequestLocalPromiseData_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardRequestLocalPromiseData_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardRequestDataFromDaemon_block_invoke.345",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardCleanupPendingPromises_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __arrayApplyBlock",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardCleanupPendingPromises_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardFlushLocalEntriesIfNecessary_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardFlushLocalEntriesIfNecessary_block_invoke.360",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardFlushLocalEntriesIfNecessary_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardMarkLocalChange_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardMarkLocalChange_block_invoke.364",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardCreateSandboxExtensionData",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardPromiseSandboxExtensionDataIfNecessary_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardPromiseSandboxExtensionDataIfNecessary_block_invoke.367",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardSetSandboxExtensionData_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardHandleInvalidatedDaemonConnection_block_invoke.381",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardResetPasteboardForInvalidatedDaemonConnection_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardHandleFlushMessage_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardHandleFlushMessage_block_invoke.387",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardHandleFlushMessage_block_invoke.388",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardHandleFlushMessage_block_invoke.389",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardSendBarrier_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardSendBarrier_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardHandleInvalidateCacheEntriesMessage_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardInvalidateCacheEntries_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardHandleFulfillMessage_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_.397",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_.398",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardHandleFulfillMessage_block_invoke.399",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardHandleFulfillMessage_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32b40o48r56r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32b40o48r56r",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDCloudSource copyConfigurationFromPath:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDCloudSource registerForChangeNotifications]",
    "type": "CPP"
  },
  {
    "name": "t ___49-[CFPDCloudSource registerForChangeNotifications]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _remoteStoreChanged",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDCloudSource initWithDomain:userName:storeName:configurationPath:containerPath:shmemIndex:daemon:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDCloudSource enqueueNewKey:value:encoding:inBatch:]",
    "type": "CPP"
  },
  {
    "name": "t ___56-[CFPDCloudSource enqueueNewKey:value:encoding:inBatch:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDCloudSource copyPropertyListWithoutDrainingPendingChangesValidatingPlist:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDCloudSource synchronizeWithCloud:replyHandler:]",
    "type": "CPP"
  },
  {
    "name": "t ___53-[CFPDCloudSource synchronizeWithCloud:replyHandler:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDCloudSource copyPropertyListValidatingPlist:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDCloudSource debugDump]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDCloudSource cloudConfigurationPath]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDCloudSource validateMessage:withNewKey:newValue:plistIsAvailableToRead:containerPath:diagnosticMessage:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDCloudSource _writeToDisk:]",
    "type": "CPP"
  },
  {
    "name": "t ___32-[CFPDCloudSource _writeToDisk:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___remoteStoreChanged_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _initSYDRemotePreferencesSource",
    "type": "CPP"
  },
  {
    "name": "t _SYDRemotePreferencesSourceFunction",
    "type": "CPP"
  },
  {
    "name": "t _____NSDictionaryEnumerate_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__CFPrefsWeakObservers removeObject:]",
    "type": "CPP"
  },
  {
    "name": "t ___39-[__CFPrefsWeakObservers removeObject:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__CFPrefsWeakObservers debugDescription]",
    "type": "CPP"
  },
  {
    "name": "t ___42-[__CFPrefsWeakObservers debugDescription]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFArray automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray removeLastObject]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray retainCount]",
    "type": "CPP"
  },
  {
    "name": "T __CFArgv",
    "type": "CPP"
  },
  {
    "name": "T __CFArgc",
    "type": "CPP"
  },
  {
    "name": "t __CFIsMainThread",
    "type": "CPP"
  },
  {
    "name": "t __CFStringCreateHostName",
    "type": "CPP"
  },
  {
    "name": "t _CFCopyFullUserName",
    "type": "CPP"
  },
  {
    "name": "t ___CFTSDInitialize",
    "type": "CPP"
  },
  {
    "name": "t ____CFCopyHomeDirURLForUser_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _CFStringEncodingIsDecomposableCharacter",
    "type": "CPP"
  },
  {
    "name": "t _CFStringEncodingDecomposeCharacter",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingCreateListOfAvailablePlatformConverters",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingPlatformByteLengthForCharacters",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_CountUnicodeMappingsNoInit_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_QueryUnicodeMappingsNoInit_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_GetTextEncodingBase0_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO88598TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO88598TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO88598TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t __systemAudioHardwareChangeListener",
    "type": "CPP"
  },
  {
    "name": "t __systemAudioMuteChangeListener",
    "type": "CPP"
  },
  {
    "name": "t __notifyServiceChangeWithChangeMask",
    "type": "CPP"
  },
  {
    "name": "t __currentAudioDeviceGetProperty",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInUnregisterFactory",
    "type": "CPP"
  },
  {
    "name": "t __CFPFactoryDisableLocked",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInUnregisterPlugInType",
    "type": "CPP"
  },
  {
    "name": "t __CFPFactoryRemoveTypeLocked",
    "type": "CPP"
  },
  {
    "name": "t ___CFPLUGIN_IS_CALLING_OUT_TO_A_DYNAMIC_REGISTRATION_FUNCTION__",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInSetLoadOnDemand",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInIsLoadOnDemand",
    "type": "CPP"
  },
  {
    "name": "t __CFPFactoryDeallocate",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInFindFactoriesForPlugInType",
    "type": "CPP"
  },
  {
    "name": "t ___CFPlugInInstanceDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFPlugInInstanceCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInInstanceCreateWithInstanceDataSize",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInInstanceGetInterfaceFunctionTable",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInInstanceGetFactoryName",
    "type": "CPP"
  },
  {
    "name": "T _CFPlugInInstanceGetInstanceData",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO885911TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO885911TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO885911TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "T __CFPropertyListCreateXMLDataWithExtras",
    "type": "CPP"
  },
  {
    "name": "t ___copyErrorDebugDescription",
    "type": "CPP"
  },
  {
    "name": "T __CFPropertyListValidateData",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunArrayEqual",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunArrayHash",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunArrayCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFRunArrayGetTypeID",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunArrayMakeNewList",
    "type": "CPP"
  },
  {
    "name": "T _CFRunArrayGetCount",
    "type": "CPP"
  },
  {
    "name": "T _CFRunArrayGetValueAtRunArrayIndex",
    "type": "CPP"
  },
  {
    "name": "T _CFRunArrayDelete",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopDump",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopModeCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T __CFRunLoopGet1",
    "type": "CPP"
  },
  {
    "name": "T __CFRunLoopGet2b",
    "type": "CPP"
  },
  {
    "name": "t __CFRunLoopError_RunCalledWithInvalidMode",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopRunSpecific_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopPerformBlock_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopError_AddingSourceLackingReceiveRight",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopAddSource_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopAddObserver_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopContainsTimer",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopAddTimer_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopSourceCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopSourceGetOrder",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopSourceIsSignalled",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopObserverCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopObserverGetActivities",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopObserverGetOrder",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopObserverDoesRepeat",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopObserverIsValid",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopTimerCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopTimerGetOrder",
    "type": "CPP"
  },
  {
    "name": "T _CFRunLoopTimerGetTolerance",
    "type": "CPP"
  },
  {
    "name": "t ___THE_SYSTEM_HAS_NO_PORTS_AVAILABLE__",
    "type": "CPP"
  },
  {
    "name": "t ___THE_SYSTEM_HAS_NO_PORT_SETS_AVAILABLE__",
    "type": "CPP"
  },
  {
    "name": "t ___NO_SPACE__",
    "type": "CPP"
  },
  {
    "name": "t ___RESOURCE_SHORTAGE__",
    "type": "CPP"
  },
  {
    "name": "t _____CFRunLoopDebugInfoForRunLoopTimer_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T ___CFRecordAllocationEvent",
    "type": "CPP"
  },
  {
    "name": "T __CFRuntimeUnregisterClassWithTypeID",
    "type": "CPP"
  },
  {
    "name": "T __CFEnableZombies",
    "type": "CPP"
  },
  {
    "name": "t ___CFRuntimeIsFreedObject",
    "type": "CPP"
  },
  {
    "name": "T ___CFGenericTypeID",
    "type": "CPP"
  },
  {
    "name": "t ___CFGenericValidateType_",
    "type": "CPP"
  },
  {
    "name": "T _CFCopyTypeIDDescription",
    "type": "CPP"
  },
  {
    "name": "t __CFRelease",
    "type": "CPP"
  },
  {
    "name": "t ___THE_PROCESS_HAS_FORKED_AND_YOU_CANNOT_USE_THIS_COREFOUNDATION_FUNCTIONALITY___YOU_MUST_EXEC__",
    "type": "CPP"
  },
  {
    "name": "T _os_log_callback",
    "type": "CPP"
  },
  {
    "name": "t ___cf_atfork_child",
    "type": "CPP"
  },
  {
    "name": "T __CFRegisterThreadSanitizerTag",
    "type": "CPP"
  },
  {
    "name": "T __CFAssignThreadSanitizerTag",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationBase registrar]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationBase key]",
    "type": "CPP"
  },
  {
    "name": "t _____NSArrayEnumerate_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40o48b56r64r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40o48b56r64r",
    "type": "CPP"
  },
  {
    "name": "t _____NSArrayGetIndexPassingTest_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____NSArrayGetIndexesPassingTest_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40o48b56o64r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40o48b56o64r",
    "type": "CPP"
  },
  {
    "name": "t +[__NSDictionary0 allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionary0 init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionary0 dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionary0 retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionary0 objectEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_",
    "type": "CPP"
  },
  {
    "name": "t +[__NSSetI automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI clumpingFactor]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI clumpingInterestingThreshold]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSSetI allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t ___CLUMPINESS_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFServiceControllerGetRegisteredProvider",
    "type": "CPP"
  },
  {
    "name": "T _CFServiceControllerCanConnect",
    "type": "CPP"
  },
  {
    "name": "T _CFServiceControllerPerformService",
    "type": "CPP"
  },
  {
    "name": "T _CFServiceControllerSynchronizeServiceEntries",
    "type": "CPP"
  },
  {
    "name": "T _CFServiceControllerCopyLoadedLocalizations",
    "type": "CPP"
  },
  {
    "name": "T _CFServiceControllerSetServicesEntries",
    "type": "CPP"
  },
  {
    "name": "t ___CFServiceControllerMessagePortCallBack",
    "type": "CPP"
  },
  {
    "name": "t _____CFServiceControllerBeginPBSLoadForLocalizations_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T ___CFPasteboardStartServicingConnection",
    "type": "CPP"
  },
  {
    "name": "t _____CFPasteboardStartServicingConnection_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFPasteboardStartServicingConnection_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t __contextFinalizer",
    "type": "CPP"
  },
  {
    "name": "t _____CFPasteboardStartServicingConnection_block_invoke.4",
    "type": "CPP"
  },
  {
    "name": "T ___CFPasteboardSetRemotePasteboardClass",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore _initWithName:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore dealloc]",
    "type": "CPP"
  },
  {
    "name": "t +[_CFPasteboardStore copyAllPasteboards]",
    "type": "CPP"
  },
  {
    "name": "t __dictionaryInvokeBlock",
    "type": "CPP"
  },
  {
    "name": "t ___40+[_CFPasteboardStore copyAllPasteboards]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[_CFPasteboardStore pasteboardStoreWithName:createIfNecessary:]",
    "type": "CPP"
  },
  {
    "name": "t ___64+[_CFPasteboardStore pasteboardStoreWithName:createIfNecessary:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[_CFPasteboardStore _removePasteboardWithName:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore performBarrier:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore _onqueue_invalidateCachesWithCurrentGeneration]",
    "type": "CPP"
  },
  {
    "name": "t __setInvokeBlock",
    "type": "CPP"
  },
  {
    "name": "t ___68-[_CFPasteboardStore _onqueue_invalidateCachesWithCurrentGeneration]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore _onqueue_invalidateCurrentGenerationCacheEntries:inResponseToMessage:]",
    "type": "CPP"
  },
  {
    "name": "t ___91-[_CFPasteboardStore _onqueue_invalidateCurrentGenerationCacheEntries:inResponseToMessage:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40o48o56o64o",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40o48o56o64o",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore _onqueue_noteMessageSenderNeedsCacheInvalidation:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore _onqueue_nextGenerationCount]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore _onqueue_cacheForGeneration:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore _onqueue_clearGenerationSpecificData]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore _onqueue_beginGenerationWithNewOwner:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore handleBeginGeneration:]",
    "type": "CPP"
  },
  {
    "name": "t ___44-[_CFPasteboardStore handleBeginGeneration:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore handleMakeGenerationLocal:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore _onqueue_handleExpirationTimer]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore handleSetExpirationDate:]",
    "type": "CPP"
  },
  {
    "name": "t __connectionsAreSameProcess",
    "type": "CPP"
  },
  {
    "name": "t ___46-[_CFPasteboardStore handleSetExpirationDate:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___46-[_CFPasteboardStore handleSetExpirationDate:]_block_invoke.72",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore handleNotifyHasEntries:]",
    "type": "CPP"
  },
  {
    "name": "t ___45-[_CFPasteboardStore handleNotifyHasEntries:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore handleGetCounts:]",
    "type": "CPP"
  },
  {
    "name": "t ___38-[_CFPasteboardStore handleGetCounts:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore _onqueue_handleNewEntries:forMessage:shouldInvalidateClientMetadata:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore handleRegisterEntries:]",
    "type": "CPP"
  },
  {
    "name": "t ___44-[_CFPasteboardStore handleRegisterEntries:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore handleSetDataFlags:]",
    "type": "CPP"
  },
  {
    "name": "t ___41-[_CFPasteboardStore handleSetDataFlags:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___41-[_CFPasteboardStore handleSetDataFlags:]_block_invoke.95",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40o48b56o",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40o48b56o",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore analyzeSandboxExtensionEntry:destinedForClient:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore reissueSandboxExtensionFromEntry:toClient:error:]",
    "type": "CPP"
  },
  {
    "name": "t __applyArrayBlock",
    "type": "CPP"
  },
  {
    "name": "t ___70-[_CFPasteboardStore reissueSandboxExtensionFromEntry:toClient:error:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore filterDataFromEntry:inResponseToMessage:error:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore requestDataForGeneration:itemIdentifier:flavor:inResponseToMessage:completionHandler:]",
    "type": "CPP"
  },
  {
    "name": "t ___107-[_CFPasteboardStore requestDataForGeneration:itemIdentifier:flavor:inResponseToMessage:completionHandler:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___107-[_CFPasteboardStore requestDataForGeneration:itemIdentifier:flavor:inResponseToMessage:completionHandler:]_block_invoke.120",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40o48o56o64b",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40o48o56o64b",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40o48o56b",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40o48o56b",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore handleRequestData:]",
    "type": "CPP"
  },
  {
    "name": "t ___40-[_CFPasteboardStore handleRequestData:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___40-[_CFPasteboardStore handleRequestData:]_block_invoke.125",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32b40o48o",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32b40o48o",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore handleResolvePromises:]",
    "type": "CPP"
  },
  {
    "name": "t ___44-[_CFPasteboardStore handleResolvePromises:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___44-[_CFPasteboardStore handleResolvePromises:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___44-[_CFPasteboardStore handleResolvePromises:]_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t ___44-[_CFPasteboardStore handleResolvePromises:]_block_invoke.130",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40o48b",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40o48b",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore resolveAllPromisesOwnedByProcessWithIdentifier:completionHandler:]",
    "type": "CPP"
  },
  {
    "name": "t ___87-[_CFPasteboardStore resolveAllPromisesOwnedByProcessWithIdentifier:completionHandler:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___87-[_CFPasteboardStore resolveAllPromisesOwnedByProcessWithIdentifier:completionHandler:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore handleRefreshCache:]",
    "type": "CPP"
  },
  {
    "name": "t ___41-[_CFPasteboardStore handleRefreshCache:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore handleDeadClientWithUUID:allowPasteboardDeletion:]",
    "type": "CPP"
  },
  {
    "name": "t ___71-[_CFPasteboardStore handleDeadClientWithUUID:allowPasteboardDeletion:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore handleCreate:]",
    "type": "CPP"
  },
  {
    "name": "t ___35-[_CFPasteboardStore handleCreate:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___35-[_CFPasteboardStore handleCreate:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40w",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40w",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore handleRelease:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore handleUniquePromiseFile:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore handleRestrictExtension:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore handleAllowExtensionProcess:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore flushOwnerChangesIfNecessaryInResponseToMessage:completionHandler:]",
    "type": "CPP"
  },
  {
    "name": "t ___88-[_CFPasteboardStore flushOwnerChangesIfNecessaryInResponseToMessage:completionHandler:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___88-[_CFPasteboardStore flushOwnerChangesIfNecessaryInResponseToMessage:completionHandler:]_block_invoke.151",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore description]",
    "type": "CPP"
  },
  {
    "name": "t +[_CFPasteboardStore dumpAllClients]",
    "type": "CPP"
  },
  {
    "name": "t ___36+[_CFPasteboardStore dumpAllClients]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___36+[_CFPasteboardStore dumpAllClients]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t +[_CFGeneralPasteboardStore generalPasteboard]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFGeneralPasteboardStore _initWithName:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFGeneralPasteboardStore handleMakeGenerationLocal:]",
    "type": "CPP"
  },
  {
    "name": "t ___55-[_CFGeneralPasteboardStore handleMakeGenerationLocal:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFGeneralPasteboardStore _onqueue_notifyRemoteGenerationBecameAvailable:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFGeneralPasteboardStore notifyRemoteGenerationBecameAvailable:]",
    "type": "CPP"
  },
  {
    "name": "t ___67-[_CFGeneralPasteboardStore notifyRemoteGenerationBecameAvailable:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___67-[_CFGeneralPasteboardStore notifyRemoteGenerationBecameAvailable:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___67-[_CFGeneralPasteboardStore notifyRemoteGenerationBecameAvailable:]_block_invoke.243",
    "type": "CPP"
  },
  {
    "name": "t -[_CFGeneralPasteboardStore _onqueue_nextGenerationCount]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFGeneralPasteboardStore _onqueue_cacheForGeneration:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFGeneralPasteboardStore _onqueue_handleNewEntries:forMessage:shouldInvalidateClientMetadata:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFGeneralPasteboardStore dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFGeneralPasteboardStore listener:shouldAcceptNewConnection:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFGeneralPasteboardStore remotePasteboardAvailable:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFGeneralPasteboardStore pasteboardWillBeFetched:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFDragPasteboardStore dealloc]",
    "type": "CPP"
  },
  {
    "name": "t +[_CFDragPasteboardStore dragPasteboard]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFDragPasteboardStore _isManagedPromiseDragForGeneration:itemIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFDragPasteboardStore _onqueue_clearGenerationSpecificData]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFDragPasteboardStore _onqueue_handleNewEntries:forMessage:shouldInvalidateClientMetadata:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFDragPasteboardStore _createUniqueFileURLInDirectory:withBaseName:extension:locale:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFDragPasteboardStore handleUniquePromiseFile:]",
    "type": "CPP"
  },
  {
    "name": "t ___50-[_CFDragPasteboardStore handleUniquePromiseFile:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___50-[_CFDragPasteboardStore handleUniquePromiseFile:]_block_invoke.324",
    "type": "CPP"
  },
  {
    "name": "t ___50-[_CFDragPasteboardStore handleUniquePromiseFile:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t __CFStringCreateSubstringWithRange",
    "type": "CPP"
  },
  {
    "name": "t -[_CFDragPasteboardStore requestDataForGeneration:itemIdentifier:flavor:inResponseToMessage:completionHandler:]",
    "type": "CPP"
  },
  {
    "name": "t ___111-[_CFDragPasteboardStore requestDataForGeneration:itemIdentifier:flavor:inResponseToMessage:completionHandler:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache(CFRemotePasteboardSupport) prepareMetadata]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache(CFRemotePasteboardSupport) prepareDataForItemIdentifier:flavor:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFRemotePasteboardCache notifyRemotePateboardBecameAvailable:localGeneration:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFRemotePasteboardCache prepareMetadata]",
    "type": "CPP"
  },
  {
    "name": "t ___43-[_CFRemotePasteboardCache prepareMetadata]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFRemotePasteboardCache prepareDataForItemIdentifier:flavor:]",
    "type": "CPP"
  },
  {
    "name": "t ___64-[_CFRemotePasteboardCache prepareDataForItemIdentifier:flavor:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___64-[_CFRemotePasteboardCache prepareDataForItemIdentifier:flavor:]_block_invoke.364",
    "type": "CPP"
  },
  {
    "name": "t -[_CFRemotePasteboardCache state]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardEntry(CFRemotePasteboardSupport) promiseDataWithFetchOperation:]",
    "type": "CPP"
  },
  {
    "name": "t ___79-[_CFPasteboardEntry(CFRemotePasteboardSupport) promiseDataWithFetchOperation:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___79-[_CFPasteboardEntry(CFRemotePasteboardSupport) promiseDataWithFetchOperation:]_block_invoke.396",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40b48w",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40b48w",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardClientInstanceID initWithConnection:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardClientInstanceID dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardClientInstanceID description]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardClientInstanceID uuid]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardClientInstanceID connection]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardClientConnectionContext init]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardClientConnectionContext dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardClientConnectionContext addCleanupBlock:]",
    "type": "CPP"
  },
  {
    "name": "t ___56-[_CFPasteboardClientConnectionContext addCleanupBlock:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardClientConnectionContext cleanup]",
    "type": "CPP"
  },
  {
    "name": "t __arrayApplyBlock",
    "type": "CPP"
  },
  {
    "name": "t ___47-[_CFPasteboardClientConnectionContext cleanup]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_NSRemotePasteboardDataProvider initWithGeneration:itemIdentifier:flavorName:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSRemotePasteboardDataProvider type]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSRemotePasteboardDataProvider setType:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSRemotePasteboardDataProvider dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSRemotePasteboardDataProvider getDataWithCompletionBlock:]",
    "type": "CPP"
  },
  {
    "name": "t ___62-[_NSRemotePasteboardDataProvider getDataWithCompletionBlock:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_NSRemotePasteboardDataProvider description]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSRemotePasteboardDataProvider uuid]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSRemotePasteboardDataProvider setUuid:]",
    "type": "CPP"
  },
  {
    "name": "T __CFPasteboardRemotePasteboardBecameAvailable",
    "type": "CPP"
  },
  {
    "name": "t __sendUnknownPasteboardReply",
    "type": "CPP"
  },
  {
    "name": "t ___handle_barrier_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___handle_barrier_block_invoke.496",
    "type": "CPP"
  },
  {
    "name": "t ___handle_resolve_all_pboard_promises_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___handle_resolve_all_pboard_promises_block_invoke.505",
    "type": "CPP"
  },
  {
    "name": "t ____getRemotePasteboardClass_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____getRemotePasteboardClass_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary removeObjectForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary setObject:forKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary addObject:forKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary addObjects:forKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary addObjects:forKeys:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary invert]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary removeAllObjects]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary removeEntriesInDictionary:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary removeEntriesWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t ___60-[NSMutableDictionary removeEntriesWithOptions:passingTest:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary removeEntriesPassingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary removeKeysForObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary replaceObjects:forKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary replaceObjects:forKeys:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary setEntriesFromDictionary:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary setObjects:forKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary setObjects:forKeys:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary __setObject:forKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary initWithCapacity:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary initWithObjects:forKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFSetEqual",
    "type": "CPP"
  },
  {
    "name": "t ___CFSetHash",
    "type": "CPP"
  },
  {
    "name": "t ___CFSetCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t ___CFSetCreateTransfer",
    "type": "CPP"
  },
  {
    "name": "T _CFSetReplaceValue",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO88597TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO88597TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO88597TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "T ___CFSocketGetBytesAvailable",
    "type": "CPP"
  },
  {
    "name": "t ___CFSocketCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketCopyAddress",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketGetContext",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketSendData",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketSetAddress",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketConnectToAddress",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketCreateWithSocketSignature",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketCreateConnectedToSocketSignature",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketRegisterValue",
    "type": "CPP"
  },
  {
    "name": "t ___CFSocketValidateSignature",
    "type": "CPP"
  },
  {
    "name": "t ___CFSocketSendNameRegistryRequest",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketCopyRegisteredValue",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketRegisterSocketSignature",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketUnregister",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketCopyRegisteredSocketSignature",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketSetDefaultNameRegistryPortNumber",
    "type": "CPP"
  },
  {
    "name": "T _CFSocketGetDefaultNameRegistryPortNumber",
    "type": "CPP"
  },
  {
    "name": "T __CFSocketGetThread",
    "type": "CPP"
  },
  {
    "name": "t ___CFNativeSocketIsValid",
    "type": "CPP"
  },
  {
    "name": "t ___CFSocketHandleNameRegistryReply",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1251TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1251TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1251TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleGetLanguageCodeForLocalization",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleGetRegionCodeForLocalization",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleGetLanguageCodeForRegionCode",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleGetRegionCodeForLanguageCode",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyLanguageAbbreviationForLanguageCode",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleCopyLocalizationsForURL",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleFlushUserLanguagesCache",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleFlushLanguageCachesAfterEUIDChange",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleSetDefaultLocalization",
    "type": "CPP"
  },
  {
    "name": "t __onelineFormatArray",
    "type": "CPP"
  },
  {
    "name": "t __onelineFormatArrayApply",
    "type": "CPP"
  },
  {
    "name": "t _____NSOrderedSetEnumerate_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____NSOrderedSetGetIndexPassingTest_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____NSOrderedSetGetIndexesPassingTest_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSConstantDictionaryEnumerator initWithConstantDictionary:enumerateKeys:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSConstantDictionaryEnumerator nextObject]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary initWithObjects:forKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary keyEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary allKeys]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary allValues]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary countByEnumeratingWithState:objects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary keyOfEntryWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary keysOfEntriesWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary objectForKeyedSubscript:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary objectEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t +[NSConstantDictionary new]",
    "type": "CPP"
  },
  {
    "name": "t +[NSConstantDictionary allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary mutableCopy]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary _cfMutableCopy]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary init]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary autorelease]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary copy]",
    "type": "CPP"
  },
  {
    "name": "T __CFSocketStreamSetAuthenticatesServerCertificateDefault",
    "type": "CPP"
  },
  {
    "name": "T __CFSocketStreamGetAuthenticatesServerCertificateDefault",
    "type": "CPP"
  },
  {
    "name": "T __CFSocketStreamPairSetAuthenticatesServerCertificate",
    "type": "CPP"
  },
  {
    "name": "T _CFStreamCreatePairWithSocket",
    "type": "CPP"
  },
  {
    "name": "T _CFStreamCreatePairWithPeerSocketSignature",
    "type": "CPP"
  },
  {
    "name": "t __CFStreamErrorFromError",
    "type": "CPP"
  },
  {
    "name": "t ___CFSortIndexes_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFSortIndexesN_block_invoke.30",
    "type": "CPP"
  },
  {
    "name": "t _____CFSortIndexesN_block_invoke.32",
    "type": "CPP"
  },
  {
    "name": "t -[_NSKoreanBigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSKoreanBigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSKoreanBigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "T ___CFStorageGetCapacity",
    "type": "CPP"
  },
  {
    "name": "t ___CFStorageGetNodeCapacity",
    "type": "CPP"
  },
  {
    "name": "T ___CFStorageGetValueSize",
    "type": "CPP"
  },
  {
    "name": "t ___CFStorageEqual",
    "type": "CPP"
  },
  {
    "name": "t ___CFStorageHash",
    "type": "CPP"
  },
  {
    "name": "t ___CFStorageCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFStorageGetConstValueAtIndex",
    "type": "CPP"
  },
  {
    "name": "t ___CFStorageCreateNode",
    "type": "CPP"
  },
  {
    "name": "T __CFStorageFastEnumeration",
    "type": "CPP"
  },
  {
    "name": "T _CFStorageApplyFunction",
    "type": "CPP"
  },
  {
    "name": "T _CFStorageApplyBlock",
    "type": "CPP"
  },
  {
    "name": "t ___CFStorageApplyFunction_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFStorageEnumerateNodesInByteRangeWithBlock",
    "type": "CPP"
  },
  {
    "name": "T ___CFStorageSetAlwaysFrozen",
    "type": "CPP"
  },
  {
    "name": "t ___CFStorageDescribeNode",
    "type": "CPP"
  },
  {
    "name": "t ___CFStorageInsertFrozen",
    "type": "CPP"
  },
  {
    "name": "t ___CFStorageDeleteFrozen",
    "type": "CPP"
  },
  {
    "name": "t ___CFStorageDelete",
    "type": "CPP"
  },
  {
    "name": "t _____CFStorageEnumerateNodesInByteRangeWithBlock_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFStreamDelegate initWithStreamEvents:callback:context:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFStreamDelegate dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFStreamDelegate stream:handleEvent:]",
    "type": "CPP"
  },
  {
    "name": "T __CFStreamGetInfoPointer",
    "type": "CPP"
  },
  {
    "name": "t ___CFStreamCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamGetError",
    "type": "CPP"
  },
  {
    "name": "t __CFStreamGetStreamError",
    "type": "CPP"
  },
  {
    "name": "t _waitForOpen",
    "type": "CPP"
  },
  {
    "name": "T _CFReadStreamGetBuffer",
    "type": "CPP"
  },
  {
    "name": "t __CFStreamCopyProperty",
    "type": "CPP"
  },
  {
    "name": "t __CFStreamSetProperty",
    "type": "CPP"
  },
  {
    "name": "T __CFReadStreamInitialize",
    "type": "CPP"
  },
  {
    "name": "T __CFReadStreamDeallocate",
    "type": "CPP"
  },
  {
    "name": "T __CFReadStreamGetClient",
    "type": "CPP"
  },
  {
    "name": "T __CFWriteStreamGetClient",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamCopyDispatchQueue",
    "type": "CPP"
  },
  {
    "name": "t __CFReadStreamCopyRunLoopsAndModes",
    "type": "CPP"
  },
  {
    "name": "t __CFWriteStreamCopyRunLoopsAndModes",
    "type": "CPP"
  },
  {
    "name": "T __CFReadStreamClearEvent",
    "type": "CPP"
  },
  {
    "name": "T _CFWriteStreamGetInfoPointer",
    "type": "CPP"
  },
  {
    "name": "t __perform",
    "type": "CPP"
  },
  {
    "name": "t __CFStringGetLocalizedFormattingInfo",
    "type": "CPP"
  },
  {
    "name": "t ____CFStringGetLocalizedFormattingInfo_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFStringGetInputIdentifierFormatterMappingFromDescriptor",
    "type": "CPP"
  },
  {
    "name": "t ____CFStringGetInputIdentifierFormatterMappingFromDescriptor_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringCopyCharSetWithPattern",
    "type": "CPP"
  },
  {
    "name": "t __CFStringGetRelevantLocaleInfoFromLocaleSummary",
    "type": "CPP"
  },
  {
    "name": "t __CFStringContentsInCharacterSet",
    "type": "CPP"
  },
  {
    "name": "t __CFStringGetVocativeCaseOfGivenName",
    "type": "CPP"
  },
  {
    "name": "t __CFStringGetVocativeCaseOfGivenName_cs",
    "type": "CPP"
  },
  {
    "name": "t __CFStringGetVocativeCaseOfGivenName_el",
    "type": "CPP"
  },
  {
    "name": "t __CFStringGetVocativeCaseOfGivenName_uk",
    "type": "CPP"
  },
  {
    "name": "t ____CFStringGetVocativeCaseOfGivenName_cs_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringHasOneOfSuffixes",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringApproximateSyllableCount_el_GR",
    "type": "CPP"
  },
  {
    "name": "T _CFStreamCreateBoundPair",
    "type": "CPP"
  },
  {
    "name": "t _boundPairCommonFinalize",
    "type": "CPP"
  },
  {
    "name": "t __emptyPerform",
    "type": "CPP"
  },
  {
    "name": "t _boundPairReadCreate",
    "type": "CPP"
  },
  {
    "name": "t _boundPairReadFinalize",
    "type": "CPP"
  },
  {
    "name": "t _boundPairReadOpen",
    "type": "CPP"
  },
  {
    "name": "t _boundPairReadOpenComplete",
    "type": "CPP"
  },
  {
    "name": "t _boundPairRead",
    "type": "CPP"
  },
  {
    "name": "t _boundPairReadCanRead",
    "type": "CPP"
  },
  {
    "name": "t _boundPairReadClose",
    "type": "CPP"
  },
  {
    "name": "t _boundPairReadCopyProperty",
    "type": "CPP"
  },
  {
    "name": "t _boundPairReadSetProperty",
    "type": "CPP"
  },
  {
    "name": "t _boundPairReadSchedule",
    "type": "CPP"
  },
  {
    "name": "t _boundPairReadUnschedule",
    "type": "CPP"
  },
  {
    "name": "t __wakeReadStreamScheduledRunLoops",
    "type": "CPP"
  },
  {
    "name": "t __wakeRunLoops",
    "type": "CPP"
  },
  {
    "name": "t __wakeWriteStreamScheduledRunLoops",
    "type": "CPP"
  },
  {
    "name": "t _setupScheduledStreamCloseBlock",
    "type": "CPP"
  },
  {
    "name": "t _performUnlockParamsAndDealloc",
    "type": "CPP"
  },
  {
    "name": "t _boundPairWriteCreate",
    "type": "CPP"
  },
  {
    "name": "t _boundPairWriteFinalize",
    "type": "CPP"
  },
  {
    "name": "t _boundPairWriteOpen",
    "type": "CPP"
  },
  {
    "name": "t _boundPairWriteOpenComplete",
    "type": "CPP"
  },
  {
    "name": "t _boundPairWrite",
    "type": "CPP"
  },
  {
    "name": "t _boundPairCanWrite",
    "type": "CPP"
  },
  {
    "name": "t _boundPairWriteClose",
    "type": "CPP"
  },
  {
    "name": "t _boundPairWriteRequestEvents",
    "type": "CPP"
  },
  {
    "name": "t _boundPairWriteSchedule",
    "type": "CPP"
  },
  {
    "name": "t _boundPairWriteUnschedule",
    "type": "CPP"
  },
  {
    "name": "T ___CFStringCreateImmutableFunnel2",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateWithPascalStringNoCopy",
    "type": "CPP"
  },
  {
    "name": "T _CFStringCreateStringWithValidatedFormat",
    "type": "CPP"
  },
  {
    "name": "T ___CFStringMakeConstantString",
    "type": "CPP"
  },
  {
    "name": "t ___cStrCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t ___cStrEqual",
    "type": "CPP"
  },
  {
    "name": "t ___cStrHash",
    "type": "CPP"
  },
  {
    "name": "t __CFStrSetDesiredCapacity",
    "type": "CPP"
  },
  {
    "name": "t ___rangeCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t ___rangeEqual",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetSmallestEncoding",
    "type": "CPP"
  },
  {
    "name": "T _CFStringAppendPascalString",
    "type": "CPP"
  },
  {
    "name": "T ___CFStringNoteErrors",
    "type": "CPP"
  },
  {
    "name": "T __CFStringAppendFormatAndArgumentsAux",
    "type": "CPP"
  },
  {
    "name": "T ___CFStringFindFormatSpecifiersInString",
    "type": "CPP"
  },
  {
    "name": "T _CFShowStr",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringSetUpFormatAndSpecBuffers",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringValidateFormat",
    "type": "CPP"
  },
  {
    "name": "T _CFStringEncodingRegisterFallbackProcedures",
    "type": "CPP"
  },
  {
    "name": "t ___CFDefaultToUnicodeFallbackProc",
    "type": "CPP"
  },
  {
    "name": "t _CFStringEncodingListOfAvailableEncodings",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingComparator",
    "type": "CPP"
  },
  {
    "name": "t ___CFToBytesStandardEightBitWrapper",
    "type": "CPP"
  },
  {
    "name": "t ___CFToUnicodeStandardEightBitWrapper",
    "type": "CPP"
  },
  {
    "name": "t ___CFToCanonicalUnicodeStandardEightBitWrapper",
    "type": "CPP"
  },
  {
    "name": "t ___CFToBytesCheapMultiByteWrapper",
    "type": "CPP"
  },
  {
    "name": "t ___CFToCanonicalUnicodeCheapMultiByteWrapper",
    "type": "CPP"
  },
  {
    "name": "t +[_CFXNotificationRegistrationContainer childClass]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationContainer enumerate:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSChineseBigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSChineseBigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSChineseBigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "T __CFStringEncodingSetForceASCIICompatibility",
    "type": "CPP"
  },
  {
    "name": "T __CFStringGetInstallationEncodingAndRegion",
    "type": "CPP"
  },
  {
    "name": "T __CFStringSaveUserDefaultEncoding",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringScanHex",
    "type": "CPP"
  },
  {
    "name": "T _CFStringTokenizerCopyBestStringLanguage",
    "type": "CPP"
  },
  {
    "name": "T _CFStringTokenizerGoToTokenAtIndex",
    "type": "CPP"
  },
  {
    "name": "T _CFStringTokenizerCopyCurrentTokenAttribute",
    "type": "CPP"
  },
  {
    "name": "T _CFStringTokenizerGetCurrentSubTokens",
    "type": "CPP"
  },
  {
    "name": "T _CFStringTokenizerCopyBestStringLanguageWithHints",
    "type": "CPP"
  },
  {
    "name": "T __CFStringTokenizerCopyPossibleStringLanguages",
    "type": "CPP"
  },
  {
    "name": "T __CFStringTokenizerTokenizeCompoundWord",
    "type": "CPP"
  },
  {
    "name": "T __CFStringTokenizerGetDerivedTokens",
    "type": "CPP"
  },
  {
    "name": "T __CFStringTokenizerGetNextBestTokens",
    "type": "CPP"
  },
  {
    "name": "T __CFStringTokenizerCreateNamePartsArrayWithStringAsCompositeName",
    "type": "CPP"
  },
  {
    "name": "T __CFStringTokenizerCreatePossibleNamePartsArrayWithStringAsCompositeName",
    "type": "CPP"
  },
  {
    "name": "T __CFStringTokenizerGetCurrentTokenPartOfSpeech",
    "type": "CPP"
  },
  {
    "name": "T __CFStringTokenizerSetMetadata",
    "type": "CPP"
  },
  {
    "name": "T __CFStringTokenizerCreateCurrentTokenLemma",
    "type": "CPP"
  },
  {
    "name": "T __CFStringTokenizerSetLocale",
    "type": "CPP"
  },
  {
    "name": "T __CFStringTokenizerSetTokenizerAttribute",
    "type": "CPP"
  },
  {
    "name": "T __CFStringTokenizerGetTokenizerAttribute",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateComponentsCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFDateComponentsGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFDateComponentsIsValidDate",
    "type": "CPP"
  },
  {
    "name": "T _CFDateComponentsIsValidDateInCalendar",
    "type": "CPP"
  },
  {
    "name": "T _CFDateComponentsDateMatchesComponents",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1255TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1255TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1255TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringReplaceableExtract",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1253TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1253TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1253TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "T _CFMutableStringOpenUText",
    "type": "CPP"
  },
  {
    "name": "T _CFAttributedStringOpenUText",
    "type": "CPP"
  },
  {
    "name": "T _CFMutableAttributedStringOpenUText",
    "type": "CPP"
  },
  {
    "name": "t ___CFAttributedStringLength",
    "type": "CPP"
  },
  {
    "name": "t ___CFAttributedStringAccess",
    "type": "CPP"
  },
  {
    "name": "t ___CFAttributedStringExtract",
    "type": "CPP"
  },
  {
    "name": "t ___CFAttributedStringReplace",
    "type": "CPP"
  },
  {
    "name": "t ___CFAttributedStringCopy",
    "type": "CPP"
  },
  {
    "name": "t _doExtract",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringExtract",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringReplace",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringCopy",
    "type": "CPP"
  },
  {
    "name": "T _CFStringGetListOfAvailableEncodings",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_GetTextEncodingName_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_GetTextEncodingBase_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_GetTextEncodingFormat_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_CreateTextEncoding_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_TECGetTextEncodingInternetName_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_NearestMacTextEncodings_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFDateCreateWithTimeIntervalSinceDate",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarCreateDateIfEraHasYear",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarCheckIfLeapMonthHack",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarCreateMatchingDateAfterStartDateMatchingComponentsInNextHighestUnitRange",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarPreserveSmallerUnits",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM replaceObjectAtIndex:withObject:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSOrderedSetM automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM setObject:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSOrderedSetM allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSFrozenOrderedSetM automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenOrderedSetM containsObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenOrderedSetM countForObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenOrderedSetM enumerateObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSFrozenOrderedSetM allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenOrderedSetM mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t _cow_copy_instance",
    "type": "CPP"
  },
  {
    "name": "t _cow_copy_storage",
    "type": "CPP"
  },
  {
    "name": "t _cow_set_cow",
    "type": "CPP"
  },
  {
    "name": "t ___CFTreeCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFTreeGetChildren",
    "type": "CPP"
  },
  {
    "name": "T _CFTreePrependChild",
    "type": "CPP"
  },
  {
    "name": "T _CFTreeInsertSibling",
    "type": "CPP"
  },
  {
    "name": "T _CFTreeSortChildren",
    "type": "CPP"
  },
  {
    "name": "t ___CFTreeCompareValues",
    "type": "CPP"
  },
  {
    "name": "T __CFURLPromiseCreateProperties",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCopyPropertiesOfPromiseAtURL",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCopyLogicalNameOfPromiseAtURL",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCopyLogicalURLOfPromiseAtURL",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCopyPromiseNameOfLogicalURL",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCopyPromiseURLOfLogicalURL",
    "type": "CPP"
  },
  {
    "name": "T __CFURLPromiseCopyResourcePropertyForKey",
    "type": "CPP"
  },
  {
    "name": "T __CFURLPromiseSetResourcePropertyForKey",
    "type": "CPP"
  },
  {
    "name": "t __CFAuditTokenForSelf",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesAlwaysUseVolatileUserDomains",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource alreadylocked_removePreferencesObserver:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource removeAllValues_from:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource alreadylocked_requestNewData]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource setConfigurationPath:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource setStoreName:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource setEnabled:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource enabled]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource fullCloudSynchronizeWithCompletionHandler:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource handleReply:toRequestNewDataMessage:onConnection:retryCount:error:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource alreadylocked_generationCount]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource generationCount]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource isVolatile]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource transitionIntoDirectModeIfNeededWithRetryBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource isDirectModeEnabled]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource alreadylocked_clearCache]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource setDaemonCacheEnabled:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource setAccessRestricted:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource userIdentifier]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource isByHost]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource container]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource description]",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40r",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences(SourceAdditions) assertEquivalence:ofIdentifiers:users:hosts:containers:managedFlags:cloudFlags:]",
    "type": "CPP"
  },
  {
    "name": "t ___115-[_CFXPreferences(SourceAdditions) assertEquivalence:ofIdentifiers:users:hosts:containers:managedFlags:cloudFlags:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___115-[_CFXPreferences(SourceAdditions) assertEquivalence:ofIdentifiers:users:hosts:containers:managedFlags:cloudFlags:]_block_invoke.239",
    "type": "CPP"
  },
  {
    "name": "t ___115-[_CFXPreferences(SourceAdditions) assertEquivalence:ofIdentifiers:users:hosts:containers:managedFlags:cloudFlags:]_block_invoke.241",
    "type": "CPP"
  },
  {
    "name": "t __CFURLSetCompatibility",
    "type": "CPP"
  },
  {
    "name": "t ___CFURLCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t _CFShowURL",
    "type": "CPP"
  },
  {
    "name": "t __CFURLInitWithURLString",
    "type": "CPP"
  },
  {
    "name": "t ___CFCoreServicesInternal__FileCacheCreateShallowCopy",
    "type": "CPP"
  },
  {
    "name": "t __CFURLInitAbsoluteURLWithBytes",
    "type": "CPP"
  },
  {
    "name": "T _CFURLCopyStrictPath",
    "type": "CPP"
  },
  {
    "name": "t ___CFURLCopyParameterString_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T ___CFURLReservedPtr",
    "type": "CPP"
  },
  {
    "name": "T ___CFURLSetReservedPtr",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCreateWithFileSystemPathCachingResourcePropertiesForKeys",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCacheResourcePropertiesForKeys",
    "type": "CPP"
  },
  {
    "name": "t __CFURLInitWithFileSystemPathRelativeToBase",
    "type": "CPP"
  },
  {
    "name": "t _URLPathToHFSPath",
    "type": "CPP"
  },
  {
    "name": "T __CFGetFSSpecFromURL",
    "type": "CPP"
  },
  {
    "name": "t ___CFCarbonCore_FSGetCatalogInfo",
    "type": "CPP"
  },
  {
    "name": "T __CFCreateURLFromFSSpec",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCopyExtendedPropertyListPrimitive",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCopyExtendedPropertyListRepresentation",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCopyResourcePropertiesForKeysFromCache",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCacheResourcePropertyForKey",
    "type": "CPP"
  },
  {
    "name": "T __CFURLCreateFileReferenceURLFromIDs",
    "type": "CPP"
  },
  {
    "name": "T __CFURLVolumeIdentifierGetVolumeRefNum",
    "type": "CPP"
  },
  {
    "name": "T __CFURLIsProtectedDirectory",
    "type": "CPP"
  },
  {
    "name": "t ____CFURLIsProtectedDirectory_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _CreateTruncatedURLString",
    "type": "CPP"
  },
  {
    "name": "t _WindowsPathToURLPath",
    "type": "CPP"
  },
  {
    "name": "t ___CFCarbonCore_FSGetVolumeInfo",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore__FSGetVolumeByName_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_FSGetVolumeInfo_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CopyIsDirectoryKeyArray",
    "type": "CPP"
  },
  {
    "name": "t ____CopyIsDirectoryKeyArray_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _filePathToHFSPath",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_FSGetCatalogInfo_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_FSpMakeFSRef_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_GetAliasSizeFromPtr_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_FSNewAlias_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_DisposeHandle_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FileURLCreateDisplayPathComponentsArray_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLCopyResourcePropertiesForKeysFromCache_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLCacheResourcePropertyForKey_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLCacheResourcePropertiesForKeys_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSCreateFileReferenceURLFromIDs_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSVolumeIdentifierGetVolumeRefNum_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLGetFSRef_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLGetCatalogInfo_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__URLReplaceObject_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__FSURLCreateStandardError_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFDataURLCreateDataAndPropertiesFromResource",
    "type": "CPP"
  },
  {
    "name": "t _____CFNetwork__CFURLCreateDataAndPropertiesFromResource_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFNetwork__CFURLWriteDataAndPropertiesToResource_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFNetwork__CFURLDestroyResource_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFUUIDCopyFormattingDescription",
    "type": "CPP"
  },
  {
    "name": "t ___CFUniCharGetUnicodeVersionString",
    "type": "CPP"
  },
  {
    "name": "T _CFUniCharMapTo",
    "type": "CPP"
  },
  {
    "name": "t _CFUniCharGetUnicodeProperty",
    "type": "CPP"
  },
  {
    "name": "T _CFUniCharPrecompose",
    "type": "CPP"
  },
  {
    "name": "t ___CFUserNotificationDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFUserNotificationCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFUserNotificationGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFUserNotificationCreate",
    "type": "CPP"
  },
  {
    "name": "t __CFUserNotificationSendRequest",
    "type": "CPP"
  },
  {
    "name": "T _CFUserNotificationReceiveResponse",
    "type": "CPP"
  },
  {
    "name": "T _CFUserNotificationGetResponseValue",
    "type": "CPP"
  },
  {
    "name": "T _CFUserNotificationGetResponseDictionary",
    "type": "CPP"
  },
  {
    "name": "T _CFUserNotificationUpdate",
    "type": "CPP"
  },
  {
    "name": "T _CFUserNotificationCancel",
    "type": "CPP"
  },
  {
    "name": "T _CFUserNotificationCreateRunLoopSource",
    "type": "CPP"
  },
  {
    "name": "t __CFUserNotificationMachPortCallBack",
    "type": "CPP"
  },
  {
    "name": "T _CFUserNotificationDisplayNotice",
    "type": "CPP"
  },
  {
    "name": "T _CFUserNotificationDisplayAlert",
    "type": "CPP"
  },
  {
    "name": "t __CFUserNotificationAddToDictionary",
    "type": "CPP"
  },
  {
    "name": "t __CFMethodSignatureROMLog",
    "type": "CPP"
  },
  {
    "name": "t ____CFMethodSignatureROMLog_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFRuntimeIssuesLog",
    "type": "CPP"
  },
  {
    "name": "t ____CFRuntimeIssuesLog_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFFoundationRuntimeIssuesLog",
    "type": "CPP"
  },
  {
    "name": "t ____CFFoundationRuntimeIssuesLog_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _CFBSearch",
    "type": "CPP"
  },
  {
    "name": "t ___CFFindPointer",
    "type": "CPP"
  },
  {
    "name": "t ___CFDumpAllPointerLocations",
    "type": "CPP"
  },
  {
    "name": "t ___CFProcessorCount",
    "type": "CPP"
  },
  {
    "name": "t ___CFMemorySize",
    "type": "CPP"
  },
  {
    "name": "T __CFGetEGID",
    "type": "CPP"
  },
  {
    "name": "T __CFPrintForDebugger",
    "type": "CPP"
  },
  {
    "name": "T _CFShow",
    "type": "CPP"
  },
  {
    "name": "t __CFShowToFile",
    "type": "CPP"
  },
  {
    "name": "T __CFLogvEx",
    "type": "CPP"
  },
  {
    "name": "t __CFLogSimple",
    "type": "CPP"
  },
  {
    "name": "t ___CFLogCStringLegacy",
    "type": "CPP"
  },
  {
    "name": "T _CFLogTest",
    "type": "CPP"
  },
  {
    "name": "t __CFReadMappedFromFile",
    "type": "CPP"
  },
  {
    "name": "t __CFErrorWithFilePathCodeDomain",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMostCommonJapaneseCharsKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMostCommonJapaneseCharsKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMostCommonJapaneseCharsKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO88595TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO88595TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISO88595TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "T __CFLinkedOnOrAfter",
    "type": "CPP"
  },
  {
    "name": "t __VolumeObserverFinalize",
    "type": "CPP"
  },
  {
    "name": "t __VolumeObserverCopyDebugDesc",
    "type": "CPP"
  },
  {
    "name": "T __CFVolumeObserverGetTypeID",
    "type": "CPP"
  },
  {
    "name": "t __VolumeObserverDiskDisappearedCallback",
    "type": "CPP"
  },
  {
    "name": "t __VolumeObserverDiskUnmountApprovalCallback",
    "type": "CPP"
  },
  {
    "name": "T __CFVolumeObserverInvalidate",
    "type": "CPP"
  },
  {
    "name": "t __VolumeObserverInvalidate",
    "type": "CPP"
  },
  {
    "name": "T __CFVolumeObserverInvalidateWithCompletionHandler",
    "type": "CPP"
  },
  {
    "name": "t ____CFVolumeObserverInvalidateWithCompletionHandler_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFVolumeObserverSetUnmountDissenterForDisk",
    "type": "CPP"
  },
  {
    "name": "T __CFVolumeObserverGetUnmountDissenterForDisk",
    "type": "CPP"
  },
  {
    "name": "t ____VolumeObserverFinalize_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____VolumeObserverInvalidate_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __inputStreamCurrentLocation",
    "type": "CPP"
  },
  {
    "name": "t __inputStreamCurrentLine",
    "type": "CPP"
  },
  {
    "name": "t __inputStreamScanQuotedString",
    "type": "CPP"
  },
  {
    "name": "t ___CFXMLNodeEqual",
    "type": "CPP"
  },
  {
    "name": "t ___CFXMLNodeHash",
    "type": "CPP"
  },
  {
    "name": "t ___CFXMLNodeCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLNodeCreateCopy",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLNodeCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLNodeGetVersion",
    "type": "CPP"
  },
  {
    "name": "t _externalIDEqual",
    "type": "CPP"
  },
  {
    "name": "t ___CFXMLParserCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLParserGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLParserGetContext",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLParserGetCallBacks",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLParserGetSourceURL",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLParserGetLocation",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLParserGetLineNumber",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLParserGetDocument",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLParserGetStatusCode",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLParserCopyErrorDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLParserAbort",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLParserCreateWithDataFromURL",
    "type": "CPP"
  },
  {
    "name": "t __CFReportError",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLTreeCreateWithDataFromURL",
    "type": "CPP"
  },
  {
    "name": "t __XMLTreeCreateXMLStructure",
    "type": "CPP"
  },
  {
    "name": "t __XMLTreeAddChild",
    "type": "CPP"
  },
  {
    "name": "t __XMLTreeEndXMLStructure",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLTreeCreateFromData",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLTreeCreateFromDataWithError",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLCreateStringByEscapingEntities",
    "type": "CPP"
  },
  {
    "name": "t _parseComment",
    "type": "CPP"
  },
  {
    "name": "t _parseExternalID",
    "type": "CPP"
  },
  {
    "name": "t _parseEnumeration",
    "type": "CPP"
  },
  {
    "name": "t _parseChoiceOrSequence",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLTreeCreateWithNode",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLTreeGetNode",
    "type": "CPP"
  },
  {
    "name": "t _CFXMLTreeEqual",
    "type": "CPP"
  },
  {
    "name": "T _CFXMLTreeCreateXMLData",
    "type": "CPP"
  },
  {
    "name": "t __CFAppendXML",
    "type": "CPP"
  },
  {
    "name": "t _appendQuotedString",
    "type": "CPP"
  },
  {
    "name": "t _appendExternalID",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin9TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin9TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin9TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCopyFileTypeForFileURL",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCopyFileTypeForFileData",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCopyInfoDictionaryForExecutableFileData",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleGetObjCImageInfo",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleGrokX11FromFile",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleGrokObjcImageInfoFromFile",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsGetURLPasswordAllowedCharacterSet",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMostCommonChineseCharsKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMostCommonChineseCharsKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMostCommonChineseCharsKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin5TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin5TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin5TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray count]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray containsObject:inRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray containsObjectIdenticalTo:inRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray countForObject:inRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray countForObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexOfObjectIdenticalTo:inRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexesOfObject:inRange:]",
    "type": "CPP"
  },
  {
    "name": "t ___35-[NSArray indexesOfObject:inRange:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexesOfObject:]",
    "type": "CPP"
  },
  {
    "name": "t ___27-[NSArray indexesOfObject:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexesOfObjectIdenticalTo:inRange:]",
    "type": "CPP"
  },
  {
    "name": "t ___46-[NSArray indexesOfObjectIdenticalTo:inRange:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexesOfObjectIdenticalTo:]",
    "type": "CPP"
  },
  {
    "name": "t ___38-[NSArray indexesOfObjectIdenticalTo:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectAtIndexes:options:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectPassingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectsAtIndexes:options:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectsWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectsPassingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray reversedArray]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray initWithObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray initWithArray:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray initWithSet:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray initWithSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray initWithOrderedSet:range:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray initWithOrderedSet:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray initWithOrderedSet:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray initWithOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray _initByAdoptingBuffer:count:size:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray arrayWithArray:range:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray arrayWithArray:range:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray arrayWithArray:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray arrayWithOrderedSet:range:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray arrayWithOrderedSet:range:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray arrayWithOrderedSet:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray arrayWithOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray arrayWithSet:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray arrayWithSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray arrayByExcludingToObjectsInArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray initWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray encodeWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMostCommonKoreanCharsKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMostCommonKoreanCharsKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMostCommonKoreanCharsKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSDate automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDate initWithTimeIntervalSinceReferenceDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSTaggedDate dealloc]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSTaggedDate automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSTaggedDate initWithTimeIntervalSinceReferenceDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDate retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDate release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDate retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDate dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDate timeIntervalSinceReferenceDate]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate timeIntervalSinceReferenceDate]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate initWithTimeIntervalSinceReferenceDate:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSDate dateWithDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate initWithDate:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSDate dateWithString:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate initWithString:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate initWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate encodeWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate isInToday]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate isInTomorrow]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate isInYesterday]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate isInSameDayAsDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate isEqual:toUnitGranularity:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDate compare:toUnitGranularity:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T _CFDateGetTimeIntervalSinceDate",
    "type": "CPP"
  },
  {
    "name": "t __NSCFCalendarLogger",
    "type": "CPP"
  },
  {
    "name": "T __CFICULog",
    "type": "CPP"
  },
  {
    "name": "t ____CFICUCreateVariableNameForStatus",
    "type": "CPP"
  },
  {
    "name": "t ____CFICUCreateErrorStringWithComment",
    "type": "CPP"
  },
  {
    "name": "t ____CFICUCreateArgumentForUCharInput",
    "type": "CPP"
  },
  {
    "name": "t ____CFICUCreateVariableNameForStatusIfNeeded",
    "type": "CPP"
  },
  {
    "name": "t ____CFICUCreateArgumentForDouble",
    "type": "CPP"
  },
  {
    "name": "t ____CFICUGetEnumStringForUCalendarDateFields",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_getDayOfWeekType",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_getWeekendTransition",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_roll",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_getNow",
    "type": "CPP"
  },
  {
    "name": "t ____CFICULog",
    "type": "CPP"
  },
  {
    "name": "t ____CFICUCreateVariableNameForUCharOutput",
    "type": "CPP"
  },
  {
    "name": "t ____CFICUGetEnumStringForUDateFormatSymbolType",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_formatForFields",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_get2DigitYearStart",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_isLenient",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_udat_getContext",
    "type": "CPP"
  },
  {
    "name": "t ____CFICUCreateVariableName",
    "type": "CPP"
  },
  {
    "name": "t ____CFICUGetEnumStringForUDateFormatStyle",
    "type": "CPP"
  },
  {
    "name": "t ____CFICUCreateArgumentForParsePosition",
    "type": "CPP"
  },
  {
    "name": "t ____CFICUGetEnumStringForUNumberFormatAttribute",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_unum_getDoubleAttribute",
    "type": "CPP"
  },
  {
    "name": "t ____CFICUGetEnumStringForUNumberFormatSymbol",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_unum_getTextAttribute",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_unum_parse",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_unum_getContext",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ulistfmt_open",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ulistfmt_format",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ulistfmt_close",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucurr_getDefaultFractionDigits",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucurr_getRoundingIncrement",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ureldatefmt_open",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ureldatefmt_formatNumeric",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ureldatefmt_format",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ureldatefmt_close",
    "type": "CPP"
  },
  {
    "name": "t ____CFICULogGlobal",
    "type": "CPP"
  },
  {
    "name": "t ____CFICULogWithArguments",
    "type": "CPP"
  },
  {
    "name": "t ____CFICUEmitPostamble",
    "type": "CPP"
  },
  {
    "name": "t ____CFICUCreateVariableNameForHeapPointer",
    "type": "CPP"
  },
  {
    "name": "t ____CFICUSync",
    "type": "CPP"
  },
  {
    "name": "t ______CFICUCreateVariableNameForHeapPointer_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFICUCreateVariableNameLocked",
    "type": "CPP"
  },
  {
    "name": "t ______CFICUSync_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ______CFICUCreateVariableNameForStackPointer_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFICUCreateVariableNameForStackPointerLocked",
    "type": "CPP"
  },
  {
    "name": "t ______CFICUCreateArgumentForUCharInput_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFICUCopyVariableNameForHeapPointer",
    "type": "CPP"
  },
  {
    "name": "t ______CFICUCopyVariableNameForHeapPointer_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ______CFICURemoveVariableNameForHeapPointer_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ______CFICUCreateVariableNameForStackPointerIfNeeded_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ______CFICUCreateVariableName_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _compare",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS count]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS maximumIndex]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS allKeys]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS keyAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS bytesAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS hash]",
    "type": "CPP"
  },
  {
    "name": "t ___24-[_NSSharedKeySetS hash]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS keySetCount]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS __float128]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS select]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS rankTable]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS char]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS M]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS factor]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS numKey]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS seeds]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS keys1]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS keys2]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS keys3]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS setKeys3:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS ckeys]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS subSharedKeySet]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS keyLen]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSSharedKeySetS type]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSKGraphE initWithNumberOfVertices:numberOfEdges:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSKGraphE dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSKGraphE addEdgeWithH1:withH2:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSKGraphE isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSKGraphE numOfEdges]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSKGraphE isAcyclic]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents initWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents encodeWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents isValidDate]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDateComponents isValidDateInCalendar:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFURLComponentsEqual",
    "type": "CPP"
  },
  {
    "name": "t ___CFURLComponentsHash",
    "type": "CPP"
  },
  {
    "name": "t ___CFURLComponentsCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCopyPath",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCopyPercentEncodedPassword",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCopyUser",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCopyPassword",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCopyQuery",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsSetPassword",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsSetPort",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsSetQuery",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsSetFragment",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsSetPercentEncodedUser",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsSetPercentEncodedPassword",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsSetPercentEncodedHost",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsSetPercentEncodedFragment",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsGetRangeOfScheme",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsGetRangeOfUser",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsGetRangeOfPassword",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsGetRangeOfHost",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsGetRangeOfPort",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsCopyPercentEncodedQueryItems",
    "type": "CPP"
  },
  {
    "name": "T __CFURLComponentsSetPercentEncodedQueryItems",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary count]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary objectForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary keyEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary allObjects]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary countForObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary getKeys:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary invertedDictionary]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary keyOfEntryWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t ___50-[NSDictionary keyOfEntryWithOptions:passingTest:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary keyOfEntryPassingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary initWithObjects:forKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary initWithObject:forKey:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSDictionary dictionaryWithDictionary:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSDictionary supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary initWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary encodeWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCopyResourceForkURL",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleOpenBundleResourceFork",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCloseBundleResourceFork",
    "type": "CPP"
  },
  {
    "name": "t ___CFCarbonCore_FSGetResourceForkName",
    "type": "CPP"
  },
  {
    "name": "t ___CFCarbonCore_RMOpenResourceFileRef",
    "type": "CPP"
  },
  {
    "name": "t ___CFCarbonCore_RMGetResource",
    "type": "CPP"
  },
  {
    "name": "t ___CFCarbonCore_RMCloseResourceFile",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyResourceMapLocalizationsForURL",
    "type": "CPP"
  },
  {
    "name": "t ___CFCarbonCore_FSOpenResourceFile",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_FSOpenResourceFile_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_InsertOverrideFile_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_CloseResFile_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_FSGetResourceForkName_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_RMOpenResourceFileRef_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_RMGetResource_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCarbonCore_RMCloseResourceFile_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSEnumerator nextObject]",
    "type": "CPP"
  },
  {
    "name": "t ___NSFastEnumerationShouldThrowExceptionOnMutation",
    "type": "CPP"
  },
  {
    "name": "t ___NSFastEnumerationMutationHandler",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectEnumerator init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectEnumerator description]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSEnumerator0 sharedInstance]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSEnumerator0 new]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSEnumerator0 allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSEnumerator0 init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSEnumerator0 retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSEnumerator0 autorelease]",
    "type": "CPP"
  },
  {
    "name": "t -[NSException callStackReturnAddresses]",
    "type": "CPP"
  },
  {
    "name": "t -[NSException _isUnarchived]",
    "type": "CPP"
  },
  {
    "name": "t -[NSException _markAsUnarchived]",
    "type": "CPP"
  },
  {
    "name": "t -[NSException _installStackTraceKeyIfNeeded]",
    "type": "CPP"
  },
  {
    "name": "t -[NSException isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSException hash]",
    "type": "CPP"
  },
  {
    "name": "t -[NSException redactedDescription]",
    "type": "CPP"
  },
  {
    "name": "t -[NSException init]",
    "type": "CPP"
  },
  {
    "name": "t -[NSException copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSException initWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSException encodeWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSException supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "t ___raiseError",
    "type": "CPP"
  },
  {
    "name": "t ___handleUncaughtException",
    "type": "CPP"
  },
  {
    "name": "t ___lockUnlocker",
    "type": "CPP"
  },
  {
    "name": "t ___deleteLockHandlers",
    "type": "CPP"
  },
  {
    "name": "t _typeStringRelease",
    "type": "CPP"
  },
  {
    "name": "t _copyTypeStringDesc",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature init]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature _flags]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature _cTypeString]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature _isHiddenStructRet]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature hash]",
    "type": "CPP"
  },
  {
    "name": "t ___NSMS5",
    "type": "CPP"
  },
  {
    "name": "t -[NSMethodSignature debugDescription]",
    "type": "CPP"
  },
  {
    "name": "t ___NSMS7",
    "type": "CPP"
  },
  {
    "name": "t -[__NSMessageBuilder finalize]",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation init]",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation invokeSuper]",
    "type": "CPP"
  },
  {
    "name": "t -[NSBlockInvocation selector]",
    "type": "CPP"
  },
  {
    "name": "t -[NSBlockInvocation setSelector:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSBlockInvocation invokeUsingIMP:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSBlockInvocation invokeSuper]",
    "type": "CPP"
  },
  {
    "name": "t _____NSMakeSpecialForwardingCaptureBlock_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFMachPortBoostCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayReversed count]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayReversed objectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayReversed getObjects:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayReversed initWithArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayReversed dealloc]",
    "type": "CPP"
  },
  {
    "name": "t _CFDateIntervalGetTypeID",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateIntervalGetTypeID_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFDateIntervalCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFDateIntervalCreateWithEndDate",
    "type": "CPP"
  },
  {
    "name": "T _CFDateIntervalGetDuration",
    "type": "CPP"
  },
  {
    "name": "T _CFDateIntervalCopyStartDate",
    "type": "CPP"
  },
  {
    "name": "T _CFDateIntervalCopyEndDate",
    "type": "CPP"
  },
  {
    "name": "T _CFDateIntervalCompare",
    "type": "CPP"
  },
  {
    "name": "T _CFDateIntervalIntersectsDateInterval",
    "type": "CPP"
  },
  {
    "name": "T _CFDateIntervalContainsDate",
    "type": "CPP"
  },
  {
    "name": "T _CFDateIntervalCreateIntersectionWithDateInterval",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateIntervalDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateIntervalEqual",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateIntervalHash",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateIntervalCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsCloudSource initWithDomain:user:byHost:containerPath:containingPreferences:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsCloudSource createSynchronizeMessage]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsCloudSource alreadylocked_updateObservingRemoteChanges]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsCloudSource fullCloudSynchronizeWithCompletionHandler:]",
    "type": "CPP"
  },
  {
    "name": "t ___64-[CFPrefsCloudSource fullCloudSynchronizeWithCompletionHandler:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___64-[CFPrefsCloudSource fullCloudSynchronizeWithCompletionHandler:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsCloudSource mergeIntoDictionary:sourceDictionary:cloudKeyEvaluator:]",
    "type": "CPP"
  },
  {
    "name": "t ___77-[CFPrefsCloudSource mergeIntoDictionary:sourceDictionary:cloudKeyEvaluator:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsCloudSource enabled]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsCloudSource setEnabled:]",
    "type": "CPP"
  },
  {
    "name": "t ___33-[CFPrefsCloudSource setEnabled:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___33-[CFPrefsCloudSource setEnabled:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsCloudSource setConfigurationPath:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsCloudSource setStoreName:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsCloudSource dealloc]",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsCreatePreferencesDirectory",
    "type": "CPP"
  },
  {
    "name": "t __safe_recursive_mkdir_chown",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsGenerateDirectoryURLForTriplet_testing",
    "type": "CPP"
  },
  {
    "name": "t __CFPreferencesCopyApplicationList",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesCopyApplicationMap",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsGetPathForManagedBundleID_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesCopyPathForManagedDomain",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsGetPathForTriplet",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsTemporaryFDToWriteTo",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsWritePlistToFDThenClose",
    "type": "CPP"
  },
  {
    "name": "t -[NSNull _cfTypeID]",
    "type": "CPP"
  },
  {
    "name": "t -[NSNull retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[NSNull dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[NSNull initWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSNull encodeWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObject:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectAtIndex:withObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray addObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray addObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray addObjectsFromArray:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray addObjectsFromOrderedSet:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray addObjectsFromOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray addObjectsFromSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray exchangeObjectAtIndex:withObjectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObjectsFromArray:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObjectsFromOrderedSet:range:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObjectsFromOrderedSet:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObjectsFromSet:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray moveObjectsAtIndexes:toIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeFirstObject]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeLastObject]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectIdenticalTo:inRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInRange:inArray:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInArray:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInRange:inOrderedSet:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInRange:inOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInOrderedSet:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInRange:inSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsAtIndexes:options:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsPassingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObject:inRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectsInRange:withObjectsFromOrderedSet:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectsInRange:withObjectsFromOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectsInRange:withObjectsFromSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray setObject:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray setOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray setSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray sortUsingFunction:context:range:]",
    "type": "CPP"
  },
  {
    "name": "t ___50-[NSMutableArray sortUsingFunction:context:range:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray initWithCapacity:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray initWithObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFZombifyNSObject",
    "type": "CPP"
  },
  {
    "name": "t ___CFOAInitializeNSObject",
    "type": "CPP"
  },
  {
    "name": "t _couldNotInstantiate",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject(NSObject) doesNotRecognizeSelector:]",
    "type": "CPP"
  },
  {
    "name": "t ___CFExceptionProem",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSObject) doesNotRecognizeSelector:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSObject) __retain_OA]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSObject) ___tryRetain_OA]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSObject) __release_OA]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSObject) __autorelease_OA]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject(NSObject) __allocWithZone_OA:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSObject) __dealloc_zombie]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject(NSObject) init]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject(NSObject) dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject(NSKindOfAdditions) isNSTimeZone__]",
    "type": "CPP"
  },
  {
    "name": "T __NSIsNSCFConstantString",
    "type": "CPP"
  },
  {
    "name": "t +[_NSZombie_ initialize]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSAtom initialize]",
    "type": "CPP"
  },
  {
    "name": "t _makeAtom",
    "type": "CPP"
  },
  {
    "name": "t _getAtomTarget",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFType retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFType dealloc]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFType automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSGenericDeallocHandler initialize]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSGenericDeallocHandler retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSGenericDeallocHandler retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSGenericDeallocHandler release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSGenericDeallocHandler finalize]",
    "type": "CPP"
  },
  {
    "name": "T __NSSetDeallocHandler",
    "type": "CPP"
  },
  {
    "name": "t ___CFFullMethodName",
    "type": "CPP"
  },
  {
    "name": "T __CFAutoreleasePoolPrintPools",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet count]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet member:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet objectEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet getObjects:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet intersectsOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet isSubsetOfOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet members:notFoundMarker:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet objectWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t ___39-[NSSet objectWithOptions:passingTest:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet objectPassingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet sortedArrayWithOptions:usingComparator:]",
    "type": "CPP"
  },
  {
    "name": "t ___48-[NSSet sortedArrayWithOptions:usingComparator:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet sortedArrayUsingComparator:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet __getValue:forObj:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet initWithObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet initWithObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet initWithArray:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet initWithArray:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet initWithOrderedSet:range:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet initWithOrderedSet:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet initWithOrderedSet:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet initWithOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet newSetWithObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet setWithArray:range:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet setWithArray:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet setWithOrderedSet:range:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet setWithOrderedSet:range:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet setWithOrderedSet:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet setWithOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet setWithSet:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet initWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet encodeWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSSetM automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM clumpingFactor]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM clumpingInterestingThreshold]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSSetM allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM objectEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM clumpingFactor]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM clumpingInterestingThreshold]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSFrozenSetM allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t _cow_copy_instance",
    "type": "CPP"
  },
  {
    "name": "t _cow_copy_storage",
    "type": "CPP"
  },
  {
    "name": "t _cow_set_cow",
    "type": "CPP"
  },
  {
    "name": "t ___CLUMPINESS_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___mset_enumerateObjectsWithOptionsUsingBlock_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFListFormatterGetTypeID",
    "type": "CPP"
  },
  {
    "name": "t ___CFListFormatterDeallocate",
    "type": "CPP"
  },
  {
    "name": "t ___CFListFormatterCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T __CFListFormatterCreate",
    "type": "CPP"
  },
  {
    "name": "T __CFListFormatterCreateStringByJoiningStrings",
    "type": "CPP"
  },
  {
    "name": "t ____CFListFormatterCreateStringByJoiningStrings_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _cbInit",
    "type": "CPP"
  },
  {
    "name": "t _cbDestroy",
    "type": "CPP"
  },
  {
    "name": "t __cbCanRead",
    "type": "CPP"
  },
  {
    "name": "t _cbRead",
    "type": "CPP"
  },
  {
    "name": "t ___cbRead",
    "type": "CPP"
  },
  {
    "name": "t __cbCanWrite",
    "type": "CPP"
  },
  {
    "name": "t _cbWrite",
    "type": "CPP"
  },
  {
    "name": "t ___cbWrite",
    "type": "CPP"
  },
  {
    "name": "T __CFCalendarResetCurrent",
    "type": "CPP"
  },
  {
    "name": "t _____initDayChangedNotification_block_invoke_4",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper setFirstWeekday:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper setMinimumDaysInFirstWeek:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper setGregorianStartDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper minimumRangeOfUnit:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSCopyOnWriteCalendarWrapper nextWeekendStartDate:interval:options:afterDate:]",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarCopyCoWCurrentCalendar",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar init]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar _cfTypeID]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar hash]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSCalendar supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar initWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar encodeWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar getEra:yearForWeekOfYear:weekOfYear:weekday:fromDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar getHour:minute:second:nanosecond:fromDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar dateWithEra:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar isDateInYesterday:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar isDateInTomorrow:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar rangeOfWeekendStartDate:interval:containingDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar components:fromDateComponents:toDateComponents:options:]",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar nextDateAfterDate:matchingUnit:value:options:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar dateBySettingUnit:value:ofDate:options:]",
    "type": "CPP"
  },
  {
    "name": "t ___53-[NSCalendar dateBySettingUnit:value:ofDate:options:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar date:matchesComponents:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar isDateInWeekend:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar nextWeekendStartDate:interval:options:afterDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar initWithCalendarIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar calendarIdentifier]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar setLocale:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar locale]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar setTimeZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar timeZone]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar setFirstWeekday:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar firstWeekday]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar setMinimumDaysInFirstWeek:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar minimumDaysInFirstWeek]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar setGregorianStartDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar gregorianStartDate]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar minimumRangeOfUnit:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar maximumRangeOfUnit:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar rangeOfUnit:inUnit:forDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar ordinalityOfUnit:inUnit:forDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar rangeOfUnit:startDate:interval:forDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar dateFromComponents:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar components:fromDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar dateByAddingComponents:toDate:options:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar components:fromDate:toDate:options:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar _setGregorianStartDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar eraSymbols]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar monthSymbols]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar shortMonthSymbols]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar shortWeekdaySymbols]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar AMSymbol]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar PMSymbol]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar longEraSymbols]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar veryShortMonthSymbols]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar standaloneMonthSymbols]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar shortStandaloneMonthSymbols]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar veryShortStandaloneMonthSymbols]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar veryShortWeekdaySymbols]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar standaloneWeekdaySymbols]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar shortStandaloneWeekdaySymbols]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar veryShortStandaloneWeekdaySymbols]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar quarterSymbols]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar shortQuarterSymbols]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar standaloneQuarterSymbols]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar shortStandaloneQuarterSymbols]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar _minimumRangeOfUnit:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar _maximumRangeOfUnit:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar _rangeOfUnit:inUnit:forAT:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar _ordinalityOfUnit:inUnit:forAT:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar _rangeOfUnit:startTime:interval:forAT:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar _composeAbsoluteTime:::]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar _decomposeAbsoluteTime:::]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar _addComponents::::]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCalendar _diffComponents:::::]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar retainCount]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFCalendar automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar setFirstWeekday:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar setMinimumDaysInFirstWeek:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar setGregorianStartDate:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFCalendar calendarWithIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFCalendar nextWeekendStartDate:interval:options:afterDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSTimeZone isDaylightSavingTimeForDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSTimeZone nextDaylightSavingTimeTransitionAfterDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSTimeZone localizedName:locale:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSTimeZone dealloc]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSTimeZone automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSTimeZone allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderTimeZone init]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderTimeZone retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderTimeZone release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderTimeZone retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderTimeZone dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderTimeZone name]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderTimeZone data]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderTimeZone secondsFromGMTForDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderTimeZone abbreviationForDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderTimeZone isDaylightSavingTimeForDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderTimeZone daylightSavingTimeOffsetForDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderTimeZone nextDaylightSavingTimeTransitionAfterDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone name]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone data]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone secondsFromGMTForDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone abbreviationForDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone isDaylightSavingTimeForDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone daylightSavingTimeOffsetForDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone nextDaylightSavingTimeTransitionAfterDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone _cfTypeID]",
    "type": "CPP"
  },
  {
    "name": "T _CFTimeZoneGetTypeID",
    "type": "CPP"
  },
  {
    "name": "t +[NSTimeZone setDefaultTimeZone:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSTimeZone knownTimeZoneNames]",
    "type": "CPP"
  },
  {
    "name": "t +[NSTimeZone setAbbreviationDictionary:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSTimeZone timeZoneDataVersion]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone isDaylightSavingTime]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone nextDaylightSavingTimeTransition]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone localizedName:locale:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone description]",
    "type": "CPP"
  },
  {
    "name": "t +[NSTimeZone timeZoneWithName:data:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone initWithName:data:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone initWithName:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSTimeZone supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone initWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSTimeZone encodeWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSLocalTimeZone data]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSLocalTimeZone isDaylightSavingTimeForDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSLocalTimeZone nextDaylightSavingTimeTransitionAfterDate:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSLocalTimeZone localizedName:locale:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSLocalTimeZone description]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSLocalTimeZone supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSLocalTimeZone initWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSLocalTimeZone replacementObjectForPortCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSLocalTimeZoneI retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSLocalTimeZoneI _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSLocalTimeZoneI _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "T _CFTimeZoneResetSystem",
    "type": "CPP"
  },
  {
    "name": "T _CFTimeZoneSetDefault",
    "type": "CPP"
  },
  {
    "name": "T _CFTimeZoneCopyKnownNames",
    "type": "CPP"
  },
  {
    "name": "T _CFTimeZoneCopyAbbreviationDictionary",
    "type": "CPP"
  },
  {
    "name": "T _CFTimeZoneSetAbbreviationDictionary",
    "type": "CPP"
  },
  {
    "name": "T _CFTimeZoneCreate",
    "type": "CPP"
  },
  {
    "name": "T _CFTimeZoneCreateWithName",
    "type": "CPP"
  },
  {
    "name": "T _CFTimeZoneGetData",
    "type": "CPP"
  },
  {
    "name": "T _CFTimeZoneCopyAbbreviation",
    "type": "CPP"
  },
  {
    "name": "T _CFTimeZoneIsDaylightSavingTime",
    "type": "CPP"
  },
  {
    "name": "T _CFTimeZoneGetDaylightSavingTimeOffset",
    "type": "CPP"
  },
  {
    "name": "T _CFTimeZoneGetNextDaylightSavingTimeTransition",
    "type": "CPP"
  },
  {
    "name": "T _CFTimeZoneCopyLocalizedName",
    "type": "CPP"
  },
  {
    "name": "t ___eqUnA",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI nothingAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSArrayI automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSArrayI allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSArrayI_Transfer automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t ___62-[__NSArrayI_Transfer enumerateObjectsWithOptions:usingBlock:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[__NSArrayI_Transfer allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSPlaceholderLocale retain]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSPlaceholderLocale release]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSPlaceholderLocale autorelease]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale objectForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale displayNameForKey:value:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale _nullLocale]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale _setNullLocale]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale _cfTypeID]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale hash]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale initWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale encodeWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale localizedStringForLocaleIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale localizedStringForLanguageCode:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale localizedStringForCountryCode:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale scriptCode]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale localizedStringForScriptCode:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale variantCode]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale localizedStringForVariantCode:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale calendarIdentifier]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale localizedStringForCalendarIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale collationIdentifier]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale localizedStringForCollationIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale decimalSeparator]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale localizedStringForDecimalSeparator:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale groupingSeparator]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale localizedStringForGroupingSeparator:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale currencySymbol]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale localizedStringForCurrencySymbol:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale currencyCode]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale localizedStringForCurrencyCode:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale collatorIdentifier]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale localizedStringForCollatorIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale quotationBeginDelimiter]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale localizedStringForQuotationBeginDelimiter:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale quotationEndDelimiter]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale localizedStringForQuotationEndDelimiter:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale alternateQuotationBeginDelimiter]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale localizedStringForAlternateQuotationBeginDelimiter:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale alternateQuotationEndDelimiter]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale localizedStringForAlternateQuotationEndDelimiter:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale exemplarCharacterSet]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale usesMetricSystem]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale identifier]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale initWithLocaleIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale ISOLanguageCodes]",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale ISOCurrencyCodes]",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale commonISOCurrencyCodes]",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale localeIdentifierFromWindowsLocaleCode:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale windowsLocaleCodeFromLocaleIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSLocale lineDirectionForLanguage:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale _copyDisplayNameForKey:value:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSLocale _prefs]",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingICUByteLength",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringEncodingCreateICUEncodings",
    "type": "CPP"
  },
  {
    "name": "t ___CFICUThreadDataDestructor",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsCopyDescriptionOfAllSearchLists",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsDumpDescriptionOfAllSearchLists",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsSetEphemeralMultiUserEnabled",
    "type": "CPP"
  },
  {
    "name": "t _eduModeEnabled",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsCreateConfigurationFileNameFromIdentifier",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsCopyCloudConfigurationURLFromBundle",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsEnableWritingToExternalAppCloudPreferences",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource removePreferencesObserver:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource lock]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource unlock]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource isDirectModeEnabled]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource addCloudSourceForIdentifier:configurationPath:storeName:container:]",
    "type": "CPP"
  },
  {
    "name": "t ___93-[CFPrefsSearchListSource addCloudSourceForIdentifier:configurationPath:storeName:container:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource alreadylocked_useCloudForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource alreadylocked_hasCloudValueForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource alreadylocked_hasNonRegisteredValueForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource fullCloudSynchronizeWithCompletionHandler:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource alreadylocked_copyKeyList]",
    "type": "CPP"
  },
  {
    "name": "t ___52-[CFPrefsSearchListSource alreadylocked_copyKeyList]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[CFPrefsSearchListSource preloadDomainsForIdentifiers:containers:cloudConfigurationURLs:count:containingPreferences:]",
    "type": "CPP"
  },
  {
    "name": "t _CFPREFERENCES_IS_WAITING_FOR_DIRECT_CFPREFSD",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsDaemonLog",
    "type": "CPP"
  },
  {
    "name": "t ___104-[CFPrefsSearchListSource synchronouslySendDaemonMessage:andAgentMessage:andDirectMessage:replyHandler:]_block_invoke_2.125",
    "type": "CPP"
  },
  {
    "name": "t ___55-[CFPrefsSearchListSource alreadylocked_getDictionary:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _pendingKVODestructor",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource alreadylocked_copyManagedValueForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource alreadylocked_copyManagedDictionary]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource removeSource:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource setCloudEnabled:forKeyPrefix:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource setCloudEnabled:forKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource description]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource copyOSLogDescription]",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_",
    "type": "CPP"
  },
  {
    "name": "t ___108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke.249",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40r48r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40r48r",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences(SearchListAdditions) assertEquivalence:ofIdentifiers:containers:cloudConfigurationURLs:]",
    "type": "CPP"
  },
  {
    "name": "t ___106-[_CFXPreferences(SearchListAdditions) assertEquivalence:ofIdentifiers:containers:cloudConfigurationURLs:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences(SearchListAdditions) copyDescriptionOfSearchLists]",
    "type": "CPP"
  },
  {
    "name": "t ___68-[_CFXPreferences(SearchListAdditions) copyDescriptionOfSearchLists]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _copyDescriptionApplier",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSuiteSearchListSource deferredNotifyCausedByLocalWriteOfChangesToKey:fromValue:toValue:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSuiteSearchListSource _notifyObserversOfChangeFromValuesForKeys:toValuesForKeys:]",
    "type": "CPP"
  },
  {
    "name": "T __NSURLCreateNSColorWithRGBAValues",
    "type": "CPP"
  },
  {
    "name": "t +[NSURL writeBookmarkData:toURL:options:error:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL bookmarkDataWithAliasRecord:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSBlock allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSBlock alloc]",
    "type": "CPP"
  },
  {
    "name": "t -[NSBlock invoke]",
    "type": "CPP"
  },
  {
    "name": "t -[NSBlock performAfterDelay:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSBlock debugDescription]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSStackBlock retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSStackBlock autorelease]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSMallocBlock retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSAutoBlock copy]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSAutoBlock copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFinalizingBlock finalize]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSGlobalBlock retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSGlobalBlock _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSGlobalBlock _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObserverRegistration enumerate:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObserverRegistration resetObserverAndChildren:]",
    "type": "CPP"
  },
  {
    "name": "t _NSMoribundCache_invalidAccess",
    "type": "CPP"
  },
  {
    "name": "t ___NSMoribundCache_invalidAccess_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache copy]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache retain]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache release]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache autorelease]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache name]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache setName:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache delegate]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache setDelegate:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache objectForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache setObject:forKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache setObject:forKey:cost:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache removeObjectForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache removeAllObjects]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache totalCostLimit]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache setTotalCostLimit:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache countLimit]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache setCountLimit:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache evictsObjectsWithDiscardedContent]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSMoribundCache setEvictsObjectsWithDiscardedContent:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache name]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache delegate]",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache totalCostLimit]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache countLimit]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache minimumObjectCount]",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache evictsObjectsWhenApplicationEntersBackground]",
    "type": "CPP"
  },
  {
    "name": "t ___NSCacheApplicationDidEnterBackgroundCallBack",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache allObjects]",
    "type": "CPP"
  },
  {
    "name": "t __allObjectsInvokeFunction",
    "type": "CPP"
  },
  {
    "name": "t ___21-[NSCache allObjects]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSCache __apply:]",
    "type": "CPP"
  },
  {
    "name": "t _____NSCacheValueRelease_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____NSCacheApplicationDidEnterBackgroundCallBack_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFCalendarEqual",
    "type": "CPP"
  },
  {
    "name": "t ___CFCalendarCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarGetNextWeekend",
    "type": "CPP"
  },
  {
    "name": "t ___CFCalendarZapCal",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarSetGregorianStartDate",
    "type": "CPP"
  },
  {
    "name": "t ___CFCalendarGetICUFieldCode",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarGetComponentDifference",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarCreateStartDateForTimeRangeOfUnitForDate",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarCreateDateInterval",
    "type": "CPP"
  },
  {
    "name": "T _CFCalendarCreateDateFromComponents",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarCreateDateByAddingDateComponentsToDate",
    "type": "CPP"
  },
  {
    "name": "t ___CFCalendarGetRangeOfUnit2",
    "type": "CPP"
  },
  {
    "name": "T _CFURLWriteBookmarkDataToFile",
    "type": "CPP"
  },
  {
    "name": "T __CFURLBookmarkCopyDescription",
    "type": "CPP"
  },
  {
    "name": "T __CFURLBookmarkDataToAliasHandle",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__CFURLCreateBookmarkDataFromFile_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__CFURLWriteBookmarkDataToFile_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__CFURLBookmarkDataCopyDescription_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__CFURLCreateBookmarkDataFromAliasRecord_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__CFURLBookmarkToAliasHandle_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFURLEnumeratorGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T __CFURLEnumeratorGetURLsBulk",
    "type": "CPP"
  },
  {
    "name": "T _CFURLEnumeratorGetSourceDidChange",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__URLEnumeratorGetTypeID_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__URLEnumeratorGetURLsBulk_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFCoreServicesInternal__URLEnumeratorGetSourceDidChange_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashHasStrongValues",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashHasStrongKeys",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashGetNumBuckets",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashGetCapacity",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashGetFlags",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashApplyIndexed",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashRemoveValueAtIndex",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashAddIntValueAndInc",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashRemoveIntValueAndDec",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashGetSize",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashShow",
    "type": "CPP"
  },
  {
    "name": "T _CFXNotificationRegistrarGetTypeID",
    "type": "CPP"
  },
  {
    "name": "T _CFXNotificationRegistrarCreate",
    "type": "CPP"
  },
  {
    "name": "T __CFXNotificationRegistrationDispose",
    "type": "CPP"
  },
  {
    "name": "T _CFXNotificationRegistrarFind",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarFindName",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarFindObject",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarFindObservers",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarInvalidateObserver",
    "type": "CPP"
  },
  {
    "name": "t ___CFXNotificationRegistrarFind_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _CFXNotificationRegistrarFindToken",
    "type": "CPP"
  },
  {
    "name": "T _CFXNotificationRegistrarRemove",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarRemoveNames",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarRemoveObjects",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarRemoveObservers",
    "type": "CPP"
  },
  {
    "name": "T _CFXNotificationRegistrarRemoveToken",
    "type": "CPP"
  },
  {
    "name": "T _CFXNotificationRegistrarAdd",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarAddObserver",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarAddObject",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarAddName",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationInvalidationListDispose",
    "type": "CPP"
  },
  {
    "name": "T _CFXNotificationRegistrarAddToken",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarAddObserverToken",
    "type": "CPP"
  },
  {
    "name": "T _CFXNotificationRegisteredObserverSetNotifyToken",
    "type": "CPP"
  },
  {
    "name": "T _CFXNotificationRegisteredObserverSetDistributedConnection",
    "type": "CPP"
  },
  {
    "name": "T _CFXNotificationRegisteredObserverSetRemoteToken",
    "type": "CPP"
  },
  {
    "name": "T _CFXNotificationRegistrarEnumerate",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarEnumerateNameTable",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarEnumerateObjectTable",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarEnumerateObserverTable",
    "type": "CPP"
  },
  {
    "name": "T _CFXNotificationRegistrarIsEmpty",
    "type": "CPP"
  },
  {
    "name": "T _CFXNotificationRegistrarValidateToken",
    "type": "CPP"
  },
  {
    "name": "t ___CFXNotificationRegistrarDeallocate",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarRecycleObserverRegistration",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarRecycleNameRegistration",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarRecycleObjectRegistration",
    "type": "CPP"
  },
  {
    "name": "t ____CFXNotificationRegistrarRecycleObserverRegistration_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationInitRegisteredObserver",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarGrowObserverPool",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObjectRegistration enumerate:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObjectRegistration object]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSPlaceholderOrderedSet allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderOrderedSet retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderOrderedSet release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderOrderedSet retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderOrderedSet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderOrderedSet count]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderOrderedSet indexOfObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderOrderedSet objectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderOrderedSet insertObject:atIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderOrderedSet removeObjectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderOrderedSet replaceObjectAtIndex:withObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1258TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1258TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1258TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleSearchForLocalizedString",
    "type": "CPP"
  },
  {
    "name": "t ____CFBundleSearchForLocalizedString_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFBundleSearchForLocalizedString_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___CFVariableWidthStringApplyFunction",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1256TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1256TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1256TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1257TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1257TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows1257TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet count]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexOfObject:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectAtIndex:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet allObjects]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet containsObject:inRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet countForObject:inRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet enumerateObjectsWithOptions:usingBlock:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet getObjects:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexOfObject:inRange:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexesOfObjectsAtIndexes:options:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet intersectsOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet isSubsetOfOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectAtIndexes:options:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectPassingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectsAtIndexes:options:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectsWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectsPassingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet sortedArrayWithOptions:usingComparator:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet descriptionWithLocale:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet hash]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet initWithObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet newOrderedSetWithObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet initWithArray:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet initWithArray:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet initWithObjects:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet initWithOrderedSet:range:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet initWithOrderedSet:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet initWithOrderedSet:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet orderedSetWithObjects:count:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet orderedSetWithObjects:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet orderedSetWithArray:range:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet orderedSetWithArray:range:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet orderedSetWithArray:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet orderedSetWithOrderedSet:range:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet orderedSetWithOrderedSet:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet orderedSetWithSet:copyItems:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet initWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet encodeWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t __CFStringCreateWithWidthContexts",
    "type": "CPP"
  },
  {
    "name": "t ____CFCopyResolvedFormatStringWithConfiguration_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFCopyResolvedFormatStringWithConfiguration_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity setOwner:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity setGroup:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity setOwnerUUID:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity setGroupUUID:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity hash]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity description]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSFileSecurity automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSFileSecurity allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity encodeWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFileSecurity initWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSFileSecurity supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderFileSecurity retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderFileSecurity release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderFileSecurity retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderFileSecurity dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderFileSecurity initWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderFileSecurity encodeWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSPlaceholderFileSecurity supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderFileSecurity copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSFileSecurity _cfTypeID]",
    "type": "CPP"
  },
  {
    "name": "T _CFFileSecurityGetTypeID",
    "type": "CPP"
  },
  {
    "name": "t -[NSFileSecurity copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSFileSecurity initWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSFileSecurity encodeWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSFileSecurity supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "T _CFFileSecuritySetOwnerUUID",
    "type": "CPP"
  },
  {
    "name": "T _CFFileSecuritySetGroupUUID",
    "type": "CPP"
  },
  {
    "name": "T _CFFileSecuritySetOwner",
    "type": "CPP"
  },
  {
    "name": "T _CFFileSecuritySetGroup",
    "type": "CPP"
  },
  {
    "name": "t +[__NSSingleObjectArrayI automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSSingleObjectArrayI allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieCreateFromMapBytes",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieInsert",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieAddWithWeight",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieAdd",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieInsertCharacters",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieAddCharactersWithWeight",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieAddCharacters",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieInsertUTF8String",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieInsertWithWeight",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieInsertCharactersWithWeight",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieInsertUTF8StringWithWeight",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieFind",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieFindCharacters",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieFindUTF8String",
    "type": "CPP"
  },
  {
    "name": "t _burstTrieMappedFind",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieCursorGetPayload",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieSerialize",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieSerializeWithFileDescriptor",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieTraverse",
    "type": "CPP"
  },
  {
    "name": "t _foundKey",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieTraverseWithCursor",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTriePrint",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieGetCount",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieRetain",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieCreateCursorForBytes",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieCursorRelease",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieCursorCreateByCopy",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieCursorIsEqual",
    "type": "CPP"
  },
  {
    "name": "T _CFBurstTrieTraverseFromCursor",
    "type": "CPP"
  },
  {
    "name": "t _traverseFromMapCursor",
    "type": "CPP"
  },
  {
    "name": "t _traverseCFBurstTrieMappedLevel",
    "type": "CPP"
  },
  {
    "name": "t _traverseCFBurstTrieCompactMappedLevel",
    "type": "CPP"
  },
  {
    "name": "t _traverseCFBurstTrieLevel",
    "type": "CPP"
  },
  {
    "name": "t _traverseFromMapCursorMappedLevel",
    "type": "CPP"
  },
  {
    "name": "t _burstTrieCompactTrieMappedFind",
    "type": "CPP"
  },
  {
    "name": "t _burstTrieMappedPageFind",
    "type": "CPP"
  },
  {
    "name": "t _serializeCFBurstTrieLists",
    "type": "CPP"
  },
  {
    "name": "t _serializeCFBurstTrieLevels",
    "type": "CPP"
  },
  {
    "name": "t _serializeCFBurstTrieList",
    "type": "CPP"
  },
  {
    "name": "t _nodeStringCompare",
    "type": "CPP"
  },
  {
    "name": "t _nodeWeightCompare",
    "type": "CPP"
  },
  {
    "name": "T __CFFileCoordinateReadingItemAtURL2",
    "type": "CPP"
  },
  {
    "name": "t ____CFFileCoordinateReadingItemAtURL2_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFFileCoordinateReadingItemAtURL2_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "T __CFFileCoordinateWritingItemAtURL2",
    "type": "CPP"
  },
  {
    "name": "t ____CFFileCoordinateWritingItemAtURL2_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFFileCoordinateWritingItemAtURL2_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "T __CFFileCoordinateReadingWritingItemsAtURLs2",
    "type": "CPP"
  },
  {
    "name": "t ____CFFileCoordinateReadingWritingItemsAtURLs2_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFFileCoordinateReadingWritingItemsAtURLs2_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "T __CFFileCoordinateWritingItemsAtURLs2",
    "type": "CPP"
  },
  {
    "name": "t ____CFFileCoordinateWritingItemsAtURLs2_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFFileCoordinateWritingItemsAtURLs2_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "T __CFFileDidMove2",
    "type": "CPP"
  },
  {
    "name": "T __CFFileDidDisconnect2",
    "type": "CPP"
  },
  {
    "name": "T __CFFileDidReconnect2",
    "type": "CPP"
  },
  {
    "name": "T __CFFileDidGainVersion2",
    "type": "CPP"
  },
  {
    "name": "T __CFFileDidLoseVersion2",
    "type": "CPP"
  },
  {
    "name": "T __CFFileDidResolveConflictVersion2",
    "type": "CPP"
  },
  {
    "name": "T __CFFileCoordinateReadingItemAtURL",
    "type": "CPP"
  },
  {
    "name": "T __CFFileCoordinateWritingItemAtURL",
    "type": "CPP"
  },
  {
    "name": "T __CFFileCoordinateReadWriteItemsAtURLs",
    "type": "CPP"
  },
  {
    "name": "T __CFHyphenationGetLinguisticDataPath",
    "type": "CPP"
  },
  {
    "name": "T __CFHyphenationSetLinguisticDataPath",
    "type": "CPP"
  },
  {
    "name": "T __CFHyphenationGetAllPossibleHyphenationLocations",
    "type": "CPP"
  },
  {
    "name": "T __CFStringHyphenationCompileHyphenatorData",
    "type": "CPP"
  },
  {
    "name": "t ___CFHyphenationMapFileContents",
    "type": "CPP"
  },
  {
    "name": "t ___CFHyphenationDestroyMMapType",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationChildrenAddValue",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationNameRegistration enumerate:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationNameRegistration name]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationNameWildcardObjectRegistration match:observer:matching:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationNameWildcardObjectRegistration acquireObject:options:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationNameWildcardObjectRegistration enumerate:]",
    "type": "CPP"
  },
  {
    "name": "T __CFPropertyListMissingSemicolon",
    "type": "CPP"
  },
  {
    "name": "T __CFPropertyListMissingSemicolonOrValue",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows874TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows874TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSWindows874TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary keyEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary keySet]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary classForCoder]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary encodeWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary initWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t ___archiveIsCorrupt",
    "type": "CPP"
  },
  {
    "name": "t _cleanup_sentinel_pair",
    "type": "CPP"
  },
  {
    "name": "t ___39-[NSSharedKeyDictionary initWithCoder:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[NSSharedKeyDictionary supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary setObservationInfo:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet encodeWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSSharedKeySet supportsSecureCoding]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet initWithCoder:]",
    "type": "CPP"
  },
  {
    "name": "t ___archiveIsCorrupt",
    "type": "CPP"
  },
  {
    "name": "t ___32-[NSSharedKeySet initWithCoder:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet maximumIndex]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet allKeys]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet hash]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet keySetCount]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet debugDescription]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet __float128]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet select]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet rankTable]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet M]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet factor]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet numKey]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet seeds]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet keys]",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeySet subSharedKeySet]",
    "type": "CPP"
  },
  {
    "name": "t +[_CFPrefsSynchronizer sharedInstance]",
    "type": "CPP"
  },
  {
    "name": "t ___38+[_CFPrefsSynchronizer sharedInstance]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPrefsSynchronizer init]",
    "type": "CPP"
  },
  {
    "name": "t ___28-[_CFPrefsSynchronizer init]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPrefsSynchronizer enableTimer_alreadyLocked]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPrefsSynchronizer disableTimer_alreadyLocked]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPrefsSynchronizer noteDirtySource:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPrefsSynchronizer copyDirtySourcesSnapshotAndClear]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPrefsSynchronizer synchronizeForDaemonTermination]",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsSynchronizeDirtySourceForDaemonTermination",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPrefsSynchronizer synchronize]",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsSynchronizeDirtySourceForTimer",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPrefsSynchronizer clear_alreadyLocked]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPrefsSynchronizer clear]",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsSynchronizeForDaemonTermination",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsDInternString",
    "type": "CPP"
  },
  {
    "name": "t __internString",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon(SourceSupport) synchronousWithSourceCache:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon(SourceSupport) withSources:]",
    "type": "CPP"
  },
  {
    "name": "t ___44-[CFPrefsDaemon(SourceSupport) withSources:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon(SourceSupport) withSourceForDomain:inContainer:user:byHost:managed:managedUsesContainer:cloudStoreEntitlement:cloudConfigurationPath:performWithSourceLock:afterReleasingSourceLock:]",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_",
    "type": "CPP"
  },
  {
    "name": "t ___197-[CFPrefsDaemon(SourceSupport) withSourceForDomain:inContainer:user:byHost:managed:managedUsesContainer:cloudStoreEntitlement:cloudConfigurationPath:performWithSourceLock:afterReleasingSourceLock:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___197-[CFPrefsDaemon(SourceSupport) withSourceForDomain:inContainer:user:byHost:managed:managedUsesContainer:cloudStoreEntitlement:cloudConfigurationPath:performWithSourceLock:afterReleasingSourceLock:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40o48o56r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40o48o56r",
    "type": "CPP"
  },
  {
    "name": "t ___197-[CFPrefsDaemon(SourceSupport) withSourceForDomain:inContainer:user:byHost:managed:managedUsesContainer:cloudStoreEntitlement:cloudConfigurationPath:performWithSourceLock:afterReleasingSourceLock:]_block_invoke.49",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource shouldBePurgable]",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsDCopyCurrentUserName",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsCopyUserNameForUID",
    "type": "CPP"
  },
  {
    "name": "t _cfprefsdEuid",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource tryEndAccessingPlist]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource beginHandlingRequest]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource endHandlingRequest]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsEqualKeyOrSource",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource hash]",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsHashKeyOrSource",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource cacheActualPath]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource cacheActualPathCreatingIfNecessary:euid:egid:isWritable:]",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsWatchForDeletionOfDirectory",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource copyUncanonicalizedPath]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource getUncanonicalizedPath:]",
    "type": "CPP"
  },
  {
    "name": "t ___cfprefsdEuid_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsWatchForDeletionOfDirectory_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource initWithDomain:userName:byHost:managed:shmemIndex:daemon:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource managed]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource setManagedPreferencesUseContainer:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource domain]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource user]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource container]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource cloudConfigurationPath]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource respondToFileWrittenToBehindOurBack]",
    "type": "CPP"
  },
  {
    "name": "t ___49-[CFPDSource respondToFileWrittenToBehindOurBack]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource byHost]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource description]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource shmemIndex]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource updateShmemEntry]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource setDirty:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource handleOpenForWritingFailureWithErrno:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource cleanUpIfNecessaryAfterCreatingPlist]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource createDiskWriteShouldPerformSynchronously:]",
    "type": "CPP"
  },
  {
    "name": "t ___56-[CFPDSource createDiskWriteShouldPerformSynchronously:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource handleWritingFailureWithError:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource finishedNonRequestWriteWithError:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource setPlist:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource syncWriteToDiskAndFlushCache]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource syncWriteToDisk]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource markNeedsToReloadFromDiskDueToFailedWrite]",
    "type": "CPP"
  },
  {
    "name": "t ___55-[CFPDSource markNeedsToReloadFromDiskDueToFailedWrite]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource cloneAndOpenPropertyListWithoutDrainingPendingChangesOrValidatingPlist]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource copyPropertyListWithoutDrainingPendingChangesValidatingPlist:]",
    "type": "CPP"
  },
  {
    "name": "t ___75-[CFPDSource copyPropertyListWithoutDrainingPendingChangesValidatingPlist:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___75-[CFPDSource copyPropertyListWithoutDrainingPendingChangesValidatingPlist:]_block_invoke.131",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource copyPropertyListValidatingPlist:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource asyncNotifyObserversOfWriteFromConnection:message:]",
    "type": "CPP"
  },
  {
    "name": "t ___64-[CFPDSource asyncNotifyObserversOfWriteFromConnection:message:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _notifyFunc",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource observingConnectionWasInvalidated:]",
    "type": "CPP"
  },
  {
    "name": "t ___48-[CFPDSource observingConnectionWasInvalidated:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource drainPendingChanges]",
    "type": "CPP"
  },
  {
    "name": "t ___33-[CFPDSource drainPendingChanges]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource hasObservers]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource enqueueNewKey:value:encoding:inBatch:]",
    "type": "CPP"
  },
  {
    "name": "t ___51-[CFPDSource enqueueNewKey:value:encoding:inBatch:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource debugDump]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource clearCache]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource lockedAsync:]",
    "type": "CPP"
  },
  {
    "name": "t ___26-[CFPDSource lockedAsync:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40b",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40b",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource lockedSync:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource observingConnectionsLockedSync:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource validateAccessToken:accessType:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource validateSandboxForWrite:containerPath:]",
    "type": "CPP"
  },
  {
    "name": "t _checkFileWriteData",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource validateSandboxForRead:containerPath:]",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsCopyUserNameForUID_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __calculateUserNameForUID",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource validatePOSIXPermissionsForMessage:accessType:fullyValidated:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource validateSandboxPermissionsForMessage:containerPath:accessType:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource validateMessage:withNewKey:newValue:plistIsAvailableToRead:containerPath:diagnosticMessage:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource stopNotifyingObserver:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource setObserved:bySenderOfMessage:]",
    "type": "CPP"
  },
  {
    "name": "t ___44-[CFPDSource setObserved:bySenderOfMessage:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___44-[CFPDSource setObserved:bySenderOfMessage:]_block_invoke.187",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource handleAvoidCache]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource handleNeverCache]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource handleEUIDorEGIDMismatch]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource handleSynchronous]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource handleNoPlistFound]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource attachSizeWarningsToReply:forByteCount:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource approximatePlistSizeIncludingPendingChanges]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource requiresSynchronousWriteAndFlushToDaemonInAgentForWorkaroundFor35459826WithKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource acceptMessage:]",
    "type": "CPP"
  },
  {
    "name": "t ___28-[CFPDSource acceptMessage:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___28-[CFPDSource acceptMessage:]_block_invoke.232",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource cleanUpAfterAcceptingMessage:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDContainerSource initWithDomain:userName:container:byHost:managed:shmemIndex:daemon:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDContainerSource container]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSourceLookUpKey isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSourceLookUpKey hash]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSourceLookUpKey dealloc]",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsSynchronizeDirtySourceForDaemonTermination_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_.343",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_.344",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsSynchronizeDirtySourceForTimer_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___initializeFSEvents_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsRecreateFileWatcher",
    "type": "CPP"
  },
  {
    "name": "t _deletionStreamCallback",
    "type": "CPP"
  },
  {
    "name": "t ___deletionStreamCallback_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __extractCFPDBits",
    "type": "CPP"
  },
  {
    "name": "t ___DEBUG_CACHE_MISS_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _toCString",
    "type": "CPP"
  },
  {
    "name": "t ____extractCFPDBits_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____extractCFPDBits_block_invoke.376",
    "type": "CPP"
  },
  {
    "name": "t ___DEBUG_NOTIFY_OBSERVERS_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___notifyFunc_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___notifyFunc_block_invoke.390",
    "type": "CPP"
  },
  {
    "name": "t ___notifyFunc_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___notifyFunc_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t ___notifyFunc_block_invoke_4",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40o48o56o",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40o48o56o",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsObservationConnectionQueue_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___DEBUG_CACHE_EVICT_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___DEBUG_BEGAN_OBSERVING_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___DEBUG_STOPPED_OBSERVING_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___DEBUG_REQUEST_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___DEBUG_WRITE_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___DEBUG_READ_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___DEBUG_READ_EMPTY_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___ERROR_WRITE_REJECTED_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___ERROR_READ_REJECTED_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumInitWithInt8",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumInitWithInt128",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumInitWithUInt8",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumInitWithUInt16",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumInitWithUInt32",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumInitWithUInt64",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumInitWithUInt128",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumGetInt8",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumGetInt16",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumGetInt32",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumGetInt64",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumGetInt128",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumGetUInt8",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumGetUInt16",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumGetUInt32",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumGetUInt64",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumGetUInt128",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumInitWithCFNumber",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumInitWithBytes",
    "type": "CPP"
  },
  {
    "name": "T __CFNumberCreateWithBigNum",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumCompare",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumNeg",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumAdd",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumSub",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumFromCString",
    "type": "CPP"
  },
  {
    "name": "T __CFBigNumCopyDescription",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetSetProxy copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin8TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin8TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin8TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSChineseBigramKeySet_SKS_SKS dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSChineseBigramKeySet_SKS_SKS initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSChineseBigramKeySet_SKS_SKS isEmpty]",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsSetDirectModeEnabled",
    "type": "CPP"
  },
  {
    "name": "t _populateErrorReply",
    "type": "CPP"
  },
  {
    "name": "t _withClientContext",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsFixUpIncomingMessageForPIDImpersonationIfNeeded",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsFixUpIncomingMessageForPIDImpersonationIfNeeded_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsGetEntitlementForMessageWithLockedContext",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsGetFixedUpDomainForMessage",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsCopyFixedUpContainerForMessage",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsCopyFixedUpUserForMessage",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon flushDomain:inAgentForUser:]",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_",
    "type": "CPP"
  },
  {
    "name": "t ___44-[CFPrefsDaemon flushDomain:inAgentForUser:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon flushDomainInDaemon:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon logDomainInconsistencyForProcess:message:source:]",
    "type": "CPP"
  },
  {
    "name": "t ___65-[CFPrefsDaemon logDomainInconsistencyForProcess:message:source:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___65-[CFPrefsDaemon logDomainInconsistencyForProcess:message:source:]_block_invoke.54",
    "type": "CPP"
  },
  {
    "name": "t _indexSearchCallback",
    "type": "CPP"
  },
  {
    "name": "t ___65-[CFPrefsDaemon logDomainInconsistencyForProcess:message:source:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___65-[CFPrefsDaemon logDomainInconsistencyForProcess:message:source:]_block_invoke.59",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon handleMessage:fromPeer:replyHandler:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon handleSourceMessage:replyHandler:]",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsCopyEntitlementForMessage",
    "type": "CPP"
  },
  {
    "name": "t ___50-[CFPrefsDaemon handleSourceMessage:replyHandler:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___50-[CFPrefsDaemon handleSourceMessage:replyHandler:]_block_invoke.94",
    "type": "CPP"
  },
  {
    "name": "t ___50-[CFPrefsDaemon handleSourceMessage:replyHandler:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___50-[CFPrefsDaemon handleSourceMessage:replyHandler:]_block_invoke.116",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon handleError:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon handleFlushManagedMessage:replyHandler:]",
    "type": "CPP"
  },
  {
    "name": "t ___56-[CFPrefsDaemon handleFlushManagedMessage:replyHandler:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32b40o",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32b40o",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon handleAgentCheckInMessage:]",
    "type": "CPP"
  },
  {
    "name": "t ___43-[CFPrefsDaemon handleAgentCheckInMessage:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___43-[CFPrefsDaemon handleAgentCheckInMessage:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon handleFlushSourceForDomainMessage:replyHandler:]",
    "type": "CPP"
  },
  {
    "name": "t ___64-[CFPrefsDaemon handleFlushSourceForDomainMessage:replyHandler:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon handleMultiMessage:replyHandler:]",
    "type": "CPP"
  },
  {
    "name": "t ___49-[CFPrefsDaemon handleMultiMessage:replyHandler:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___49-[CFPrefsDaemon handleMultiMessage:replyHandler:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon handleUserDeletedMessage:replyHandler:]",
    "type": "CPP"
  },
  {
    "name": "t ___55-[CFPrefsDaemon handleUserDeletedMessage:replyHandler:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon handleSimulateTimerSynchronizeForTesting]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon initWithRole:testMode:]",
    "type": "CPP"
  },
  {
    "name": "t ___39-[CFPrefsDaemon initWithRole:testMode:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___39-[CFPrefsDaemon initWithRole:testMode:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___39-[CFPrefsDaemon initWithRole:testMode:]_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t ___39-[CFPrefsDaemon initWithRole:testMode:]_block_invoke_4",
    "type": "CPP"
  },
  {
    "name": "t ___39-[CFPrefsDaemon initWithRole:testMode:]_block_invoke.168",
    "type": "CPP"
  },
  {
    "name": "t _invalidateObservingConnectionCallback",
    "type": "CPP"
  },
  {
    "name": "t _client_context_finalizer",
    "type": "CPP"
  },
  {
    "name": "t ___39-[CFPrefsDaemon initWithRole:testMode:]_block_invoke.174",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon role]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon isInTestMode]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon _initializeShmemPage:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon shmem]",
    "type": "CPP"
  },
  {
    "name": "t ___22-[CFPrefsDaemon shmem]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon userID]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon getShmemName:bufLen:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon copyResumedAgentToDaemonXPCConnection]",
    "type": "CPP"
  },
  {
    "name": "t ___54-[CFPrefsDaemon copyResumedAgentToDaemonXPCConnection]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon checkIn]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon withAgentDictionaryIfApplicable:]",
    "type": "CPP"
  },
  {
    "name": "t ___49-[CFPrefsDaemon withAgentDictionaryIfApplicable:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon removeAgentConnectionsWithUserName:]",
    "type": "CPP"
  },
  {
    "name": "t ___52-[CFPrefsDaemon removeAgentConnectionsWithUserName:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___52-[CFPrefsDaemon removeAgentConnectionsWithUserName:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___52-[CFPrefsDaemon removeAgentConnectionsWithUserName:]_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon sendEachAgent:]",
    "type": "CPP"
  },
  {
    "name": "t ___31-[CFPrefsDaemon sendEachAgent:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___31-[CFPrefsDaemon sendEachAgent:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___31-[CFPrefsDaemon sendEachAgent:]_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t ___31-[CFPrefsDaemon sendEachAgent:]_block_invoke_4",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon listener]",
    "type": "CPP"
  },
  {
    "name": "T ___CFXPreferencesDaemon_main",
    "type": "CPP"
  },
  {
    "name": "t _____CFXPreferencesDaemon_main_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _____CFXPreferencesDaemon_main_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t _____CFXPreferencesDaemon_main_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsGetEntitlementForMessageWithLockedContext_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsIsAppleInternal_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsGetSuiteContainer_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsGetSuiteContainer_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsIfClientIsInSecurityApplicationGroup_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsHasEntitlementForMessage_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsCopyEntitlementForMessage_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___dumpDebugInfoCallback_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _dummyKVODestructor",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferencesHandle dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferencesHandle setEUIDOverride:]",
    "type": "CPP"
  },
  {
    "name": "t +[_CFXPreferences copyDefaultPreferences]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences unregisterUserDefaultsInstance:]",
    "type": "CPP"
  },
  {
    "name": "t ___50-[_CFXPreferences unregisterUserDefaultsInstance:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32o40o48r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32o40o48r",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences hasCloudValueForKey:appIdentifier:container:configurationURL:]",
    "type": "CPP"
  },
  {
    "name": "t ___80-[_CFXPreferences hasCloudValueForKey:appIdentifier:container:configurationURL:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences hasNonRegisteredValueForKey:appIdentifier:container:configurationURL:]",
    "type": "CPP"
  },
  {
    "name": "t ___88-[_CFXPreferences hasNonRegisteredValueForKey:appIdentifier:container:configurationURL:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences setDaemonCacheEnabled:identifier:user:host:container:]",
    "type": "CPP"
  },
  {
    "name": "t ___72-[_CFXPreferences setDaemonCacheEnabled:identifier:user:host:container:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences notifyOfImpendingDeletionOfUser:]",
    "type": "CPP"
  },
  {
    "name": "t ___51-[_CFXPreferences notifyOfImpendingDeletionOfUser:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___51-[_CFXPreferences notifyOfImpendingDeletionOfUser:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences flushCachesForAppIdentifier:user:]",
    "type": "CPP"
  },
  {
    "name": "t ___52-[_CFXPreferences flushCachesForAppIdentifier:user:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___52-[_CFXPreferences flushCachesForAppIdentifier:user:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences simulateTimerSynchronizeForTestingForUser:]",
    "type": "CPP"
  },
  {
    "name": "t ___61-[_CFXPreferences simulateTimerSynchronizeForTestingForUser:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___61-[_CFXPreferences simulateTimerSynchronizeForTestingForUser:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences setAccessRestricted:forAppIdentifier:]",
    "type": "CPP"
  },
  {
    "name": "t ___56-[_CFXPreferences setAccessRestricted:forAppIdentifier:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences fullCloudSynchronizeForAppIdentifier:container:configurationURL:completionHandler:]",
    "type": "CPP"
  },
  {
    "name": "t ___101-[_CFXPreferences fullCloudSynchronizeForAppIdentifier:container:configurationURL:completionHandler:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences setCloudSyncEnabled:forKey:appIdentifier:container:]",
    "type": "CPP"
  },
  {
    "name": "t ___70-[_CFXPreferences setCloudSyncEnabled:forKey:appIdentifier:container:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___89-[_CFXPreferences setValuesForKeys:removingValuesForKeys:identifier:user:host:container:]_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t ___76-[_CFXPreferences setValue:forKey:appIdentifier:container:configurationURL:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences copyManagedValuesForKeys:identifier:useSystemContainer:]",
    "type": "CPP"
  },
  {
    "name": "t ___74-[_CFXPreferences copyManagedValuesForKeys:identifier:useSystemContainer:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___66-[_CFXPreferences setValue:forKey:identifier:user:host:container:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences preloadAppValuesForIdentifiers:containers:configurationURLs:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences replaceValuesInSourceForIdentifier:user:host:container:withValues:]",
    "type": "CPP"
  },
  {
    "name": "t ___85-[_CFXPreferences replaceValuesInSourceForIdentifier:user:host:container:withValues:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___85-[_CFXPreferences replaceValuesInSourceForIdentifier:user:host:container:withValues:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences removeVolatileSourceForName:]",
    "type": "CPP"
  },
  {
    "name": "t ___47-[_CFXPreferences removeVolatileSourceForName:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences volatileSourceNames]",
    "type": "CPP"
  },
  {
    "name": "t ___38-[_CFXPreferences volatileSourceNames]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences resetPreferences:]",
    "type": "CPP"
  },
  {
    "name": "t ___36-[_CFXPreferences resetPreferences:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___36-[_CFXPreferences resetPreferences:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___36-[_CFXPreferences resetPreferences:]_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t ___36-[_CFXPreferences resetPreferences:]_block_invoke_4",
    "type": "CPP"
  },
  {
    "name": "t ___37-[_CFXPreferences shmemForRole:name:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences destroyConnections]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences removeSuite:fromApp:withContainer:]",
    "type": "CPP"
  },
  {
    "name": "t ___53-[_CFXPreferences removeSuite:fromApp:withContainer:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___53-[_CFXPreferences removeSuite:fromApp:withContainer:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___53-[_CFXPreferences removeSuite:fromApp:withContainer:]_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t ___53-[_CFXPreferences removeSuite:fromApp:withContainer:]_block_invoke.201",
    "type": "CPP"
  },
  {
    "name": "t ___53-[_CFXPreferences removeSuite:fromApp:withContainer:]_block_invoke_2.202",
    "type": "CPP"
  },
  {
    "name": "t ___53-[_CFXPreferences removeSuite:fromApp:withContainer:]_block_invoke.203",
    "type": "CPP"
  },
  {
    "name": "t ___53-[_CFXPreferences removeSuite:fromApp:withContainer:]_block_invoke_2.204",
    "type": "CPP"
  },
  {
    "name": "t ___53-[_CFXPreferences removeSuite:fromApp:withContainer:]_block_invoke_3.205",
    "type": "CPP"
  },
  {
    "name": "t ___53-[_CFXPreferences removeSuite:fromApp:withContainer:]_block_invoke_4",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsResetPreferences",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsUnregisterUserDefaultsInstance",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsImpersonateApplicationWithIdentifierAndContainerDataPath",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesCopyValueNoCache",
    "type": "CPP"
  },
  {
    "name": "T __CFXPreferencesCopyVolatileSourceNames",
    "type": "CPP"
  },
  {
    "name": "T __CFXPreferencesRemoveNamedVolatileSource",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsCopyAppDictionary",
    "type": "CPP"
  },
  {
    "name": "T __CFXPreferencesCopyDictionaryForApplicationPreferences",
    "type": "CPP"
  },
  {
    "name": "T __CFXPreferencesReplaceValuesInSourceWithBundleIDWithContainer",
    "type": "CPP"
  },
  {
    "name": "T __CFXPreferencesReplaceValuesInSourceWithBundleID",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesSetAppCloudSyncEnabled",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesAppFullCloudSynchronizeWithConfiguration",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesAppFullCloudSynchronize",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesHasAppCloudValue",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesHasAppValue",
    "type": "CPP"
  },
  {
    "name": "T _CFPreferencesAddSuitePreferencesToApp",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesRemoveSuitePreferencesFromAppWithContainer",
    "type": "CPP"
  },
  {
    "name": "T _CFPreferencesRemoveSuitePreferencesFromApp",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesAppPreload",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesSetAccessRestricted",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesFlushCachesForIdentifier",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesNotifyOfImpendingUserDeletion",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesSetBackupDisabled",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesSetFileProtectionClass",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesSetDaemonCacheEnabled",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesCopyMultipleManaged",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesWriteManagedDomain",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesWriteManagedDomainForUser",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsDirectModeEnabledForDomain",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsDirectModeEnabledForDomain_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesPostValuesChangedInDomains",
    "type": "CPP"
  },
  {
    "name": "t ___directCFPrefsD_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin10TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin10TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin10TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t +[NSConstantDate new]",
    "type": "CPP"
  },
  {
    "name": "t +[NSConstantDate allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDate init]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDate autorelease]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDate _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDate _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDate retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDate dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDate copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDate copy]",
    "type": "CPP"
  },
  {
    "name": "T __CFWebServicesSetProviderInfo",
    "type": "CPP"
  },
  {
    "name": "t _IsValidServiceType",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesWebServicesCopyProvider",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesWebServicesSetProvider",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDictionary count]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDictionary objectForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDictionary keyEnumerator]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDictionary setObject:forKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDictionary removeObjectForKey:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSPlaceholderDictionary allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDictionary retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDictionary retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDictionary dealloc]",
    "type": "CPP"
  },
  {
    "name": "t _____FoundationPresent_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___mdict_keysOfEntriesWithOptionsPassingTest_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32b40o48r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32b40o48r",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM keyOfEntryWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM removeEntriesWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t ___56-[__NSDictionaryM removeEntriesWithOptions:passingTest:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t +[__NSDictionaryM allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM _clumpingFactor]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryM _clumpingInterestingThreshold]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenDictionaryM keyOfEntryWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenDictionaryM keysOfEntriesWithOptions:passingTest:]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSFrozenDictionaryM allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t _cow_copy_instance",
    "type": "CPP"
  },
  {
    "name": "t _cow_copy_storage",
    "type": "CPP"
  },
  {
    "name": "t _cow_set_cow",
    "type": "CPP"
  },
  {
    "name": "t ___NSMUTABLEDICTIONARY_CONCURRENT_MODIFICATION_DETECTED__",
    "type": "CPP"
  },
  {
    "name": "t ___mdict_enumerateKeysAndObjectsWithOptionsUsingBlock_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___mdict_keyOfEntryWithOptionsPassingTest_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32b40r48r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32b40r48r",
    "type": "CPP"
  },
  {
    "name": "t ___CLUMPINESS_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___CFGenerateReport",
    "type": "CPP"
  },
  {
    "name": "t _____CFGenerateReport_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _bufferWrite",
    "type": "CPP"
  },
  {
    "name": "t _writeBytes",
    "type": "CPP"
  },
  {
    "name": "t __CFAppSleepGetDebugInfo",
    "type": "CPP"
  },
  {
    "name": "t __readAppSleepPreferencesNotification",
    "type": "CPP"
  },
  {
    "name": "t _____CFRunLoopSetOptionsReason_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t _____CFRunLoopSetOptionsReason_block_invoke_4",
    "type": "CPP"
  },
  {
    "name": "t _____CFRunLoopSetOptionsReason_block_invoke.72",
    "type": "CPP"
  },
  {
    "name": "t _____CFRunLoopSetOptionsReason_block_invoke_2.79",
    "type": "CPP"
  },
  {
    "name": "T __CFSetProductName",
    "type": "CPP"
  },
  {
    "name": "T __CFGetAlternatePlatformName",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleSupportedPlatformName",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleSupportedProductName",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleGetPackageInfoInDirectory",
    "type": "CPP"
  },
  {
    "name": "T _CFBundleGetPackageInfoInDirectory",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleGetLocalInfoDictionary",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCreateFilteredInfoPlist",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCreateFilteredInfoPlistWithURL",
    "type": "CPP"
  },
  {
    "name": "T __CFBundleCreateFilteredLocalizedInfoPlist",
    "type": "CPP"
  },
  {
    "name": "t ___validPlistKeys",
    "type": "CPP"
  },
  {
    "name": "t ___addSuffixesToKeys",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFSet hash]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFSet _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFSet _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFSet retainCount]",
    "type": "CPP"
  },
  {
    "name": "t +[__NSCFSet automaticallyNotifiesObserversForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFSet _trueCount]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin7TrigramKeySet dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin7TrigramKeySet initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSISOLatin7TrigramKeySet isEmpty]",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsSetSynchronizeIsSynchronous",
    "type": "CPP"
  },
  {
    "name": "T __CFPreferencesWriteUserPreferencesWithCorrectOwner",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsImpersonateApplicationWithIdentifierAndPID",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefsImpersonateApplicationWithIdentifierAndAuditToken",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource setAccessRestricted:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource setDaemonCacheEnabled:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource isDirectModeEnabled]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource goReadOnlyAfterTryingToWriteKeys:values:count:]",
    "type": "CPP"
  },
  {
    "name": "t ___53-[CFPrefsPlistSource handlePossibleOversizedMessage:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___106-[CFPrefsPlistSource handleErrorReply:fromMessageSettingKeys:toValues:count:retryCount:retryContinuation:]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___99-[CFPrefsPlistSource sendFullyPreparedMessage:toConnection:settingValues:forKeys:count:retryCount:]_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_",
    "type": "CPP"
  },
  {
    "name": "T __CFPrefSetInvalidPropertyListDeletionEnabled",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource requestPlistValidation]",
    "type": "CPP"
  },
  {
    "name": "t ___44-[CFPrefsPlistSource requestPlistValidation]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___44-[CFPrefsPlistSource requestPlistValidation]_block_invoke.99",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource alreadylocked_clearCache]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource alreadylocked_generationCount]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsPlistSource generationCount]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsManagedSource sendMessageSettingValue:forKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsManagedSource alreadylocked_setPrecopiedValues:forKeys:count:from:]",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_",
    "type": "CPP"
  },
  {
    "name": "t ____CFPrefsGetCompatibilitySource_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsCompatibilitySource alreadylocked_copyValueForKey:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsCompatibilitySource alreadylocked_setPrecopiedValues:forKeys:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsCompatibilitySource alreadylocked_requestNewData]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsCompatibilitySource alreadylocked_copyKeyList]",
    "type": "CPP"
  },
  {
    "name": "t ___55-[CFPrefsCompatibilitySource alreadylocked_copyKeyList]_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsCompatibilitySource mergeIntoDictionary:sourceDictionary:cloudKeyEvaluator:]",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsCompatibilitySource alreadylocked_copyDictionary]",
    "type": "CPP"
  },
  {
    "name": "t ___CFCreateCocoaDateFormatFromICUFormat",
    "type": "CPP"
  },
  {
    "name": "t -[_NSChineseBigramKeySet_SKS dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSChineseBigramKeySet_SKS initWithKeys:keyLenghtInBytes:count:]",
    "type": "CPP"
  },
  {
    "name": "t -[_NSChineseBigramKeySet_SKS isEmpty]",
    "type": "CPP"
  },
  {
    "name": "t _displayWillSleep",
    "type": "CPP"
  },
  {
    "name": "t _displayDidWake",
    "type": "CPP"
  },
  {
    "name": "t ____CFAppSleepSetupAppSleepDebug_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t __setupDebugConnection",
    "type": "CPP"
  },
  {
    "name": "t ____setupDebugConnection_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____setupDebugConnection_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ____setupDebugConnection_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t ____setupDebugConnection_block_invoke_4",
    "type": "CPP"
  },
  {
    "name": "t ____setupDebugConnection_block_invoke_5",
    "type": "CPP"
  },
  {
    "name": "t ___CFArrayHandleOutOfMemory",
    "type": "CPP"
  },
  {
    "name": "t __CFArrayReplaceValues.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFAttributedStringCopyDescription.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFAttributedStringSetAttributes.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFReallocationFailed",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetI getObjects:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetI getObjects:range:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetI countByEnumeratingWithState:objects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetI countByEnumeratingWithState:objects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetI enumerateObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet addObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet addObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet addObjects:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet addObjectsFromArray:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet addObjectsFromArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet addObjectsFromOrderedSet:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet addObjectsFromOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet addObjectsFromSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet intersectOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet intersectSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet minusOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet minusSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet removeObjectsInArray:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet removeObjectsInArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet removeObjectsInOrderedSet:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet removeObjectsInOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet removeObjectsInSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet removeObjectsWithOptions:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet removeObjectsPassingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet replaceObject:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet setObject:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet setArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet setOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet setSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet unionOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet unionSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet initWithObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet initWithObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet initWithObjects:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet setByAddingObjectsFromArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableSet setByAddingObjectsFromSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFRelativeDateTimeFormatterDeallocate.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFRelativeDateTimeFormatterCopyDescription.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFRelativeDateTimeFormatterCreateStringWithCalendarUnit.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFRelativeDateTimeFormatterCreateStringWithCalendarUnit.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __CFRelativeDateTimeFormatterCreateStringWithCalendarUnit.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __CFRelativeDateTimeFormatterCreateStringWithCalendarUnit.cold.4",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString characterAtIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString getCharacters:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString substringWithRange:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSTaggedPointerString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t __CFCreateArrayStorage.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFCreateArrayStorage.cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM getObjects:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM getObjects:range:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM _mutate].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM insertObject:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM insertObject:atIndex:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM insertObject:atIndex:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM replaceObjectAtIndex:withObject:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM replaceObjectAtIndex:withObject:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM enumerateObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM exchangeObjectAtIndex:withObjectAtIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM insertObjects:count:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM insertObjects:count:atIndex:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM insertObjects:count:atIndex:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM insertObjects:count:atIndex:].cold.4",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM insertObjects:count:atIndex:].cold.5",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM removeAllObjects].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM removeObjectsInRange:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM removeObjectsInRange:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM replaceObjectsInRange:withObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM replaceObjectsInRange:withObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM replaceObjectsInRange:withObjects:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM setObject:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM setObject:atIndex:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM setObject:atIndex:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM setObject:atIndexedSubscript:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM setObject:atIndexedSubscript:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM setObject:atIndexedSubscript:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t ___NSArrayM_new.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayM dealloc].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenArrayM enumerateObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenArrayM getObjects:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenArrayM getObjects:range:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenArrayM dealloc].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray initWithObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray initWithObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray initWithObjects:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray initWithCapacity:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray initWithCapacity:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray initWithContentsOfFile:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderArray initWithContentsOfURL:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCreate.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleScheduleForUnloading.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleUnscheduleForUnloading.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyFindResources.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet addObject:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet addObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet addObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet addObjects:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet addObjectsFromArray:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet addObjectsFromArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet addObjectsFromOrderedSet:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet addObjectsFromOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet addObjectsFromSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObjects:count:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObjects:count:atIndex:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObjects:count:atIndex:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObjectsFromArray:range:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObjectsFromArray:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObjectsFromOrderedSet:range:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObjectsFromOrderedSet:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObjectsFromSet:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObjects:atIndexes:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObjects:atIndexes:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObjects:atIndexes:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet insertObjects:atIndexes:].cold.4",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet intersectOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet intersectSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet moveObjectsAtIndexes:toIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet moveObjectsAtIndexes:toIndex:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet minusOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet minusSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsAtIndexes:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsAtIndexes:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInRange:inArray:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInRange:inArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInArray:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInRange:inOrderedSet:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInRange:inOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInOrderedSet:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInRange:inSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsInSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsAtIndexes:options:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsAtIndexes:options:passingTest:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsAtIndexes:options:passingTest:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsWithOptions:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet removeObjectsPassingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObject:inRange:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObject:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectsInRange:withObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectsInRange:withObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectsInRange:withObjects:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectsAtIndexes:withObjects:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectsAtIndexes:withObjects:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectsAtIndexes:withObjects:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectsAtIndexes:withObjects:].cold.4",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectsInRange:withObjectsFromArray:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectsInRange:withObjectsFromArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectsInRange:withObjectsFromOrderedSet:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectsInRange:withObjectsFromOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet replaceObjectsInRange:withObjectsFromSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet setArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet setObject:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet setObject:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet setOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet setSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet sortRange:options:usingComparator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet sortWithOptions:usingComparator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet sortUsingComparator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet unionOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet unionSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet initWithObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet initWithObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableOrderedSet initWithObjects:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t ___CFDataHandleOutOfMemory",
    "type": "CPP"
  },
  {
    "name": "t _CFDataReplaceBytes.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFDataReplaceBytes.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _CFDataReplaceBytes.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _CFDataReplaceBytes.cold.4",
    "type": "CPP"
  },
  {
    "name": "t _CFDataReplaceBytes.cold.5",
    "type": "CPP"
  },
  {
    "name": "t _CFDataSetLength.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI getObjects:andKeys:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI getObjects:andKeys:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI countByEnumeratingWithState:objects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI countByEnumeratingWithState:objects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI enumerateKeysAndObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSDictionaryI keysOfEntriesWithOptions:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFBundleCopyExecutableURLInDirectory2.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectSetI countByEnumeratingWithState:objects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectSetI countByEnumeratingWithState:objects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectSetI enumerateObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectSetI getObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectSetI getObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t _CFGregorianDateIsValid.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFYMDFromAbsolute.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___ResetUDateFormat.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __cow_failure",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderSet initWithObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderSet initWithObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderSet initWithObjects:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderSet initWithCapacity:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderSet initWithCapacity:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t _userInfoKeyValueShow.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsEncodeKeyValuePairsIntoMessage.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDDataBuffer copyPropertyListWithMutability:error:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDDataBuffer quicklyValidatePlistAndOnFailureInvokeBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDPurgeableBuffer initWithFileDescriptor:size:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDPurgeableBuffer initWithFileDescriptor:size:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t _deallocatePurgeable.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDPurgeableBuffer bytes].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDPurgeableBuffer beginAccessing].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData initWithBytes:length:copy:deallocator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData initWithData:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData initWithBytes:length:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData initWithBytesNoCopy:length:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData initWithBytesNoCopy:length:freeWhenDone:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantData dealloc].cold.1",
    "type": "CPP"
  },
  {
    "name": "t __cfmp_record_intent_to_invalidate.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __cfmp_log_failure.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __cfmp_log_failure.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __cfmp_deallocation_record_retain.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleEntryDictionaryI isEqualToDictionary:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleEntryDictionaryI getObjects:andKeys:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleEntryDictionaryI getObjects:andKeys:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleEntryDictionaryI countByEnumeratingWithState:objects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleEntryDictionaryI countByEnumeratingWithState:objects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleEntryDictionaryI enumerateKeysAndObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___NSSingleEntryDictionaryI_new.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___NSSingleEntryDictionaryI_new.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __CFLocaleCopyCurrentGuts.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFLocaleCopyCurrentGuts.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __CFLocaleCopyCurrentGuts.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __CFLocaleCopyCurrentGuts.cold.4",
    "type": "CPP"
  },
  {
    "name": "t __CFLocaleCopyCurrentGuts.cold.5",
    "type": "CPP"
  },
  {
    "name": "t __CFLocaleCopyCurrentGuts.cold.6",
    "type": "CPP"
  },
  {
    "name": "t __CFLocaleCopyCurrentGuts.cold.7",
    "type": "CPP"
  },
  {
    "name": "t __CFLocaleCopyCurrentGuts.cold.8",
    "type": "CPP"
  },
  {
    "name": "t __NSDictionaryRaiseInsertNilKeyException",
    "type": "CPP"
  },
  {
    "name": "t __NSDictionaryRaiseInsertNilValueException",
    "type": "CPP"
  },
  {
    "name": "t __NSDictionaryRaiseRemoveNilKeyException",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary setObject:forKey:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary removeObjectForKey:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFDictionary removeAllObjects].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray initWithObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray getObjects:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray getObjects:range:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantArray dealloc].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar find:object:observer:enumerator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationChildrenAddValue.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationChildrenAddValue.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationChildrenRemoveValue.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar enumerateRegistrations:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar enumerateRegistrations:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar enumerateRegistrations:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrar enumerateRegistrations:].cold.4",
    "type": "CPP"
  },
  {
    "name": "t _CFMessagePortSetName.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFThrowFormattedException",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString characterAtIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString getCharacters:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString _newSubstringWithRange:zone:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString substringWithRange:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString hasPrefix:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString hasSuffix:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString getLineStart:end:contentsEnd:forRange:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t _mutateError.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _mutateError.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _mutateError.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _mutateError.cold.4",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString replaceOccurrencesOfString:withString:options:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFString replaceOccurrencesOfString:withString:options:range:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t _mutateError2.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _mutateError2.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _mutateError2.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _mutateError2.cold.4",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFNumber compare:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFBoolean compare:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardDeallocate.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFPasteboardCreate.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardSetupInstance.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardSetupInstance.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardUpdateCacheCounts.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFPasteboardCopyData.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardCopyData_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardRecognizeGenerationChange.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardRecognizeGenerationChange.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardRecognizeGenerationChange.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __CFPasteboardIssueSandboxExtensionForPath.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFPasteboardIssueSandboxExtensionForPath.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __CFPasteboardIssueSandboxExtensionForPath.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _CFPasteboardSetPasteLocation.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardCreateUniquePromiseFileURL_block_invoke_2.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardFlushLocalEntriesIfNecessary.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardFlushLocalEntriesIfNecessary.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardFlushLocalEntriesIfNecessary.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardPromiseSandboxExtensionDataIfNecessary.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardHandleMessageFromDaemon.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardHandleMessageFromDaemon.cold.2",
    "type": "CPP"
  },
  {
    "name": "t ___CFPasteboardHandleMessageFromDaemon.cold.3",
    "type": "CPP"
  },
  {
    "name": "t ___55-[_CFPasteboardEntry initFromXPCObject:fromConnection:]_block_invoke_2.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardCache updateEntry:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___34-[_CFPasteboardCache updateEntry:]_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardRebuildCache_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardRebuildCache_block_invoke.cold.2",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardRequestDataFromDaemon_block_invoke.345.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardRequestDataFromDaemon_block_invoke.345.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _____kCFPasteboardFilenamesFlavor_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _____kCFPasteboardFilenamesFlavor_block_invoke.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _____kCFPasteboardFilenamesFlavor_block_invoke.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _____kCFPasteboardFilenamesFlavor_block_invoke.cold.4",
    "type": "CPP"
  },
  {
    "name": "t _____kCFPasteboardFilenamesFlavor_block_invoke.cold.5",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardFlushLocalEntriesIfNecessary_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ____onqueue_CFPasteboardMarkLocalChange_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardCreateSandboxExtensionData.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __onqueue_CFPasteboardCreateSandboxExtensionData.cold.2",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardResetPasteboardForInvalidatedDaemonConnection_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardResetPasteboardForInvalidatedDaemonConnection_block_invoke.cold.2",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardHandleFlushMessage_block_invoke.388.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardHandleFlushMessage_block_invoke.389.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardInvalidateCacheForGeneration_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardInvalidateCacheEntries_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardInvalidateCacheEntries_block_invoke.cold.2",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardHandleFulfillMessage_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ____CFPasteboardHandleFulfillMessage_block_invoke.cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDCloudSource enqueueNewKey:value:encoding:inBatch:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDCloudSource enqueueNewKey:value:encoding:inBatch:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t ___remoteStoreChanged_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _visit.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__CFPrefsWeakObservers addObject:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__CFPrefsWeakObservers removeObject:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t __NSArrayRaiseBoundException",
    "type": "CPP"
  },
  {
    "name": "t __NSArrayRaiseInsertNilException",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray insertObject:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray replaceObjectAtIndex:withObject:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSCFArray removeObjectAtIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFCopyHomeDirURLForUser.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFGetTSDCreateIfNeeded.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFSetTSD.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFPlugInInstanceCreate.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFPlugInInstanceCreate.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _CFPlugInInstanceCreate.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _CFPlugInInstanceCreate.cold.4",
    "type": "CPP"
  },
  {
    "name": "t _CFPlugInInstanceCreate.cold.5",
    "type": "CPP"
  },
  {
    "name": "t __CFPFactoryCommonCreateLocked.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFPlugInUnregisterFactory.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFPFactoryDisableLocked.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFPlugInRegisterPlugInTypeLocked.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFPlugInRegisterPlugInTypeLocked.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _CFPlugInUnregisterPlugInType.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFPFactoryRemoveTypeLocked.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFPlugInRemoveInstanceForFactory.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __registerFactoryLocked.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __registerTypeLocked.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFPFactoryDeallocate.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFPlugInFindFactoriesForPlugInType.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFPlugInFindFactoriesForPlugInTypeInPlugIn.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFPropertyListCreateSplitKeypaths.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFPropertyListCreateSplitKeypaths.cold.2",
    "type": "CPP"
  },
  {
    "name": "t ___CFPropertyListCreateSplitKeypaths.cold.3",
    "type": "CPP"
  },
  {
    "name": "t ___CFPropertyListCreateSplitKeypaths.cold.4",
    "type": "CPP"
  },
  {
    "name": "t _createTopLevelKeypaths.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _createTopLevelKeypaths.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _CFPropertyListCreateDeepCopy.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFPropertyListCreateDeepCopy.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __arrayDeepImmutableCopy.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __arrayDeepImmutableCopy.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __CFAppendXML0.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopDeallocate.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopDeallocate.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __CFRunLoopGet2.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopFindMode.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFRunLoopWakeUp.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopPerformBlock_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFRunLoopSourceCreate.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFRunLoopTimerCreate.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopDoTimers.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFRunLoopDoTimer.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFRetain.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFGenericTypeID.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFGetTypeID.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFRetain.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFRetain.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _CFAutorelease.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFRelease.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFRelease.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __CFRelease.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _CFRelease.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringCollectionCopy.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFTypeCollectionRetain.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFTypeCollectionRelease.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFGetRetainCount.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFGetRetainCount.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __CFNonObjCEqual.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFNonObjCEqual.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __CFNonObjCEqual.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __CFNonObjCEqual.cold.4",
    "type": "CPP"
  },
  {
    "name": "t __CFNonObjCEqual.cold.5",
    "type": "CPP"
  },
  {
    "name": "t _CFEqual.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFEqual.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _CFEqual.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _CFEqual.cold.4",
    "type": "CPP"
  },
  {
    "name": "t __CFNonObjCHash.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFHash.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFHash.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _CFHash.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _CFCopyDescription.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFCopyDescription.cold.2",
    "type": "CPP"
  },
  {
    "name": "t ___CFCopyFormattingDescription.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFCopyFormattingDescription.cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationBase key].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI countByEnumeratingWithState:objects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI countByEnumeratingWithState:objects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI getObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI getObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetI enumerateObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t _____CFPasteboardStartServicingConnection_block_invoke_2.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _____CFPasteboardStartServicingConnection_block_invoke_2.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _____CFPasteboardStartServicingConnection_block_invoke.4.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore handleSetExpirationDate:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[_CFPasteboardStore handleSetExpirationDate:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t ___46-[_CFPasteboardStore handleSetExpirationDate:]_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___44-[_CFPasteboardStore handleRegisterEntries:]_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___44-[_CFPasteboardStore handleRegisterEntries:]_block_invoke.cold.2",
    "type": "CPP"
  },
  {
    "name": "t ___44-[_CFPasteboardStore handleRegisterEntries:]_block_invoke.cold.3",
    "type": "CPP"
  },
  {
    "name": "t ___41-[_CFPasteboardStore handleRefreshCache:]_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___71-[_CFPasteboardStore handleDeadClientWithUUID:allowPasteboardDeletion:]_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___43-[_CFRemotePasteboardCache prepareMetadata]_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[_NSRemotePasteboardDataProvider initWithGeneration:itemIdentifier:flavorName:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[_NSRemotePasteboardDataProvider setType:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___handle_barrier_block_invoke.496.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ____getRemotePasteboardClass_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ____getRemotePasteboardClass_block_invoke_2.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary addEntriesFromDictionary:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary addObject:forKey:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary addObject:forKey:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary addObjects:forKeys:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary addObjects:forKeys:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary addObjects:forKeys:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary addObjects:forKeys:count:].cold.4",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary addObjects:forKeys:count:].cold.5",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary addObjects:forKeys:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary addObjects:forKeys:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary addObjects:forKeys:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary removeEntriesInDictionary:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary removeEntriesWithOptions:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary removeEntriesPassingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary removeObjectsForKeys:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary replaceObject:forKey:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary replaceObject:forKey:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary replaceObjects:forKeys:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary replaceObjects:forKeys:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary replaceObjects:forKeys:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary replaceObjects:forKeys:count:].cold.4",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary replaceObjects:forKeys:count:].cold.5",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary replaceObjects:forKeys:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary replaceObjects:forKeys:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary replaceObjects:forKeys:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary setEntriesFromDictionary:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary setObjects:forKeys:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary setObjects:forKeys:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary setObjects:forKeys:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary setObjects:forKeys:count:].cold.4",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary setObjects:forKeys:count:].cold.5",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary setObjects:forKeys:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary setObjects:forKeys:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary setObjects:forKeys:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary setDictionary:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary __addObject:forKey:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary __addObject:forKey:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary __setObject:forKey:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary __setObject:forKey:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary initWithObjects:forKeys:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary initWithObjects:forKeys:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary initWithObjects:forKeys:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary initWithObjects:forKeys:count:].cold.4",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableDictionary initWithObjects:forKeys:count:].cold.5",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary initWithObjects:forKeys:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary getObjects:andKeys:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary getObjects:andKeys:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary countByEnumeratingWithState:objects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary countByEnumeratingWithState:objects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary enumerateKeysAndObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary keysOfEntriesWithOptions:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSConstantDictionary dealloc].cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFSortIndexes.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFQSortArray.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFQSortArray.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _CFQSortArray.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _CFQSortArray.cold.4",
    "type": "CPP"
  },
  {
    "name": "t _CFMergeSortArray.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFMergeSortArray.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _CFMergeSortArray.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _CFMergeSortArray.cold.4",
    "type": "CPP"
  },
  {
    "name": "t ____CFStringGetVocativeCaseOfGivenName_cs_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringHandleOutOfMemory",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringAppendFormatCore.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringMakeConstantString.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFStringChangeSizeMultiple.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationContainer addChild:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationContainer addChild:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationRegistrationContainer removeChild:token:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateComponentsDeallocate.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateComponentsEqual.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateComponentsEqual.cold.2",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateComponentsHash.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFDateComponentsCopyDescription.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFDateComponentsCreateCopy.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFDateComponentsCopyCalendar.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFDateComponentsSetCalendar.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFDateComponentsCopyTimeZone.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFDateComponentsSetTimeZone.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFDateComponentsGetValue.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFDateComponentsSetValue.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFDateComponentsIsValidDateInCalendar.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFDateComponentsIsValidDateInCalendar.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __CFCompareStringsWithLocale.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM insertObject:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM insertObject:atIndex:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM removeObjectAtIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM replaceObjectAtIndex:withObject:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM replaceObjectAtIndex:withObject:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM enumerateObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM getObjects:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM getObjects:range:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM setObject:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM setObject:atIndex:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSOrderedSetM dealloc].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenOrderedSetM enumerateObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenOrderedSetM getObjects:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenOrderedSetM getObjects:range:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenOrderedSetM dealloc].cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsExtractQuadrupleFromPathIfPossible.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsExtractQuadrupleFromPathIfPossible.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsExtractQuadrupleFromPathIfPossible.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsValidateValueForKey.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsValidateValueForKey.cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource alreadylocked_copyValueForKey:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSource alreadylocked_copyValueForKey:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences(SourceAdditions) withSourceForIdentifier:user:byHost:container:cloud:perform:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___96-[_CFXPreferences(SourceAdditions) withSourceForIdentifier:user:byHost:container:cloud:perform:]_block_invoke.213.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___96-[_CFXPreferences(SourceAdditions) withSourceForIdentifier:user:byHost:container:cloud:perform:]_block_invoke.213.cold.2",
    "type": "CPP"
  },
  {
    "name": "t ___115-[_CFXPreferences(SourceAdditions) assertEquivalence:ofIdentifiers:users:hosts:containers:managedFlags:cloudFlags:]_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___115-[_CFXPreferences(SourceAdditions) assertEquivalence:ofIdentifiers:users:hosts:containers:managedFlags:cloudFlags:]_block_invoke.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _CFURLCopyHostName.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFURLGetPortNumber.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFURLCopyUserName.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFURLCopyPassword.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFURLCopyParameterString.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFURLCopyParameterString_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFURLCopyParameterString_block_invoke.38.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFURLCopyQueryString.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFUniCharGetUnicodePropertyDataForPlane_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _____CFLookupCoreServicesInternalFunction_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFAppVersionCheckLessThan.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFAppVersionCheckLessThan.cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray componentsJoinedByString:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray countByEnumeratingWithState:objects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray countByEnumeratingWithState:objects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray enumerateObjectsAtIndexes:options:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray enumerateObjectsAtIndexes:options:usingBlock:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray enumerateObjectsAtIndexes:options:usingBlock:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray enumerateObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray enumerateObjectsUsingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray firstObjectCommonWithArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray getObjects:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray getObjects:range:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray getObjects:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray getObjects:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexOfObject:inSortedRange:options:usingComparator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexOfObject:inSortedRange:options:usingComparator:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexOfObjectAtIndexes:options:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexOfObjectAtIndexes:options:passingTest:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexOfObjectAtIndexes:options:passingTest:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexOfObjectWithOptions:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexOfObjectPassingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexesOfObjectsAtIndexes:options:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexesOfObjectsAtIndexes:options:passingTest:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexesOfObjectsAtIndexes:options:passingTest:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexesOfObjectsWithOptions:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray indexesOfObjectsPassingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray isEqualToArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectsAtIndexes:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectsAtIndexes:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectsAtIndexes:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectAtIndexes:options:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectAtIndexes:options:passingTest:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectAtIndexes:options:passingTest:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectWithOptions:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectPassingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectsAtIndexes:options:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectsAtIndexes:options:passingTest:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectsAtIndexes:options:passingTest:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectsWithOptions:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray objectsPassingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray sortedArrayFromRange:options:usingComparator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray sortedArrayFromRange:options:usingComparator:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray sortedArrayWithOptions:usingComparator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray sortedArrayUsingComparator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray initWithArray:range:copyItems:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray initWithSet:copyItems:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray initWithOrderedSet:range:copyItems:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray newArrayWithObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray newArrayWithObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t +[NSArray newArrayWithObjects:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray arrayByAddingObject:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray arrayByAddingObjectsFromArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray arrayByExcludingObjectsInArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSArray arrayByExcludingToObjectsInArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t _decodeTaggedTimeInterval.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDate initWithTimeIntervalSinceReferenceDate:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderDate initWithTimeIntervalSinceReferenceDate:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_close.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_clone.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_setAttribute.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_getAttribute.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_setGregorianChange.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_getGregorianChange.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_getMillis.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_setMillis.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_set.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_get.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_getDayOfWeekType.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_getWeekendTransition.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_isWeekend.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_clear.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_getLimit.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_add.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_roll.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_getFieldDifference.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_getNow.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cficu_ucal_setTimeZone.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary countByEnumeratingWithState:objects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary countByEnumeratingWithState:objects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary enumerateKeysAndObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary enumerateKeysAndObjectsUsingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary getObjects:andKeys:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary getObjects:andKeys:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary getObjects:andKeys:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary getObjects:andKeys:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary getKeys:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary getObjects:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary isEqualToDictionary:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary keyOfEntryWithOptions:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary keyOfEntryPassingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary keysOfEntriesWithOptions:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary keysOfEntriesPassingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary keysSortedByValueWithOptions:usingComparator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary keysSortedByValueUsingComparator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary objectsForKeys:notFoundMarker:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary initWithDictionary:copyItems:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary initWithObjects:forKeys:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary initWithObjects:forKeys:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSDictionary initWithObjects:forKeys:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t +[NSDictionary newDictionaryWithObjects:forKeys:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t +[NSDictionary newDictionaryWithObjects:forKeys:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t +[NSDictionary newDictionaryWithObjects:forKeys:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t +[NSDictionary newDictionaryWithObjects:forKeys:count:].cold.4",
    "type": "CPP"
  },
  {
    "name": "t +[NSDictionary newDictionaryWithObjects:forKeys:count:].cold.5",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectEnumerator init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFRaiseMemoryException",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation retainArguments].cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___NSICreateBackingForArgumentIfNeeded.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___NSICreateBackingForArgumentIfNeeded.cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation copyWithZone:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation invoke].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation invokeUsingIMP:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSInvocation invokeSuper].cold.1",
    "type": "CPP"
  },
  {
    "name": "t ____forwarding___.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ____forwarding___.cold.2",
    "type": "CPP"
  },
  {
    "name": "t ____forwarding___.cold.3",
    "type": "CPP"
  },
  {
    "name": "t ____forwarding___.cold.4",
    "type": "CPP"
  },
  {
    "name": "t -[NSBlockInvocation selector].cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___block_forwarding___.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___block_forwarding___.cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayReversed getObjects:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayReversed getObjects:range:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsGetPathForManagedBundleID.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsTemporaryFDToWriteTo.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsTemporaryFDToWriteTo.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsTemporaryFDToWriteTo.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsTemporaryFDToWriteTo.cold.4",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsTemporaryFDToWriteTo.cold.5",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsTemporaryFDToWriteTo.cold.6",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsTemporaryFDToWriteTo.cold.7",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsTemporaryFDToWriteTo.cold.8",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsTemporaryFDToWriteTo.cold.9",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsWritePlistToFDThenClose.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsWritePlistToFDThenClose.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsWritePlistToFDThenClose.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsWritePlistToFDThenClose.cold.4",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsWritePlistToFDThenClose.cold.5",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsWritePlistToFDThenClose.cold.6",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsWritePlistToFDThenClose.cold.7",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsWritePlistToFDThenClose.cold.8",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsWritePlistToFDThenClose.cold.9",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray addObject:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray addObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray addObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray addObjects:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray addObjectsFromArray:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray addObjectsFromArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray addObjectsFromOrderedSet:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray addObjectsFromOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray addObjectsFromSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObjects:count:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObjects:count:atIndex:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObjects:count:atIndex:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObjectsFromArray:range:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObjectsFromArray:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObjectsFromOrderedSet:range:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObjectsFromOrderedSet:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObjectsFromSet:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObjects:atIndexes:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObjects:atIndexes:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObjects:atIndexes:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray insertObjects:atIndexes:].cold.4",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray moveObjectsAtIndexes:toIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray moveObjectsAtIndexes:toIndex:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsAtIndexes:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsAtIndexes:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInRange:inArray:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInRange:inArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInArray:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInRange:inOrderedSet:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInRange:inOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInOrderedSet:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInRange:inSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsInSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsAtIndexes:options:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsAtIndexes:options:passingTest:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsAtIndexes:options:passingTest:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsWithOptions:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray removeObjectsPassingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObject:inRange:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObject:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectsInRange:withObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectsInRange:withObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectsInRange:withObjects:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectsAtIndexes:withObjects:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectsAtIndexes:withObjects:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectsAtIndexes:withObjects:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectsAtIndexes:withObjects:].cold.4",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectsInRange:withObjectsFromArray:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectsInRange:withObjectsFromArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectsInRange:withObjectsFromOrderedSet:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectsInRange:withObjectsFromOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray replaceObjectsInRange:withObjectsFromSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray setObject:atIndex:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray setArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray setOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray setSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray sortRange:options:usingComparator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray sortWithOptions:usingComparator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray sortUsingComparator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray initWithObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray initWithObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray initWithObjects:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSMutableArray arrayByAddingObjectsFromArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFRequireConcreteImplementation",
    "type": "CPP"
  },
  {
    "name": "t __NSSetDeallocHandler.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFAllocateObject.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet countByEnumeratingWithState:objects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet countByEnumeratingWithState:objects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet enumerateObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet enumerateObjectsUsingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet getObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet getObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet getObjects:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet getObjects:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet intersectsOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet intersectsSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet isEqualToSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet isSubsetOfOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet isSubsetOfSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet members:notFoundMarker:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet objectWithOptions:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet objectPassingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet objectsWithOptions:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet objectsPassingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet sortedArrayWithOptions:usingComparator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet sortedArrayUsingComparator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet initWithArray:range:copyItems:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet initWithOrderedSet:range:copyItems:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet initWithSet:copyItems:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet newSetWithObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet newSetWithObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t +[NSSet newSetWithObjects:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet setByAddingObject:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet setByAddingObjectsFromArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSet setByAddingObjectsFromSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM _mutate].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM addObject:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM addObject:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM countByEnumeratingWithState:objects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM countByEnumeratingWithState:objects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM enumerateObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM getObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM getObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM removeAllObjects].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM removeObject:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM removeObject:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSetM dealloc].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM countByEnumeratingWithState:objects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM countByEnumeratingWithState:objects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM enumerateObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM getObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM getObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSFrozenSetM dealloc].cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFListFormatterDeallocate.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFListFormatterCopyDescription.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFListFormatterCreate.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFListFormatterCreate.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _cbRead.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _cbRead.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _cbRead.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _cbRead.cold.4",
    "type": "CPP"
  },
  {
    "name": "t _cbRead.cold.5",
    "type": "CPP"
  },
  {
    "name": "t _cbRead.cold.6",
    "type": "CPP"
  },
  {
    "name": "t _cbRead.cold.7",
    "type": "CPP"
  },
  {
    "name": "t _cbRead.cold.8",
    "type": "CPP"
  },
  {
    "name": "t _cbRead.cold.9",
    "type": "CPP"
  },
  {
    "name": "t _cbRead.cold.10",
    "type": "CPP"
  },
  {
    "name": "t ___cbRead.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cbRead.cold.2",
    "type": "CPP"
  },
  {
    "name": "t ___cbRead.cold.3",
    "type": "CPP"
  },
  {
    "name": "t ___cbRead.cold.4",
    "type": "CPP"
  },
  {
    "name": "t _cbWrite.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _cbWrite.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _cbWrite.cold.3",
    "type": "CPP"
  },
  {
    "name": "t ___cbWrite.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___cbWrite.cold.2",
    "type": "CPP"
  },
  {
    "name": "t ___cbWrite.cold.3",
    "type": "CPP"
  },
  {
    "name": "t ___cbWrite.cold.4",
    "type": "CPP"
  },
  {
    "name": "t ___boundsFail",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI getObjects:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI getObjects:range:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI countByEnumeratingWithState:objects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI countByEnumeratingWithState:objects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI enumerateObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI_Transfer getObjects:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI_Transfer getObjects:range:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI_Transfer countByEnumeratingWithState:objects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI_Transfer countByEnumeratingWithState:objects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSArrayI_Transfer enumerateObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFGetHandleForLoadedLibrary.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFGetHandleForInsertedOrInterposingLibrary.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource copyCloudConfigurationWithURL:outConfigFileSource:outStoreName:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource copyCloudConfigurationWithURL:outConfigFileSource:outStoreName:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource addPreferencesObserver:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource removePreferencesObserver:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource alreadylocked_copyValueForKey:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource alreadylocked_copyValueForKey:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource alreadylocked_setPrecopiedValues:forKeys:count:from:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource alreadylocked_setPrecopiedValues:forKeys:count:from:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource handleReply:toRequestNewDataMessage:onConnection:retryCount:error:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource createRequestNewContentMessageForDaemon:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource createRequestNewContentMessageForDaemon:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource createRequestNewContentMessageForDaemon:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource _getPendingNotifications].cold.1",
    "type": "CPP"
  },
  {
    "name": "t _pendingKVODestructor.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource addSource:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource removeSource:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsSearchListSource replaceSource:withSource:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___106-[_CFXPreferences(SearchListAdditions) assertEquivalence:ofIdentifiers:containers:cloudConfigurationURLs:]_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___106-[_CFXPreferences(SearchListAdditions) assertEquivalence:ofIdentifiers:containers:cloudConfigurationURLs:]_block_invoke.cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL getResourceValue:forKey:error:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL resourceValuesForKeys:error:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL setResourceValue:forKey:error:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL setResourceValues:error:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL removeCachedResourceValueForKey:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL removeAllCachedResourceValues].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL setTemporaryResourceValue:forKey:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL checkResourceIsReachableAndReturnError:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL isFileReferenceURL].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL fileReferenceURL].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL filePathURL].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL startAccessingSecurityScopedResource].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSURL stopAccessingSecurityScopedResource].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObserverRegistration initWithObserver:parent:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObserverRegistration resetObserverAndChildren:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___NSMoribundCache_invalidAccess_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarGetTimeRangeOfUnitForDate.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarCreateStartDateForTimeRangeOfUnitForDate.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarCreateDateInterval.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarCreateDateByAddingDateComponentsToDate.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarCreateDateByAddingDateComponentsToDate.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __CFCalendarCreateDateByAddingDateComponentsToDate.cold.3",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashRehash.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashIncSlotCount.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashIncSlotCount.cold.2",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashIncSlotCount.cold.3",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashIncSlotCount.cold.4",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashIncSlotCount.cold.5",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashIncSlotCount.cold.6",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashIncSlotCount.cold.7",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashIncSlotCount.cold.8",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashIncSlotCount.cold.9",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashIncSlotCount.cold.10",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashIncSlotCount.cold.11",
    "type": "CPP"
  },
  {
    "name": "t ___CFBasicHashIncSlotCount.cold.12",
    "type": "CPP"
  },
  {
    "name": "t _CFBasicHashCreateCopy.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarAddObject.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationRegistrarAddName.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObjectRegistration acquireObserver:options:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObjectRegistration acquireObserver:options:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationObjectRegistration find:matching:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderOrderedSet initWithObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderOrderedSet initWithObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderOrderedSet initWithObjects:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderOrderedSet initWithCapacity:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSPlaceholderOrderedSet initWithCapacity:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t _CFBundleCopyLocalizedStringForLocalization.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFBundleCopyLocalizedStringForLocalization.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _CFBundleCopyLocalizedStringForLocalization.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _CFBundleCopyLocalizedStringForLocalization.cold.4",
    "type": "CPP"
  },
  {
    "name": "t _CFBundleCopyLocalizedStringForLocalization.cold.5",
    "type": "CPP"
  },
  {
    "name": "t _CFBundleCopyLocalizedStringForLocalization.cold.6",
    "type": "CPP"
  },
  {
    "name": "t _CFBundleCopyLocalizedStringForLocalization.cold.7",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet countByEnumeratingWithState:objects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet countByEnumeratingWithState:objects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet enumerateObjectsAtIndexes:options:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet enumerateObjectsAtIndexes:options:usingBlock:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet enumerateObjectsAtIndexes:options:usingBlock:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet enumerateObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet enumerateObjectsUsingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet getObjects:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet getObjects:range:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet getObjects:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet getObjects:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexOfObject:inSortedRange:options:usingComparator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexOfObject:inSortedRange:options:usingComparator:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexOfObjectAtIndexes:options:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexOfObjectAtIndexes:options:passingTest:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexOfObjectAtIndexes:options:passingTest:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexOfObjectWithOptions:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexOfObjectPassingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexesOfObjectsAtIndexes:options:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexesOfObjectsAtIndexes:options:passingTest:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexesOfObjectsAtIndexes:options:passingTest:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexesOfObjectsWithOptions:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet indexesOfObjectsPassingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet intersectsOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet intersectsSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet isSubsetOfOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet isSubsetOfSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectAtIndexes:options:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectAtIndexes:options:passingTest:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectAtIndexes:options:passingTest:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectWithOptions:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectPassingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectsAtIndexes:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectsAtIndexes:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectsAtIndexes:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectsAtIndexes:options:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectsAtIndexes:options:passingTest:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectsAtIndexes:options:passingTest:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectsWithOptions:passingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet objectsPassingTest:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet sortedArrayFromRange:options:usingComparator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet sortedArrayFromRange:options:usingComparator:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet sortedArrayWithOptions:usingComparator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet sortedArrayUsingComparator:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet isEqualToOrderedSet:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet newOrderedSetWithObjects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet newOrderedSetWithObjects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t +[NSOrderedSet newOrderedSetWithObjects:count:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet initWithArray:range:copyItems:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet initWithOrderedSet:range:copyItems:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSOrderedSet initWithSet:copyItems:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectArrayI getObjects:range:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectArrayI getObjects:range:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectArrayI getObjects:range:].cold.3",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectArrayI countByEnumeratingWithState:objects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectArrayI countByEnumeratingWithState:objects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectArrayI enumerateObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[__NSSingleObjectArrayI isEqualToArray:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFBurstTrieAddUTF8StringWithWeight.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _CFBurstTrieCursorCreateByCopy.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _serializeCFBurstTrieLevels.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationNameRegistration initWithName:options:parent:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationChildrenAddValue.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFXNotificationChildrenAddValue.cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[_CFXNotificationNameWildcardObjectRegistration find:matching:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary getObjects:andKeys:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary getObjects:andKeys:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary countByEnumeratingWithState:objects:count:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary countByEnumeratingWithState:objects:count:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary enumerateKeysAndObjectsWithOptions:usingBlock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary setObject:forKey:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary setObject:forKey:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[NSSharedKeyDictionary removeObjectForKey:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPrefsDaemon(SourceSupport) withSourceForDomain:inContainer:user:byHost:managed:managedUsesContainer:cloudStoreEntitlement:cloudConfigurationPath:performWithSourceLock:afterReleasingSourceLock:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource shouldBePurgable].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource beginHandlingRequest].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource beginHandlingRequest].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource endHandlingRequest].cold.1",
    "type": "CPP"
  },
  {
    "name": "t __CFPrefsEqualKeyOrSource.cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource cacheActualPathCreatingIfNecessary:euid:egid:isWritable:].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource cacheActualPathCreatingIfNecessary:euid:egid:isWritable:].cold.2",
    "type": "CPP"
  },
  {
    "name": "t -[CFPDSource cacheActualPathCreatingIfNecessary:euid:egid:isWritable:].cold.3",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/libSystem.B.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "/usr/lib/libc++.1.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T void std::__1::__sort<std::__1::__less<char, char>&, char*>(char*, char*, std::__1::__less<char, char>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort3<std::__1::__less<char, char>&, char*>(char*, char*, char*, std::__1::__less<char, char>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort4<std::__1::__less<char, char>&, char*>(char*, char*, char*, char*, std::__1::__less<char, char>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort5<std::__1::__less<char, char>&, char*>(char*, char*, char*, char*, char*, std::__1::__less<char, char>&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__insertion_sort_3<std::__1::__less<char, char>&, char*>(char*, char*, std::__1::__less<char, char>&)",
    "type": "CPP"
  },
  {
    "name": "T bool std::__1::__insertion_sort_incomplete<std::__1::__less<char, char>&, char*>(char*, char*, std::__1::__less<char, char>&)",
    "type": "CPP"
  },
  {
    "name": "T void std::__1::__sort<std::__1::__less<wchar_t, wchar_t>&, wchar_t*>(wchar_t*, wchar_t*, std::__1::__less<wchar_t, wchar_t>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort3<std::__1::__less<wchar_t, wchar_t>&, wchar_t*>(wchar_t*, wchar_t*, wchar_t*, std::__1::__less<wchar_t, wchar_t>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort4<std::__1::__less<wchar_t, wchar_t>&, wchar_t*>(wchar_t*, wchar_t*, wchar_t*, wchar_t*, std::__1::__less<wchar_t, wchar_t>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort5<std::__1::__less<wchar_t, wchar_t>&, wchar_t*>(wchar_t*, wchar_t*, wchar_t*, wchar_t*, wchar_t*, std::__1::__less<wchar_t, wchar_t>&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__insertion_sort_3<std::__1::__less<wchar_t, wchar_t>&, wchar_t*>(wchar_t*, wchar_t*, std::__1::__less<wchar_t, wchar_t>&)",
    "type": "CPP"
  },
  {
    "name": "T bool std::__1::__insertion_sort_incomplete<std::__1::__less<wchar_t, wchar_t>&, wchar_t*>(wchar_t*, wchar_t*, std::__1::__less<wchar_t, wchar_t>&)",
    "type": "CPP"
  },
  {
    "name": "T void std::__1::__sort<std::__1::__less<signed char, signed char>&, signed char*>(signed char*, signed char*, std::__1::__less<signed char, signed char>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort3<std::__1::__less<signed char, signed char>&, signed char*>(signed char*, signed char*, signed char*, std::__1::__less<signed char, signed char>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort4<std::__1::__less<signed char, signed char>&, signed char*>(signed char*, signed char*, signed char*, signed char*, std::__1::__less<signed char, signed char>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort5<std::__1::__less<signed char, signed char>&, signed char*>(signed char*, signed char*, signed char*, signed char*, signed char*, std::__1::__less<signed char, signed char>&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__insertion_sort_3<std::__1::__less<signed char, signed char>&, signed char*>(signed char*, signed char*, std::__1::__less<signed char, signed char>&)",
    "type": "CPP"
  },
  {
    "name": "T bool std::__1::__insertion_sort_incomplete<std::__1::__less<signed char, signed char>&, signed char*>(signed char*, signed char*, std::__1::__less<signed char, signed char>&)",
    "type": "CPP"
  },
  {
    "name": "T void std::__1::__sort<std::__1::__less<unsigned char, unsigned char>&, unsigned char*>(unsigned char*, unsigned char*, std::__1::__less<unsigned char, unsigned char>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort3<std::__1::__less<unsigned char, unsigned char>&, unsigned char*>(unsigned char*, unsigned char*, unsigned char*, std::__1::__less<unsigned char, unsigned char>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort4<std::__1::__less<unsigned char, unsigned char>&, unsigned char*>(unsigned char*, unsigned char*, unsigned char*, unsigned char*, std::__1::__less<unsigned char, unsigned char>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort5<std::__1::__less<unsigned char, unsigned char>&, unsigned char*>(unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, std::__1::__less<unsigned char, unsigned char>&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__insertion_sort_3<std::__1::__less<unsigned char, unsigned char>&, unsigned char*>(unsigned char*, unsigned char*, std::__1::__less<unsigned char, unsigned char>&)",
    "type": "CPP"
  },
  {
    "name": "T bool std::__1::__insertion_sort_incomplete<std::__1::__less<unsigned char, unsigned char>&, unsigned char*>(unsigned char*, unsigned char*, std::__1::__less<unsigned char, unsigned char>&)",
    "type": "CPP"
  },
  {
    "name": "T void std::__1::__sort<std::__1::__less<short, short>&, short*>(short*, short*, std::__1::__less<short, short>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort3<std::__1::__less<short, short>&, short*>(short*, short*, short*, std::__1::__less<short, short>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort4<std::__1::__less<short, short>&, short*>(short*, short*, short*, short*, std::__1::__less<short, short>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort5<std::__1::__less<short, short>&, short*>(short*, short*, short*, short*, short*, std::__1::__less<short, short>&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__insertion_sort_3<std::__1::__less<short, short>&, short*>(short*, short*, std::__1::__less<short, short>&)",
    "type": "CPP"
  },
  {
    "name": "T bool std::__1::__insertion_sort_incomplete<std::__1::__less<short, short>&, short*>(short*, short*, std::__1::__less<short, short>&)",
    "type": "CPP"
  },
  {
    "name": "T void std::__1::__sort<std::__1::__less<unsigned short, unsigned short>&, unsigned short*>(unsigned short*, unsigned short*, std::__1::__less<unsigned short, unsigned short>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort3<std::__1::__less<unsigned short, unsigned short>&, unsigned short*>(unsigned short*, unsigned short*, unsigned short*, std::__1::__less<unsigned short, unsigned short>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort4<std::__1::__less<unsigned short, unsigned short>&, unsigned short*>(unsigned short*, unsigned short*, unsigned short*, unsigned short*, std::__1::__less<unsigned short, unsigned short>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort5<std::__1::__less<unsigned short, unsigned short>&, unsigned short*>(unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, std::__1::__less<unsigned short, unsigned short>&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__insertion_sort_3<std::__1::__less<unsigned short, unsigned short>&, unsigned short*>(unsigned short*, unsigned short*, std::__1::__less<unsigned short, unsigned short>&)",
    "type": "CPP"
  },
  {
    "name": "T bool std::__1::__insertion_sort_incomplete<std::__1::__less<unsigned short, unsigned short>&, unsigned short*>(unsigned short*, unsigned short*, std::__1::__less<unsigned short, unsigned short>&)",
    "type": "CPP"
  },
  {
    "name": "T void std::__1::__sort<std::__1::__less<int, int>&, int*>(int*, int*, std::__1::__less<int, int>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort3<std::__1::__less<int, int>&, int*>(int*, int*, int*, std::__1::__less<int, int>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort4<std::__1::__less<int, int>&, int*>(int*, int*, int*, int*, std::__1::__less<int, int>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort5<std::__1::__less<int, int>&, int*>(int*, int*, int*, int*, int*, std::__1::__less<int, int>&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__insertion_sort_3<std::__1::__less<int, int>&, int*>(int*, int*, std::__1::__less<int, int>&)",
    "type": "CPP"
  },
  {
    "name": "T bool std::__1::__insertion_sort_incomplete<std::__1::__less<int, int>&, int*>(int*, int*, std::__1::__less<int, int>&)",
    "type": "CPP"
  },
  {
    "name": "T void std::__1::__sort<std::__1::__less<unsigned int, unsigned int>&, unsigned int*>(unsigned int*, unsigned int*, std::__1::__less<unsigned int, unsigned int>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort3<std::__1::__less<unsigned int, unsigned int>&, unsigned int*>(unsigned int*, unsigned int*, unsigned int*, std::__1::__less<unsigned int, unsigned int>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort4<std::__1::__less<unsigned int, unsigned int>&, unsigned int*>(unsigned int*, unsigned int*, unsigned int*, unsigned int*, std::__1::__less<unsigned int, unsigned int>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort5<std::__1::__less<unsigned int, unsigned int>&, unsigned int*>(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, std::__1::__less<unsigned int, unsigned int>&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__insertion_sort_3<std::__1::__less<unsigned int, unsigned int>&, unsigned int*>(unsigned int*, unsigned int*, std::__1::__less<unsigned int, unsigned int>&)",
    "type": "CPP"
  },
  {
    "name": "T bool std::__1::__insertion_sort_incomplete<std::__1::__less<unsigned int, unsigned int>&, unsigned int*>(unsigned int*, unsigned int*, std::__1::__less<unsigned int, unsigned int>&)",
    "type": "CPP"
  },
  {
    "name": "T void std::__1::__sort<std::__1::__less<long, long>&, long*>(long*, long*, std::__1::__less<long, long>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort3<std::__1::__less<long, long>&, long*>(long*, long*, long*, std::__1::__less<long, long>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort4<std::__1::__less<long, long>&, long*>(long*, long*, long*, long*, std::__1::__less<long, long>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort5<std::__1::__less<long, long>&, long*>(long*, long*, long*, long*, long*, std::__1::__less<long, long>&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__insertion_sort_3<std::__1::__less<long, long>&, long*>(long*, long*, std::__1::__less<long, long>&)",
    "type": "CPP"
  },
  {
    "name": "T bool std::__1::__insertion_sort_incomplete<std::__1::__less<long, long>&, long*>(long*, long*, std::__1::__less<long, long>&)",
    "type": "CPP"
  },
  {
    "name": "T void std::__1::__sort<std::__1::__less<unsigned long, unsigned long>&, unsigned long*>(unsigned long*, unsigned long*, std::__1::__less<unsigned long, unsigned long>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort3<std::__1::__less<unsigned long, unsigned long>&, unsigned long*>(unsigned long*, unsigned long*, unsigned long*, std::__1::__less<unsigned long, unsigned long>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort4<std::__1::__less<unsigned long, unsigned long>&, unsigned long*>(unsigned long*, unsigned long*, unsigned long*, unsigned long*, std::__1::__less<unsigned long, unsigned long>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort5<std::__1::__less<unsigned long, unsigned long>&, unsigned long*>(unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long*, std::__1::__less<unsigned long, unsigned long>&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__insertion_sort_3<std::__1::__less<unsigned long, unsigned long>&, unsigned long*>(unsigned long*, unsigned long*, std::__1::__less<unsigned long, unsigned long>&)",
    "type": "CPP"
  },
  {
    "name": "T bool std::__1::__insertion_sort_incomplete<std::__1::__less<unsigned long, unsigned long>&, unsigned long*>(unsigned long*, unsigned long*, std::__1::__less<unsigned long, unsigned long>&)",
    "type": "CPP"
  },
  {
    "name": "T void std::__1::__sort<std::__1::__less<long long, long long>&, long long*>(long long*, long long*, std::__1::__less<long long, long long>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort3<std::__1::__less<long long, long long>&, long long*>(long long*, long long*, long long*, std::__1::__less<long long, long long>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort4<std::__1::__less<long long, long long>&, long long*>(long long*, long long*, long long*, long long*, std::__1::__less<long long, long long>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort5<std::__1::__less<long long, long long>&, long long*>(long long*, long long*, long long*, long long*, long long*, std::__1::__less<long long, long long>&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__insertion_sort_3<std::__1::__less<long long, long long>&, long long*>(long long*, long long*, std::__1::__less<long long, long long>&)",
    "type": "CPP"
  },
  {
    "name": "T bool std::__1::__insertion_sort_incomplete<std::__1::__less<long long, long long>&, long long*>(long long*, long long*, std::__1::__less<long long, long long>&)",
    "type": "CPP"
  },
  {
    "name": "T void std::__1::__sort<std::__1::__less<unsigned long long, unsigned long long>&, unsigned long long*>(unsigned long long*, unsigned long long*, std::__1::__less<unsigned long long, unsigned long long>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort3<std::__1::__less<unsigned long long, unsigned long long>&, unsigned long long*>(unsigned long long*, unsigned long long*, unsigned long long*, std::__1::__less<unsigned long long, unsigned long long>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort4<std::__1::__less<unsigned long long, unsigned long long>&, unsigned long long*>(unsigned long long*, unsigned long long*, unsigned long long*, unsigned long long*, std::__1::__less<unsigned long long, unsigned long long>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort5<std::__1::__less<unsigned long long, unsigned long long>&, unsigned long long*>(unsigned long long*, unsigned long long*, unsigned long long*, unsigned long long*, unsigned long long*, std::__1::__less<unsigned long long, unsigned long long>&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__insertion_sort_3<std::__1::__less<unsigned long long, unsigned long long>&, unsigned long long*>(unsigned long long*, unsigned long long*, std::__1::__less<unsigned long long, unsigned long long>&)",
    "type": "CPP"
  },
  {
    "name": "T bool std::__1::__insertion_sort_incomplete<std::__1::__less<unsigned long long, unsigned long long>&, unsigned long long*>(unsigned long long*, unsigned long long*, std::__1::__less<unsigned long long, unsigned long long>&)",
    "type": "CPP"
  },
  {
    "name": "T void std::__1::__sort<std::__1::__less<float, float>&, float*>(float*, float*, std::__1::__less<float, float>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort3<std::__1::__less<float, float>&, float*>(float*, float*, float*, std::__1::__less<float, float>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort4<std::__1::__less<float, float>&, float*>(float*, float*, float*, float*, std::__1::__less<float, float>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort5<std::__1::__less<float, float>&, float*>(float*, float*, float*, float*, float*, std::__1::__less<float, float>&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__insertion_sort_3<std::__1::__less<float, float>&, float*>(float*, float*, std::__1::__less<float, float>&)",
    "type": "CPP"
  },
  {
    "name": "T bool std::__1::__insertion_sort_incomplete<std::__1::__less<float, float>&, float*>(float*, float*, std::__1::__less<float, float>&)",
    "type": "CPP"
  },
  {
    "name": "T void std::__1::__sort<std::__1::__less<double, double>&, double*>(double*, double*, std::__1::__less<double, double>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort3<std::__1::__less<double, double>&, double*>(double*, double*, double*, std::__1::__less<double, double>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort4<std::__1::__less<double, double>&, double*>(double*, double*, double*, double*, std::__1::__less<double, double>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort5<std::__1::__less<double, double>&, double*>(double*, double*, double*, double*, double*, std::__1::__less<double, double>&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__insertion_sort_3<std::__1::__less<double, double>&, double*>(double*, double*, std::__1::__less<double, double>&)",
    "type": "CPP"
  },
  {
    "name": "T bool std::__1::__insertion_sort_incomplete<std::__1::__less<double, double>&, double*>(double*, double*, std::__1::__less<double, double>&)",
    "type": "CPP"
  },
  {
    "name": "T void std::__1::__sort<std::__1::__less<long double, long double>&, long double*>(long double*, long double*, std::__1::__less<long double, long double>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort3<std::__1::__less<long double, long double>&, long double*>(long double*, long double*, long double*, std::__1::__less<long double, long double>&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort4<std::__1::__less<long double, long double>&, long double*>(long double*, long double*, long double*, long double*, std::__1::__less<long double, long double>&)",
    "type": "CPP"
  },
  {
    "name": "T unsigned int std::__1::__sort5<std::__1::__less<long double, long double>&, long double*>(long double*, long double*, long double*, long double*, long double*, std::__1::__less<long double, long double>&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__insertion_sort_3<std::__1::__less<long double, long double>&, long double*>(long double*, long double*, std::__1::__less<long double, long double>&)",
    "type": "CPP"
  },
  {
    "name": "T bool std::__1::__insertion_sort_incomplete<std::__1::__less<long double, long double>&, long double*>(long double*, long double*, std::__1::__less<long double, long double>&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__rs_default::__rs_default()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__rs_default::__rs_default()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__rs_default::__rs_default(std::__1::__rs_default const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__rs_default::__rs_default(std::__1::__rs_default const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__rs_default::~__rs_default()",
    "type": "CPP"
  },
  {
    "name": "t ___clang_call_terminate",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__rs_default::~__rs_default()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__rs_default::operator()()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>::operator()()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__rs_get()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_any_cast::what() const",
    "type": "CPP"
  },
  {
    "name": "T std::experimental::fundamentals_v1::bad_any_cast::what() const",
    "type": "CPP"
  },
  {
    "name": "t std::experimental::fundamentals_v1::bad_any_cast::~bad_any_cast()",
    "type": "CPP"
  },
  {
    "name": "t std::experimental::fundamentals_v1::bad_any_cast::~bad_any_cast()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__itoa::__u32toa(unsigned int, char*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__itoa::__u64toa(unsigned long long, char*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::chrono::system_clock::now()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::chrono::system_clock::to_time_t(std::__1::chrono::time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<l, 1000000l> > > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::chrono::system_clock::from_time_t(long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::chrono::steady_clock::now()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::condition_variable::notify_one()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::condition_variable::notify_all()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::condition_variable::__do_timed_wait(std::__1::unique_lock<std::__1::mutex>&, std::__1::chrono::time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<l, 1000000000l> > >)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::notify_all_at_thread_exit(std::__1::condition_variable&, std::__1::unique_lock<std::__1::mutex>)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::condition_variable::~condition_variable()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::condition_variable::~condition_variable()",
    "type": "CPP"
  },
  {
    "name": "T std::uncaught_exception()",
    "type": "CPP"
  },
  {
    "name": "T std::uncaught_exceptions()",
    "type": "CPP"
  },
  {
    "name": "T std::exception_ptr::~exception_ptr()",
    "type": "CPP"
  },
  {
    "name": "T std::exception_ptr::~exception_ptr()",
    "type": "CPP"
  },
  {
    "name": "T std::exception_ptr::exception_ptr(std::exception_ptr const&)",
    "type": "CPP"
  },
  {
    "name": "T std::exception_ptr::exception_ptr(std::exception_ptr const&)",
    "type": "CPP"
  },
  {
    "name": "T std::exception_ptr::operator=(std::exception_ptr const&)",
    "type": "CPP"
  },
  {
    "name": "T std::nested_exception::nested_exception()",
    "type": "CPP"
  },
  {
    "name": "T std::current_exception()",
    "type": "CPP"
  },
  {
    "name": "T std::nested_exception::nested_exception()",
    "type": "CPP"
  },
  {
    "name": "T std::nested_exception::~nested_exception()",
    "type": "CPP"
  },
  {
    "name": "T std::nested_exception::~nested_exception()",
    "type": "CPP"
  },
  {
    "name": "T std::nested_exception::~nested_exception()",
    "type": "CPP"
  },
  {
    "name": "T std::nested_exception::rethrow_nested() const",
    "type": "CPP"
  },
  {
    "name": "T std::rethrow_exception(std::exception_ptr)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__future_error_category::name() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__future_error_category::message(int) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::future_category()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__future_error_category::~__future_error_category()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::future_error::future_error(std::__1::error_code)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::future_error::future_error(std::__1::error_code)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::future_error::~future_error()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::future_error::~future_error()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::future_error::~future_error()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__assoc_sub_state::__on_zero_shared()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__assoc_sub_state::set_value()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_future_error(std::__1::future_errc)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__assoc_sub_state::set_value_at_thread_exit()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__assoc_sub_state::set_exception(std::exception_ptr)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__assoc_sub_state::set_exception_at_thread_exit(std::exception_ptr)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__assoc_sub_state::__make_ready()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__assoc_sub_state::copy()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__assoc_sub_state::__sub_wait(std::__1::unique_lock<std::__1::mutex>&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__assoc_sub_state::wait()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unique_lock<std::__1::mutex>::unlock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__assoc_sub_state::__execute()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::future<void>::future(std::__1::__assoc_sub_state*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__assoc_sub_state::__attach_future()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::future<void>::future(std::__1::__assoc_sub_state*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::future<void>::~future()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::future<void>::~future()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::future<void>::get()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::promise<void>::promise()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::promise<void>::promise()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::promise<void>::~promise()",
    "type": "CPP"
  },
  {
    "name": "t std::exception_ptr std::make_exception_ptr<std::__1::future_error>(std::__1::future_error)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::promise<void>::~promise()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::promise<void>::get_future()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::promise<void>::set_value()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::promise<void>::set_exception(std::exception_ptr)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::promise<void>::set_value_at_thread_exit()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::promise<void>::set_exception_at_thread_exit(std::exception_ptr)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::shared_future<void>::~shared_future()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::shared_future<void>::~shared_future()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::shared_future<void>::operator=(std::__1::shared_future<void> const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__assoc_sub_state::~__assoc_sub_state()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__assoc_sub_state::~__assoc_sub_state()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__future_error_category::~__future_error_category()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__next_prime(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_overflow_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::overflow_error::overflow_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ios<char, std::__1::char_traits<char> >::~basic_ios()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::~ios_base()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ios<char, std::__1::char_traits<char> >::~basic_ios()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ios<char, std::__1::char_traits<char> >::~basic_ios()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ios<char, std::__1::char_traits<char> >::copyfmt(std::__1::basic_ios<char, std::__1::char_traits<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::__call_callbacks(std::__1::ios_base::event)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::copyfmt(std::__1::ios_base const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ios<wchar_t, std::__1::char_traits<wchar_t> >::~basic_ios()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ios<wchar_t, std::__1::char_traits<wchar_t> >::~basic_ios()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ios<wchar_t, std::__1::char_traits<wchar_t> >::~basic_ios()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ios<wchar_t, std::__1::char_traits<wchar_t> >::copyfmt(std::__1::basic_ios<wchar_t, std::__1::char_traits<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::~basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::~basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::~basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::pubimbue(std::__1::locale const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::getloc() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::pubsetbuf(char*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::pubseekoff(long long, std::__1::ios_base::seekdir, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::pubseekpos(std::__1::fpos<__mbstate_t>, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::pubsync()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::in_avail()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::snextc()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::sbumpc()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::sgetc()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::sgetn(char*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::sputbackc(char)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::sungetc()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::sputc(char)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::sputn(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::basic_streambuf(std::__1::basic_streambuf<char, std::__1::char_traits<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::basic_streambuf(std::__1::basic_streambuf<char, std::__1::char_traits<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::operator=(std::__1::basic_streambuf<char, std::__1::char_traits<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::swap(std::__1::basic_streambuf<char, std::__1::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::gbump(int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::setg(char*, char*, char*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::pbump(int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::setp(char*, char*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::imbue(std::__1::locale const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::setbuf(char*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::seekoff(long long, std::__1::ios_base::seekdir, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::seekpos(std::__1::fpos<__mbstate_t>, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::sync()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::xsgetn(char*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::uflow()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::pbackfail(int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::xsputn(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<char, std::__1::char_traits<char> >::overflow(int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::~basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::~basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::~basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::pubimbue(std::__1::locale const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::getloc() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::pubsetbuf(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::pubseekoff(long long, std::__1::ios_base::seekdir, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::pubseekpos(std::__1::fpos<__mbstate_t>, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::pubsync()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::in_avail()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::snextc()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::sbumpc()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::sgetc()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::sgetn(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::sputbackc(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::sungetc()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::sputc(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::sputn(wchar_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::basic_streambuf(std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::basic_streambuf(std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::operator=(std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::swap(std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::gbump(int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::setg(wchar_t*, wchar_t*, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::pbump(int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::setp(wchar_t*, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::imbue(std::__1::locale const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::setbuf(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::seekoff(long long, std::__1::ios_base::seekdir, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::seekpos(std::__1::fpos<__mbstate_t>, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::sync()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::xsgetn(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::uflow()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::pbackfail(int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::xsputn(wchar_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::overflow(int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::basic_istream(std::__1::basic_streambuf<char, std::__1::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::basic_istream(std::__1::basic_streambuf<char, std::__1::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "T virtual thunk to std::__1::basic_istream<char, std::__1::char_traits<char> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "T virtual thunk to std::__1::basic_istream<char, std::__1::char_traits<char> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::swap(std::__1::basic_istream<char, std::__1::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::sentry::sentry(std::__1::basic_istream<char, std::__1::char_traits<char> >&, bool)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::flush()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::getloc() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::sentry::sentry(std::__1::basic_istream<char, std::__1::char_traits<char> >&, bool)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(std::__1::basic_istream<char, std::__1::char_traits<char> >& (*)(std::__1::basic_istream<char, std::__1::char_traits<char> >&))",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(std::__1::basic_ios<char, std::__1::char_traits<char> >& (*)(std::__1::basic_ios<char, std::__1::char_traits<char> >&))",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(std::__1::ios_base& (*)(std::__1::ios_base&))",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(std::__1::basic_streambuf<char, std::__1::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(bool&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<char, std::__1::char_traits<char> >& std::__1::__input_arithmetic<bool, char, std::__1::char_traits<char> >(std::__1::basic_istream<char, std::__1::char_traits<char> >&, bool&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(short&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<char, std::__1::char_traits<char> >& std::__1::__input_arithmetic_with_numeric_limits<short, char, std::__1::char_traits<char> >(std::__1::basic_istream<char, std::__1::char_traits<char> >&, short&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<char, std::__1::char_traits<char> >& std::__1::__input_arithmetic<unsigned short, char, std::__1::char_traits<char> >(std::__1::basic_istream<char, std::__1::char_traits<char> >&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(int&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<char, std::__1::char_traits<char> >& std::__1::__input_arithmetic_with_numeric_limits<int, char, std::__1::char_traits<char> >(std::__1::basic_istream<char, std::__1::char_traits<char> >&, int&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<char, std::__1::char_traits<char> >& std::__1::__input_arithmetic<unsigned int, char, std::__1::char_traits<char> >(std::__1::basic_istream<char, std::__1::char_traits<char> >&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(long&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<char, std::__1::char_traits<char> >& std::__1::__input_arithmetic<long, char, std::__1::char_traits<char> >(std::__1::basic_istream<char, std::__1::char_traits<char> >&, long&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<char, std::__1::char_traits<char> >& std::__1::__input_arithmetic<unsigned long, char, std::__1::char_traits<char> >(std::__1::basic_istream<char, std::__1::char_traits<char> >&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(long long&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<char, std::__1::char_traits<char> >& std::__1::__input_arithmetic<long long, char, std::__1::char_traits<char> >(std::__1::basic_istream<char, std::__1::char_traits<char> >&, long long&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(unsigned long long&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<char, std::__1::char_traits<char> >& std::__1::__input_arithmetic<unsigned long long, char, std::__1::char_traits<char> >(std::__1::basic_istream<char, std::__1::char_traits<char> >&, unsigned long long&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(float&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<char, std::__1::char_traits<char> >& std::__1::__input_arithmetic<float, char, std::__1::char_traits<char> >(std::__1::basic_istream<char, std::__1::char_traits<char> >&, float&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(double&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<char, std::__1::char_traits<char> >& std::__1::__input_arithmetic<double, char, std::__1::char_traits<char> >(std::__1::basic_istream<char, std::__1::char_traits<char> >&, double&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(long double&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<char, std::__1::char_traits<char> >& std::__1::__input_arithmetic<long double, char, std::__1::char_traits<char> >(std::__1::basic_istream<char, std::__1::char_traits<char> >&, long double&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(void*&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<char, std::__1::char_traits<char> >& std::__1::__input_arithmetic<void*, char, std::__1::char_traits<char> >(std::__1::basic_istream<char, std::__1::char_traits<char> >&, void*&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::get()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::get(char&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::get(char*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::get(char*, long, char)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::get(std::__1::basic_streambuf<char, std::__1::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::get(std::__1::basic_streambuf<char, std::__1::char_traits<char> >&, char)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::getline(char*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::getline(char*, long, char)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::ignore(long, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::peek()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::read(char*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::readsome(char*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::putback(char)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::unget()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::sync()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::tellg()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::seekg(std::__1::fpos<__mbstate_t>)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<char, std::__1::char_traits<char> >::seekg(long long, std::__1::ios_base::seekdir)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::basic_istream(std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::basic_istream(std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "T virtual thunk to std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "T virtual thunk to std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::swap(std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::sentry::sentry(std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >&, bool)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::flush()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::sentry::sentry(std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >&, bool)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::operator>>(std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >& (*)(std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >&))",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::operator>>(std::__1::basic_ios<wchar_t, std::__1::char_traits<wchar_t> >& (*)(std::__1::basic_ios<wchar_t, std::__1::char_traits<wchar_t> >&))",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::operator>>(std::__1::ios_base& (*)(std::__1::ios_base&))",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::operator>>(std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::operator>>(bool&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >& std::__1::__input_arithmetic<bool, wchar_t, std::__1::char_traits<wchar_t> >(std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >&, bool&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::operator>>(short&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >& std::__1::__input_arithmetic_with_numeric_limits<short, wchar_t, std::__1::char_traits<wchar_t> >(std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >&, short&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::operator>>(unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >& std::__1::__input_arithmetic<unsigned short, wchar_t, std::__1::char_traits<wchar_t> >(std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::operator>>(int&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >& std::__1::__input_arithmetic_with_numeric_limits<int, wchar_t, std::__1::char_traits<wchar_t> >(std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >&, int&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::operator>>(unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >& std::__1::__input_arithmetic<unsigned int, wchar_t, std::__1::char_traits<wchar_t> >(std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::operator>>(long&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >& std::__1::__input_arithmetic<long, wchar_t, std::__1::char_traits<wchar_t> >(std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >&, long&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::operator>>(unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >& std::__1::__input_arithmetic<unsigned long, wchar_t, std::__1::char_traits<wchar_t> >(std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::operator>>(long long&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >& std::__1::__input_arithmetic<long long, wchar_t, std::__1::char_traits<wchar_t> >(std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >&, long long&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::operator>>(unsigned long long&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >& std::__1::__input_arithmetic<unsigned long long, wchar_t, std::__1::char_traits<wchar_t> >(std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >&, unsigned long long&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::operator>>(float&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >& std::__1::__input_arithmetic<float, wchar_t, std::__1::char_traits<wchar_t> >(std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >&, float&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::operator>>(double&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >& std::__1::__input_arithmetic<double, wchar_t, std::__1::char_traits<wchar_t> >(std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >&, double&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::operator>>(long double&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >& std::__1::__input_arithmetic<long double, wchar_t, std::__1::char_traits<wchar_t> >(std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >&, long double&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::operator>>(void*&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >& std::__1::__input_arithmetic<void*, wchar_t, std::__1::char_traits<wchar_t> >(std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >&, void*&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::get()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::get(wchar_t&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::get(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::get(wchar_t*, long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::get(std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::get(std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >&, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::getline(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::getline(wchar_t*, long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::ignore(long, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::peek()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::read(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::readsome(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::putback(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::unget()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::sync()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::tellg()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::seekg(std::__1::fpos<__mbstate_t>)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::seekg(long long, std::__1::ios_base::seekdir)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::basic_ostream(std::__1::basic_streambuf<char, std::__1::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::basic_ostream(std::__1::basic_streambuf<char, std::__1::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "T virtual thunk to std::__1::basic_ostream<char, std::__1::char_traits<char> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "T virtual thunk to std::__1::basic_ostream<char, std::__1::char_traits<char> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::swap(std::__1::basic_ostream<char, std::__1::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry::sentry(std::__1::basic_ostream<char, std::__1::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry::sentry(std::__1::basic_ostream<char, std::__1::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry::~sentry()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry::~sentry()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >& (*)(std::__1::basic_ostream<char, std::__1::char_traits<char> >&))",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(std::__1::basic_ios<char, std::__1::char_traits<char> >& (*)(std::__1::basic_ios<char, std::__1::char_traits<char> >&))",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(std::__1::ios_base& (*)(std::__1::ios_base&))",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(bool)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::__set_badbit_and_consider_rethrow()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(short)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(unsigned short)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(long long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(float)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(double)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(long double)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(void const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(std::__1::basic_streambuf<char, std::__1::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::__set_failbit_and_consider_rethrow()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::put(char)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::write(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::tellp()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::seekp(std::__1::fpos<__mbstate_t>)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<char, std::__1::char_traits<char> >::seekp(long long, std::__1::ios_base::seekdir)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::basic_ostream(std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::basic_ostream(std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "T virtual thunk to std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "T virtual thunk to std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::swap(std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::sentry::sentry(std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::sentry::sentry(std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::sentry::~sentry()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::sentry::~sentry()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::operator<<(std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >& (*)(std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >&))",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::operator<<(std::__1::basic_ios<wchar_t, std::__1::char_traits<wchar_t> >& (*)(std::__1::basic_ios<wchar_t, std::__1::char_traits<wchar_t> >&))",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::operator<<(std::__1::ios_base& (*)(std::__1::ios_base&))",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::operator<<(bool)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::operator<<(short)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::operator<<(unsigned short)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::operator<<(int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::operator<<(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::operator<<(long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::operator<<(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::operator<<(long long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::operator<<(unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::operator<<(float)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::operator<<(double)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::operator<<(long double)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::operator<<(void const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::operator<<(std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::put(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::write(wchar_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::tellp()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::seekp(std::__1::fpos<__mbstate_t>)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::seekp(long long, std::__1::ios_base::seekdir)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_iostream<char, std::__1::char_traits<char> >::basic_iostream(std::__1::basic_streambuf<char, std::__1::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_iostream<char, std::__1::char_traits<char> >::basic_iostream(std::__1::basic_streambuf<char, std::__1::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_iostream<char, std::__1::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_iostream<char, std::__1::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to std::__1::basic_iostream<char, std::__1::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "T virtual thunk to std::__1::basic_iostream<char, std::__1::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_iostream<char, std::__1::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to std::__1::basic_iostream<char, std::__1::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "T virtual thunk to std::__1::basic_iostream<char, std::__1::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_iostream<char, std::__1::char_traits<char> >::swap(std::__1::basic_iostream<char, std::__1::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__iostream_category::name() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__iostream_category::message(int) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::iostream_category()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__iostream_category::~__iostream_category()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::failure::failure(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::error_code const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::failure::failure(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::error_code const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::failure::failure(char const*, std::__1::error_code const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::failure::failure(char const*, std::__1::error_code const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::failure::~failure()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::failure::~failure()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::failure::~failure()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::imbue(std::__1::locale const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::xalloc()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::iword(int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::pword(int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::register_callback(void (*)(std::__1::ios_base::event, std::__1::ios_base&, int), int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::~ios_base()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::~ios_base()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::clear(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_failure(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::init(void*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::move(std::__1::ios_base&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::swap(std::__1::ios_base&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::sync_with_stdio(bool)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__iostream_category::~__iostream_category()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >::equal(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::Init::Init()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::Init::~Init()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::DoIOSInit::DoIOSInit()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::DoIOSInit::~DoIOSInit()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::DoIOSInit::~DoIOSInit()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::Init::Init()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ios_base::Init::~Init()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdinbuf<char>::__stdinbuf(__sFILE*, __mbstate_t*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdinbuf<char>::~__stdinbuf()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdinbuf<char>::~__stdinbuf()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdinbuf<char>::imbue(std::__1::locale const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdinbuf<char>::underflow()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdinbuf<char>::uflow()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdinbuf<char>::pbackfail(int)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdinbuf<char>::__getchar(bool)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdinbuf<wchar_t>::__stdinbuf(__sFILE*, __mbstate_t*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdinbuf<wchar_t>::~__stdinbuf()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdinbuf<wchar_t>::~__stdinbuf()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdinbuf<wchar_t>::imbue(std::__1::locale const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdinbuf<wchar_t>::underflow()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdinbuf<wchar_t>::uflow()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdinbuf<wchar_t>::pbackfail(int)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdinbuf<wchar_t>::__getchar(bool)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdoutbuf<char>::__stdoutbuf(__sFILE*, __mbstate_t*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdoutbuf<char>::~__stdoutbuf()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdoutbuf<char>::~__stdoutbuf()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdoutbuf<char>::imbue(std::__1::locale const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdoutbuf<char>::sync()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdoutbuf<char>::xsputn(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdoutbuf<char>::overflow(int)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdoutbuf<wchar_t>::__stdoutbuf(__sFILE*, __mbstate_t*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdoutbuf<wchar_t>::~__stdoutbuf()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdoutbuf<wchar_t>::~__stdoutbuf()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdoutbuf<wchar_t>::imbue(std::__1::locale const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdoutbuf<wchar_t>::sync()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdoutbuf<wchar_t>::xsputn(wchar_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__stdoutbuf<wchar_t>::overflow(int)",
    "type": "CPP"
  },
  {
    "name": "t __GLOBAL__sub_I_iostream.cpp",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate<char>::~collate()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::facet::~facet()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate<char>::~collate()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate<char>::~collate()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate<char>::do_compare(char const*, char const*, char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate<char>::do_transform(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate<char>::do_hash(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate<wchar_t>::~collate()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate<wchar_t>::~collate()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate<wchar_t>::~collate()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate<wchar_t>::do_compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate<wchar_t>::do_transform(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate<wchar_t>::do_hash(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, bool&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::~locale()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const* std::__1::__scan_keyword<std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const*, std::__1::ctype<char> >(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const*, std::__1::ctype<char> const&, unsigned int&, bool)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, long&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get_signed<long>(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, long&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, long long&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get_signed<long long>(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, long long&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, unsigned short&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get_unsigned<unsigned short>(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, unsigned short&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get_unsigned<unsigned int>(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, unsigned long&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get_unsigned<unsigned long>(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, unsigned long&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get_unsigned<unsigned long long>(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, float&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get_floating_point<float>(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, float&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, double&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get_floating_point<double>(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, double&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get_floating_point<long double>(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, void*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__num_get<char>::__stage2_int_loop(char, int, char*, char*&, unsigned int&, char, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int*, unsigned int*&, char*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, bool&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const* std::__1::__scan_keyword<std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const*, std::__1::ctype<wchar_t> >(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const*, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const*, std::__1::ctype<wchar_t> const&, unsigned int&, bool)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, long&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get_signed<long>(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, long&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, long long&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get_signed<long long>(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, long long&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, unsigned short&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get_unsigned<unsigned short>(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, unsigned short&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get_unsigned<unsigned int>(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, unsigned long&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get_unsigned<unsigned long>(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, unsigned long&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get_unsigned<unsigned long long>(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, float&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get_floating_point<float>(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, float&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, double&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get_floating_point<double>(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, double&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get_floating_point<long double>(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, void*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__num_get<wchar_t>::__stage2_int_loop(wchar_t, int, char*, char*&, unsigned int&, wchar_t, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int*, unsigned int*&, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__num_get<char>::__stage2_float_prep(std::__1::ios_base&, char*, char&, char&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__num_get<char>::__stage2_float_loop(char, bool&, char&, char*, char*&, char, char, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int*, unsigned int*&, unsigned int&, char*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__num_get<char>::__stage2_int_prep(std::__1::ios_base&, char*, char&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__num_get<wchar_t>::__stage2_float_prep(std::__1::ios_base&, wchar_t*, wchar_t&, wchar_t&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__num_get<wchar_t>::__stage2_float_loop(wchar_t, bool&, char&, char*, char*&, wchar_t, wchar_t, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int*, unsigned int*&, unsigned int&, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__num_get<wchar_t>::__stage2_int_prep(std::__1::ios_base&, wchar_t*, wchar_t&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, char, bool) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, char, long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__num_put_base::__format_int(char*, char const*, bool, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__num_put_base::__identify_padding(char*, char*, std::__1::ios_base const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__num_put<char>::__widen_and_group_int(char*, char*, char*, char*, char*&, char*&, std::__1::locale const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > std::__1::__pad_and_output<char, std::__1::char_traits<char> >(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, char const*, char const*, char const*, std::__1::ios_base&, char)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, char, long long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, char, unsigned long long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, char, double) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__num_put_base::__format_float(char*, char const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__num_put<char>::__widen_and_group_float(char*, char*, char*, char*, char*&, char*&, std::__1::locale const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, char, long double) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, char, void const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, wchar_t, bool) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, wchar_t, long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__num_put<wchar_t>::__widen_and_group_int(char*, char*, char*, wchar_t*, wchar_t*&, wchar_t*&, std::__1::locale const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::__pad_and_output<wchar_t, std::__1::char_traits<wchar_t> >(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, wchar_t const*, wchar_t const*, wchar_t const*, std::__1::ios_base&, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, wchar_t, long long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, wchar_t, unsigned long long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, wchar_t, double) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__num_put<wchar_t>::__widen_and_group_float(char*, char*, char*, wchar_t*, wchar_t*&, wchar_t*&, std::__1::locale const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, wchar_t, long double) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, wchar_t, void const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, tm*, char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_date_order() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get_time(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get_date(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get_weekday(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__get_weekdayname(int&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, unsigned int&, std::__1::ctype<char> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get_monthname(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__get_monthname(int&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, unsigned int&, std::__1::ctype<char> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get_year(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__get_year(int&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, unsigned int&, std::__1::ctype<char> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, tm*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__get_day(int&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, unsigned int&, std::__1::ctype<char> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__get_hour(int&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, unsigned int&, std::__1::ctype<char> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__get_12_hour(int&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, unsigned int&, std::__1::ctype<char> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__get_day_year_num(int&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, unsigned int&, std::__1::ctype<char> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__get_month(int&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, unsigned int&, std::__1::ctype<char> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__get_minute(int&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, unsigned int&, std::__1::ctype<char> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__get_white_space(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, unsigned int&, std::__1::ctype<char> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__get_am_pm(int&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, unsigned int&, std::__1::ctype<char> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__get_second(int&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, unsigned int&, std::__1::ctype<char> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__get_weekday(int&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, unsigned int&, std::__1::ctype<char> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__get_year4(int&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, unsigned int&, std::__1::ctype<char> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__get_percent(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, unsigned int&, std::__1::ctype<char> const&) const",
    "type": "CPP"
  },
  {
    "name": "t int std::__1::__get_up_to_n_digits<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, unsigned int&, std::__1::ctype<char> const&, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, tm*, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_date_order() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get_time(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get_date(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get_weekday(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__get_weekdayname(int&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, unsigned int&, std::__1::ctype<wchar_t> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get_monthname(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__get_monthname(int&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, unsigned int&, std::__1::ctype<wchar_t> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get_year(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__get_year(int&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, unsigned int&, std::__1::ctype<wchar_t> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, tm*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__get_day(int&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, unsigned int&, std::__1::ctype<wchar_t> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__get_hour(int&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, unsigned int&, std::__1::ctype<wchar_t> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__get_12_hour(int&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, unsigned int&, std::__1::ctype<wchar_t> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__get_day_year_num(int&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, unsigned int&, std::__1::ctype<wchar_t> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__get_month(int&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, unsigned int&, std::__1::ctype<wchar_t> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__get_minute(int&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, unsigned int&, std::__1::ctype<wchar_t> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__get_white_space(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, unsigned int&, std::__1::ctype<wchar_t> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__get_am_pm(int&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, unsigned int&, std::__1::ctype<wchar_t> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__get_second(int&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, unsigned int&, std::__1::ctype<wchar_t> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__get_weekday(int&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, unsigned int&, std::__1::ctype<wchar_t> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__get_year4(int&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, unsigned int&, std::__1::ctype<wchar_t> const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__get_percent(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, unsigned int&, std::__1::ctype<wchar_t> const&) const",
    "type": "CPP"
  },
  {
    "name": "t int std::__1::__get_up_to_n_digits<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, unsigned int&, std::__1::ctype<wchar_t> const&, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, char, tm const*, char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, char, tm const*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_put::__do_put(char*, char*&, tm const*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, wchar_t, tm const*, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::time_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, wchar_t, tm const*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_put::__do_put(wchar_t*, wchar_t*&, tm const*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<char, false>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<char, false>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<char, false>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<char, false>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<char, false>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<char, false>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<char, false>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<char, false>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<char, false>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<char, true>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<char, true>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<char, true>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<char, true>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<char, true>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<char, true>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<char, true>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<char, true>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<char, true>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<wchar_t, false>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<wchar_t, false>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<wchar_t, false>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<wchar_t, false>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<wchar_t, false>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<wchar_t, false>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<wchar_t, false>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<wchar_t, false>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<wchar_t, false>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<wchar_t, true>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<wchar_t, true>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<wchar_t, true>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<wchar_t, true>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<wchar_t, true>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<wchar_t, true>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<wchar_t, true>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<wchar_t, true>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct<wchar_t, true>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, false>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, false>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, false>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, false>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, false>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, false>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, false>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, false>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, false>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, true>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, true>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, true>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, true>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, true>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, true>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, true>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, true>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, true>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, false>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, false>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, false>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, false>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, false>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, false>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, false>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, false>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, false>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, true>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, true>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, true>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, true>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, true>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, true>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, true>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, true>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, true>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::money_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, bool, std::__1::ios_base&, unsigned int&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__do_nothing(void*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::money_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, bool, std::__1::locale const&, unsigned int, unsigned int&, bool&, std::__1::ctype<char> const&, std::__1::unique_ptr<char, void (*)(void*)>&, char*&, char*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__throw_runtime_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::money_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, bool, std::__1::ios_base&, unsigned int&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__money_get<char>::__gather_info(bool, std::__1::locale const&, std::__1::money_base::pattern&, char&, char&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, int&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__double_or_nothing<char>(std::__1::unique_ptr<char, void (*)(void*)>&, char*&, char*&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__double_or_nothing<unsigned int>(std::__1::unique_ptr<unsigned int, void (*)(void*)>&, unsigned int*&, unsigned int*&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__check_grouping(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int*, unsigned int*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::money_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, bool, std::__1::ios_base&, unsigned int&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::money_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, bool, std::__1::locale const&, unsigned int, unsigned int&, bool&, std::__1::ctype<wchar_t> const&, std::__1::unique_ptr<wchar_t, void (*)(void*)>&, wchar_t*&, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::money_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, bool, std::__1::ios_base&, unsigned int&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__money_get<wchar_t>::__gather_info(bool, std::__1::locale const&, std::__1::money_base::pattern&, wchar_t&, wchar_t&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >&, int&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__double_or_nothing<wchar_t>(std::__1::unique_ptr<wchar_t, void (*)(void*)>&, wchar_t*&, wchar_t*&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::money_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, bool, std::__1::ios_base&, char, long double) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__money_put<char>::__gather_info(bool, bool, std::__1::locale const&, std::__1::money_base::pattern&, char&, char&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, int&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__money_put<char>::__format(char*, char*&, char*&, unsigned int, char const*, char const*, std::__1::ctype<char> const&, bool, std::__1::money_base::pattern const&, char, char, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::money_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, bool, std::__1::ios_base&, char, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::money_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, bool, std::__1::ios_base&, wchar_t, long double) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__money_put<wchar_t>::__gather_info(bool, bool, std::__1::locale const&, std::__1::money_base::pattern&, wchar_t&, wchar_t&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >&, int&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__money_put<wchar_t>::__format(wchar_t*, wchar_t*&, wchar_t*&, unsigned int, wchar_t const*, wchar_t const*, std::__1::ctype<wchar_t> const&, bool, std::__1::money_base::pattern const&, wchar_t, wchar_t, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::money_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, bool, std::__1::ios_base&, wchar_t, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::messages<char>::do_open(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::messages<char>::do_get(long, int, int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::messages<char>::do_close(long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::messages<wchar_t>::do_open(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::messages<wchar_t>::do_get(long, int, int, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::back_insert_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > std::__1::__narrow_to_utf8<32ul>::operator()<std::__1::back_insert_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, wchar_t>(std::__1::back_insert_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__narrow_to_utf8<32ul>::~__narrow_to_utf8()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::back_insert_iterator<std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > > std::__1::__widen_from_utf8<32ul>::operator()<std::__1::back_insert_iterator<std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > > >(std::__1::back_insert_iterator<std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > >, char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__widen_from_utf8<32ul>::~__widen_from_utf8()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::messages<wchar_t>::do_close(long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt_byname<char, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt_byname<char, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt_byname<char, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt_byname<wchar_t, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<wchar_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt_byname<wchar_t, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt_byname<wchar_t, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt_byname<char16_t, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char16_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt_byname<char16_t, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt_byname<char16_t, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt_byname<char32_t, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char32_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt_byname<char32_t, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt_byname<char32_t, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::locale::__imp::__imp(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::locale::__imp::__imp(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::classic()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate_byname<char>::collate_byname(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate_byname<wchar_t>::collate_byname(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<char>::ctype_byname(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<wchar_t>::ctype_byname(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct_byname<char>::numpunct_byname(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct_byname<wchar_t>::numpunct_byname(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::locale::__imp::__imp(std::__1::locale::__imp const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::locale::__imp::__imp(std::__1::locale::__imp const&, std::__1::locale::__imp const&, int)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::locale::__imp::__imp(std::__1::locale::__imp const&, std::__1::locale::facet*, long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::locale::__imp::install(std::__1::locale::facet*, long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::locale::__imp::~__imp()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::locale::__imp::~__imp()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::locale::__imp::~__imp()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::vector<std::__1::locale::facet*, std::__1::__sso_allocator<std::__1::locale::facet*, 28ul> >::resize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_bad_cast()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::locale(std::__1::locale const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::__global()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::locale()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::locale()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::locale(std::__1::locale const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::~locale()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::operator=(std::__1::locale const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::locale(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::locale(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::locale(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::locale(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::locale(std::__1::locale const&, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::locale(std::__1::locale const&, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::locale(std::__1::locale const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::locale(std::__1::locale const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::locale(std::__1::locale const&, std::__1::locale const&, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::locale(std::__1::locale const&, std::__1::locale const&, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::name() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::__install_ctor(std::__1::locale const&, std::__1::locale::facet*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::global(std::__1::locale const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::has_facet(std::__1::locale::id&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::id::__get()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::use_facet(std::__1::locale::id&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::operator==(std::__1::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::facet::~facet()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::facet::~facet()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::facet::__on_zero_shared()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::locale::id::__init()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate_byname<char>::collate_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::(anonymous namespace)::__throw_runtime_error(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate_byname<char>::collate_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate_byname<char>::collate_byname(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate_byname<char>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate_byname<char>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate_byname<char>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate_byname<char>::do_compare(char const*, char const*, char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate_byname<char>::do_transform(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate_byname<wchar_t>::collate_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate_byname<wchar_t>::collate_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate_byname<wchar_t>::collate_byname(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate_byname<wchar_t>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate_byname<wchar_t>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate_byname<wchar_t>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate_byname<wchar_t>::do_compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::collate_byname<wchar_t>::do_transform(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<wchar_t>::~ctype()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<wchar_t>::~ctype()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<wchar_t>::~ctype()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<wchar_t>::do_is(unsigned int, wchar_t) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<char>::classic_table()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<wchar_t>::do_is(wchar_t const*, wchar_t const*, unsigned int*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<wchar_t>::do_scan_is(unsigned int, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<wchar_t>::do_scan_not(unsigned int, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<wchar_t>::do_toupper(wchar_t) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<wchar_t>::do_toupper(wchar_t*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<wchar_t>::do_tolower(wchar_t) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<wchar_t>::do_tolower(wchar_t*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<wchar_t>::do_widen(char) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<wchar_t>::do_widen(char const*, char const*, wchar_t*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<wchar_t>::do_narrow(wchar_t, char) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<wchar_t>::do_narrow(wchar_t const*, wchar_t const*, char, char*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<char>::ctype(unsigned int const*, bool, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<char>::ctype(unsigned int const*, bool, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<char>::~ctype()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<char>::~ctype()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<char>::~ctype()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<char>::do_toupper(char) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<char>::do_toupper(char*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<char>::do_tolower(char) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<char>::do_tolower(char*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<char>::do_widen(char) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<char>::do_widen(char const*, char const*, char*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<char>::do_narrow(char, char) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype<char>::do_narrow(char const*, char const*, char, char*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<char>::ctype_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<char>::ctype_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<char>::ctype_byname(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<char>::~ctype_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<char>::~ctype_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<char>::~ctype_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<char>::do_toupper(char) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<char>::do_toupper(char*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<char>::do_tolower(char) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<char>::do_tolower(char*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<wchar_t>::ctype_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<wchar_t>::ctype_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<wchar_t>::ctype_byname(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<wchar_t>::~ctype_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<wchar_t>::~ctype_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<wchar_t>::~ctype_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<wchar_t>::do_is(unsigned int, wchar_t) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<wchar_t>::do_is(wchar_t const*, wchar_t const*, unsigned int*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<wchar_t>::do_scan_is(unsigned int, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<wchar_t>::do_scan_not(unsigned int, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<wchar_t>::do_toupper(wchar_t) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<wchar_t>::do_toupper(wchar_t*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<wchar_t>::do_tolower(wchar_t) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<wchar_t>::do_tolower(wchar_t*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<wchar_t>::do_widen(char) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<wchar_t>::do_widen(char const*, char const*, wchar_t*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<wchar_t>::do_narrow(wchar_t, char) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ctype_byname<wchar_t>::do_narrow(wchar_t const*, wchar_t const*, char, char*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char, char, __mbstate_t>::do_out(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char, char, __mbstate_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char, char, __mbstate_t>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char, char, __mbstate_t>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char, char, __mbstate_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char, char, __mbstate_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<wchar_t, char, __mbstate_t>::codecvt(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<wchar_t, char, __mbstate_t>::codecvt(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<wchar_t, char, __mbstate_t>::codecvt(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<wchar_t, char, __mbstate_t>::codecvt(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<wchar_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<wchar_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<wchar_t, char, __mbstate_t>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<wchar_t, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<wchar_t, char, __mbstate_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<wchar_t, char, __mbstate_t>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<wchar_t, char, __mbstate_t>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<wchar_t, char, __mbstate_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<wchar_t, char, __mbstate_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char16_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char16_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char16_t, char, __mbstate_t>::do_out(__mbstate_t&, char16_t const*, char16_t const*, char16_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::utf16_to_utf8(unsigned short const*, unsigned short const*, unsigned short const*&, unsigned char*, unsigned char*, unsigned char*&, unsigned long, std::__1::codecvt_mode)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char16_t, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char16_t*, char16_t*, char16_t*&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::utf8_to_utf16(unsigned char const*, unsigned char const*, unsigned char const*&, unsigned short*, unsigned short*, unsigned short*&, unsigned long, std::__1::codecvt_mode)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char16_t, char, __mbstate_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char16_t, char, __mbstate_t>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char16_t, char, __mbstate_t>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char16_t, char, __mbstate_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::utf8_to_utf16_length(unsigned char const*, unsigned char const*, unsigned long, unsigned long, std::__1::codecvt_mode)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char16_t, char, __mbstate_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char32_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char32_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char32_t, char, __mbstate_t>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::ucs4_to_utf8(unsigned int const*, unsigned int const*, unsigned int const*&, unsigned char*, unsigned char*, unsigned char*&, unsigned long, std::__1::codecvt_mode)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char32_t, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char32_t*, char32_t*, char32_t*&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::utf8_to_ucs4(unsigned char const*, unsigned char const*, unsigned char const*&, unsigned int*, unsigned int*, unsigned int*&, unsigned long, std::__1::codecvt_mode)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char32_t, char, __mbstate_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char32_t, char, __mbstate_t>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char32_t, char, __mbstate_t>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char32_t, char, __mbstate_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::utf8_to_ucs4_length(unsigned char const*, unsigned char const*, unsigned long, unsigned long, std::__1::codecvt_mode)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::codecvt<char32_t, char, __mbstate_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<wchar_t>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<wchar_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<wchar_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<wchar_t>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<wchar_t>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<wchar_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<wchar_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<char16_t>::do_out(__mbstate_t&, char16_t const*, char16_t const*, char16_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<char16_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char16_t*, char16_t*, char16_t*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<char16_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<char16_t>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<char16_t>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<char16_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<char16_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<char32_t>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<char32_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char32_t*, char32_t*, char32_t*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<char32_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<char32_t>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<char32_t>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<char32_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8<char32_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<wchar_t, false>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::ucs4_to_utf16be(unsigned int const*, unsigned int const*, unsigned int const*&, unsigned char*, unsigned char*, unsigned char*&, unsigned long, std::__1::codecvt_mode)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<wchar_t, false>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::utf16be_to_ucs4(unsigned char const*, unsigned char const*, unsigned char const*&, unsigned int*, unsigned int*, unsigned int*&, unsigned long, std::__1::codecvt_mode)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<wchar_t, false>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<wchar_t, false>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<wchar_t, false>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<wchar_t, false>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::utf16be_to_ucs4_length(unsigned char const*, unsigned char const*, unsigned long, unsigned long, std::__1::codecvt_mode)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<wchar_t, false>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<wchar_t, true>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::ucs4_to_utf16le(unsigned int const*, unsigned int const*, unsigned int const*&, unsigned char*, unsigned char*, unsigned char*&, unsigned long, std::__1::codecvt_mode)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<wchar_t, true>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::utf16le_to_ucs4(unsigned char const*, unsigned char const*, unsigned char const*&, unsigned int*, unsigned int*, unsigned int*&, unsigned long, std::__1::codecvt_mode)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<wchar_t, true>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<wchar_t, true>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<wchar_t, true>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<wchar_t, true>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::utf16le_to_ucs4_length(unsigned char const*, unsigned char const*, unsigned long, unsigned long, std::__1::codecvt_mode)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<wchar_t, true>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char16_t, false>::do_out(__mbstate_t&, char16_t const*, char16_t const*, char16_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char16_t, false>::do_in(__mbstate_t&, char const*, char const*, char const*&, char16_t*, char16_t*, char16_t*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char16_t, false>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char16_t, false>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char16_t, false>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char16_t, false>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char16_t, false>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char16_t, true>::do_out(__mbstate_t&, char16_t const*, char16_t const*, char16_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char16_t, true>::do_in(__mbstate_t&, char const*, char const*, char const*&, char16_t*, char16_t*, char16_t*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char16_t, true>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char16_t, true>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char16_t, true>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char16_t, true>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char16_t, true>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char32_t, false>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char32_t, false>::do_in(__mbstate_t&, char const*, char const*, char const*&, char32_t*, char32_t*, char32_t*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char32_t, false>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char32_t, false>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char32_t, false>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char32_t, false>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char32_t, false>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char32_t, true>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char32_t, true>::do_in(__mbstate_t&, char const*, char const*, char const*&, char32_t*, char32_t*, char32_t*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char32_t, true>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char32_t, true>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char32_t, true>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char32_t, true>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf16<char32_t, true>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<wchar_t>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::utf16_to_utf8(unsigned int const*, unsigned int const*, unsigned int const*&, unsigned char*, unsigned char*, unsigned char*&, unsigned long, std::__1::codecvt_mode)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<wchar_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::utf8_to_utf16(unsigned char const*, unsigned char const*, unsigned char const*&, unsigned int*, unsigned int*, unsigned int*&, unsigned long, std::__1::codecvt_mode)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<wchar_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<wchar_t>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<wchar_t>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<wchar_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<wchar_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<char16_t>::do_out(__mbstate_t&, char16_t const*, char16_t const*, char16_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<char16_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char16_t*, char16_t*, char16_t*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<char16_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<char16_t>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<char16_t>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<char16_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<char16_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<char32_t>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<char32_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char32_t*, char32_t*, char32_t*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<char32_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<char32_t>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<char32_t>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<char32_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__codecvt_utf8_utf16<char32_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__narrow_to_utf8<16ul>::~__narrow_to_utf8()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__narrow_to_utf8<16ul>::~__narrow_to_utf8()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__narrow_to_utf8<16ul>::~__narrow_to_utf8()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__narrow_to_utf8<32ul>::~__narrow_to_utf8()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__narrow_to_utf8<32ul>::~__narrow_to_utf8()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__widen_from_utf8<16ul>::~__widen_from_utf8()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__widen_from_utf8<16ul>::~__widen_from_utf8()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__widen_from_utf8<16ul>::~__widen_from_utf8()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__widen_from_utf8<32ul>::~__widen_from_utf8()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__widen_from_utf8<32ul>::~__widen_from_utf8()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<char>::numpunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<char>::numpunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<wchar_t>::numpunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<wchar_t>::numpunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<char>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<char>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<char>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<wchar_t>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<wchar_t>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<wchar_t>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<char>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<wchar_t>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<char>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<wchar_t>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<char>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<wchar_t>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<char>::do_truename() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<wchar_t>::do_truename() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::basic_string<std::nullptr_t>(wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<char>::do_falsename() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct<wchar_t>::do_falsename() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct_byname<char>::numpunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct_byname<char>::__init(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct_byname<char>::numpunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct_byname<char>::numpunct_byname(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct_byname<char>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct_byname<char>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct_byname<char>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::checked_string_to_char_convert(char&, char const*, _xlocale*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct_byname<wchar_t>::numpunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct_byname<wchar_t>::__init(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct_byname<wchar_t>::numpunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct_byname<wchar_t>::numpunct_byname(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct_byname<wchar_t>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct_byname<wchar_t>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::numpunct_byname<wchar_t>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::checked_string_to_wchar_convert(wchar_t&, char const*, _xlocale*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__num_get_base::__get_base(std::__1::ios_base&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_c_storage<char>::__weeks() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_c_storage<wchar_t>::__weeks() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_c_storage<char>::__months() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_c_storage<wchar_t>::__months() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_c_storage<char>::__am_pm() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_c_storage<wchar_t>::__am_pm() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_c_storage<char>::__x() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_c_storage<wchar_t>::__x() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_c_storage<char>::__X() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_c_storage<wchar_t>::__X() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_c_storage<char>::__c() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_c_storage<wchar_t>::__c() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_c_storage<char>::__r() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_c_storage<wchar_t>::__r() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get::__time_get(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get::__time_get(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get::__time_get(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get::__time_get(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get::~__time_get()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get::~__time_get()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_storage<char>::__analyze(char, std::__1::ctype<char> const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >* std::__1::__scan_keyword<char*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::ctype<char> >(char*&, char*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::ctype<char> const&, unsigned int&, bool)",
    "type": "CPP"
  },
  {
    "name": "t int std::__1::__get_up_to_n_digits<char, char*>(char*&, char*, unsigned int&, std::__1::ctype<char> const&, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_storage<wchar_t>::__analyze(char, std::__1::ctype<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >* std::__1::__scan_keyword<wchar_t*, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >*, std::__1::ctype<wchar_t> >(wchar_t*&, wchar_t*, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >*, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >*, std::__1::ctype<wchar_t> const&, unsigned int&, bool)",
    "type": "CPP"
  },
  {
    "name": "t int std::__1::__get_up_to_n_digits<wchar_t, wchar_t*>(wchar_t*&, wchar_t*, unsigned int&, std::__1::ctype<wchar_t> const&, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_storage<char>::init(std::__1::ctype<char> const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_storage<wchar_t>::init(std::__1::ctype<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_storage<char>::__time_get_storage(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__time_get_temp<char>::~__time_get_temp()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_storage<char>::__time_get_storage(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_storage<char>::__time_get_storage(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_storage<char>::__time_get_storage(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_storage<wchar_t>::__time_get_storage(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__time_get_temp<wchar_t>::~__time_get_temp()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_storage<wchar_t>::__time_get_storage(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_storage<wchar_t>::__time_get_storage(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_storage<wchar_t>::__time_get_storage(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_storage<char>::__do_date_order() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_get_storage<wchar_t>::__do_date_order() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_put::__time_put(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_put::__time_put(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_put::__time_put(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_put::__time_put(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_put::~__time_put()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__time_put::~__time_put()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, false>::init(char const*)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__init_pat<char>(std::__1::money_base::pattern&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, bool, char, char, char, char)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<char, true>::init(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, false>::init(char const*)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__init_pat<wchar_t>(std::__1::money_base::pattern&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >&, bool, char, char, char, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::moneypunct_byname<wchar_t, true>::init(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__codecvt_utf8_utf16<wchar_t>::~__codecvt_utf8_utf16()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__codecvt_utf8_utf16<wchar_t>::~__codecvt_utf8_utf16()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__codecvt_utf8_utf16<char16_t>::~__codecvt_utf8_utf16()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__codecvt_utf8_utf16<char16_t>::~__codecvt_utf8_utf16()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::~num_get()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::~num_get()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~num_get()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~num_get()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::~num_put()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::~num_put()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~num_put()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~num_put()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_date_order() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__weeks() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__months() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__am_pm() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__c() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__r() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__x() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__X() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to std::__1::time_get_byname<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__weeks() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to std::__1::time_get_byname<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__months() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to std::__1::time_get_byname<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__am_pm() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to std::__1::time_get_byname<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__c() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to std::__1::time_get_byname<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__r() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to std::__1::time_get_byname<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__x() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to std::__1::time_get_byname<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__X() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_date_order() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__weeks() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__months() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__am_pm() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__c() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__r() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__x() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__X() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to std::__1::time_get_byname<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__weeks() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to std::__1::time_get_byname<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__months() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to std::__1::time_get_byname<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__am_pm() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to std::__1::time_get_byname<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__c() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to std::__1::time_get_byname<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__r() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to std::__1::time_get_byname<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__x() const",
    "type": "CPP"
  },
  {
    "name": "t non-virtual thunk to std::__1::time_get_byname<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__X() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::~time_put()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::~time_put()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~time_put()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~time_put()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_put_byname<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::~time_put_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_put_byname<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::~time_put_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_put_byname<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~time_put_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_put_byname<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~time_put_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct<char, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct<char, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct<char, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct<char, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct<wchar_t, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct<wchar_t, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct<wchar_t, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct<wchar_t, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct_byname<char, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct_byname<char, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct_byname<char, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct_byname<char, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct_byname<wchar_t, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct_byname<wchar_t, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct_byname<wchar_t, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct_byname<wchar_t, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::money_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::money_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::money_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::money_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::money_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::money_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::money_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::money_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::messages<char>::~messages()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::messages<char>::~messages()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::messages<wchar_t>::~messages()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::messages<wchar_t>::~messages()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::messages_byname<char>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::messages_byname<char>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::messages_byname<wchar_t>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::messages_byname<wchar_t>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__libcpp_unique_locale::~__libcpp_unique_locale()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::vector<std::__1::locale::facet*, std::__1::__sso_allocator<std::__1::locale::facet*, 28ul> >::vector(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::vector<std::__1::locale::facet*, std::__1::__sso_allocator<std::__1::locale::facet*, 28ul> >::__vallocate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::length_error::length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::enable_if<(__is_forward_iterator<std::__1::locale::facet**>::value) && (is_constructible<std::__1::locale::facet*, std::__1::iterator_traits<std::__1::locale::facet**>::reference>::value), void>::type std::__1::vector<std::__1::locale::facet*, std::__1::__sso_allocator<std::__1::locale::facet*, 28ul> >::assign<std::__1::locale::facet**>(std::__1::locale::facet**, std::__1::locale::facet**)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct_byname<char, false>::moneypunct_byname(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct_byname<char, true>::moneypunct_byname(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct_byname<wchar_t, false>::moneypunct_byname(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct_byname<wchar_t, true>::moneypunct_byname(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::time_get_byname(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_get_byname<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::time_get_byname(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::time_put(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::time_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::time_put(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::vector<std::__1::locale::facet*, std::__1::__sso_allocator<std::__1::locale::facet*, 28ul> >::__append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__split_buffer<std::__1::locale::facet*, std::__1::__sso_allocator<std::__1::locale::facet*, 28ul>&>::~__split_buffer()",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__call_once_proxy<std::__1::tuple<std::__1::(anonymous namespace)::__fake_bind&&> >(void*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__time_get_temp<char>::~__time_get_temp()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__time_get_temp<wchar_t>::~__time_get_temp()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__wrap_iter<char*> std::__1::__rotate_gcd<std::__1::__wrap_iter<char*> >(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__wrap_iter<wchar_t*> std::__1::__rotate_gcd<std::__1::__wrap_iter<wchar_t*> >(std::__1::__wrap_iter<wchar_t*>, std::__1::__wrap_iter<wchar_t*>, std::__1::__wrap_iter<wchar_t*>)",
    "type": "CPP"
  },
  {
    "name": "t long std::__1::__num_get_signed_integral<long>(char const*, char const*, unsigned int&, int)",
    "type": "CPP"
  },
  {
    "name": "t long long std::__1::__num_get_signed_integral<long long>(char const*, char const*, unsigned int&, int)",
    "type": "CPP"
  },
  {
    "name": "t unsigned short std::__1::__num_get_unsigned_integral<unsigned short>(char const*, char const*, unsigned int&, int)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__num_get_unsigned_integral<unsigned int>(char const*, char const*, unsigned int&, int)",
    "type": "CPP"
  },
  {
    "name": "t unsigned long std::__1::__num_get_unsigned_integral<unsigned long>(char const*, char const*, unsigned int&, int)",
    "type": "CPP"
  },
  {
    "name": "t unsigned long long std::__1::__num_get_unsigned_integral<unsigned long long>(char const*, char const*, unsigned int&, int)",
    "type": "CPP"
  },
  {
    "name": "t float std::__1::__num_get_float<float>(char const*, char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "t double std::__1::__num_get_float<double>(char const*, char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "t long double std::__1::__num_get_float<long double>(char const*, char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >::__test_for_eof() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >& std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__append_forward_unsafe<char*>(char*, char*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >& std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__append_forward_unsafe<wchar_t*>(wchar_t*, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__time_get_storage<char>::~__time_get_storage()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__time_get_storage<wchar_t>::~__time_get_storage()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct_byname<char, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct_byname<char, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct_byname<wchar_t, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::moneypunct_byname<wchar_t, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin_probe",
    "type": "CPP"
  },
  {
    "name": "t ___cxx_global_array_dtor",
    "type": "CPP"
  },
  {
    "name": "t ___cxx_global_array_dtor.82",
    "type": "CPP"
  },
  {
    "name": "t ___cxx_global_array_dtor.97",
    "type": "CPP"
  },
  {
    "name": "t ___cxx_global_array_dtor.121",
    "type": "CPP"
  },
  {
    "name": "t ___cxx_global_array_dtor.145",
    "type": "CPP"
  },
  {
    "name": "t ___cxx_global_array_dtor.148",
    "type": "CPP"
  },
  {
    "name": "T std::__1::bad_weak_ptr::~bad_weak_ptr()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::bad_weak_ptr::~bad_weak_ptr()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::bad_weak_ptr::~bad_weak_ptr()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::bad_weak_ptr::what() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_count::~__shared_count()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_count::~__shared_count()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_count::~__shared_count()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_weak_count::~__shared_weak_count()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_weak_count::~__shared_weak_count()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_weak_count::~__shared_weak_count()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_count::__add_shared()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_count::__release_shared()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_weak_count::__add_shared()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_weak_count::__add_weak()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_weak_count::__release_shared()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_weak_count::__release_weak()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_weak_count::lock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_weak_count::__get_deleter(std::type_info const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__sp_mut::lock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__sp_mut::unlock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__get_sp_mut(void const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::declare_reachable(void*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::declare_no_pointers(char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::undeclare_no_pointers(char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::get_pointer_safety()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__undeclare_reachable(void*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::align(unsigned long, unsigned long, void*&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::mutex::lock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::mutex::try_lock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::mutex::unlock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::recursive_mutex::recursive_mutex()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::recursive_mutex::recursive_mutex()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::recursive_mutex::~recursive_mutex()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::recursive_mutex::~recursive_mutex()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::recursive_mutex::lock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::recursive_mutex::unlock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::recursive_mutex::try_lock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::timed_mutex::timed_mutex()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::timed_mutex::timed_mutex()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::timed_mutex::~timed_mutex()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::timed_mutex::~timed_mutex()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::timed_mutex::lock()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unique_lock<std::__1::mutex>::~unique_lock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::timed_mutex::try_lock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::timed_mutex::unlock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::recursive_timed_mutex::recursive_timed_mutex()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::recursive_timed_mutex::recursive_timed_mutex()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::recursive_timed_mutex::~recursive_timed_mutex()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::recursive_timed_mutex::~recursive_timed_mutex()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::recursive_timed_mutex::lock()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::operator==(std::__1::__thread_id, std::__1::__thread_id)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::recursive_timed_mutex::try_lock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::recursive_timed_mutex::unlock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__call_once(unsigned long volatile&, void*, void (*)(void*))",
    "type": "CPP"
  },
  {
    "name": "T std::__1::mutex::~mutex()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::mutex::~mutex()",
    "type": "CPP"
  },
  {
    "name": "T std::__throw_bad_alloc()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_optional_access::~bad_optional_access()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_optional_access::~bad_optional_access()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_optional_access::~bad_optional_access()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_optional_access::what() const",
    "type": "CPP"
  },
  {
    "name": "T std::experimental::bad_optional_access::~bad_optional_access()",
    "type": "CPP"
  },
  {
    "name": "T std::experimental::bad_optional_access::~bad_optional_access()",
    "type": "CPP"
  },
  {
    "name": "T std::experimental::bad_optional_access::~bad_optional_access()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::random_device::random_device(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::random_device::random_device(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::random_device::~random_device()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::random_device::~random_device()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::random_device::operator()()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::random_device::entropy() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::regex_error::regex_error(std::__1::regex_constants::error_type)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::regex_error::regex_error(std::__1::regex_constants::error_type)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::regex_error::~regex_error()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::regex_error::~regex_error()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::regex_error::~regex_error()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__get_collation_name(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__get_classname(char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__match_any_but_newline<char>::__exec(std::__1::__state<char>&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__match_any_but_newline<wchar_t>::__exec(std::__1::__state<wchar_t>&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_mutex_base::__shared_mutex_base()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_mutex_base::__shared_mutex_base()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_mutex_base::lock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_mutex_base::try_lock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_mutex_base::unlock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_mutex_base::lock_shared()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_mutex_base::try_lock_shared()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__shared_mutex_base::unlock_shared()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::shared_timed_mutex::shared_timed_mutex()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::shared_timed_mutex::shared_timed_mutex()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::shared_timed_mutex::lock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::shared_timed_mutex::try_lock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::shared_timed_mutex::unlock()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::shared_timed_mutex::lock_shared()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::shared_timed_mutex::try_lock_shared()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::shared_timed_mutex::unlock_shared()",
    "type": "CPP"
  },
  {
    "name": "T std::logic_error::logic_error(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::logic_error::logic_error(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::logic_error::logic_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::logic_error::logic_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::logic_error::logic_error(std::logic_error const&)",
    "type": "CPP"
  },
  {
    "name": "T std::logic_error::logic_error(std::logic_error const&)",
    "type": "CPP"
  },
  {
    "name": "T std::logic_error::operator=(std::logic_error const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__libcpp_refstring::operator=(std::__1::__libcpp_refstring const&)",
    "type": "CPP"
  },
  {
    "name": "T std::runtime_error::runtime_error(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::runtime_error::runtime_error(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::runtime_error::runtime_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::runtime_error::runtime_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::runtime_error::runtime_error(std::runtime_error const&)",
    "type": "CPP"
  },
  {
    "name": "T std::runtime_error::runtime_error(std::runtime_error const&)",
    "type": "CPP"
  },
  {
    "name": "T std::runtime_error::operator=(std::runtime_error const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__basic_string_common<true>::__throw_length_error() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__basic_string_common<true>::__throw_out_of_range() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__init(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long, unsigned long, std::__1::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long, unsigned long, std::__1::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_string()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_string()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::operator=(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::assign(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::operator=(char)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::resize(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::append(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::at(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::at(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::append(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::append(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__grow_by_and_replace(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::append(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__grow_by(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::push_back(char)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::assign(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::assign(char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::assign(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::insert(unsigned long, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::insert(unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::insert(unsigned long, char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::insert(unsigned long, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::insert(std::__1::__wrap_iter<char const*>, char)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::erase(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::replace(unsigned long, unsigned long, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::replace(unsigned long, unsigned long, char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::replace(unsigned long, unsigned long, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::copy(char*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::find(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::find(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::rfind(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::compare(unsigned long, unsigned long, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::compare(char const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::compare(unsigned long, unsigned long, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::compare(unsigned long, unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__init(char const*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__init(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::basic_string(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__init(wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::basic_string(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::basic_string(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, std::__1::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::basic_string(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, std::__1::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::basic_string(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned long, unsigned long, std::__1::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::basic_string(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned long, unsigned long, std::__1::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::~basic_string()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::~basic_string()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::operator=(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::assign(wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::operator=(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::resize(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::append(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::at(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::at(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::append(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::append(wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__grow_by_and_replace(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::append(wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__grow_by(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::push_back(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::assign(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::assign(wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::assign(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::insert(unsigned long, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::insert(unsigned long, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::insert(unsigned long, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::insert(unsigned long, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::insert(std::__1::__wrap_iter<wchar_t const*>, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::erase(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::replace(unsigned long, unsigned long, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::replace(unsigned long, unsigned long, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::replace(unsigned long, unsigned long, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::replace(unsigned long, unsigned long, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::copy(wchar_t*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::find(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::find(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::rfind(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::rfind(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::find_first_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::find_last_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::find_first_not_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::find_last_not_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::compare(unsigned long, unsigned long, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::compare(wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::compare(unsigned long, unsigned long, wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::compare(unsigned long, unsigned long, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__init(wchar_t const*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__init(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > std::__1::operator+<char, std::__1::char_traits<char>, std::__1::allocator<char> >(char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::stoi(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::stoi(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned long*, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::stol(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::stol(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned long*, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::stoul(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::stoul(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned long*, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::stoll(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::stoll(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned long*, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::stoull(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::stoull(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned long*, int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::stof(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::stof(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::stod(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::stod(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::stold(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::stold(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::to_string(int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::to_string(long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::to_string(long long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::to_string(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::to_string(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::to_string(unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::to_wstring(int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::to_wstring(long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::to_wstring(long long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::to_wstring(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::to_wstring(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::to_wstring(unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::to_string(float)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::(anonymous namespace)::initial_string<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >::operator()() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::to_string(double)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::to_string(long double)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::to_wstring(float)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::(anonymous namespace)::initial_string<std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > >::operator()() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::to_wstring(double)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::to_wstring(long double)",
    "type": "CPP"
  },
  {
    "name": "t std::out_of_range::out_of_range(char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > std::__1::operator+<char, std::__1::char_traits<char>, std::__1::allocator<char> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string_view<char, std::__1::char_traits<char> >::compare(std::__1::basic_string_view<char, std::__1::char_traits<char> >) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string_view<wchar_t, std::__1::char_traits<wchar_t> >::compare(std::__1::basic_string_view<wchar_t, std::__1::char_traits<wchar_t> >) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::strstreambuf(long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::strstreambuf(long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::strstreambuf(void* (*)(unsigned long), void (*)(void*))",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::strstreambuf(void* (*)(unsigned long), void (*)(void*))",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::__init(char*, long, char*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::strstreambuf(char*, long, char*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::strstreambuf(char*, long, char*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::strstreambuf(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::strstreambuf(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::strstreambuf(signed char*, long, signed char*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::strstreambuf(signed char*, long, signed char*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::strstreambuf(signed char const*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::strstreambuf(signed char const*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::strstreambuf(unsigned char*, long, unsigned char*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::strstreambuf(unsigned char*, long, unsigned char*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::strstreambuf(unsigned char const*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::strstreambuf(unsigned char const*, long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::~strstreambuf()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::~strstreambuf()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::~strstreambuf()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::swap(std::__1::strstreambuf&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::freeze(bool)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::str()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::pcount() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::overflow(int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::pbackfail(int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::underflow()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::seekoff(long long, std::__1::ios_base::seekdir, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstreambuf::seekpos(std::__1::fpos<__mbstate_t>, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::istrstream::~istrstream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::istrstream::~istrstream()",
    "type": "CPP"
  },
  {
    "name": "T virtual thunk to std::__1::istrstream::~istrstream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::istrstream::~istrstream()",
    "type": "CPP"
  },
  {
    "name": "T virtual thunk to std::__1::istrstream::~istrstream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ostrstream::~ostrstream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ostrstream::~ostrstream()",
    "type": "CPP"
  },
  {
    "name": "T virtual thunk to std::__1::ostrstream::~ostrstream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::ostrstream::~ostrstream()",
    "type": "CPP"
  },
  {
    "name": "T virtual thunk to std::__1::ostrstream::~ostrstream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to std::__1::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "T virtual thunk to std::__1::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to std::__1::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "T virtual thunk to std::__1::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::error_category::error_category()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::error_category::~error_category()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::error_category::~error_category()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::error_category::~error_category()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::error_category::default_error_condition(int) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::error_category::equivalent(int, std::__1::error_condition const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::error_category::equivalent(std::__1::error_code const&, int) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__do_message::message(int) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__generic_error_category::name() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__generic_error_category::message(int) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::generic_category()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__generic_error_category::~__generic_error_category()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__system_error_category::name() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__system_error_category::message(int) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__system_error_category::default_error_condition(int) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::system_category()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__system_error_category::~__system_error_category()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::error_condition::message() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::error_code::message() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::system_error::__init(std::__1::error_code const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::system_error::system_error(std::__1::error_code, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::system_error::system_error(std::__1::error_code, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::system_error::system_error(std::__1::error_code, char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::system_error::system_error(std::__1::error_code, char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::system_error::system_error(std::__1::error_code)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::system_error::system_error(std::__1::error_code)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::system_error::system_error(int, std::__1::error_category const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::system_error::system_error(int, std::__1::error_category const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::system_error::system_error(int, std::__1::error_category const&, char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::system_error::system_error(int, std::__1::error_category const&, char const*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::system_error::system_error(int, std::__1::error_category const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::system_error::system_error(int, std::__1::error_category const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::system_error::~system_error()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::system_error::~system_error()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::system_error::~system_error()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__throw_system_error(int, char const*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__generic_error_category::~__generic_error_category()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__system_error_category::~__system_error_category()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::thread::~thread()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::thread::~thread()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::thread::join()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::thread::detach()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::thread::hardware_concurrency()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::this_thread::sleep_for(std::__1::chrono::duration<long long, std::__1::ratio<l, 1000000000l> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__thread_local_data()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__thread_struct_imp::~__thread_struct_imp()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::vector<std::__1::pair<std::__1::condition_variable*, std::__1::mutex*>, std::__1::__hidden_allocator<std::__1::pair<std::__1::condition_variable*, std::__1::mutex*> > >::~vector()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::vector<std::__1::__assoc_sub_state*, std::__1::__hidden_allocator<std::__1::__assoc_sub_state*> >::~vector()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__thread_struct_imp::notify_all_at_thread_exit(std::__1::condition_variable*, std::__1::mutex*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__thread_struct_imp::__make_ready_at_thread_exit(std::__1::__assoc_sub_state*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__thread_struct::__thread_struct()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__thread_struct::__thread_struct()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__thread_struct::~__thread_struct()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__thread_struct::~__thread_struct()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__thread_struct::notify_all_at_thread_exit(std::__1::condition_variable*, std::__1::mutex*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__thread_struct::__make_ready_at_thread_exit(std::__1::__assoc_sub_state*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__thread_specific_ptr<std::__1::__thread_struct>::__thread_specific_ptr()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__thread_specific_ptr<std::__1::__thread_struct>::__at_thread_exit(void*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::valarray<unsigned long>::valarray(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::valarray<unsigned long>::valarray(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::valarray<unsigned long>::~valarray()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::valarray<unsigned long>::~valarray()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::valarray<unsigned long>::resize(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::gslice::__init(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::bad_variant_access::what() const",
    "type": "CPP"
  },
  {
    "name": "t std::bad_variant_access::~bad_variant_access()",
    "type": "CPP"
  },
  {
    "name": "t std::bad_variant_access::~bad_variant_access()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__vector_base_common<true>::__throw_length_error() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__vector_base_common<true>::__throw_out_of_range() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::_FilesystemClock::now()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::filesystem_error::~filesystem_error()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::filesystem_error::~filesystem_error()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::filesystem_error::~filesystem_error()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::filesystem_error::__create_what(int)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__absolute(std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::__do_absolute(std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::path*, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__canonical(std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::detail::(anonymous namespace)::ErrorHandler<std::__1::__fs::filesystem::path>::report(std::__1::error_code const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__copy(std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::copy_options, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::detail::(anonymous namespace)::posix_lstat(std::__1::__fs::filesystem::path const&, stat&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::detail::(anonymous namespace)::posix_stat(std::__1::__fs::filesystem::path const&, stat&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::detail::(anonymous namespace)::ErrorHandler<void>::report(std::__1::error_code const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__copy_symlink(std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__create_symlink(std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__create_hard_link(std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__copy_file(std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::copy_options, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::path::filename() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__create_directory(std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::detail::(anonymous namespace)::ErrorHandler<bool>::report(std::__1::error_code const&) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::detail::(anonymous namespace)::FileDescriptor::~FileDescriptor()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__read_symlink(std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__create_directories(std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::path::parent_path() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__create_directory(std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__create_directory_symlink(std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__current_path(std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__current_path(std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__equivalent(std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__file_size(std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::detail::(anonymous namespace)::ErrorHandler<unsigned long>::report(std::__1::error_code const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__hard_link_count(std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__fs_is_empty(std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__last_write_time(std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::__extract_last_write_time(std::__1::__fs::filesystem::path const&, stat const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__last_write_time(std::__1::__fs::filesystem::path const&, std::__1::chrono::time_point<std::__1::__fs::filesystem::_FilesystemClock, std::__1::chrono::duration<__int128, std::__1::ratio<l, 1000000000l> > >, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__permissions(std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::perms, std::__1::__fs::filesystem::perm_options, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__remove(std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__remove_all(std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::(anonymous namespace)::remove_all_impl(std::__1::__fs::filesystem::path const&, std::__1::error_code&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__rename(std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__resize_file(std::__1::__fs::filesystem::path const&, unsigned long, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__space(std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__status(std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__symlink_status(std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__temp_directory_path(std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::path std::__1::__fs::filesystem::detail::(anonymous namespace)::ErrorHandler<std::__1::__fs::filesystem::path>::report<std::__1::__fs::filesystem::path>(std::__1::error_code const&, char const*, std::__1::__fs::filesystem::path const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::__weakly_canonical(std::__1::__fs::filesystem::path const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::(anonymous namespace)::parser::PathParser::operator--()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::enable_if<__is_pathable<std::__1::basic_string_view<char, std::__1::char_traits<char> > >::value, std::__1::__fs::filesystem::path&>::type std::__1::__fs::filesystem::path::assign<std::__1::basic_string_view<char, std::__1::char_traits<char> > >(std::__1::basic_string_view<char, std::__1::char_traits<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::path::lexically_normal() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::path::replace_extension(std::__1::__fs::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::path::extension() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::path::__root_name() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::path::__root_directory() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::path::__root_path_raw() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::path::__relative_path() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::path::__parent_path() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::path::__filename() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::path::__stem() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::(anonymous namespace)::parser::separate_filename(std::__1::basic_string_view<char, std::__1::char_traits<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::path::__extension() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::vector<std::__1::pair<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::__fs::filesystem::PathPartKind>, std::__1::allocator<std::__1::pair<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::__fs::filesystem::PathPartKind> > >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::path::lexically_relative(std::__1::__fs::filesystem::path const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::path::__compare(std::__1::basic_string_view<char, std::__1::char_traits<char> >) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::hash_value(std::__1::__fs::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::hash<std::__1::basic_string_view<char, std::__1::char_traits<char> > >::operator()(std::__1::basic_string_view<char, std::__1::char_traits<char> >) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::path::begin() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::path::end() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::path::iterator::__increment()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::path::iterator::__decrement()",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::directory_entry::__do_refresh()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::filesystem_error::what() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::detail::(anonymous namespace)::format_string_imp(char const*, ...)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::detail::(anonymous namespace)::create_file_status(std::__1::error_code&, std::__1::__fs::filesystem::path const&, stat const&, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string<std::nullptr_t>(char const*)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__fs::filesystem::__throw_filesystem_error<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::__fs::filesystem::path const&, std::__1::error_code const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::__fs::filesystem::path const&, std::__1::error_code const&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__fs::filesystem::__throw_filesystem_error<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::path const&, std::__1::error_code const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::path const&, std::__1::error_code const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::filesystem_error::filesystem_error(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::error_code)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::filesystem_error::filesystem_error(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::error_code)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<std::__1::__fs::filesystem::filesystem_error::_Storage, std::__1::allocator<std::__1::__fs::filesystem::filesystem_error::_Storage> >::__shared_ptr_emplace<std::__1::__fs::filesystem::path, std::__1::__fs::filesystem::path>(std::__1::allocator<std::__1::__fs::filesystem::filesystem_error::_Storage>, std::__1::__fs::filesystem::path&&, std::__1::__fs::filesystem::path&&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<std::__1::__fs::filesystem::filesystem_error::_Storage, std::__1::allocator<std::__1::__fs::filesystem::filesystem_error::_Storage> >::~__shared_ptr_emplace()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<std::__1::__fs::filesystem::filesystem_error::_Storage, std::__1::allocator<std::__1::__fs::filesystem::filesystem_error::_Storage> >::~__shared_ptr_emplace()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<std::__1::__fs::filesystem::filesystem_error::_Storage, std::__1::allocator<std::__1::__fs::filesystem::filesystem_error::_Storage> >::__on_zero_shared()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<std::__1::__fs::filesystem::filesystem_error::_Storage, std::__1::allocator<std::__1::__fs::filesystem::filesystem_error::_Storage> >::__on_zero_shared_weak()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::filesystem_error::_Storage::_Storage(std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::filesystem_error::filesystem_error(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::__fs::filesystem::path const&, std::__1::error_code)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::filesystem_error::filesystem_error(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::__fs::filesystem::path const&, std::__1::error_code)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::filesystem_error::filesystem_error(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::path const&, std::__1::error_code)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__shared_ptr_emplace<std::__1::__fs::filesystem::filesystem_error::_Storage, std::__1::allocator<std::__1::__fs::filesystem::filesystem_error::_Storage> >::__shared_ptr_emplace<std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::path const&>(std::__1::allocator<std::__1::__fs::filesystem::filesystem_error::_Storage>, std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::path::operator/=(std::__1::__fs::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::(anonymous namespace)::parser::PathParser::increment()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_out_of_range(char const*)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::vector<std::__1::pair<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::__fs::filesystem::PathPartKind>, std::__1::allocator<std::__1::pair<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::__fs::filesystem::PathPartKind> > >::__emplace_back_slow_path<std::__1::basic_string_view<char, std::__1::char_traits<char> >&, std::__1::__fs::filesystem::PathPartKind&>(std::__1::basic_string_view<char, std::__1::char_traits<char> >&, std::__1::__fs::filesystem::PathPartKind&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__split_buffer<std::__1::pair<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::__fs::filesystem::PathPartKind>, std::__1::allocator<std::__1::pair<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::__fs::filesystem::PathPartKind> >&>::__split_buffer(unsigned long, unsigned long, std::__1::allocator<std::__1::pair<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::__fs::filesystem::PathPartKind> >&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__murmur2_or_cityhash<unsigned long, 64ul>::operator()(void const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__murmur2_or_cityhash<unsigned long, 64ul>::__hash_len_0_to_16(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__murmur2_or_cityhash<unsigned long, 64ul>::__hash_len_17_to_32(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__murmur2_or_cityhash<unsigned long, 64ul>::__hash_len_33_to_64(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::path::path<char*, void>(char* const&, std::__1::__fs::filesystem::path::format)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::detail::(anonymous namespace)::FileDescriptor::refresh_status(std::__1::error_code&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::path::path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::__fs::filesystem::path::format)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::path::path<char const*, void>(char const* const&, std::__1::__fs::filesystem::path::format)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::path::path<char [1], void>(char const (&) [1], std::__1::__fs::filesystem::path::format)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::vector<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::allocator<std::__1::basic_string_view<char, std::__1::char_traits<char> > > >::__push_back_slow_path<std::__1::basic_string_view<char, std::__1::char_traits<char> > >(std::__1::basic_string_view<char, std::__1::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__split_buffer<std::__1::basic_string_view<char, std::__1::char_traits<char> >, std::__1::allocator<std::__1::basic_string_view<char, std::__1::char_traits<char> > >&>::__split_buffer(unsigned long, unsigned long, std::__1::allocator<std::__1::basic_string_view<char, std::__1::char_traits<char> > >&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::enable_if<__is_pathable<std::__1::basic_string_view<char, std::__1::char_traits<char> > >::value, std::__1::__fs::filesystem::path&>::type std::__1::__fs::filesystem::path::append<std::__1::basic_string_view<char, std::__1::char_traits<char> > >(std::__1::basic_string_view<char, std::__1::char_traits<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::path::path<char [2], void>(char const (&) [2], std::__1::__fs::filesystem::path::format)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::enable_if<__is_pathable<char [3]>::value, std::__1::__fs::filesystem::path&>::type std::__1::__fs::filesystem::path::append<char [3]>(char const (&) [3])",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::directory_iterator::directory_iterator(std::__1::__fs::filesystem::path const&, std::__1::error_code*, std::__1::__fs::filesystem::directory_options)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::detail::(anonymous namespace)::ErrorHandler<void>::report(std::__1::error_code const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::directory_iterator::directory_iterator(std::__1::__fs::filesystem::path const&, std::__1::error_code*, std::__1::__fs::filesystem::directory_options)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::directory_iterator::__increment(std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__fs::filesystem::__dir_stream::advance(std::__1::error_code&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__fs::filesystem::detail::(anonymous namespace)::ErrorHandler<void>::report<std::__1::__fs::filesystem::path>(std::__1::error_code const&, char const*, std::__1::__fs::filesystem::path const&) const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::directory_iterator::__dereference() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::recursive_directory_iterator::recursive_directory_iterator(std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::directory_options, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::recursive_directory_iterator::recursive_directory_iterator(std::__1::__fs::filesystem::path const&, std::__1::__fs::filesystem::directory_options, std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::recursive_directory_iterator::__pop(std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::recursive_directory_iterator::__advance(std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::recursive_directory_iterator::options() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::recursive_directory_iterator::depth() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::recursive_directory_iterator::__dereference() const",
    "type": "CPP"
  },
  {
    "name": "T std::__1::__fs::filesystem::recursive_directory_iterator::__increment(std::__1::error_code*)",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/libobjc.A.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "A __objc_empty_vtable",
    "type": "CPP"
  },
  {
    "name": "T __objc_init",
    "type": "CPP"
  },
  {
    "name": "t _map_images_nolock",
    "type": "CPP"
  },
  {
    "name": "t __getObjcImageInfo",
    "type": "CPP"
  },
  {
    "name": "t _getObjc2SelectorRefs(header_info const*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "t _getObjc2MessageRefs(header_info const*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "t objc_opt::objc_stringhash_t::getIndex(char const*) const",
    "type": "CPP"
  },
  {
    "name": "T _NXCreateMapTable",
    "type": "CPP"
  },
  {
    "name": "T _NXCreateMapTableFromZone",
    "type": "CPP"
  },
  {
    "name": "T _NXCreateHashTable",
    "type": "CPP"
  },
  {
    "name": "T _NXCreateHashTableFromZone",
    "type": "CPP"
  },
  {
    "name": "T _NXHashGet",
    "type": "CPP"
  },
  {
    "name": "t hashPrototype(void const*, void const*)",
    "type": "CPP"
  },
  {
    "name": "t isEqualPrototype(void const*, void const*, void const*)",
    "type": "CPP"
  },
  {
    "name": "T _NXHashInsert",
    "type": "CPP"
  },
  {
    "name": "t __NXHashRehashToCapacity",
    "type": "CPP"
  },
  {
    "name": "T _NXNextHashState",
    "type": "CPP"
  },
  {
    "name": "t freeBuckets(NXHashTable*, int)",
    "type": "CPP"
  },
  {
    "name": "T _NXNoEffectFree",
    "type": "CPP"
  },
  {
    "name": "T _NXPtrHash",
    "type": "CPP"
  },
  {
    "name": "t TimeLogger::log(char const*)",
    "type": "CPP"
  },
  {
    "name": "t remapClass(objc_class*)",
    "type": "CPP"
  },
  {
    "name": "t protocols()",
    "type": "CPP"
  },
  {
    "name": "t _getObjc2ProtocolList(header_info const*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "t getProtocol(char const*)",
    "type": "CPP"
  },
  {
    "name": "T _NXMapGet",
    "type": "CPP"
  },
  {
    "name": "t _NXMapMember(_NXMapTable*, void const*, void**)",
    "type": "CPP"
  },
  {
    "name": "t _mapStrHash(_NXMapTable*, void const*)",
    "type": "CPP"
  },
  {
    "name": "t copySwiftV1MangledName(char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "t _getPreoptimizedProtocol",
    "type": "CPP"
  },
  {
    "name": "T _NXMapInsert",
    "type": "CPP"
  },
  {
    "name": "t _mapStrIsEqual(_NXMapTable*, void const*, void const*)",
    "type": "CPP"
  },
  {
    "name": "t _NXMapRehash(_NXMapTable*)",
    "type": "CPP"
  },
  {
    "name": "t addSubclass(objc_class*, objc_class*)",
    "type": "CPP"
  },
  {
    "name": "t prepareMethodLists(objc_class*, method_list_t**, int, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "t addMethod(objc_class*, objc_selector*, void (*)(), char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "t getMethodNoSuper_nolock(objc_class*, objc_selector*)",
    "type": "CPP"
  },
  {
    "name": "t search_method_list(method_list_t const*, objc_selector*)",
    "type": "CPP"
  },
  {
    "name": "T _NXMapRemove",
    "type": "CPP"
  },
  {
    "name": "t _mapPtrHash(_NXMapTable*, void const*)",
    "type": "CPP"
  },
  {
    "name": "T _NXPtrIsEqual",
    "type": "CPP"
  },
  {
    "name": "t flushCaches(objc_class*)",
    "type": "CPP"
  },
  {
    "name": "t _cache_erase_nolock",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in flushCaches(objc_class*)",
    "type": "CPP"
  },
  {
    "name": "t _mapPtrIsEqual(_NXMapTable*, void const*, void const*)",
    "type": "CPP"
  },
  {
    "name": "t _load_images",
    "type": "CPP"
  },
  {
    "name": "T _objc_collectingEnabled",
    "type": "CPP"
  },
  {
    "name": "T _class_createInstance",
    "type": "CPP"
  },
  {
    "name": "T _objc_retain",
    "type": "CPP"
  },
  {
    "name": "t __objc_msgNil",
    "type": "CPP"
  },
  {
    "name": "t __objc_msgNil_fpret",
    "type": "CPP"
  },
  {
    "name": "t __objc_msgNil_fp2ret",
    "type": "CPP"
  },
  {
    "name": "t __objc_msgNil_stret",
    "type": "CPP"
  },
  {
    "name": "t _cache_getImp",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSend",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgLookup",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSend_fixup",
    "type": "CPP"
  },
  {
    "name": "t _objc_msgSend_fixedup",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSendSuper",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSendSuper2",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgLookupSuper2",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSendSuper2_fixup",
    "type": "CPP"
  },
  {
    "name": "t _objc_msgSendSuper2_fixedup",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSend_fpret",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgLookup_fpret",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSend_fpret_fixup",
    "type": "CPP"
  },
  {
    "name": "t _objc_msgSend_fpret_fixedup",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSend_fp2ret",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgLookup_fp2ret",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSend_fp2ret_fixup",
    "type": "CPP"
  },
  {
    "name": "t _objc_msgSend_fp2ret_fixedup",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSend_stret",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgLookup_stret",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSend_stret_fixup",
    "type": "CPP"
  },
  {
    "name": "t _objc_msgSend_stret_fixedup",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSendSuper_stret",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSendSuper2_stret",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgLookupSuper2_stret",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSendSuper2_stret_fixup",
    "type": "CPP"
  },
  {
    "name": "t _objc_msgSendSuper2_stret_fixedup",
    "type": "CPP"
  },
  {
    "name": "t __objc_msgSend_uncached",
    "type": "CPP"
  },
  {
    "name": "t __objc_msgSend_stret_uncached",
    "type": "CPP"
  },
  {
    "name": "t __objc_msgLookup_uncached",
    "type": "CPP"
  },
  {
    "name": "t __objc_msgLookup_stret_uncached",
    "type": "CPP"
  },
  {
    "name": "t __objc_msgForward_impcache",
    "type": "CPP"
  },
  {
    "name": "T __objc_msgForward",
    "type": "CPP"
  },
  {
    "name": "T __objc_msgForward_stret",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSend_debug",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSendSuper2_debug",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSend_stret_debug",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSendSuper2_stret_debug",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSend_fpret_debug",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSend_fp2ret_debug",
    "type": "CPP"
  },
  {
    "name": "T _objc_msgSend_noarg",
    "type": "CPP"
  },
  {
    "name": "T _method_invoke",
    "type": "CPP"
  },
  {
    "name": "T _method_invoke_stret",
    "type": "CPP"
  },
  {
    "name": "t _lookUpImpOrForward",
    "type": "CPP"
  },
  {
    "name": "t monitor_tt<false>::enter()",
    "type": "CPP"
  },
  {
    "name": "t monitor_tt<false>::leave()",
    "type": "CPP"
  },
  {
    "name": "t __objc_fetch_pthread_data",
    "type": "CPP"
  },
  {
    "name": "t _cache_fill",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject initialize]",
    "type": "CPP"
  },
  {
    "name": "t _finishInitializing(objc_class*, objc_class*)",
    "type": "CPP"
  },
  {
    "name": "t cache_t::isConstantEmptyCache()",
    "type": "CPP"
  },
  {
    "name": "t allocateBuckets(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject retain]",
    "type": "CPP"
  },
  {
    "name": "T _objc_release",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject dealloc]",
    "type": "CPP"
  },
  {
    "name": "T __objc_rootDealloc",
    "type": "CPP"
  },
  {
    "name": "T _object_dispose",
    "type": "CPP"
  },
  {
    "name": "T _objc_destructInstance",
    "type": "CPP"
  },
  {
    "name": "t __object_remove_assocations",
    "type": "CPP"
  },
  {
    "name": "t objc_object::sidetable_clearDeallocating()",
    "type": "CPP"
  },
  {
    "name": "t schedule_class_load(objc_class*)",
    "type": "CPP"
  },
  {
    "name": "T _objc_autoreleasePoolPush",
    "type": "CPP"
  },
  {
    "name": "T _objc_autoreleasePoolPop",
    "type": "CPP"
  },
  {
    "name": "T _objc_lookUpClass",
    "type": "CPP"
  },
  {
    "name": "t _look_up_class",
    "type": "CPP"
  },
  {
    "name": "t getClass_impl(char const*)",
    "type": "CPP"
  },
  {
    "name": "t _getPreoptimizedClass",
    "type": "CPP"
  },
  {
    "name": "T __objc_registerTaggedPointerClass",
    "type": "CPP"
  },
  {
    "name": "T __objc_setBadAllocHandler",
    "type": "CPP"
  },
  {
    "name": "T _objc_setExceptionPreprocessor",
    "type": "CPP"
  },
  {
    "name": "T _objc_setExceptionMatcher",
    "type": "CPP"
  },
  {
    "name": "T _objc_setUncaughtExceptionHandler",
    "type": "CPP"
  },
  {
    "name": "T _objc_setForwardHandler",
    "type": "CPP"
  },
  {
    "name": "T _objc_setEnumerationMutationHandler",
    "type": "CPP"
  },
  {
    "name": "T _objc_getFutureClass",
    "type": "CPP"
  },
  {
    "name": "T _object_setClass",
    "type": "CPP"
  },
  {
    "name": "T _object_getClass",
    "type": "CPP"
  },
  {
    "name": "T _objc_assign_strongCast",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject alloc]",
    "type": "CPP"
  },
  {
    "name": "T __objc_rootAlloc",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject self]",
    "type": "CPP"
  },
  {
    "name": "T _objc_assign_global",
    "type": "CPP"
  },
  {
    "name": "T _objc_memmove_collectable",
    "type": "CPP"
  },
  {
    "name": "T _objc_initializeClassPair",
    "type": "CPP"
  },
  {
    "name": "t objc_initializeClassPair_internal(objc_class*, char const*, objc_class*, objc_class*)",
    "type": "CPP"
  },
  {
    "name": "T _objc_registerClassPair",
    "type": "CPP"
  },
  {
    "name": "t addNamedClass(objc_class*, char const*, objc_class*)",
    "type": "CPP"
  },
  {
    "name": "T _sel_registerName",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject init]",
    "type": "CPP"
  },
  {
    "name": "T _class_setSuperclass",
    "type": "CPP"
  },
  {
    "name": "t removeSubclass(objc_class*, objc_class*)",
    "type": "CPP"
  },
  {
    "name": "T _class_setVersion",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject new]",
    "type": "CPP"
  },
  {
    "name": "T _object_getIndexedIvars",
    "type": "CPP"
  },
  {
    "name": "t cache_collect_free(bucket_t*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t _cache_collect",
    "type": "CPP"
  },
  {
    "name": "T _objc_assign_ivar",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject release]",
    "type": "CPP"
  },
  {
    "name": "T _objc_getClass",
    "type": "CPP"
  },
  {
    "name": "T _objc_storeStrong",
    "type": "CPP"
  },
  {
    "name": "T _objc_retainAutoreleasedReturnValue",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject class]",
    "type": "CPP"
  },
  {
    "name": "T _NXCountMapTable",
    "type": "CPP"
  },
  {
    "name": "T _NXFreeMapTable",
    "type": "CPP"
  },
  {
    "name": "T _NXResetMapTable",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject retain]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject autorelease]",
    "type": "CPP"
  },
  {
    "name": "t objc_object::rootAutorelease2()",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject copy]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject mutableCopy]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject class]",
    "type": "CPP"
  },
  {
    "name": "T _class_getSuperclass",
    "type": "CPP"
  },
  {
    "name": "T _objc_storeWeak",
    "type": "CPP"
  },
  {
    "name": "t _weak_unregister_no_lock",
    "type": "CPP"
  },
  {
    "name": "t _weak_register_no_lock",
    "type": "CPP"
  },
  {
    "name": "t weak_entry_for_referent(weak_table_t*, objc_object*)",
    "type": "CPP"
  },
  {
    "name": "t weak_resize(weak_table_t*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t weak_entry_insert(weak_table_t*, weak_entry_t*)",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject isKindOfClass:]",
    "type": "CPP"
  },
  {
    "name": "T _objc_sync_enter",
    "type": "CPP"
  },
  {
    "name": "t id2data(objc_object*, usage)",
    "type": "CPP"
  },
  {
    "name": "t fetch_cache(bool)",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject hash]",
    "type": "CPP"
  },
  {
    "name": "T _objc_sync_exit",
    "type": "CPP"
  },
  {
    "name": "T _class_getMethodImplementation",
    "type": "CPP"
  },
  {
    "name": "T _class_getName",
    "type": "CPP"
  },
  {
    "name": "t objc_class::demangledName(bool)",
    "type": "CPP"
  },
  {
    "name": "t copySwiftV1DemangledName(char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "T _objc_atomicCompareAndSwapPtrBarrier",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject self]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject respondsToSelector:]",
    "type": "CPP"
  },
  {
    "name": "t _class_respondsToSelector_inst",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject resolveInstanceMethod:]",
    "type": "CPP"
  },
  {
    "name": "T _objc_retainAutorelease",
    "type": "CPP"
  },
  {
    "name": "T _objc_autorelease",
    "type": "CPP"
  },
  {
    "name": "T _class_isMetaClass",
    "type": "CPP"
  },
  {
    "name": "T _objc_storeWeakOrNil",
    "type": "CPP"
  },
  {
    "name": "t append_referrer(weak_entry_t*, objc_object**)",
    "type": "CPP"
  },
  {
    "name": "T _objc_autoreleaseReturnValue",
    "type": "CPP"
  },
  {
    "name": "T _objc_retainAutoreleaseReturnValue",
    "type": "CPP"
  },
  {
    "name": "t objc_retainAutoreleaseAndReturn(objc_object*)",
    "type": "CPP"
  },
  {
    "name": "t make_ro_writeable(class_rw_t*)",
    "type": "CPP"
  },
  {
    "name": "t _gdb_objc_class_changed",
    "type": "CPP"
  },
  {
    "name": "T _class_respondsToSelector",
    "type": "CPP"
  },
  {
    "name": "T _objc_finalizeOnMainThread",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject isMemberOfClass:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject resolveClassMethod:]",
    "type": "CPP"
  },
  {
    "name": "T _class_getImageName",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject zone]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject conformsToProtocol:]",
    "type": "CPP"
  },
  {
    "name": "T _class_conformsToProtocol",
    "type": "CPP"
  },
  {
    "name": "T _objc_getProperty",
    "type": "CPP"
  },
  {
    "name": "t protocol_conformsToProtocol_nolock(protocol_t*, protocol_t*)",
    "type": "CPP"
  },
  {
    "name": "t grow_refs_and_insert(weak_entry_t*, objc_object**)",
    "type": "CPP"
  },
  {
    "name": "T _class_getVersion",
    "type": "CPP"
  },
  {
    "name": "T _objc_setProperty",
    "type": "CPP"
  },
  {
    "name": "t _collecting_in_critical()",
    "type": "CPP"
  },
  {
    "name": "T __objc_rootRetain",
    "type": "CPP"
  },
  {
    "name": "T __objc_rootReleaseWasZero",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject respondsToSelector:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject release]",
    "type": "CPP"
  },
  {
    "name": "T _objc_removeAssociatedObjects",
    "type": "CPP"
  },
  {
    "name": "T _objc_assign_weak",
    "type": "CPP"
  },
  {
    "name": "T _objc_read_weak",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject methodForSelector:]",
    "type": "CPP"
  },
  {
    "name": "T _object_getMethodImplementation",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject instanceMethodForSelector:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject isSubclassOfClass:]",
    "type": "CPP"
  },
  {
    "name": "t objc_opt::objc_clsopt_t::getClassesAndHeaders(char const*, void**, void**) const",
    "type": "CPP"
  },
  {
    "name": "T _sel_getName",
    "type": "CPP"
  },
  {
    "name": "t _object_cxxConstructFromClass",
    "type": "CPP"
  },
  {
    "name": "t _lookupMethodInClassAndLoadCache",
    "type": "CPP"
  },
  {
    "name": "T _protocol_copyProtocolList",
    "type": "CPP"
  },
  {
    "name": "T _protocol_copyMethodDescriptionList",
    "type": "CPP"
  },
  {
    "name": "t fixupProtocolIfNeeded(protocol_t*)",
    "type": "CPP"
  },
  {
    "name": "T __protocol_getMethodTypeEncoding",
    "type": "CPP"
  },
  {
    "name": "t protocol_getMethodTypeEncoding_nolock(protocol_t*, objc_selector*, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "t getExtendedTypesIndexesForMethod(protocol_t*, method_t const*, bool, bool, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "T _protocol_getName",
    "type": "CPP"
  },
  {
    "name": "t protocol_t::demangledName()",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject hash]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject isEqual:]",
    "type": "CPP"
  },
  {
    "name": "T __objc_rootAutorelease",
    "type": "CPP"
  },
  {
    "name": "T _protocol_getMethodDescription",
    "type": "CPP"
  },
  {
    "name": "t protocol_getMethod(protocol_t*, objc_selector*, bool, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "t protocol_getMethod_nolock(protocol_t*, objc_selector*, bool, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject forwardingTargetForSelector:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject isKindOfClass:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject conformsToProtocol:]",
    "type": "CPP"
  },
  {
    "name": "T _objc_registerThreadWithCollector",
    "type": "CPP"
  },
  {
    "name": "t objc_object::rootRetain_overflow(bool)",
    "type": "CPP"
  },
  {
    "name": "t objc_object::sidetable_addExtraRC_nolock(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T _objc_initWeak",
    "type": "CPP"
  },
  {
    "name": "T _objc_loadWeakRetained",
    "type": "CPP"
  },
  {
    "name": "T _objc_destroyWeak",
    "type": "CPP"
  },
  {
    "name": "T _object_copy",
    "type": "CPP"
  },
  {
    "name": "t _object_copyFromZone(objc_object*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "t objc_object::sidetable_retain()",
    "type": "CPP"
  },
  {
    "name": "t objc_object::sidetable_release(bool)",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject superclass]",
    "type": "CPP"
  },
  {
    "name": "T _objc_setProperty_atomic",
    "type": "CPP"
  },
  {
    "name": "T _objc_setProperty_atomic_copy",
    "type": "CPP"
  },
  {
    "name": "T _objc_copyWeak",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject performSelector:]",
    "type": "CPP"
  },
  {
    "name": "t objc_object::rootRelease_underflow(bool)",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject performSelector:withObject:]",
    "type": "CPP"
  },
  {
    "name": "T _object_setInstanceVariable",
    "type": "CPP"
  },
  {
    "name": "t __class_getVariable",
    "type": "CPP"
  },
  {
    "name": "t getIvar(objc_class*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T _object_setIvar",
    "type": "CPP"
  },
  {
    "name": "T _ivar_getName",
    "type": "CPP"
  },
  {
    "name": "T _ivar_getOffset",
    "type": "CPP"
  },
  {
    "name": "T _class_getWeakIvarLayout",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject autorelease]",
    "type": "CPP"
  },
  {
    "name": "T _objc_getProtocol",
    "type": "CPP"
  },
  {
    "name": "T _class_getInstanceMethod",
    "type": "CPP"
  },
  {
    "name": "T _method_getImplementation",
    "type": "CPP"
  },
  {
    "name": "T _method_getArgumentType",
    "type": "CPP"
  },
  {
    "name": "T _method_getTypeEncoding",
    "type": "CPP"
  },
  {
    "name": "t _encoding_getArgumentInfo",
    "type": "CPP"
  },
  {
    "name": "t SkipFirstType(char const*)",
    "type": "CPP"
  },
  {
    "name": "T _class_getClassMethod",
    "type": "CPP"
  },
  {
    "name": "t objc_object::clearDeallocating_slow()",
    "type": "CPP"
  },
  {
    "name": "t _weak_clear_no_lock",
    "type": "CPP"
  },
  {
    "name": "t weak_entry_remove(weak_table_t*, weak_entry_t*)",
    "type": "CPP"
  },
  {
    "name": "T _method_getNumberOfArguments",
    "type": "CPP"
  },
  {
    "name": "T _method_getName",
    "type": "CPP"
  },
  {
    "name": "T _method_copyReturnType",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject performSelector:]",
    "type": "CPP"
  },
  {
    "name": "T _objc_setAssociatedObject",
    "type": "CPP"
  },
  {
    "name": "T _objc_retainBlock",
    "type": "CPP"
  },
  {
    "name": "T _objc_setProperty_nonatomic_copy",
    "type": "CPP"
  },
  {
    "name": "T _objc_allocateClassPair",
    "type": "CPP"
  },
  {
    "name": "t alloc_class_for_subclass(objc_class*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T _imp_implementationWithBlock",
    "type": "CPP"
  },
  {
    "name": "T _class_addMethod",
    "type": "CPP"
  },
  {
    "name": "T _objc_getAssociatedObject",
    "type": "CPP"
  },
  {
    "name": "T _objc_is_finalized",
    "type": "CPP"
  },
  {
    "name": "t object_cxxDestructFromClass(objc_object*, objc_class*)",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject allowsWeakReference]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "T _objc_loadWeak",
    "type": "CPP"
  },
  {
    "name": "t fixupMethodList(method_list_t*, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "T _method_setImplementation",
    "type": "CPP"
  },
  {
    "name": "t _method_setImplementation(objc_class*, method_t*, void (*)())",
    "type": "CPP"
  },
  {
    "name": "T _NXInitHashState",
    "type": "CPP"
  },
  {
    "name": "T _class_copyProtocolList",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject methodForSelector:]",
    "type": "CPP"
  },
  {
    "name": "T _class_copyIvarList",
    "type": "CPP"
  },
  {
    "name": "T _ivar_getTypeEncoding",
    "type": "CPP"
  },
  {
    "name": "T _class_copyPropertyList",
    "type": "CPP"
  },
  {
    "name": "T _property_getName",
    "type": "CPP"
  },
  {
    "name": "T _property_copyAttributeList",
    "type": "CPP"
  },
  {
    "name": "t iteratePropertyAttributes(char const*, bool (*)(unsigned int, void*, void*, char const*, unsigned long, char const*, unsigned long), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "t copyOneAttribute(unsigned int, void*, void*, char const*, unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T _class_copyMethodList",
    "type": "CPP"
  },
  {
    "name": "T _method_copyArgumentType",
    "type": "CPP"
  },
  {
    "name": "T _method_getDescription",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject performSelector:withObject:withObject:]",
    "type": "CPP"
  },
  {
    "name": "T __objc_rootAllocWithZone",
    "type": "CPP"
  },
  {
    "name": "T _object_getClassName",
    "type": "CPP"
  },
  {
    "name": "T __objc_rootRelease",
    "type": "CPP"
  },
  {
    "name": "T _property_getAttributes",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject zone]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject retainWeakReference]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject copyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "T _objc_addExceptionHandler",
    "type": "CPP"
  },
  {
    "name": "t read_address(unsigned long*, dwarf_eh_bases const*, unsigned char)",
    "type": "CPP"
  },
  {
    "name": "t read_sleb(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "T _objc_removeExceptionHandler",
    "type": "CPP"
  },
  {
    "name": "T _objc_atomicCompareAndSwapPtr",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject retainCount]",
    "type": "CPP"
  },
  {
    "name": "T _protocol_isEqual",
    "type": "CPP"
  },
  {
    "name": "T _protocol_conformsToProtocol",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "T _class_getInstanceVariable",
    "type": "CPP"
  },
  {
    "name": "T _objc_copyStruct",
    "type": "CPP"
  },
  {
    "name": "T _class_getIvarLayout",
    "type": "CPP"
  },
  {
    "name": "T _sel_isEqual",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject instancesRespondToSelector:]",
    "type": "CPP"
  },
  {
    "name": "T _objc_copyImageNames",
    "type": "CPP"
  },
  {
    "name": "t _NXMapKeyCopyingInsert",
    "type": "CPP"
  },
  {
    "name": "T _objc_copyClassNamesForImage",
    "type": "CPP"
  },
  {
    "name": "T _class_getInstanceSize",
    "type": "CPP"
  },
  {
    "name": "T _sel_getUid",
    "type": "CPP"
  },
  {
    "name": "t _objc_pthread_destroyspecific(void*)",
    "type": "CPP"
  },
  {
    "name": "T __objc_rootRetainCount",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject superclass]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject isProxy]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject isAncestorOfObject:]",
    "type": "CPP"
  },
  {
    "name": "T _objc_setProperty_nonatomic",
    "type": "CPP"
  },
  {
    "name": "t fixupProtocol(protocol_t*)",
    "type": "CPP"
  },
  {
    "name": "t fixupProtocolMethodList(protocol_t*, method_list_t*, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject allowsWeakReference]",
    "type": "CPP"
  },
  {
    "name": "T _objc_constructInstance",
    "type": "CPP"
  },
  {
    "name": "T _objc_atomicCompareAndSwapGlobalBarrier",
    "type": "CPP"
  },
  {
    "name": "T _class_addIvar",
    "type": "CPP"
  },
  {
    "name": "T _objc_atomicCompareAndSwapInstanceVariableBarrier",
    "type": "CPP"
  },
  {
    "name": "T _class_getProperty",
    "type": "CPP"
  },
  {
    "name": "T _method_getReturnType",
    "type": "CPP"
  },
  {
    "name": "T _NXHashMember",
    "type": "CPP"
  },
  {
    "name": "T _NXHashRemove",
    "type": "CPP"
  },
  {
    "name": "T _NXCountHashTable",
    "type": "CPP"
  },
  {
    "name": "T _NXFreeHashTable",
    "type": "CPP"
  },
  {
    "name": "T _class_replaceMethod",
    "type": "CPP"
  },
  {
    "name": "T _class_addProtocol",
    "type": "CPP"
  },
  {
    "name": "T _NXHashInsertIfAbsent",
    "type": "CPP"
  },
  {
    "name": "T _objc_clear_deallocating",
    "type": "CPP"
  },
  {
    "name": "t objc_object::sidetable_isDeallocating()",
    "type": "CPP"
  },
  {
    "name": "T _class_createInstanceFromZone",
    "type": "CPP"
  },
  {
    "name": "t __objc_inform_deprecated",
    "type": "CPP"
  },
  {
    "name": "t __objc_warn_deprecated",
    "type": "CPP"
  },
  {
    "name": "T __objc_rootZone",
    "type": "CPP"
  },
  {
    "name": "t objc_object::sidetable_tryRetain()",
    "type": "CPP"
  },
  {
    "name": "T _objc_getClassList",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject retainWeakReference]",
    "type": "CPP"
  },
  {
    "name": "t _map_images",
    "type": "CPP"
  },
  {
    "name": "T _NXMapMember",
    "type": "CPP"
  },
  {
    "name": "t _objc_crashlog(char const*)",
    "type": "CPP"
  },
  {
    "name": "T _objc_moveWeak",
    "type": "CPP"
  },
  {
    "name": "t _objc_sync_nil",
    "type": "CPP"
  },
  {
    "name": "t SubtypeUntil(char const*, char)",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject performSelector:withObject:]",
    "type": "CPP"
  },
  {
    "name": "T __objc_rootHash",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject isFault]",
    "type": "CPP"
  },
  {
    "name": "T _objc_exception_throw",
    "type": "CPP"
  },
  {
    "name": "T ___objc_personality_v0",
    "type": "CPP"
  },
  {
    "name": "T _objc_begin_catch",
    "type": "CPP"
  },
  {
    "name": "T _objc_exception_rethrow",
    "type": "CPP"
  },
  {
    "name": "T _objc_end_catch",
    "type": "CPP"
  },
  {
    "name": "t _objc_exception_destructor(void*)",
    "type": "CPP"
  },
  {
    "name": "T _object_getIvar",
    "type": "CPP"
  },
  {
    "name": "T _objc_atomicCompareAndSwapInstanceVariable",
    "type": "CPP"
  },
  {
    "name": "t _unmap_image",
    "type": "CPP"
  },
  {
    "name": "T _method_exchangeImplementations",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject isMemberOfClass:]",
    "type": "CPP"
  },
  {
    "name": "T __objc_rootIsDeallocating",
    "type": "CPP"
  },
  {
    "name": "T __objc_rootTryRetain",
    "type": "CPP"
  },
  {
    "name": "t ___NXMAPTABLE_CORRUPTED__",
    "type": "CPP"
  },
  {
    "name": "T _NXStrHash",
    "type": "CPP"
  },
  {
    "name": "T _NXStrIsEqual",
    "type": "CPP"
  },
  {
    "name": "t hashPtrStructKey(void const*, void const*)",
    "type": "CPP"
  },
  {
    "name": "t isEqualPtrStructKey(void const*, void const*, void const*)",
    "type": "CPP"
  },
  {
    "name": "T _NXReallyFree",
    "type": "CPP"
  },
  {
    "name": "t hashStrStructKey(void const*, void const*)",
    "type": "CPP"
  },
  {
    "name": "t isEqualStrStructKey(void const*, void const*, void const*)",
    "type": "CPP"
  },
  {
    "name": "T _NXEmptyHashTable",
    "type": "CPP"
  },
  {
    "name": "T _NXResetHashTable",
    "type": "CPP"
  },
  {
    "name": "T _NXCompareHashTables",
    "type": "CPP"
  },
  {
    "name": "T _NXCopyHashTable",
    "type": "CPP"
  },
  {
    "name": "t _mapNoFree(_NXMapTable*, void*, void*)",
    "type": "CPP"
  },
  {
    "name": "t hashPrototype(void const*, void const*) (.4)",
    "type": "CPP"
  },
  {
    "name": "t isEqualPrototype(void const*, void const*, void const*) (.5)",
    "type": "CPP"
  },
  {
    "name": "T _NXCompareMapTables",
    "type": "CPP"
  },
  {
    "name": "t validateKey(_NXMapTable*, _MapPair*, unsigned int, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T _NXInitMapState",
    "type": "CPP"
  },
  {
    "name": "T _NXNextMapState",
    "type": "CPP"
  },
  {
    "name": "T _objc_collect",
    "type": "CPP"
  },
  {
    "name": "T _objc_setCollectionThreshold",
    "type": "CPP"
  },
  {
    "name": "T _objc_setCollectionRatio",
    "type": "CPP"
  },
  {
    "name": "T _objc_startCollectorThread",
    "type": "CPP"
  },
  {
    "name": "T _objc_atomicCompareAndSwapGlobal",
    "type": "CPP"
  },
  {
    "name": "T _objc_assign_threadlocal",
    "type": "CPP"
  },
  {
    "name": "T _objc_clear_stack",
    "type": "CPP"
  },
  {
    "name": "T _objc_collecting_enabled",
    "type": "CPP"
  },
  {
    "name": "T _objc_set_collection_threshold",
    "type": "CPP"
  },
  {
    "name": "T _objc_set_collection_ratio",
    "type": "CPP"
  },
  {
    "name": "T _objc_start_collector_thread",
    "type": "CPP"
  },
  {
    "name": "T _objc_allocate_object",
    "type": "CPP"
  },
  {
    "name": "T _objc_unregisterThreadWithCollector",
    "type": "CPP"
  },
  {
    "name": "T _objc_assertRegisteredThreadWithCollector",
    "type": "CPP"
  },
  {
    "name": "T _objc_collect_init",
    "type": "CPP"
  },
  {
    "name": "T _objc_collectableZone",
    "type": "CPP"
  },
  {
    "name": "T _objc_isAuto",
    "type": "CPP"
  },
  {
    "name": "T _objc_dumpHeap",
    "type": "CPP"
  },
  {
    "name": "T _object_isClass",
    "type": "CPP"
  },
  {
    "name": "T _object_getMethodImplementation_stret",
    "type": "CPP"
  },
  {
    "name": "T _class_getMethodImplementation_stret",
    "type": "CPP"
  },
  {
    "name": "T __class_getIvarMemoryManagement",
    "type": "CPP"
  },
  {
    "name": "t _class_lookUpIvar(objc_class*, ivar_t*, long&, objc_ivar_memory_management_t&)",
    "type": "CPP"
  },
  {
    "name": "T _object_setIvarWithStrongDefault",
    "type": "CPP"
  },
  {
    "name": "T _object_setInstanceVariableWithStrongDefault",
    "type": "CPP"
  },
  {
    "name": "T _object_getInstanceVariable",
    "type": "CPP"
  },
  {
    "name": "T _class_getClassVariable",
    "type": "CPP"
  },
  {
    "name": "T _class_respondsToMethod",
    "type": "CPP"
  },
  {
    "name": "T _class_lookupMethod",
    "type": "CPP"
  },
  {
    "name": "T _instrumentObjcMessageSends",
    "type": "CPP"
  },
  {
    "name": "t objc_class::instanceSize(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "t _copyPropertyAttributeString",
    "type": "CPP"
  },
  {
    "name": "t findOneAttribute(unsigned int, void*, void*, char const*, unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t _objc_syslog(char const*)",
    "type": "CPP"
  },
  {
    "name": "t __objc_exception_abort1",
    "type": "CPP"
  },
  {
    "name": "t __objc_exception_abort2",
    "type": "CPP"
  },
  {
    "name": "t __objc_exception_abort3",
    "type": "CPP"
  },
  {
    "name": "t __objc_exception_abort4",
    "type": "CPP"
  },
  {
    "name": "t __objc_exception_do_catch",
    "type": "CPP"
  },
  {
    "name": "t __objc_exception_false",
    "type": "CPP"
  },
  {
    "name": "t __objc_exception_noop",
    "type": "CPP"
  },
  {
    "name": "t _objc_alt_handler_error",
    "type": "CPP"
  },
  {
    "name": "t _objc_default_exception_matcher(objc_class*, objc_object*)",
    "type": "CPP"
  },
  {
    "name": "t _objc_default_exception_preprocessor(objc_object*)",
    "type": "CPP"
  },
  {
    "name": "t _objc_default_uncaught_exception_handler(objc_object*)",
    "type": "CPP"
  },
  {
    "name": "T _objc_terminate",
    "type": "CPP"
  },
  {
    "name": "t alt_handler_error(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t _objc_terminate()",
    "type": "CPP"
  },
  {
    "name": "t ___clang_call_terminate",
    "type": "CPP"
  },
  {
    "name": "t objc_class** getDataSection<objc_class*>(mach_header_64 const*, char const*, unsigned long*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "t classref* const* getDataSection<classref* const>(mach_header_64 const*, char const*, unsigned long*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "t category_t* const* getDataSection<category_t* const>(mach_header_64 const*, char const*, unsigned long*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__throw_bad_function_call()",
    "type": "CPP"
  },
  {
    "name": "t _CALLING_SOME_+initialize_METHOD",
    "type": "CPP"
  },
  {
    "name": "t _WAITING_FOR_ANOTHER_THREAD_TO_FINISH_CALLING_+initialize",
    "type": "CPP"
  },
  {
    "name": "t _objc_initializeAfterForkError",
    "type": "CPP"
  },
  {
    "name": "t __thisThreadIsInitializingClass",
    "type": "CPP"
  },
  {
    "name": "t _fetchInitializingClassList(bool)",
    "type": "CPP"
  },
  {
    "name": "t performForkChildInitialize(objc_class*, objc_class*)",
    "type": "CPP"
  },
  {
    "name": "t lockAndFinishInitializing(objc_class*, objc_class*)",
    "type": "CPP"
  },
  {
    "name": "t bool objc::DenseMapBase<objc::DenseMap<objc_class*, PendingInitialize*, objc::DenseMapValueInfo<PendingInitialize*>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, PendingInitialize*> >, objc_class*, PendingInitialize*, objc::DenseMapValueInfo<PendingInitialize*>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, PendingInitialize*> >::LookupBucketFor<objc_class*>(objc_class* const&, objc::detail::DenseMapPair<objc_class*, PendingInitialize*> const*&) const",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMap<objc_class*, PendingInitialize*, objc::DenseMapValueInfo<PendingInitialize*>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, PendingInitialize*> >::grow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t _initializeNonMetaClass",
    "type": "CPP"
  },
  {
    "name": "t _setThisThreadIsInitializingClass(objc_class*)",
    "type": "CPP"
  },
  {
    "name": "T __objc_addWillInitializeClassFunc",
    "type": "CPP"
  },
  {
    "name": "t method_t::remappedImp(bool) const",
    "type": "CPP"
  },
  {
    "name": "t method_t_remappedImp_nolock(method_t const*)",
    "type": "CPP"
  },
  {
    "name": "t bool objc::DenseMapBase<objc::DenseMap<method_t const*, void (*)(), objc::DenseMapValueInfo<void (*)()>, objc::DenseMapInfo<method_t const*>, objc::detail::DenseMapPair<method_t const*, void (*)()> >, method_t const*, void (*)(), objc::DenseMapValueInfo<void (*)()>, objc::DenseMapInfo<method_t const*>, objc::detail::DenseMapPair<method_t const*, void (*)()> >::LookupBucketFor<method_t const*>(method_t const* const&, objc::detail::DenseMapPair<method_t const*, void (*)()> const*&) const",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMap<method_t const*, void (*)(), objc::DenseMapValueInfo<void (*)()>, objc::DenseMapInfo<method_t const*>, objc::detail::DenseMapPair<method_t const*, void (*)()> >::grow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t bool objc::DenseMapBase<objc::DenseMap<method_t const*, objc_method_description*, objc::DenseMapValueInfo<objc_method_description*>, objc::DenseMapInfo<method_t const*>, objc::detail::DenseMapPair<method_t const*, objc_method_description*> >, method_t const*, objc_method_description*, objc::DenseMapValueInfo<objc_method_description*>, objc::DenseMapInfo<method_t const*>, objc::detail::DenseMapPair<method_t const*, objc_method_description*> >::LookupBucketFor<method_t const*>(method_t const* const&, objc::detail::DenseMapPair<method_t const*, objc_method_description*> const*&) const",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMap<method_t const*, objc_method_description*, objc::DenseMapValueInfo<objc_method_description*>, objc::DenseMapInfo<method_t const*>, objc::detail::DenseMapPair<method_t const*, objc_method_description*> >::grow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t method_array_t::endCategoryMethodLists(objc_class*) const",
    "type": "CPP"
  },
  {
    "name": "T __objc_setClassCopyFixupHandler",
    "type": "CPP"
  },
  {
    "name": "t class_rw_t::extAlloc(class_ro_t const*, bool)",
    "type": "CPP"
  },
  {
    "name": "t method_list_t::duplicate() const",
    "type": "CPP"
  },
  {
    "name": "t list_array_tt<method_t, method_list_t, method_list_t_authed_ptr>::attachLists(method_list_t* const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t list_array_tt<property_t, property_list_t, RawPtr>::attachLists(property_list_t* const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t list_array_tt<unsigned long, protocol_list_t, RawPtr>::attachLists(protocol_list_t* const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T _objc_loadClassref",
    "type": "CPP"
  },
  {
    "name": "t _class_initialize",
    "type": "CPP"
  },
  {
    "name": "t initializeAndMaybeRelock(objc_class*, objc_object*, mutex_tt<false>&, bool)",
    "type": "CPP"
  },
  {
    "name": "t getMaybeUnrealizedNonMetaClass(objc_class*, objc_object*)",
    "type": "CPP"
  },
  {
    "name": "t realizeClassMaybeSwiftMaybeRelock(objc_class*, mutex_tt<false>&, bool)",
    "type": "CPP"
  },
  {
    "name": "t realizeClassWithoutSwift(objc_class*, objc_class*)",
    "type": "CPP"
  },
  {
    "name": "t objc_class::nameForLogging()",
    "type": "CPP"
  },
  {
    "name": "t addRemappedClass(objc_class*, objc_class*)",
    "type": "CPP"
  },
  {
    "name": "t bool objc::DenseMapBase<objc::DenseMap<objc_class*, objc_class*, objc::DenseMapValueInfo<objc_class*>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, objc_class*> >, objc_class*, objc_class*, objc::DenseMapValueInfo<objc_class*>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, objc_class*> >::LookupBucketFor<objc_class*>(objc_class* const&, objc::detail::DenseMapPair<objc_class*, objc_class*> const*&) const",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMap<objc_class*, objc_class*, objc::DenseMapValueInfo<objc_class*>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, objc_class*> >::grow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t objc_class::mangledName()",
    "type": "CPP"
  },
  {
    "name": "t scanMangledField(char const*&, char const*, char const*&, int&)",
    "type": "CPP"
  },
  {
    "name": "t objc_class::setInstancesRequireRawIsaRecursively(bool)",
    "type": "CPP"
  },
  {
    "name": "t objc_class::setInstanceSize(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t objc::UnattachedCategories::attachToClass(objc_class*, objc_class*, int)",
    "type": "CPP"
  },
  {
    "name": "t bool objc::DenseMapBase<objc::DenseMap<objc_class*, objc::category_list, objc::DenseMapValueInfo<objc::category_list>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, objc::category_list> >, objc_class*, objc::category_list, objc::DenseMapValueInfo<objc::category_list>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, objc::category_list> >::LookupBucketFor<objc_class const*>(objc_class const* const&, objc::detail::DenseMapPair<objc_class*, objc::category_list> const*&) const",
    "type": "CPP"
  },
  {
    "name": "t attachCategories(objc_class*, locstamped_category_t const*, unsigned int, int)",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMapBase<objc::DenseMap<objc_class*, objc::category_list, objc::DenseMapValueInfo<objc::category_list>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, objc::category_list> >, objc_class*, objc::category_list, objc::DenseMapValueInfo<objc::category_list>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, objc::category_list> >::erase(objc::DenseMapIterator<objc_class*, objc::category_list, objc::DenseMapValueInfo<objc::category_list>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, objc::category_list>, false>)",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMapBase<objc::DenseMap<objc_class*, objc::category_list, objc::DenseMapValueInfo<objc::category_list>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, objc::category_list> >, objc_class*, objc::category_list, objc::DenseMapValueInfo<objc::category_list>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, objc::category_list> >::compact()",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMap<objc_class*, objc::category_list, objc::DenseMapValueInfo<objc::category_list>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, objc::category_list> >::grow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t bool objc::DenseMapBase<objc::DenseMap<objc_class*, objc::category_list, objc::DenseMapValueInfo<objc::category_list>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, objc::category_list> >, objc_class*, objc::category_list, objc::DenseMapValueInfo<objc::category_list>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, objc::category_list> >::LookupBucketFor<objc_class*>(objc_class* const&, objc::detail::DenseMapPair<objc_class*, objc::category_list> const*&) const",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMap<objc_class*, objc::category_list, objc::DenseMapValueInfo<objc::category_list>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, objc::category_list> >::init(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in flushCaches(objc_class*)",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32c38_ZTSKZL11flushCachesP10objc_classE3$_3",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32c38_ZTSKZL11flushCachesP10objc_classE3$_2",
    "type": "CPP"
  },
  {
    "name": "t list_array_tt<method_t, method_list_t, method_list_t_authed_ptr>::begin() const",
    "type": "CPP"
  },
  {
    "name": "t list_array_tt<method_t, method_list_t, method_list_t_authed_ptr>::iterator::operator++()",
    "type": "CPP"
  },
  {
    "name": "t bool objc::DenseMapBase<objc::DenseMap<objc_class*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseSetPair<objc_class*> >, objc_class*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseSetPair<objc_class*> >::LookupBucketFor<objc_class const*>(objc_class const* const&, objc::detail::DenseSetPair<objc_class*> const*&) const",
    "type": "CPP"
  },
  {
    "name": "t dataSegmentsContain(objc_class*)",
    "type": "CPP"
  },
  {
    "name": "t method_t::setImp(void (*)())",
    "type": "CPP"
  },
  {
    "name": "t adjustCustomFlagsForMethodChange(objc_class*, method_t*)",
    "type": "CPP"
  },
  {
    "name": "t objc::scanner::Mixin<objc::CoreScanner, (objc::SelectorBundle)2, PrintCustomCore, (objc::scanner::Scope)2>::setNSObjectSwizzled(objc_class*, bool)",
    "type": "CPP"
  },
  {
    "name": "t objc::scanner::Mixin<objc::CoreScanner, (objc::SelectorBundle)2, PrintCustomCore, (objc::scanner::Scope)2>::setCustomRecursively(objc_class*, bool)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in objc::scanner::Mixin<objc::CoreScanner, (objc::SelectorBundle)2, PrintCustomCore, (objc::scanner::Scope)2>::setCustomRecursively(objc_class*, bool)",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32c148_ZTSKZN4objc7scanner5MixinINS_11CoreScannerELNS_14SelectorBundleE2EL_Z15PrintCustomCoreELNS0_5ScopeE2EE20setCustomRecursivelyEP10objc_classbEUlS7_E_",
    "type": "CPP"
  },
  {
    "name": "t objc::scanner::Mixin<objc::RRScanner, (objc::SelectorBundle)1, PrintCustomRR, (objc::scanner::Scope)2>::setNSObjectSwizzled(objc_class*, bool)",
    "type": "CPP"
  },
  {
    "name": "t objc::scanner::Mixin<objc::RRScanner, (objc::SelectorBundle)1, PrintCustomRR, (objc::scanner::Scope)2>::setCustomRecursively(objc_class*, bool)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in objc::scanner::Mixin<objc::RRScanner, (objc::SelectorBundle)1, PrintCustomRR, (objc::scanner::Scope)2>::setCustomRecursively(objc_class*, bool)",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32c143_ZTSKZN4objc7scanner5MixinINS_9RRScannerELNS_14SelectorBundleE1EL_Z13PrintCustomRRELNS0_5ScopeE2EE20setCustomRecursivelyEP10objc_classbEUlS7_E_",
    "type": "CPP"
  },
  {
    "name": "t objc::scanner::Mixin<objc::AWZScanner, (objc::SelectorBundle)0, PrintCustomAWZ, (objc::scanner::Scope)1>::setNSObjectSwizzled(objc_class*, bool)",
    "type": "CPP"
  },
  {
    "name": "t objc::scanner::Mixin<objc::AWZScanner, (objc::SelectorBundle)0, PrintCustomAWZ, (objc::scanner::Scope)1>::setCustomRecursively(objc_class*, bool)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in objc::scanner::Mixin<objc::AWZScanner, (objc::SelectorBundle)0, PrintCustomAWZ, (objc::scanner::Scope)1>::setCustomRecursively(objc_class*, bool)",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32c146_ZTSKZN4objc7scanner5MixinINS_10AWZScannerELNS_14SelectorBundleE0EL_Z14PrintCustomAWZELNS0_5ScopeE1EE20setCustomRecursivelyEP10objc_classbEUlS7_E_",
    "type": "CPP"
  },
  {
    "name": "t bool method_lists_contains_any<method_list_t*>(method_list_t**, method_list_t**, objc_selector**, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::pair<method_t::big*, long> std::__1::get_temporary_buffer<method_t::big>(long)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__stable_sort<method_t::SortBySELAddress&, method_t::big*>(method_t::big*, method_t::big*, method_t::SortBySELAddress&, std::__1::iterator_traits<method_t::big*>::difference_type, std::__1::iterator_traits<method_t::big*>::value_type*, long)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__stable_sort_move<method_t::SortBySELAddress&, method_t::big*>(method_t::big*, method_t::big*, method_t::SortBySELAddress&, std::__1::iterator_traits<method_t::big*>::difference_type, std::__1::iterator_traits<method_t::big*>::value_type*)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__inplace_merge<method_t::SortBySELAddress&, method_t::big*>(method_t::big*, method_t::big*, method_t::big*, method_t::SortBySELAddress&, std::__1::iterator_traits<method_t::big*>::difference_type, std::__1::iterator_traits<method_t::big*>::difference_type, std::__1::iterator_traits<method_t::big*>::value_type*, long)",
    "type": "CPP"
  },
  {
    "name": "t class_ro_t::duplicate() const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in objc_class::setInstancesRequireRawIsaRecursively(bool)",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32c64_ZTSKZN10objc_class36setInstancesRequireRawIsaRecursivelyEbE3$_0",
    "type": "CPP"
  },
  {
    "name": "t getClassExceptSomeSwift(char const*)",
    "type": "CPP"
  },
  {
    "name": "t nonMetaClasses()",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in getMaybeUnrealizedNonMetaClass(objc_class*, objc_object*)",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32c71_ZTSKZL30getMaybeUnrealizedNonMetaClassP10objc_classP11objc_objectE3$_1",
    "type": "CPP"
  },
  {
    "name": "T __objc_realizeClassFromSwift",
    "type": "CPP"
  },
  {
    "name": "t addClassTableEntry(objc_class*, bool)",
    "type": "CPP"
  },
  {
    "name": "t readClass(objc_class*, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::pair<objc::DenseMapIterator<objc_class*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseSetPair<objc_class*>, false>, bool> objc::DenseMapBase<objc::DenseMap<objc_class*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseSetPair<objc_class*> >, objc_class*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseSetPair<objc_class*> >::try_emplace<objc::detail::DenseSetEmpty&>(objc_class* const&, objc::detail::DenseSetEmpty&)",
    "type": "CPP"
  },
  {
    "name": "t bool objc::DenseMapBase<objc::DenseMap<objc_class*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseSetPair<objc_class*> >, objc_class*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseSetPair<objc_class*> >::LookupBucketFor<objc_class*>(objc_class* const&, objc::detail::DenseSetPair<objc_class*> const*&) const",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMap<objc_class*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseSetPair<objc_class*> >::grow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t empty_getClass(char const*, objc_class**)",
    "type": "CPP"
  },
  {
    "name": "T __class_isFutureClass",
    "type": "CPP"
  },
  {
    "name": "T __objc_flush_caches",
    "type": "CPP"
  },
  {
    "name": "t load_categories_nolock(header_info*)",
    "type": "CPP"
  },
  {
    "name": "t header_info::getHeaderInfoRW()",
    "type": "CPP"
  },
  {
    "name": "t load_categories_nolock(header_info*)::$_4::operator()(category_t* const*) const",
    "type": "CPP"
  },
  {
    "name": "t objc::UnattachedCategories::addForClass(locstamped_category_t, objc_class*)",
    "type": "CPP"
  },
  {
    "name": "t realizeAllClasses()",
    "type": "CPP"
  },
  {
    "name": "t detach_class(objc_class*, bool)",
    "type": "CPP"
  },
  {
    "name": "t free_class(objc_class*)",
    "type": "CPP"
  },
  {
    "name": "t try_free(void const*)",
    "type": "CPP"
  },
  {
    "name": "t list_array_tt<property_t, property_list_t, RawPtr>::begin() const",
    "type": "CPP"
  },
  {
    "name": "t __method_getImplementationAndName",
    "type": "CPP"
  },
  {
    "name": "T _property_copyAttributeValue",
    "type": "CPP"
  },
  {
    "name": "T _protocol_getProperty",
    "type": "CPP"
  },
  {
    "name": "t protocol_getProperty_nolock(protocol_t*, char const*, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "T _protocol_copyPropertyList2",
    "type": "CPP"
  },
  {
    "name": "T _protocol_copyPropertyList",
    "type": "CPP"
  },
  {
    "name": "T _objc_allocateProtocol",
    "type": "CPP"
  },
  {
    "name": "T _objc_registerProtocol",
    "type": "CPP"
  },
  {
    "name": "T _protocol_addProtocol",
    "type": "CPP"
  },
  {
    "name": "T _protocol_addMethodDescription",
    "type": "CPP"
  },
  {
    "name": "t protocol_addMethod_nolock(method_list_t*&, objc_selector*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T _protocol_addProperty",
    "type": "CPP"
  },
  {
    "name": "t protocol_addProperty_nolock(property_list_t*&, char const*, objc_property_attribute_t const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in objc_getRealizedClassList_nolock(objc_class**, int)",
    "type": "CPP"
  },
  {
    "name": "t foreach_realized_class(bool (objc_class*) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in objc_getRealizedClassList_nolock(objc_class**, int)",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32c61_ZTSKZL32objc_getRealizedClassList_nolockPP10objc_classiE3$_6",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32c61_ZTSKZL32objc_getRealizedClassList_nolockPP10objc_classiE3$_5",
    "type": "CPP"
  },
  {
    "name": "T _objc_copyRealizedClassList",
    "type": "CPP"
  },
  {
    "name": "t objc_copyRealizedClassList_nolock(unsigned int*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in objc_copyRealizedClassList_nolock(unsigned int*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in objc_copyRealizedClassList_nolock(unsigned int*)",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32c49_ZTSKZL33objc_copyRealizedClassList_nolockPjE3$_8",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32c49_ZTSKZL33objc_copyRealizedClassList_nolockPjE3$_7",
    "type": "CPP"
  },
  {
    "name": "T _objc_copyClassList",
    "type": "CPP"
  },
  {
    "name": "T _class_copyImpCache",
    "type": "CPP"
  },
  {
    "name": "T _objc_copyProtocolList",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMapIterator<char const*, Protocol*, objc::DenseMapValueInfo<Protocol*>, objc::DenseMapInfo<char const*>, objc::detail::DenseMapPair<char const*, Protocol*>, false>::AdvancePastEmptyBuckets()",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMapBase<objc::DenseMap<char const*, Protocol*, objc::DenseMapValueInfo<Protocol*>, objc::DenseMapInfo<char const*>, objc::detail::DenseMapPair<char const*, Protocol*> >, char const*, Protocol*, objc::DenseMapValueInfo<Protocol*>, objc::DenseMapInfo<char const*>, objc::detail::DenseMapPair<char const*, Protocol*> >::destroyAll()",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMapInfo<char const*>::isEqual(char const* const&, char const* const&)",
    "type": "CPP"
  },
  {
    "name": "t bool objc::DenseMapBase<objc::DenseMap<char const*, Protocol*, objc::DenseMapValueInfo<Protocol*>, objc::DenseMapInfo<char const*>, objc::detail::DenseMapPair<char const*, Protocol*> >, char const*, Protocol*, objc::DenseMapValueInfo<Protocol*>, objc::DenseMapInfo<char const*>, objc::detail::DenseMapPair<char const*, Protocol*> >::LookupBucketFor<char const*>(char const* const&, objc::detail::DenseMapPair<char const*, Protocol*> const*&) const",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMap<char const*, Protocol*, objc::DenseMapValueInfo<Protocol*>, objc::DenseMapInfo<char const*>, objc::detail::DenseMapPair<char const*, Protocol*> >::grow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t copyClassNamesForImage_nolock(header_info*, unsigned int*)",
    "type": "CPP"
  },
  {
    "name": "t bool objc::DenseMapBase<objc::DenseMap<char const*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<char const*>, objc::detail::DenseSetPair<char const*> >, char const*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<char const*>, objc::detail::DenseSetPair<char const*> >::LookupBucketFor<char const*>(char const* const&, objc::detail::DenseSetPair<char const*> const*&) const",
    "type": "CPP"
  },
  {
    "name": "t objc::detail::DenseSetPair<char const*>* objc::DenseMapBase<objc::DenseMap<char const*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<char const*>, objc::detail::DenseSetPair<char const*> >, char const*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<char const*>, objc::detail::DenseSetPair<char const*> >::InsertIntoBucketImpl<char const*>(char const* const&, char const* const&, objc::detail::DenseSetPair<char const*>*)",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMap<char const*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<char const*>, objc::detail::DenseSetPair<char const*> >::grow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMapBase<objc::DenseMap<char const*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<char const*>, objc::detail::DenseSetPair<char const*> >, char const*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<char const*>, objc::detail::DenseSetPair<char const*> >::moveFromOldBuckets(objc::detail::DenseSetPair<char const*>*, objc::detail::DenseSetPair<char const*>*)",
    "type": "CPP"
  },
  {
    "name": "T _objc_copyClassNamesForImageHeader",
    "type": "CPP"
  },
  {
    "name": "T _objc_debug_class_getNameRaw",
    "type": "CPP"
  },
  {
    "name": "t resolveMethod_locked(objc_object*, objc_selector*, objc_class*, int)",
    "type": "CPP"
  },
  {
    "name": "T _gdb_class_getClass",
    "type": "CPP"
  },
  {
    "name": "T _gdb_object_getClass",
    "type": "CPP"
  },
  {
    "name": "t objc::scanner::Mixin<objc::RRScanner, (objc::SelectorBundle)1, PrintCustomRR, (objc::scanner::Scope)2>::scanAddedClassImpl(objc_class*, bool)",
    "type": "CPP"
  },
  {
    "name": "t objc::scanner::Mixin<objc::CoreScanner, (objc::SelectorBundle)2, PrintCustomCore, (objc::scanner::Scope)2>::scanAddedClassImpl(objc_class*, bool)",
    "type": "CPP"
  },
  {
    "name": "t bool method_lists_contains_any<WrappedPtr<method_list_t, PtrauthRaw> const>(WrappedPtr<method_list_t, PtrauthRaw> const*, WrappedPtr<method_list_t, PtrauthRaw> const*, objc_selector**, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t bool objc::RRScanner::scanMethodLists<WrappedPtr<method_list_t, PtrauthRaw> const>(WrappedPtr<method_list_t, PtrauthRaw> const*, WrappedPtr<method_list_t, PtrauthRaw> const*)",
    "type": "CPP"
  },
  {
    "name": "T _class_setIvarLayout",
    "type": "CPP"
  },
  {
    "name": "T _class_setWeakIvarLayout",
    "type": "CPP"
  },
  {
    "name": "T _class_addMethodsBulk",
    "type": "CPP"
  },
  {
    "name": "t addMethods(objc_class*, objc_selector* const*, void (* const*)(), char const**, unsigned int, bool, unsigned int*)",
    "type": "CPP"
  },
  {
    "name": "T _class_replaceMethodsBulk",
    "type": "CPP"
  },
  {
    "name": "T _class_addProperty",
    "type": "CPP"
  },
  {
    "name": "t _class_addProperty(objc_class*, char const*, objc_property_attribute_t const*, unsigned int, bool)",
    "type": "CPP"
  },
  {
    "name": "T _class_replaceProperty",
    "type": "CPP"
  },
  {
    "name": "T _objc_setHook_getClass",
    "type": "CPP"
  },
  {
    "name": "T _objc_duplicateClass",
    "type": "CPP"
  },
  {
    "name": "T _objc_readClassPair",
    "type": "CPP"
  },
  {
    "name": "T _objc_disposeClassPair",
    "type": "CPP"
  },
  {
    "name": "T _class_createInstances",
    "type": "CPP"
  },
  {
    "name": "T _object_copyFromZone",
    "type": "CPP"
  },
  {
    "name": "T __objc_getFreedObjectClass",
    "type": "CPP"
  },
  {
    "name": "t classSlotForTagIndex(objc_tag_index_t)",
    "type": "CPP"
  },
  {
    "name": "T __objc_getClassForTag",
    "type": "CPP"
  },
  {
    "name": "t _objc_noop_imp",
    "type": "CPP"
  },
  {
    "name": "T _objc_getRequiredClass",
    "type": "CPP"
  },
  {
    "name": "T _objc_getMetaClass",
    "type": "CPP"
  },
  {
    "name": "t objc::SafeRanges::find(unsigned long, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "t void std::__1::__sort<objc::SafeRanges::find(unsigned long, unsigned int&)::$_0&, objc::SafeRanges::Range*>(objc::SafeRanges::Range*, objc::SafeRanges::Range*, objc::SafeRanges::find(unsigned long, unsigned int&)::$_0&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort3<objc::SafeRanges::find(unsigned long, unsigned int&)::$_0&, objc::SafeRanges::Range*>(objc::SafeRanges::Range*, objc::SafeRanges::Range*, objc::SafeRanges::Range*, objc::SafeRanges::find(unsigned long, unsigned int&)::$_0&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort4<objc::SafeRanges::find(unsigned long, unsigned int&)::$_0&, objc::SafeRanges::Range*>(objc::SafeRanges::Range*, objc::SafeRanges::Range*, objc::SafeRanges::Range*, objc::SafeRanges::Range*, objc::SafeRanges::find(unsigned long, unsigned int&)::$_0&)",
    "type": "CPP"
  },
  {
    "name": "t unsigned int std::__1::__sort5<objc::SafeRanges::find(unsigned long, unsigned int&)::$_0&, objc::SafeRanges::Range*>(objc::SafeRanges::Range*, objc::SafeRanges::Range*, objc::SafeRanges::Range*, objc::SafeRanges::Range*, objc::SafeRanges::Range*, objc::SafeRanges::find(unsigned long, unsigned int&)::$_0&)",
    "type": "CPP"
  },
  {
    "name": "t bool std::__1::__insertion_sort_incomplete<objc::SafeRanges::find(unsigned long, unsigned int&)::$_0&, objc::SafeRanges::Range*>(objc::SafeRanges::Range*, objc::SafeRanges::Range*, objc::SafeRanges::find(unsigned long, unsigned int&)::$_0&)",
    "type": "CPP"
  },
  {
    "name": "t objc::SafeRanges::add(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<appendHeader::$_1, std::__1::allocator<appendHeader::$_1>, void (segment_command_64 const*, long)>::~__func()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<appendHeader::$_1, std::__1::allocator<appendHeader::$_1>, void (segment_command_64 const*, long)>::~__func()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<appendHeader::$_1, std::__1::allocator<appendHeader::$_1>, void (segment_command_64 const*, long)>::__clone() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<appendHeader::$_1, std::__1::allocator<appendHeader::$_1>, void (segment_command_64 const*, long)>::__clone(std::__1::__function::__base<void (segment_command_64 const*, long)>*) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<appendHeader::$_1, std::__1::allocator<appendHeader::$_1>, void (segment_command_64 const*, long)>::destroy()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<appendHeader::$_1, std::__1::allocator<appendHeader::$_1>, void (segment_command_64 const*, long)>::destroy_deallocate()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<appendHeader::$_1, std::__1::allocator<appendHeader::$_1>, void (segment_command_64 const*, long)>::operator()(segment_command_64 const*&&, long&&)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<removeHeader::$_2, std::__1::allocator<removeHeader::$_2>, void (segment_command_64 const*, long)>::~__func()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<removeHeader::$_2, std::__1::allocator<removeHeader::$_2>, void (segment_command_64 const*, long)>::~__func()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<removeHeader::$_2, std::__1::allocator<removeHeader::$_2>, void (segment_command_64 const*, long)>::__clone() const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<removeHeader::$_2, std::__1::allocator<removeHeader::$_2>, void (segment_command_64 const*, long)>::__clone(std::__1::__function::__base<void (segment_command_64 const*, long)>*) const",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<removeHeader::$_2, std::__1::allocator<removeHeader::$_2>, void (segment_command_64 const*, long)>::destroy()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<removeHeader::$_2, std::__1::allocator<removeHeader::$_2>, void (segment_command_64 const*, long)>::destroy_deallocate()",
    "type": "CPP"
  },
  {
    "name": "t std::__1::__function::__func<removeHeader::$_2, std::__1::allocator<removeHeader::$_2>, void (segment_command_64 const*, long)>::operator()(segment_command_64 const*&&, long&&)",
    "type": "CPP"
  },
  {
    "name": "t _logReplacedMethod",
    "type": "CPP"
  },
  {
    "name": "T __objcInit",
    "type": "CPP"
  },
  {
    "name": "T _objc_setHook_getImageName",
    "type": "CPP"
  },
  {
    "name": "t internal_class_getImageName(objc_class*, char const**)",
    "type": "CPP"
  },
  {
    "name": "T _objc_enumerationMutation",
    "type": "CPP"
  },
  {
    "name": "T _objc_setHook_setAssociatedObject",
    "type": "CPP"
  },
  {
    "name": "t _base_objc_setAssociatedObject(objc_object*, void const*, objc_object*, objc_AssociationPolicy)",
    "type": "CPP"
  },
  {
    "name": "T _objc_appRequiresGC",
    "type": "CPP"
  },
  {
    "name": "t sliceRequiresGC(FileSlice)",
    "type": "CPP"
  },
  {
    "name": "t int sliceRequiresGC<Arch32>(Arch32::mh_t, FileSlice)",
    "type": "CPP"
  },
  {
    "name": "t int sliceRequiresGC<Arch64>(Arch64::mh_t, FileSlice)",
    "type": "CPP"
  },
  {
    "name": "t Arch64::isObjCSegment(char const*)",
    "type": "CPP"
  },
  {
    "name": "t __sel_registerName(char const*, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "T _sel_isMapped",
    "type": "CPP"
  },
  {
    "name": "T _objc_sync_try_enter",
    "type": "CPP"
  },
  {
    "name": "t -[Object retain]",
    "type": "CPP"
  },
  {
    "name": "t -[Object release]",
    "type": "CPP"
  },
  {
    "name": "t -[Object autorelease]",
    "type": "CPP"
  },
  {
    "name": "t +[Object initialize]",
    "type": "CPP"
  },
  {
    "name": "t +[Object class]",
    "type": "CPP"
  },
  {
    "name": "t +[Object retain]",
    "type": "CPP"
  },
  {
    "name": "t +[Object release]",
    "type": "CPP"
  },
  {
    "name": "t +[Object autorelease]",
    "type": "CPP"
  },
  {
    "name": "t -[Protocol conformsTo:]",
    "type": "CPP"
  },
  {
    "name": "t -[Protocol descriptionForInstanceMethod:]",
    "type": "CPP"
  },
  {
    "name": "t -[Protocol descriptionForClassMethod:]",
    "type": "CPP"
  },
  {
    "name": "t -[Protocol name]",
    "type": "CPP"
  },
  {
    "name": "t -[Protocol isEqual:]",
    "type": "CPP"
  },
  {
    "name": "t -[Protocol hash]",
    "type": "CPP"
  },
  {
    "name": "t mutex_tt<false>::lockTwo(mutex_tt<false>*, mutex_tt<false>*)",
    "type": "CPP"
  },
  {
    "name": "t mutex_tt<false>::unlockTwo(mutex_tt<false>*, mutex_tt<false>*)",
    "type": "CPP"
  },
  {
    "name": "T _objc_copyCppObjectAtomic",
    "type": "CPP"
  },
  {
    "name": "t bool objc::DenseMapBase<objc::DenseMap<DisguisedPtr<objc_object>, objc::DenseMap<void const*, objc::ObjcAssociation, objc::DenseMapValueInfo<objc::ObjcAssociation>, objc::DenseMapInfo<void const*>, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> >, objc::DenseMapValueInfo<objc::DenseMap<void const*, objc::ObjcAssociation, objc::DenseMapValueInfo<objc::ObjcAssociation>, objc::DenseMapInfo<void const*>, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> > >, objc::DenseMapInfo<DisguisedPtr<objc_object> >, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, objc::DenseMap<void const*, objc::ObjcAssociation, objc::DenseMapValueInfo<objc::ObjcAssociation>, objc::DenseMapInfo<void const*>, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> > > >, DisguisedPtr<objc_object>, objc::DenseMap<void const*, objc::ObjcAssociation, objc::DenseMapValueInfo<objc::ObjcAssociation>, objc::DenseMapInfo<void const*>, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> >, objc::DenseMapValueInfo<objc::DenseMap<void const*, objc::ObjcAssociation, objc::DenseMapValueInfo<objc::ObjcAssociation>, objc::DenseMapInfo<void const*>, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> > >, objc::DenseMapInfo<DisguisedPtr<objc_object> >, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, objc::DenseMap<void const*, objc::ObjcAssociation, objc::DenseMapValueInfo<objc::ObjcAssociation>, objc::DenseMapInfo<void const*>, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> > > >::LookupBucketFor<DisguisedPtr<objc_object> >(DisguisedPtr<objc_object> const&, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, objc::DenseMap<void const*, objc::ObjcAssociation, objc::DenseMapValueInfo<objc::ObjcAssociation>, objc::DenseMapInfo<void const*>, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> > > const*&) const",
    "type": "CPP"
  },
  {
    "name": "t bool objc::DenseMapBase<objc::DenseMap<void const*, objc::ObjcAssociation, objc::DenseMapValueInfo<objc::ObjcAssociation>, objc::DenseMapInfo<void const*>, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> >, void const*, objc::ObjcAssociation, objc::DenseMapValueInfo<objc::ObjcAssociation>, objc::DenseMapInfo<void const*>, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> >::LookupBucketFor<void const*>(void const* const&, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> const*&) const",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMapBase<objc::DenseMap<DisguisedPtr<objc_object>, objc::DenseMap<void const*, objc::ObjcAssociation, objc::DenseMapValueInfo<objc::ObjcAssociation>, objc::DenseMapInfo<void const*>, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> >, objc::DenseMapValueInfo<objc::DenseMap<void const*, objc::ObjcAssociation, objc::DenseMapValueInfo<objc::ObjcAssociation>, objc::DenseMapInfo<void const*>, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> > >, objc::DenseMapInfo<DisguisedPtr<objc_object> >, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, objc::DenseMap<void const*, objc::ObjcAssociation, objc::DenseMapValueInfo<objc::ObjcAssociation>, objc::DenseMapInfo<void const*>, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> > > >, DisguisedPtr<objc_object>, objc::DenseMap<void const*, objc::ObjcAssociation, objc::DenseMapValueInfo<objc::ObjcAssociation>, objc::DenseMapInfo<void const*>, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> >, objc::DenseMapValueInfo<objc::DenseMap<void const*, objc::ObjcAssociation, objc::DenseMapValueInfo<objc::ObjcAssociation>, objc::DenseMapInfo<void const*>, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> > >, objc::DenseMapInfo<DisguisedPtr<objc_object> >, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, objc::DenseMap<void const*, objc::ObjcAssociation, objc::DenseMapValueInfo<objc::ObjcAssociation>, objc::DenseMapInfo<void const*>, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> > > >::compact()",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMap<DisguisedPtr<objc_object>, objc::DenseMap<void const*, objc::ObjcAssociation, objc::DenseMapValueInfo<objc::ObjcAssociation>, objc::DenseMapInfo<void const*>, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> >, objc::DenseMapValueInfo<objc::DenseMap<void const*, objc::ObjcAssociation, objc::DenseMapValueInfo<objc::ObjcAssociation>, objc::DenseMapInfo<void const*>, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> > >, objc::DenseMapInfo<DisguisedPtr<objc_object> >, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, objc::DenseMap<void const*, objc::ObjcAssociation, objc::DenseMapValueInfo<objc::ObjcAssociation>, objc::DenseMapInfo<void const*>, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> > > >::grow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMap<void const*, objc::ObjcAssociation, objc::DenseMapValueInfo<objc::ObjcAssociation>, objc::DenseMapInfo<void const*>, objc::detail::DenseMapPair<void const*, objc::ObjcAssociation> >::grow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t ___cxa_atexit",
    "type": "CPP"
  },
  {
    "name": "T _objc_addLoadImageFunc",
    "type": "CPP"
  },
  {
    "name": "t header_info::fname() const",
    "type": "CPP"
  },
  {
    "name": "T __objc_atfork_prepare",
    "type": "CPP"
  },
  {
    "name": "T __objc_atfork_parent",
    "type": "CPP"
  },
  {
    "name": "T __objc_atfork_child",
    "type": "CPP"
  },
  {
    "name": "t __headerForClass",
    "type": "CPP"
  },
  {
    "name": "t TrampolinePointerWrapper::Initialize()",
    "type": "CPP"
  },
  {
    "name": "t TrampolinePointerWrapper::TrampolinePointers::TrampolineAddress::TrampolineAddress(void*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t _allocateTrampolinesAndData()",
    "type": "CPP"
  },
  {
    "name": "T _imp_getBlock",
    "type": "CPP"
  },
  {
    "name": "t TrampolineBlockPageGroup::indexForTrampoline(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T _imp_removeBlock",
    "type": "CPP"
  },
  {
    "name": "t _objc_weak_error",
    "type": "CPP"
  },
  {
    "name": "t bad_weak_table(weak_entry_t*)",
    "type": "CPP"
  },
  {
    "name": "t defaultBadAllocHandler(objc_class*)",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject isFault]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject isProxy]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject doesNotRecognizeSelector:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject performSelector:withObject:withObject:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject instanceMethodSignatureForSelector:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject methodSignatureForSelector:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject forwardInvocation:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject forwardingTargetForSelector:]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject description]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject debugDescription]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject _tryRetain]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject _isDeallocating]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject retainCount]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject init]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject dealloc]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject copy]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject mutableCopy]",
    "type": "CPP"
  },
  {
    "name": "t +[NSObject mutableCopyWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject doesNotRecognizeSelector:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject methodSignatureForSelector:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject forwardInvocation:]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject description]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject debugDescription]",
    "type": "CPP"
  },
  {
    "name": "t -[NSObject finalize]",
    "type": "CPP"
  },
  {
    "name": "t objc_object::sidetable_lock()",
    "type": "CPP"
  },
  {
    "name": "t bool objc::DenseMapBase<objc::DenseMap<DisguisedPtr<objc_object>, unsigned long, (anonymous namespace)::RefcountMapValuePurgeable, objc::DenseMapInfo<DisguisedPtr<objc_object> >, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, unsigned long> >, DisguisedPtr<objc_object>, unsigned long, (anonymous namespace)::RefcountMapValuePurgeable, objc::DenseMapInfo<DisguisedPtr<objc_object> >, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, unsigned long> >::LookupBucketFor<DisguisedPtr<objc_object> >(DisguisedPtr<objc_object> const&, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, unsigned long>*&)",
    "type": "CPP"
  },
  {
    "name": "T _objc_unsafeClaimAutoreleasedReturnValue",
    "type": "CPP"
  },
  {
    "name": "t AutoreleasePoolPage::autoreleaseFullPage(objc_object*, AutoreleasePoolPage*)",
    "type": "CPP"
  },
  {
    "name": "t AutoreleasePoolPage::autoreleaseNoPage(objc_object*)",
    "type": "CPP"
  },
  {
    "name": "t _objc_autoreleaseNoPool",
    "type": "CPP"
  },
  {
    "name": "t void AutoreleasePoolPage::busted<void (*)(char const*, ...)>(void (*)(char const*, ...)) const",
    "type": "CPP"
  },
  {
    "name": "t objc_releaseAndReturn(objc_object*)",
    "type": "CPP"
  },
  {
    "name": "t objc_object::overrelease_error()",
    "type": "CPP"
  },
  {
    "name": "t _objc_overrelease_during_dealloc_error",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMapBase<objc::DenseMap<DisguisedPtr<objc_object>, unsigned long, (anonymous namespace)::RefcountMapValuePurgeable, objc::DenseMapInfo<DisguisedPtr<objc_object> >, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, unsigned long> >, DisguisedPtr<objc_object>, unsigned long, (anonymous namespace)::RefcountMapValuePurgeable, objc::DenseMapInfo<DisguisedPtr<objc_object> >, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, unsigned long> >::operator[](DisguisedPtr<objc_object>&&)",
    "type": "CPP"
  },
  {
    "name": "t objc::detail::DenseMapPair<DisguisedPtr<objc_object>, unsigned long>* objc::DenseMapBase<objc::DenseMap<DisguisedPtr<objc_object>, unsigned long, (anonymous namespace)::RefcountMapValuePurgeable, objc::DenseMapInfo<DisguisedPtr<objc_object> >, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, unsigned long> >, DisguisedPtr<objc_object>, unsigned long, (anonymous namespace)::RefcountMapValuePurgeable, objc::DenseMapInfo<DisguisedPtr<objc_object> >, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, unsigned long> >::InsertIntoBucketImpl<DisguisedPtr<objc_object> >(DisguisedPtr<objc_object> const&, DisguisedPtr<objc_object> const&, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, unsigned long>*)",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMapBase<objc::DenseMap<DisguisedPtr<objc_object>, unsigned long, (anonymous namespace)::RefcountMapValuePurgeable, objc::DenseMapInfo<DisguisedPtr<objc_object> >, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, unsigned long> >, DisguisedPtr<objc_object>, unsigned long, (anonymous namespace)::RefcountMapValuePurgeable, objc::DenseMapInfo<DisguisedPtr<objc_object> >, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, unsigned long> >::grow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::pair<objc::DenseMapIterator<DisguisedPtr<objc_object>, unsigned long, (anonymous namespace)::RefcountMapValuePurgeable, objc::DenseMapInfo<DisguisedPtr<objc_object> >, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, unsigned long>, false>, bool> objc::DenseMapBase<objc::DenseMap<DisguisedPtr<objc_object>, unsigned long, (anonymous namespace)::RefcountMapValuePurgeable, objc::DenseMapInfo<DisguisedPtr<objc_object> >, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, unsigned long> >, DisguisedPtr<objc_object>, unsigned long, (anonymous namespace)::RefcountMapValuePurgeable, objc::DenseMapInfo<DisguisedPtr<objc_object> >, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, unsigned long> >::try_emplace<unsigned long>(DisguisedPtr<objc_object>&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "t -[__NSUnrecognizedTaggedPointer retain]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSUnrecognizedTaggedPointer release]",
    "type": "CPP"
  },
  {
    "name": "t -[__NSUnrecognizedTaggedPointer autorelease]",
    "type": "CPP"
  },
  {
    "name": "t _objc_autoreleasePoolInvalid",
    "type": "CPP"
  },
  {
    "name": "T _objc_should_deallocate",
    "type": "CPP"
  },
  {
    "name": "T _objc_retain_autorelease",
    "type": "CPP"
  },
  {
    "name": "T _objc_initWeakOrNil",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMapBase<objc::DenseMap<DisguisedPtr<objc_object>, unsigned long, (anonymous namespace)::RefcountMapValuePurgeable, objc::DenseMapInfo<DisguisedPtr<objc_object> >, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, unsigned long> >, DisguisedPtr<objc_object>, unsigned long, (anonymous namespace)::RefcountMapValuePurgeable, objc::DenseMapInfo<DisguisedPtr<objc_object> >, objc::detail::DenseMapPair<DisguisedPtr<objc_object>, unsigned long> >::compact()",
    "type": "CPP"
  },
  {
    "name": "t objc_object::sidetable_moveExtraRC_nolock(unsigned long, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "T _objc_alloc",
    "type": "CPP"
  },
  {
    "name": "T _objc_allocWithZone",
    "type": "CPP"
  },
  {
    "name": "T _objc_alloc_init",
    "type": "CPP"
  },
  {
    "name": "T _objc_opt_new",
    "type": "CPP"
  },
  {
    "name": "T _objc_opt_self",
    "type": "CPP"
  },
  {
    "name": "T _objc_opt_class",
    "type": "CPP"
  },
  {
    "name": "T _objc_opt_isKindOfClass",
    "type": "CPP"
  },
  {
    "name": "T _objc_opt_respondsToSelector",
    "type": "CPP"
  },
  {
    "name": "T __objc_rootFinalize",
    "type": "CPP"
  },
  {
    "name": "T __objc_rootInit",
    "type": "CPP"
  },
  {
    "name": "t AutoreleasePoolPage::autoreleaseNewPage(objc_object*)",
    "type": "CPP"
  },
  {
    "name": "t AutoreleasePoolPage::releaseUntil(objc_object**)",
    "type": "CPP"
  },
  {
    "name": "t AutoreleasePoolPage::kill()",
    "type": "CPP"
  },
  {
    "name": "T __objc_autoreleasePoolPush",
    "type": "CPP"
  },
  {
    "name": "T __objc_autoreleasePoolPop",
    "type": "CPP"
  },
  {
    "name": "T __objc_autoreleasePoolPrint",
    "type": "CPP"
  },
  {
    "name": "T __objc_deallocOnMainThreadHelper",
    "type": "CPP"
  },
  {
    "name": "T _objc_retainedObject",
    "type": "CPP"
  },
  {
    "name": "T _objc_unretainedObject",
    "type": "CPP"
  },
  {
    "name": "T _objc_unretainedPointer",
    "type": "CPP"
  },
  {
    "name": "t AutoreleasePoolPage::tls_dealloc(void*)",
    "type": "CPP"
  },
  {
    "name": "t header_info::nlclslist(unsigned long*) const",
    "type": "CPP"
  },
  {
    "name": "t header_info::catlist(unsigned long*) const",
    "type": "CPP"
  },
  {
    "name": "t _getSharedCachePreoptimizedProtocol",
    "type": "CPP"
  },
  {
    "name": "t ___getPreoptimizedProtocol_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32c36_ZTSKZ23getPreoptimizedProtocolE3$_1",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_e8_32.599",
    "type": "CPP"
  },
  {
    "name": "t ___getPreoptimizedClass_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_e8_32c33_ZTSKZ20getPreoptimizedClassE3$_2",
    "type": "CPP"
  },
  {
    "name": "t _copyPreoptimizedClasses",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin_probe",
    "type": "CPP"
  },
  {
    "name": "t cache_t::bad_cache(objc_object*, objc_selector*, objc_class*)",
    "type": "CPP"
  },
  {
    "name": "t _objc_error(objc_object*, char const*, __va_list_tag*)",
    "type": "CPP"
  },
  {
    "name": "t _objc_fatal(char const*, ...)",
    "type": "CPP"
  },
  {
    "name": "t _objc_fatalv(unsigned long long, unsigned long long, char const*, __va_list_tag*)",
    "type": "CPP"
  },
  {
    "name": "t ___objc_error",
    "type": "CPP"
  },
  {
    "name": "t _objc_fatal_with_reason(unsigned long long, unsigned long long, char const*, ...)",
    "type": "CPP"
  },
  {
    "name": "t __objc_inform",
    "type": "CPP"
  },
  {
    "name": "t __objc_inform_now_and_on_crash",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMapBase<objc::DenseMap<objc_class*, PendingInitialize*, objc::DenseMapValueInfo<PendingInitialize*>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, PendingInitialize*> >, objc_class*, PendingInitialize*, objc::DenseMapValueInfo<PendingInitialize*>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, PendingInitialize*> >::FatalCorruptHashTables(objc::detail::DenseMapPair<objc_class*, PendingInitialize*> const*, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMapBase<objc::DenseMap<method_t const*, void (*)(), objc::DenseMapValueInfo<void (*)()>, objc::DenseMapInfo<method_t const*>, objc::detail::DenseMapPair<method_t const*, void (*)()> >, method_t const*, void (*)(), objc::DenseMapValueInfo<void (*)()>, objc::DenseMapInfo<method_t const*>, objc::detail::DenseMapPair<method_t const*, void (*)()> >::FatalCorruptHashTables(objc::detail::DenseMapPair<method_t const*, void (*)()> const*, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMapBase<objc::DenseMap<method_t const*, objc_method_description*, objc::DenseMapValueInfo<objc_method_description*>, objc::DenseMapInfo<method_t const*>, objc::detail::DenseMapPair<method_t const*, objc_method_description*> >, method_t const*, objc_method_description*, objc::DenseMapValueInfo<objc_method_description*>, objc::DenseMapInfo<method_t const*>, objc::detail::DenseMapPair<method_t const*, objc_method_description*> >::FatalCorruptHashTables(objc::detail::DenseMapPair<method_t const*, objc_method_description*> const*, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMapBase<objc::DenseMap<objc_class*, objc_class*, objc::DenseMapValueInfo<objc_class*>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, objc_class*> >, objc_class*, objc_class*, objc::DenseMapValueInfo<objc_class*>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, objc_class*> >::FatalCorruptHashTables(objc::detail::DenseMapPair<objc_class*, objc_class*> const*, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "t objc::DenseMapBase<objc::DenseMap<objc_class*, objc::category_list, objc::DenseMapValueInfo<objc::category_list>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, objc::category_list> >, objc_class*, objc::category_list, objc::DenseMapValueInfo<objc::category_list>, objc::DenseMapInfo<objc_class*>, objc::detail::DenseMapPair<objc_class*, objc::category_list> >::FatalCorruptHashTables(objc::detail::DenseMapPair<objc_class*, objc::category_list> const*, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/libfakelink.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _fakelink_get_property",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/libDiagnosticMessagesClient.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "/usr/lib/libicucore.A.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T icu::Appendable::~Appendable()",
    "type": "CPP"
  },
  {
    "name": "T icu::Appendable::~Appendable()",
    "type": "CPP"
  },
  {
    "name": "T icu::Appendable::~Appendable()",
    "type": "CPP"
  },
  {
    "name": "T icu::Appendable::appendCodePoint(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Appendable::appendString(char16_t const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Appendable::reserveAppendCapacity(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Appendable::getAppendBuffer(int, int, char16_t*, int, int*)",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::buildInstance(icu::Locale const&, char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::createWordInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::createInstance(icu::Locale const&, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::createLineInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::createCharacterInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::createSentenceInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::createTitleInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::getAvailableLocales(int&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::BreakIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::BreakIterator(icu::BreakIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::operator=(icu::BreakIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::~BreakIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::~BreakIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::~BreakIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::makeInstance(icu::Locale const&, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::getLocale(ULocDataLocaleType, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::getLocaleID(ULocDataLocaleType, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::getRuleStatus() const",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::getRuleStatusVec(int*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::BreakIterator(icu::Locale const&, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ByteSinkUtil::appendChange(int, char16_t const*, int, icu::ByteSink&, icu::Edits*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ByteSinkUtil::appendChange(unsigned char const*, unsigned char const*, char16_t const*, int, icu::ByteSink&, icu::Edits*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ByteSinkUtil::appendCodePoint(int, int, icu::ByteSink&, icu::Edits*)",
    "type": "CPP"
  },
  {
    "name": "T icu::ByteSinkUtil::appendTwoBytes(int, icu::ByteSink&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ByteSinkUtil::appendNonEmptyUnchanged(unsigned char const*, int, icu::ByteSink&, unsigned int, icu::Edits*)",
    "type": "CPP"
  },
  {
    "name": "T icu::ByteSinkUtil::appendUnchanged(unsigned char const*, unsigned char const*, icu::ByteSink&, unsigned int, icu::Edits*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ByteSink::~ByteSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::ByteSink::~ByteSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::ByteSink::~ByteSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::ByteSink::GetAppendBuffer(int, int, char*, int, int*)",
    "type": "CPP"
  },
  {
    "name": "T icu::ByteSink::Flush()",
    "type": "CPP"
  },
  {
    "name": "T icu::CheckedArrayByteSink::CheckedArrayByteSink(char*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CheckedArrayByteSink::CheckedArrayByteSink(char*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CheckedArrayByteSink::~CheckedArrayByteSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::CheckedArrayByteSink::~CheckedArrayByteSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::CheckedArrayByteSink::~CheckedArrayByteSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::CheckedArrayByteSink::Reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::CheckedArrayByteSink::Append(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CheckedArrayByteSink::GetAppendBuffer(int, int, char*, int, int*)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::~BytesTrie()",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::~BytesTrie()",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::readValue(unsigned char const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::jumpByDelta(unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::current() const",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::branchNext(unsigned char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::nextImpl(unsigned char const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::next(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::next(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::findUniqueValueFromBranch(unsigned char const*, int, signed char, int&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::findUniqueValue(unsigned char const*, signed char, int&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::getNextBytes(icu::ByteSink&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::append(icu::ByteSink&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::getNextBranchBytes(unsigned char const*, int, icu::ByteSink&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::BytesTrieBuilder(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::BytesTrieBuilder(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::~BytesTrieBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::~BytesTrieBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::~BytesTrieBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::add(icu::StringPiece, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::build(UStringTrieBuildOption, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::buildBytes(UStringTrieBuildOption, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::buildStringPiece(UStringTrieBuildOption, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::clear()",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::getElementStringLength(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::getElementUnit(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::getElementValue(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::getLimitOfLinearMatch(int, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::countElementUnits(int, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::skipElementsBySomeUnits(int, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::indexOfElementWithNextUnit(int, int, char16_t) const",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::BTLinearMatchNode::BTLinearMatchNode(char const*, int, icu::StringTrieBuilder::Node*)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::BTLinearMatchNode::BTLinearMatchNode(char const*, int, icu::StringTrieBuilder::Node*)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::BTLinearMatchNode::operator==(icu::StringTrieBuilder::Node const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::BTLinearMatchNode::write(icu::StringTrieBuilder&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::write(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::createLinearMatchNode(int, int, int, icu::StringTrieBuilder::Node*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::ensureCapacity(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::write(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::writeElementUnits(int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::writeValueAndFinal(int, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::writeValueAndType(signed char, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrieBuilder::writeDeltaTo(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::Iterator::Iterator(void const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::Iterator::Iterator(void const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::Iterator::Iterator(icu::BytesTrie const&, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::Iterator::Iterator(icu::BytesTrie const&, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::Iterator::~Iterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::Iterator::~Iterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::Iterator::reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::Iterator::hasNext() const",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::Iterator::next(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::Iterator::branchNext(unsigned char const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::Iterator::truncateAndStop()",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesTrie::Iterator::getString() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CanonicalIterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::CanonicalIterator::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CanonicalIterator::CanonicalIterator(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CanonicalIterator::setSource(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CanonicalIterator::CanonicalIterator(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CanonicalIterator::~CanonicalIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::CanonicalIterator::cleanPieces()",
    "type": "CPP"
  },
  {
    "name": "T icu::CanonicalIterator::~CanonicalIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::CanonicalIterator::~CanonicalIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::CanonicalIterator::getSource()",
    "type": "CPP"
  },
  {
    "name": "T icu::CanonicalIterator::reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::CanonicalIterator::next()",
    "type": "CPP"
  },
  {
    "name": "T icu::CanonicalIterator::getEquivalents(icu::UnicodeString const&, int&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CanonicalIterator::permute(icu::UnicodeString&, signed char, icu::Hashtable*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CanonicalIterator::getEquivalents2(icu::Hashtable*, char16_t const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CanonicalIterator::extract(icu::Hashtable*, int, char16_t const*, int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T _u_getBinaryPropertySet",
    "type": "CPP"
  },
  {
    "name": "T _u_getIntPropertyMap",
    "type": "CPP"
  },
  {
    "name": "T icu::ForwardCharacterIterator::~ForwardCharacterIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::ForwardCharacterIterator::~ForwardCharacterIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::ForwardCharacterIterator::~ForwardCharacterIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::ForwardCharacterIterator::ForwardCharacterIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::ForwardCharacterIterator::ForwardCharacterIterator(icu::ForwardCharacterIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CharacterIterator::CharacterIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::CharacterIterator::CharacterIterator(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CharacterIterator::CharacterIterator(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CharacterIterator::CharacterIterator(int, int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CharacterIterator::~CharacterIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::CharacterIterator::~CharacterIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::CharacterIterator::~CharacterIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::CharacterIterator::CharacterIterator(icu::CharacterIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CharacterIterator::operator=(icu::CharacterIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CharacterIterator::firstPostInc()",
    "type": "CPP"
  },
  {
    "name": "T icu::CharacterIterator::first32PostInc()",
    "type": "CPP"
  },
  {
    "name": "T icu::CharString::CharString(icu::CharString&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CharString::CharString(icu::CharString&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CharString::operator=(icu::CharString&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CharString::copyFrom(icu::CharString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CharString::ensureCapacity(int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CharString::lastIndexOf(char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CharString::truncate(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CharString::append(char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CharString::append(char const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CharString::getAppendBuffer(int, int, int&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CharString::appendInvariantChars(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CharString::appendInvariantChars(char16_t const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CharString::appendPathPart(icu::StringPiece, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CharString::ensureEndsWithFileSeparator(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T _uprv_malloc",
    "type": "CPP"
  },
  {
    "name": "T _uprv_realloc",
    "type": "CPP"
  },
  {
    "name": "T _uprv_free",
    "type": "CPP"
  },
  {
    "name": "T _uprv_calloc",
    "type": "CPP"
  },
  {
    "name": "T _u_setMemoryFunctions",
    "type": "CPP"
  },
  {
    "name": "T icu::CStr::CStr(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CStr::CStr(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CStr::~CStr()",
    "type": "CPP"
  },
  {
    "name": "T icu::CStr::~CStr()",
    "type": "CPP"
  },
  {
    "name": "T icu::CStr::operator()() const",
    "type": "CPP"
  },
  {
    "name": "T _uprv_isASCIILetter",
    "type": "CPP"
  },
  {
    "name": "T _uprv_toupper",
    "type": "CPP"
  },
  {
    "name": "T _uprv_asciitolower",
    "type": "CPP"
  },
  {
    "name": "T _uprv_ebcdictolower",
    "type": "CPP"
  },
  {
    "name": "T _T_CString_toLowerCase",
    "type": "CPP"
  },
  {
    "name": "T _T_CString_toUpperCase",
    "type": "CPP"
  },
  {
    "name": "T _T_CString_integerToString",
    "type": "CPP"
  },
  {
    "name": "T _T_CString_int64ToString",
    "type": "CPP"
  },
  {
    "name": "T _T_CString_stringToInteger",
    "type": "CPP"
  },
  {
    "name": "T _uprv_stricmp",
    "type": "CPP"
  },
  {
    "name": "T _uprv_strnicmp",
    "type": "CPP"
  },
  {
    "name": "T _uprv_strdup",
    "type": "CPP"
  },
  {
    "name": "T _uprv_strndup",
    "type": "CPP"
  },
  {
    "name": "T icu::DictionaryMatcher::~DictionaryMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::DictionaryMatcher::~DictionaryMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::DictionaryMatcher::~DictionaryMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsDictionaryMatcher::~UCharsDictionaryMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsDictionaryMatcher::~UCharsDictionaryMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsDictionaryMatcher::~UCharsDictionaryMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsDictionaryMatcher::getType() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsDictionaryMatcher::matches(UText*, int, int, int*, int*, int*, int*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesDictionaryMatcher::~BytesDictionaryMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesDictionaryMatcher::~BytesDictionaryMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesDictionaryMatcher::~BytesDictionaryMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesDictionaryMatcher::transform(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesDictionaryMatcher::getType() const",
    "type": "CPP"
  },
  {
    "name": "T icu::BytesDictionaryMatcher::matches(UText*, int, int, int*, int*, int*, int*) const",
    "type": "CPP"
  },
  {
    "name": "T _udict_swap",
    "type": "CPP"
  },
  {
    "name": "T icu::DateInterval::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateInterval::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateInterval::DateInterval(double, double)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateInterval::DateInterval(double, double)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateInterval::~DateInterval()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateInterval::~DateInterval()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateInterval::~DateInterval()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateInterval::DateInterval(icu::DateInterval const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateInterval::operator=(icu::DateInterval const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateInterval::DateInterval(icu::DateInterval const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateInterval::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateInterval::operator==(icu::DateInterval const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::releaseArray()",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::copyArray(icu::Edits const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::moveArray(icu::Edits&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::operator=(icu::Edits const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::operator=(icu::Edits&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::~Edits()",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::~Edits()",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::addUnchanged(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::append(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::addReplace(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::growArray()",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::copyErrorTo(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::mergeAndAppend(icu::Edits const&, icu::Edits const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::Iterator::Iterator(unsigned short const*, int, signed char, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::Iterator::Iterator(unsigned short const*, int, signed char, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::Iterator::readLength(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::Iterator::updateNextIndexes()",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::Iterator::updatePreviousIndexes()",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::Iterator::noNext()",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::Iterator::next(signed char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::Iterator::previous(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::Iterator::findIndex(int, signed char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::Iterator::destinationIndexFromSourceIndex(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::Iterator::sourceIndexFromDestinationIndex(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Edits::Iterator::toString(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ErrorCode::~ErrorCode()",
    "type": "CPP"
  },
  {
    "name": "T icu::ErrorCode::~ErrorCode()",
    "type": "CPP"
  },
  {
    "name": "T icu::ErrorCode::~ErrorCode()",
    "type": "CPP"
  },
  {
    "name": "T icu::ErrorCode::reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::ErrorCode::assertSuccess() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ErrorCode::errorName() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UStringSet::~UStringSet()",
    "type": "CPP"
  },
  {
    "name": "T icu::UStringSet::~UStringSet()",
    "type": "CPP"
  },
  {
    "name": "T icu::UStringSet::~UStringSet()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFilteredBreakIteratorBuilder::~SimpleFilteredBreakIteratorBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredBreakIteratorBuilder::~FilteredBreakIteratorBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFilteredBreakIteratorBuilder::~SimpleFilteredBreakIteratorBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFilteredBreakIteratorBuilder::~SimpleFilteredBreakIteratorBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFilteredBreakIteratorBuilder::SimpleFilteredBreakIteratorBuilder(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredBreakIteratorBuilder::FilteredBreakIteratorBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFilteredBreakIteratorBuilder::SimpleFilteredBreakIteratorBuilder(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFilteredBreakIteratorBuilder::SimpleFilteredBreakIteratorBuilder(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFilteredBreakIteratorBuilder::SimpleFilteredBreakIteratorBuilder(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFilteredBreakIteratorBuilder::suppressBreakAfter(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFilteredBreakIteratorBuilder::unsuppressBreakAfter(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFilteredBreakIteratorBuilder::build(icu::BreakIterator*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredBreakIteratorBuilder::~FilteredBreakIteratorBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredBreakIteratorBuilder::~FilteredBreakIteratorBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredBreakIteratorBuilder::createInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredBreakIteratorBuilder::createInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredBreakIteratorBuilder::createEmptyInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::~FilteredNormalizer2()",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::~FilteredNormalizer2()",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::~FilteredNormalizer2()",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::normalize(icu::UnicodeString const&, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::normalize(icu::UnicodeString const&, icu::UnicodeString&, USetSpanCondition, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::normalizeUTF8(unsigned int, icu::StringPiece, icu::ByteSink&, icu::Edits*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::normalizeUTF8(unsigned int, char const*, int, icu::ByteSink&, icu::Edits*, USetSpanCondition, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::normalizeSecondAndAppend(icu::UnicodeString&, icu::UnicodeString const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::normalizeSecondAndAppend(icu::UnicodeString&, icu::UnicodeString const&, signed char, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::append(icu::UnicodeString&, icu::UnicodeString const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::getDecomposition(int, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::getRawDecomposition(int, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::composePair(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::getCombiningClass(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::isNormalized(icu::UnicodeString const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::isNormalizedUTF8(icu::StringPiece, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::quickCheck(icu::UnicodeString const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::spanQuickCheckYes(icu::UnicodeString const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::hasBoundaryBefore(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::hasBoundaryAfter(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FilteredNormalizer2::isInert(int) const",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_openFiltered",
    "type": "CPP"
  },
  {
    "name": "T _u_getDataVersion",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2::getNFKCInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2::getNFKDInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2::getNFKCCasefoldInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2::getInstance(char const*, char const*, UNormalization2Mode, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Factory::getInstance(UNormalizationMode, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Factory::getNFKCImpl(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Factory::getNFKC_CFImpl(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_getNFKCInstance",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_getNFKDInstance",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_getNFKCCasefoldInstance",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_getInstance",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBuilder::LocaleBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBuilder::LocaleBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBuilder::~LocaleBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBuilder::~LocaleBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBuilder::~LocaleBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBuilder::setLocale(icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBuilder::clear()",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBuilder::setLanguage(icu::StringPiece)",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBuilder::setScript(icu::StringPiece)",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBuilder::setRegion(icu::StringPiece)",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBuilder::setVariant(icu::StringPiece)",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBuilder::setLanguageTag(icu::StringPiece)",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBuilder::setExtension(char, icu::StringPiece)",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBuilder::setUnicodeLocaleKeyword(icu::StringPiece, icu::StringPiece)",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBuilder::addUnicodeLocaleAttribute(icu::StringPiece)",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBuilder::removeUnicodeLocaleAttribute(icu::StringPiece)",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBuilder::clearExtensions()",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBuilder::build(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T _uprv_svc_hook",
    "type": "CPP"
  },
  {
    "name": "T _uloc_countAvailable",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getAvailable",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getAvailableLocales(int&)",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBased::getLocale(ULocDataLocaleType, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBased::getLocaleID(ULocDataLocaleType, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBased::setLocaleIDs(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleBased::setLocaleIDs(icu::Locale const&, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getDisplayLanguage(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getDisplayLanguage(icu::Locale const&, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getDisplayLanguage",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getDisplayScript(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getDisplayScript(icu::Locale const&, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getDisplayScript",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getDisplayCountry(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getDisplayCountry(icu::Locale const&, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getDisplayCountry",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getDisplayVariant(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getDisplayVariant(icu::Locale const&, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getDisplayVariant",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getDisplayName(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getDisplayName(icu::Locale const&, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getDisplayName",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::getDisplayName(icu::Locale const&, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakIterator::getDisplayName(icu::Locale const&, icu::Locale const&, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getDisplayScriptInContext",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getDisplayKeyword",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getDisplayKeywordValue",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleDisplayNames::~LocaleDisplayNames()",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleDisplayNames::~LocaleDisplayNames()",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleDisplayNames::~LocaleDisplayNames()",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleDisplayNames::createInstance(icu::Locale const&, UDialectHandling)",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleDisplayNames::createInstance(icu::Locale const&, UDisplayContext*, int)",
    "type": "CPP"
  },
  {
    "name": "T _uldn_open",
    "type": "CPP"
  },
  {
    "name": "T _uldn_openForContext",
    "type": "CPP"
  },
  {
    "name": "T _uldn_close",
    "type": "CPP"
  },
  {
    "name": "T _uldn_getLocale",
    "type": "CPP"
  },
  {
    "name": "T _uldn_getDialectHandling",
    "type": "CPP"
  },
  {
    "name": "T _uldn_getContext",
    "type": "CPP"
  },
  {
    "name": "T _uldn_localeDisplayName",
    "type": "CPP"
  },
  {
    "name": "T _uldn_languageDisplayName",
    "type": "CPP"
  },
  {
    "name": "T _uldn_scriptDisplayName",
    "type": "CPP"
  },
  {
    "name": "T _uldn_scriptCodeDisplayName",
    "type": "CPP"
  },
  {
    "name": "T _uldn_regionDisplayName",
    "type": "CPP"
  },
  {
    "name": "T _uldn_variantDisplayName",
    "type": "CPP"
  },
  {
    "name": "T _uldn_keyDisplayName",
    "type": "CPP"
  },
  {
    "name": "T _uldn_keyValueDisplayName",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::Locale(icu::Locale::ELocaleType)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::init(char const*, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getDefault()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::~Locale()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::~Locale()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::~Locale()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::Locale()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::Locale()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::Locale(icu::Locale::ELocaleType)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::setToBogus()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::Locale(char const*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::Locale(char const*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::Locale(icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::operator=(icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::Locale(icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::Locale(icu::Locale&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::operator=(icu::Locale&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::Locale(icu::Locale&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::operator==(icu::Locale const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::initBaseName(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::hashCode() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::setDefault(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::addLikelySubtags(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::minimizeSubtags(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::forLanguageTag(icu::StringPiece, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::toLanguageTag(icu::ByteSink&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::createFromName(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::createCanonical(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getISO3Language() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getISO3Country() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getLCID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getISOCountries()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getISOLanguages()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::setFromPOSIXID(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getRoot()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getLocale(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getEnglish()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getFrench()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getGerman()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getItalian()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getJapanese()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getKorean()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getChinese()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getSimplifiedChinese()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getTraditionalChinese()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getFrance()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getGermany()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getItaly()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getJapan()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getKorea()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getChina()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getPRC()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getTaiwan()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getUK()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getUS()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getCanada()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getCanadaFrench()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getLocaleCache()",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::createKeywords(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::createUnicodeKeywords(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getKeywordValue(char const*, char*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getKeywordValue(icu::StringPiece, icu::ByteSink&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getUnicodeKeywordValue(icu::StringPiece, icu::ByteSink&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::setKeywordValue(char const*, char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::setKeywordValue(icu::StringPiece, icu::StringPiece, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::setUnicodeKeywordValue(icu::StringPiece, icu::StringPiece, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::getBaseName() const",
    "type": "CPP"
  },
  {
    "name": "T _uloc_addLikelySubtags",
    "type": "CPP"
  },
  {
    "name": "T _ulocimp_addLikelySubtags",
    "type": "CPP"
  },
  {
    "name": "T _uloc_minimizeSubtags",
    "type": "CPP"
  },
  {
    "name": "T _ulocimp_minimizeSubtags",
    "type": "CPP"
  },
  {
    "name": "T _uloc_isRightToLeft",
    "type": "CPP"
  },
  {
    "name": "T icu::Locale::isRightToLeft() const",
    "type": "CPP"
  },
  {
    "name": "T _ulocimp_getRegionForSupplementalData",
    "type": "CPP"
  },
  {
    "name": "T _uprv_convertToPosix",
    "type": "CPP"
  },
  {
    "name": "T _uprv_convertToLCIDPlatform",
    "type": "CPP"
  },
  {
    "name": "T _uprv_convertToLCID",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getTableStringWithFallback",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getCharacterOrientation",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getLineOrientation",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleUtility::canonicalLocaleString(icu::UnicodeString const*, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleUtility::initLocaleFromName(icu::UnicodeString const&, icu::Locale&)",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleUtility::initNameFromLocale(icu::Locale const&, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleUtility::getAvailableLocaleNames(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleUtility::isFallbackOf(icu::UnicodeString const&, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::MessagePattern(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::init(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::MessagePattern(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::MessagePattern(UMessagePatternApostropheMode, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::MessagePattern(UMessagePatternApostropheMode, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::MessagePattern(icu::UnicodeString const&, UParseError*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::parse(icu::UnicodeString const&, UParseError*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::MessagePattern(icu::UnicodeString const&, UParseError*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::MessagePattern(icu::MessagePattern const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::copyStorage(icu::MessagePattern const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::clear()",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::MessagePattern(icu::MessagePattern const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::operator=(icu::MessagePattern const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::~MessagePattern()",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::~MessagePattern()",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::~MessagePattern()",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::preParse(icu::UnicodeString const&, UParseError*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::parseMessage(int, int, int, UMessagePatternArgType, UParseError*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::postParse()",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::parseChoiceStyle(icu::UnicodeString const&, UParseError*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::parseChoiceStyle(int, int, UParseError*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::parsePluralStyle(icu::UnicodeString const&, UParseError*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::parsePluralOrSelectStyle(UMessagePatternArgType, int, int, UParseError*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::parseSelectStyle(icu::UnicodeString const&, UParseError*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::operator==(icu::MessagePattern const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::hashCode() const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::validateArgumentName(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::parseArgNumber(icu::UnicodeString const&, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::autoQuoteApostropheDeep() const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::getNumericValue(icu::MessagePattern::Part const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::getPluralOffset(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::Part::operator==(icu::MessagePattern::Part const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::addPart(UMessagePatternPartType, int, int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::parseArg(int, int, int, UParseError*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::addLimitPart(int, UMessagePatternPartType, int, int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::inTopLevelChoiceMessage(int, UMessagePatternArgType)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::setParseError(UParseError*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::skipWhiteSpace(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::skipIdentifier(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::isArgTypeChar(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::isChoice(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::isPlural(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::isSelect(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::isOrdinal(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::parseSimpleStyle(int, UParseError*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::skipDouble(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::parseDouble(int, int, signed char, UParseError*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::inMessageFormatPattern(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessagePattern::addArgDoublePart(double, int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageImpl::appendReducedApostrophes(icu::UnicodeString const&, int, int, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageImpl::appendSubMessageWithoutSkipSyntax(icu::MessagePattern const&, int, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2::~Normalizer2()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2::~Normalizer2()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2::~Normalizer2()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2::normalizeUTF8(unsigned int, icu::StringPiece, icu::ByteSink&, icu::Edits*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2::getRawDecomposition(int, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2::composePair(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2::getCombiningClass(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2::isNormalizedUTF8(icu::StringPiece, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Factory::getNoopInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Factory::getImpl(icu::Normalizer2 const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2::getNFCInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2::getNFDInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Factory::getFCDInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Factory::getFCCInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Factory::getNFCImpl(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_getNFCInstance",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_getNFDInstance",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_close",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_normalize",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_normalizeSecondAndAppend",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_append",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_getDecomposition",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_getRawDecomposition",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_composePair",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_getCombiningClass",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_isNormalized",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_quickCheck",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_spanQuickCheckYes",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_hasBoundaryBefore",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_hasBoundaryAfter",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_isInert",
    "type": "CPP"
  },
  {
    "name": "T _u_getCombiningClass",
    "type": "CPP"
  },
  {
    "name": "T icu::ReorderingBuffer::ReorderingBuffer(icu::Normalizer2Impl const&, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ReorderingBuffer::ReorderingBuffer(icu::Normalizer2Impl const&, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ReorderingBuffer::init(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ReorderingBuffer::previousCC()",
    "type": "CPP"
  },
  {
    "name": "T icu::ReorderingBuffer::equals(char16_t const*, char16_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ReorderingBuffer::equals(unsigned char const*, unsigned char const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ReorderingBuffer::appendSupplementary(int, unsigned char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ReorderingBuffer::resize(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ReorderingBuffer::insert(int, unsigned char)",
    "type": "CPP"
  },
  {
    "name": "T icu::ReorderingBuffer::append(char16_t const*, int, signed char, unsigned char, unsigned char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ReorderingBuffer::appendZeroCC(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ReorderingBuffer::appendZeroCC(char16_t const*, char16_t const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ReorderingBuffer::remove()",
    "type": "CPP"
  },
  {
    "name": "T icu::ReorderingBuffer::removeSuffix(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::ReorderingBuffer::skipPrevious()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::~Normalizer2Impl()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::~Normalizer2Impl()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::~Normalizer2Impl()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::init(int const*, UCPTrie const*, unsigned short const*, unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::addLcccChars(icu::UnicodeSet&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::addPropertyStarts(USetAdder const*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::addCanonIterPropertyStarts(USetAdder const*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::ensureCanonIterData(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::copyLowPrefixFromNulTerminated(char16_t const*, int, icu::ReorderingBuffer*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::decompose(icu::UnicodeString const&, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::decompose(char16_t const*, char16_t const*, icu::UnicodeString&, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::decompose(char16_t const*, char16_t const*, icu::ReorderingBuffer*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::decompose(int, unsigned short, icu::ReorderingBuffer&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::decomposeShort(char16_t const*, char16_t const*, signed char, signed char, icu::ReorderingBuffer&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::decomposeShort(unsigned char const*, unsigned char const*, signed char, signed char, icu::ReorderingBuffer&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::getDecomposition(int, char16_t*, int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::getRawDecomposition(int, char16_t*, int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::decomposeAndAppend(char16_t const*, char16_t const*, signed char, icu::UnicodeString&, icu::ReorderingBuffer&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::hasDecompBoundaryBefore(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::norm16HasDecompBoundaryBefore(unsigned short) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::hasDecompBoundaryAfter(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::norm16HasDecompBoundaryAfter(unsigned short) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::combine(unsigned short const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::addComposites(unsigned short const*, icu::UnicodeSet&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::recompose(icu::ReorderingBuffer&, int, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::composePair(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::compose(char16_t const*, char16_t const*, signed char, signed char, icu::ReorderingBuffer&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::hasCompBoundaryBefore(char16_t const*, char16_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::hasCompBoundaryAfter(char16_t const*, char16_t const*, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::getPreviousTrailCC(char16_t const*, char16_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::composeQuickCheck(char16_t const*, char16_t const*, signed char, UNormalizationCheckResult*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::composeAndAppend(char16_t const*, char16_t const*, signed char, signed char, icu::UnicodeString&, icu::ReorderingBuffer&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::findNextCompBoundary(char16_t const*, char16_t const*, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::findPreviousCompBoundary(char16_t const*, char16_t const*, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::composeUTF8(unsigned int, signed char, unsigned char const*, unsigned char const*, icu::ByteSink*, icu::Edits*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::hasCompBoundaryBefore(unsigned char const*, unsigned char const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::hasCompBoundaryAfter(unsigned char const*, unsigned char const*, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::getPreviousTrailCC(unsigned char const*, unsigned char const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::getFCD16FromNormData(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::makeFCD(char16_t const*, char16_t const*, icu::ReorderingBuffer*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::findNextFCDBoundary(char16_t const*, char16_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::makeFCDAndAppend(char16_t const*, char16_t const*, signed char, icu::UnicodeString&, icu::ReorderingBuffer&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::findPreviousFCDBoundary(char16_t const*, char16_t const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::makeCanonIterDataFromNorm16(int, int, unsigned short, icu::CanonIterData&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::getCanonValue(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::getCanonStartSet(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::isCanonSegmentStarter(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer2Impl::getCanonStartSet(int, icu::UnicodeSet&) const",
    "type": "CPP"
  },
  {
    "name": "T _unorm2_swap",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::Normalizer(icu::UnicodeString const&, UNormalizationMode)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::init()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::Normalizer(icu::UnicodeString const&, UNormalizationMode)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::Normalizer(icu::ConstChar16Ptr, int, UNormalizationMode)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::Normalizer(icu::ConstChar16Ptr, int, UNormalizationMode)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::Normalizer(icu::CharacterIterator const&, UNormalizationMode)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::Normalizer(icu::CharacterIterator const&, UNormalizationMode)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::Normalizer(icu::Normalizer const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::Normalizer(icu::Normalizer const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::~Normalizer()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::~Normalizer()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::~Normalizer()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::hashCode() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::operator==(icu::Normalizer const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::normalize(icu::UnicodeString const&, UNormalizationMode, int, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::compose(icu::UnicodeString const&, signed char, int, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::decompose(icu::UnicodeString const&, signed char, int, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::quickCheck(icu::UnicodeString const&, UNormalizationMode, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::isNormalized(icu::UnicodeString const&, UNormalizationMode, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::concatenate(icu::UnicodeString const&, icu::UnicodeString const&, icu::UnicodeString&, UNormalizationMode, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::current()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::nextNormalize()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::next()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::previous()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::previousNormalize()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::clearBuffer()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::setIndexOnly(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::first()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::last()",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::getIndex() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::startIndex() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::endIndex() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::setMode(UNormalizationMode)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::getUMode() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::setOption(int, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::getOption(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::setText(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::setText(icu::CharacterIterator const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::setText(icu::ConstChar16Ptr, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Normalizer::getText(icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ParsePosition::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::ParsePosition::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ParsePosition::~ParsePosition()",
    "type": "CPP"
  },
  {
    "name": "T icu::ParsePosition::~ParsePosition()",
    "type": "CPP"
  },
  {
    "name": "T icu::ParsePosition::~ParsePosition()",
    "type": "CPP"
  },
  {
    "name": "T icu::ParsePosition::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::PatternProps::isSyntax(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::PatternProps::isSyntaxOrWhiteSpace(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::PatternProps::isWhiteSpace(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::PatternProps::skipWhiteSpace(char16_t const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::PatternProps::skipWhiteSpace(icu::UnicodeString const&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::PatternProps::trimWhiteSpace(char16_t const*, int&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PatternProps::isIdentifier(char16_t const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::PatternProps::skipIdentifier(char16_t const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralMapBase::toCategory(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralMapBase::toCategory(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralMapBase::getCategoryName(icu::PluralMapBase::Category)",
    "type": "CPP"
  },
  {
    "name": "T _uprv_compareASCIIPropertyNames",
    "type": "CPP"
  },
  {
    "name": "T _uprv_compareEBCDICPropertyNames",
    "type": "CPP"
  },
  {
    "name": "T _u_getPropertyName",
    "type": "CPP"
  },
  {
    "name": "T _u_getPropertyEnum",
    "type": "CPP"
  },
  {
    "name": "T _u_getPropertyValueName",
    "type": "CPP"
  },
  {
    "name": "T _u_getPropertyValueEnum",
    "type": "CPP"
  },
  {
    "name": "T _uscript_getName",
    "type": "CPP"
  },
  {
    "name": "T _uscript_getShortName",
    "type": "CPP"
  },
  {
    "name": "T _upvec_open",
    "type": "CPP"
  },
  {
    "name": "T _upvec_close",
    "type": "CPP"
  },
  {
    "name": "T _upvec_setValue",
    "type": "CPP"
  },
  {
    "name": "T _upvec_getValue",
    "type": "CPP"
  },
  {
    "name": "T _upvec_getRow",
    "type": "CPP"
  },
  {
    "name": "T _upvec_compact",
    "type": "CPP"
  },
  {
    "name": "T _upvec_getArray",
    "type": "CPP"
  },
  {
    "name": "T _upvec_cloneArray",
    "type": "CPP"
  },
  {
    "name": "T _upvec_compactToUTrie2WithRowIndexes",
    "type": "CPP"
  },
  {
    "name": "T _upvec_compactToUTrie2Handler",
    "type": "CPP"
  },
  {
    "name": "T _uprv_getUTCtime",
    "type": "CPP"
  },
  {
    "name": "T _uprv_getRawUTCtime",
    "type": "CPP"
  },
  {
    "name": "T _uprv_isNaN",
    "type": "CPP"
  },
  {
    "name": "T _uprv_isInfinite",
    "type": "CPP"
  },
  {
    "name": "T _uprv_isPositiveInfinity",
    "type": "CPP"
  },
  {
    "name": "T _uprv_isNegativeInfinity",
    "type": "CPP"
  },
  {
    "name": "T _uprv_getNaN",
    "type": "CPP"
  },
  {
    "name": "T _uprv_getInfinity",
    "type": "CPP"
  },
  {
    "name": "T _uprv_floor",
    "type": "CPP"
  },
  {
    "name": "T _uprv_ceil",
    "type": "CPP"
  },
  {
    "name": "T _uprv_round",
    "type": "CPP"
  },
  {
    "name": "T _uprv_fabs",
    "type": "CPP"
  },
  {
    "name": "T _uprv_modf",
    "type": "CPP"
  },
  {
    "name": "T _uprv_fmod",
    "type": "CPP"
  },
  {
    "name": "T _uprv_pow",
    "type": "CPP"
  },
  {
    "name": "T _uprv_pow10",
    "type": "CPP"
  },
  {
    "name": "T _uprv_fmax",
    "type": "CPP"
  },
  {
    "name": "T _uprv_fmin",
    "type": "CPP"
  },
  {
    "name": "T _uprv_add32_overflow",
    "type": "CPP"
  },
  {
    "name": "T _uprv_mul32_overflow",
    "type": "CPP"
  },
  {
    "name": "T _uprv_trunc",
    "type": "CPP"
  },
  {
    "name": "T _uprv_maxMantissa",
    "type": "CPP"
  },
  {
    "name": "T _uprv_log",
    "type": "CPP"
  },
  {
    "name": "T _uprv_maximumPtr",
    "type": "CPP"
  },
  {
    "name": "T _uprv_tzset",
    "type": "CPP"
  },
  {
    "name": "T _uprv_timezone",
    "type": "CPP"
  },
  {
    "name": "T _uprv_tzname_clear_cache",
    "type": "CPP"
  },
  {
    "name": "T _uprv_tzname",
    "type": "CPP"
  },
  {
    "name": "T _u_setDataDirectory",
    "type": "CPP"
  },
  {
    "name": "T _uprv_pathIsAbsolute",
    "type": "CPP"
  },
  {
    "name": "T _u_getDataDirectory",
    "type": "CPP"
  },
  {
    "name": "T _u_getTimeZoneFilesDirectory",
    "type": "CPP"
  },
  {
    "name": "T _u_setTimeZoneFilesDirectory",
    "type": "CPP"
  },
  {
    "name": "T _uprv_getDefaultLocaleID",
    "type": "CPP"
  },
  {
    "name": "T _u_versionFromString",
    "type": "CPP"
  },
  {
    "name": "T _u_versionFromUString",
    "type": "CPP"
  },
  {
    "name": "T _u_versionToString",
    "type": "CPP"
  },
  {
    "name": "T _u_getVersion",
    "type": "CPP"
  },
  {
    "name": "T _uprv_dl_open",
    "type": "CPP"
  },
  {
    "name": "T _uprv_dl_close",
    "type": "CPP"
  },
  {
    "name": "T _uprv_dlsym_func",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::RuleBasedBreakIterator(icu::RBBIDataHeader*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::init(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::RuleBasedBreakIterator(icu::RBBIDataHeader*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::RuleBasedBreakIterator(unsigned char const*, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::RuleBasedBreakIterator(unsigned char const*, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::RuleBasedBreakIterator(UDataMemory*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::RuleBasedBreakIterator(UDataMemory*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::RuleBasedBreakIterator(icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::operator=(icu::RuleBasedBreakIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::RuleBasedBreakIterator(icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::RuleBasedBreakIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::RuleBasedBreakIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::RuleBasedBreakIterator(icu::RuleBasedBreakIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::RuleBasedBreakIterator(icu::RuleBasedBreakIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::~RuleBasedBreakIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::~RuleBasedBreakIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::~RuleBasedBreakIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::initLatin1Cat()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::operator==(icu::BreakIterator const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::hashCode() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::setText(UText*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::getUText(UText*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::getText() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::adoptText(icu::CharacterIterator*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::setText(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::refreshInputText(UText*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::first()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::last()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::next(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::next()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::previous()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::following(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::preceding(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::isBoundary(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::current() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::handleNext()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::handleNextInternal()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::handleSafePrevious(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::getRuleStatus() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::getRuleStatusVec(int*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::tokenize(int, RuleBasedTokenRange*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::getBinaryRules(unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::createBufferClone(void*, int&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::getLanguageBreakEngine(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::dumpCache()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::dumpTables()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::getRules() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(icu::RBBIDataHeader57*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::init()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(icu::RBBIDataHeader57*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(icu::RBBIDataHeader57 const*, icu::RuleBasedBreakIterator57::EDontAdopt, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(icu::RBBIDataHeader57 const*, icu::RuleBasedBreakIterator57::EDontAdopt, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::operator=(icu::RuleBasedBreakIterator57 const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(icu::RuleBasedBreakIterator57 const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(icu::RuleBasedBreakIterator57 const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::~RuleBasedBreakIterator57()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::~RuleBasedBreakIterator57()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::~RuleBasedBreakIterator57()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::operator==(icu::BreakIterator const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::hashCode() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::setText(UText*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::getUText(UText*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::getText() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::adoptText(icu::CharacterIterator*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::setText(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::refreshInputText(UText*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::first()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::last()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::next(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::next()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::handleNext(icu::RBBIStateTable const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::checkDictionary(int, int, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::previous()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::handlePrevious(icu::RBBIStateTable const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::following(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::preceding(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::isBoundary(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::current() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::makeRuleStatusValid()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::getRuleStatus() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::getRuleStatusVec(int*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::getBinaryRules(unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::createBufferClone(void*, int&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::getLanguageBreakEngine(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator57::setBreakType(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::DictionaryCache::DictionaryCache(icu::RuleBasedBreakIterator*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::DictionaryCache::DictionaryCache(icu::RuleBasedBreakIterator*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::DictionaryCache::~DictionaryCache()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::DictionaryCache::~DictionaryCache()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::DictionaryCache::reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::DictionaryCache::following(int, int*, int*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::DictionaryCache::preceding(int, int*, int*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::DictionaryCache::populateDictionary(int, int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::BreakCache::BreakCache(icu::RuleBasedBreakIterator*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::BreakCache::reset(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::BreakCache::BreakCache(icu::RuleBasedBreakIterator*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::BreakCache::~BreakCache()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::BreakCache::~BreakCache()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::BreakCache::~BreakCache()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::BreakCache::current()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::BreakCache::following(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::BreakCache::seek(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::BreakCache::populateNear(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::BreakCache::preceding(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::BreakCache::previous(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::BreakCache::nextOL()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::BreakCache::populateFollowing()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::BreakCache::populatePreceding(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::BreakCache::addFollowing(int, int, icu::RuleBasedBreakIterator::BreakCache::UpdatePositionValues)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::BreakCache::addPreceding(int, int, icu::RuleBasedBreakIterator::BreakCache::UpdatePositionValues)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedBreakIterator::BreakCache::dumpCache()",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_swap",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTokenizer::tokenize(int, RuleBasedTokenRange*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTokenizer::init()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTokenizer::RuleBasedTokenizer(icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTokenizer::RuleBasedTokenizer(icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTokenizer::RuleBasedTokenizer(unsigned char*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTokenizer::RuleBasedTokenizer(unsigned char*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTokenizer::RuleBasedTokenizer(unsigned char const*, icu::RuleBasedTokenizer::EDontAdopt, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTokenizer::RuleBasedTokenizer(unsigned char const*, icu::RuleBasedTokenizer::EDontAdopt, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTokenizer::~RuleBasedTokenizer()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTokenizer::~RuleBasedTokenizer()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTokenizer::~RuleBasedTokenizer()",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::ResourceBundle(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::ResourceBundle(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::ResourceBundle(icu::ResourceBundle const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::ResourceBundle(icu::ResourceBundle const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::ResourceBundle(UResourceBundle*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::ResourceBundle(UResourceBundle*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::ResourceBundle(char const*, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::ResourceBundle(char const*, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::operator=(icu::ResourceBundle const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::~ResourceBundle()",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::~ResourceBundle()",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::~ResourceBundle()",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getString(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getBinary(int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getIntVector(int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getUInt(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getInt(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getName() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getKey() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getType() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getSize() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::hasNext() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::resetIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getNext(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getNextString(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getNextString(char const**, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::get(int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getStringEx(int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::get(char const*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getWithFallback(char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getStringEx(char const*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getVersionNumber() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getVersion(unsigned char*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getLocale() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::getLocale(ULocDataLocaleType, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::ResourceBundle(icu::UnicodeString const&, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::constructForLocale(icu::UnicodeString const&, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::ResourceBundle(icu::UnicodeString const&, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::ResourceBundle(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceBundle::ResourceBundle(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceValue::~ResourceValue()",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceValue::~ResourceValue()",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceValue::~ResourceValue()",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceSink::~ResourceSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceSink::~ResourceSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceSink::~ResourceSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::StringCharacterIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::StringCharacterIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::StringCharacterIterator(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::StringCharacterIterator(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::StringCharacterIterator(icu::UnicodeString const&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::StringCharacterIterator(icu::UnicodeString const&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::StringCharacterIterator(icu::UnicodeString const&, int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::StringCharacterIterator(icu::UnicodeString const&, int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::StringCharacterIterator(icu::StringCharacterIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::StringCharacterIterator(icu::StringCharacterIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::~StringCharacterIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::~StringCharacterIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::~StringCharacterIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::operator=(icu::StringCharacterIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::operator==(icu::ForwardCharacterIterator const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::setText(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringCharacterIterator::getText(icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedObject::~SharedObject()",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedObject::~SharedObject()",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedObject::~SharedObject()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCacheBase::~UnifiedCacheBase()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCacheBase::~UnifiedCacheBase()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCacheBase::~UnifiedCacheBase()",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedObject::addRef() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedObject::removeRef() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedObject::getRefCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedObject::deleteIfZeroRefCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFormatter::operator=(icu::SimpleFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFormatter::~SimpleFormatter()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFormatter::~SimpleFormatter()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFormatter::applyPatternMinMaxArguments(icu::UnicodeString const&, int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFormatter::format(icu::UnicodeString const&, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFormatter::formatAndAppend(icu::UnicodeString const* const*, int, icu::UnicodeString&, int*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFormatter::format(icu::UnicodeString const&, icu::UnicodeString const&, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFormatter::format(icu::UnicodeString const&, icu::UnicodeString const&, icu::UnicodeString const&, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFormatter::format(char16_t const*, int, icu::UnicodeString const* const*, icu::UnicodeString&, icu::UnicodeString const*, signed char, int*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFormatter::formatAndReplace(icu::UnicodeString const* const*, int, icu::UnicodeString&, int*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleFormatter::getTextWithNoArguments(char16_t const*, int, int*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::unisets::get(icu::unisets::Key)",
    "type": "CPP"
  },
  {
    "name": "T icu::unisets::chooseFrom(icu::UnicodeString, icu::unisets::Key)",
    "type": "CPP"
  },
  {
    "name": "T icu::unisets::chooseFrom(icu::UnicodeString, icu::unisets::Key, icu::unisets::Key)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringPiece::StringPiece(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringPiece::StringPiece(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringPiece::StringPiece(icu::StringPiece const&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringPiece::StringPiece(icu::StringPiece const&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringPiece::StringPiece(icu::StringPiece const&, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringPiece::StringPiece(icu::StringPiece const&, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringPiece::set(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::operator==(icu::StringPiece const&, icu::StringPiece const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::StringTrieBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::~StringTrieBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::deleteCompactBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::~StringTrieBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::~StringTrieBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::createCompactBuilder(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::build(UStringTrieBuildOption, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::writeNode(int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::makeNode(int, int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::writeBranchSubNode(int, int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::registerFinalValue(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::registerNode(icu::StringTrieBuilder::Node*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::makeBranchSubNode(int, int, int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::hashNode(void const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::equalNodes(void const*, void const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::Node::operator==(icu::StringTrieBuilder::Node const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::Node::markRightEdgesFirst(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::FinalValueNode::operator==(icu::StringTrieBuilder::Node const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::FinalValueNode::write(icu::StringTrieBuilder&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::ValueNode::operator==(icu::StringTrieBuilder::Node const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::IntermediateValueNode::operator==(icu::StringTrieBuilder::Node const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::IntermediateValueNode::markRightEdgesFirst(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::IntermediateValueNode::write(icu::StringTrieBuilder&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::LinearMatchNode::operator==(icu::StringTrieBuilder::Node const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::LinearMatchNode::markRightEdgesFirst(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::ListBranchNode::operator==(icu::StringTrieBuilder::Node const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::ListBranchNode::markRightEdgesFirst(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::ListBranchNode::write(icu::StringTrieBuilder&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::SplitBranchNode::operator==(icu::StringTrieBuilder::Node const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::SplitBranchNode::markRightEdgesFirst(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::SplitBranchNode::write(icu::StringTrieBuilder&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::BranchHeadNode::operator==(icu::StringTrieBuilder::Node const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::BranchHeadNode::markRightEdgesFirst(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringTrieBuilder::BranchHeadNode::write(icu::StringTrieBuilder&)",
    "type": "CPP"
  },
  {
    "name": "T _ualoc_getLanguagesForRegion",
    "type": "CPP"
  },
  {
    "name": "T _ualoc_getAppleParent",
    "type": "CPP"
  },
  {
    "name": "T _ualoc_localizationsToUse",
    "type": "CPP"
  },
  {
    "name": "T _uprv_uint16Comparator",
    "type": "CPP"
  },
  {
    "name": "T _uprv_int32Comparator",
    "type": "CPP"
  },
  {
    "name": "T _uprv_uint32Comparator",
    "type": "CPP"
  },
  {
    "name": "T _uprv_stableBinarySearch",
    "type": "CPP"
  },
  {
    "name": "T _uprv_sortArray",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_open",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_openSized",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_close",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_setInverse",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_isInverse",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_setReorderingMode",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getReorderingMode",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_setReorderingOptions",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getReorderingOptions",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getBaseDirection",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_setContext",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_setPara",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_setParaWithControls",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_orderParagraphsLTR",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_isOrderParagraphsLTR",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getDirection",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getText",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getLength",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getProcessedLength",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getResultLength",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getParaLevel",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_countParagraphs",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getParagraphByIndex",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getParagraph",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_setClassCallback",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getClassCallback",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getCustomizedClass",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getClass",
    "type": "CPP"
  },
  {
    "name": "T _u_charDirection",
    "type": "CPP"
  },
  {
    "name": "T _u_isMirrored",
    "type": "CPP"
  },
  {
    "name": "T _u_charMirror",
    "type": "CPP"
  },
  {
    "name": "T _u_getBidiPairedBracket",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_setLine",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getLevelAt",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getLevels",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getLogicalRun",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_countRuns",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getVisualRun",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_reorderLogical",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_reorderVisual",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getVisualIndex",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getLogicalIndex",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getLogicalMap",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_getVisualMap",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_invertMap",
    "type": "CPP"
  },
  {
    "name": "T _ubiditransform_open",
    "type": "CPP"
  },
  {
    "name": "T _ubiditransform_close",
    "type": "CPP"
  },
  {
    "name": "T _ubiditransform_transform",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_writeReverse",
    "type": "CPP"
  },
  {
    "name": "T _ubidi_writeReordered",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_open",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_setText",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_openRules",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_openBinaryRules",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_safeClone",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_close",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_setLineWordOpts",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_setUText",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_current",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_next",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_previous",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_first",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_last",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_preceding",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_following",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_getAvailable",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_countAvailable",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_isBoundary",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_getRuleStatus",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_getRuleStatusVec",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_getLocaleByType",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_refreshUText",
    "type": "CPP"
  },
  {
    "name": "T _ubrk_getBinaryRules",
    "type": "CPP"
  },
  {
    "name": "T _ucase_tolower",
    "type": "CPP"
  },
  {
    "name": "T _ucase_toupper",
    "type": "CPP"
  },
  {
    "name": "T _ucase_totitle",
    "type": "CPP"
  },
  {
    "name": "T icu::FullCaseFoldingIterator::FullCaseFoldingIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::FullCaseFoldingIterator::FullCaseFoldingIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::FullCaseFoldingIterator::next(icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T _ucase_getType",
    "type": "CPP"
  },
  {
    "name": "T _ucase_getTypeOrIgnorable",
    "type": "CPP"
  },
  {
    "name": "T _ucase_isSoftDotted",
    "type": "CPP"
  },
  {
    "name": "T _ucase_isCaseSensitive",
    "type": "CPP"
  },
  {
    "name": "T _ucase_toFullLower",
    "type": "CPP"
  },
  {
    "name": "T _ucase_toFullUpper",
    "type": "CPP"
  },
  {
    "name": "T _ucase_toFullTitle",
    "type": "CPP"
  },
  {
    "name": "T _ucase_fold",
    "type": "CPP"
  },
  {
    "name": "T _ucase_toFullFolding",
    "type": "CPP"
  },
  {
    "name": "T _u_isULowercase",
    "type": "CPP"
  },
  {
    "name": "T _u_isUUppercase",
    "type": "CPP"
  },
  {
    "name": "T _u_tolower",
    "type": "CPP"
  },
  {
    "name": "T _u_toupper",
    "type": "CPP"
  },
  {
    "name": "T _u_totitle",
    "type": "CPP"
  },
  {
    "name": "T _u_foldCase",
    "type": "CPP"
  },
  {
    "name": "T _ucasemap_setLocale",
    "type": "CPP"
  },
  {
    "name": "T _ucasemap_open",
    "type": "CPP"
  },
  {
    "name": "T _ucasemap_close",
    "type": "CPP"
  },
  {
    "name": "T _ucasemap_getLocale",
    "type": "CPP"
  },
  {
    "name": "T _ucasemap_getOptions",
    "type": "CPP"
  },
  {
    "name": "T _ucasemap_setOptions",
    "type": "CPP"
  },
  {
    "name": "T _ucasemap_utf8ToLower",
    "type": "CPP"
  },
  {
    "name": "T _ucasemap_utf8ToUpper",
    "type": "CPP"
  },
  {
    "name": "T _ucasemap_utf8FoldCase",
    "type": "CPP"
  },
  {
    "name": "T icu::CaseMap::utf8ToLower(char const*, unsigned int, icu::StringPiece, icu::ByteSink&, icu::Edits*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CaseMap::utf8ToUpper(char const*, unsigned int, icu::StringPiece, icu::ByteSink&, icu::Edits*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CaseMap::utf8Fold(unsigned int, icu::StringPiece, icu::ByteSink&, icu::Edits*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CaseMap::utf8ToLower(char const*, unsigned int, char const*, int, char*, int, icu::Edits*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CaseMap::utf8ToUpper(char const*, unsigned int, char const*, int, char*, int, icu::Edits*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CaseMap::utf8Fold(unsigned int, char const*, int, char*, int, icu::Edits*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CaseMap::utf8ToTitle(char const*, unsigned int, icu::BreakIterator*, icu::StringPiece, icu::ByteSink&, icu::Edits*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CaseMap::utf8ToTitle(char const*, unsigned int, icu::BreakIterator*, char const*, int, char*, int, icu::Edits*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T _ucasemap_getBreakIterator",
    "type": "CPP"
  },
  {
    "name": "T _ucasemap_setBreakIterator",
    "type": "CPP"
  },
  {
    "name": "T _ucasemap_utf8ToTitle",
    "type": "CPP"
  },
  {
    "name": "T _u_catopen",
    "type": "CPP"
  },
  {
    "name": "T _u_catclose",
    "type": "CPP"
  },
  {
    "name": "T _u_catgets",
    "type": "CPP"
  },
  {
    "name": "T _u_charType",
    "type": "CPP"
  },
  {
    "name": "T _u_enumCharTypes",
    "type": "CPP"
  },
  {
    "name": "T _u_islower",
    "type": "CPP"
  },
  {
    "name": "T _u_isupper",
    "type": "CPP"
  },
  {
    "name": "T _u_istitle",
    "type": "CPP"
  },
  {
    "name": "T _u_isdigit",
    "type": "CPP"
  },
  {
    "name": "T _u_isxdigit",
    "type": "CPP"
  },
  {
    "name": "T _u_isalpha",
    "type": "CPP"
  },
  {
    "name": "T _u_isUAlphabetic",
    "type": "CPP"
  },
  {
    "name": "T _u_isalnum",
    "type": "CPP"
  },
  {
    "name": "T _u_isdefined",
    "type": "CPP"
  },
  {
    "name": "T _u_isbase",
    "type": "CPP"
  },
  {
    "name": "T _u_iscntrl",
    "type": "CPP"
  },
  {
    "name": "T _u_isISOControl",
    "type": "CPP"
  },
  {
    "name": "T _u_isspace",
    "type": "CPP"
  },
  {
    "name": "T _u_isJavaSpaceChar",
    "type": "CPP"
  },
  {
    "name": "T _u_isWhitespace",
    "type": "CPP"
  },
  {
    "name": "T _u_isblank",
    "type": "CPP"
  },
  {
    "name": "T _u_isUWhiteSpace",
    "type": "CPP"
  },
  {
    "name": "T _u_isprint",
    "type": "CPP"
  },
  {
    "name": "T _u_isgraph",
    "type": "CPP"
  },
  {
    "name": "T _u_ispunct",
    "type": "CPP"
  },
  {
    "name": "T _u_isIDStart",
    "type": "CPP"
  },
  {
    "name": "T _u_isIDPart",
    "type": "CPP"
  },
  {
    "name": "T _u_isIDIgnorable",
    "type": "CPP"
  },
  {
    "name": "T _u_isJavaIDStart",
    "type": "CPP"
  },
  {
    "name": "T _u_isJavaIDPart",
    "type": "CPP"
  },
  {
    "name": "T _u_charDigitValue",
    "type": "CPP"
  },
  {
    "name": "T _u_getNumericValue",
    "type": "CPP"
  },
  {
    "name": "T _u_digit",
    "type": "CPP"
  },
  {
    "name": "T _u_forDigit",
    "type": "CPP"
  },
  {
    "name": "T _u_getUnicodeVersion",
    "type": "CPP"
  },
  {
    "name": "T _u_charAge",
    "type": "CPP"
  },
  {
    "name": "T _uscript_getScript",
    "type": "CPP"
  },
  {
    "name": "T _uscript_hasScript",
    "type": "CPP"
  },
  {
    "name": "T _uscript_getScriptExtensions",
    "type": "CPP"
  },
  {
    "name": "T _ublock_getCode",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::~UCharsTrie()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::~UCharsTrie()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::current() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::firstForCodePoint(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::next(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::nextForCodePoint(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::branchNext(char16_t const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::nextImpl(char16_t const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::next(icu::ConstChar16Ptr, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::findUniqueValueFromBranch(char16_t const*, int, signed char, int&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::findUniqueValue(char16_t const*, signed char, int&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::getNextUChars(icu::Appendable&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::getNextBranchUChars(char16_t const*, int, icu::Appendable&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::UCharsTrieBuilder(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::UCharsTrieBuilder(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::~UCharsTrieBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::~UCharsTrieBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::~UCharsTrieBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::add(icu::UnicodeString const&, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::build(UStringTrieBuildOption, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::buildUChars(UStringTrieBuildOption, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::buildUnicodeString(UStringTrieBuildOption, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::getElementStringLength(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::getElementUnit(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::getElementValue(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::getLimitOfLinearMatch(int, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::countElementUnits(int, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::skipElementsBySomeUnits(int, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::indexOfElementWithNextUnit(int, int, char16_t) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::UCTLinearMatchNode::UCTLinearMatchNode(char16_t const*, int, icu::StringTrieBuilder::Node*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::UCTLinearMatchNode::UCTLinearMatchNode(char16_t const*, int, icu::StringTrieBuilder::Node*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::UCTLinearMatchNode::operator==(icu::StringTrieBuilder::Node const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::UCTLinearMatchNode::write(icu::StringTrieBuilder&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::write(char16_t const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::createLinearMatchNode(int, int, int, icu::StringTrieBuilder::Node*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::ensureCapacity(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::write(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::writeElementUnits(int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::writeValueAndFinal(int, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::writeValueAndType(signed char, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrieBuilder::writeDeltaTo(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::Iterator::Iterator(icu::ConstChar16Ptr, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::Iterator::Iterator(icu::ConstChar16Ptr, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::Iterator::Iterator(icu::UCharsTrie const&, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::Iterator::Iterator(icu::UCharsTrie const&, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::Iterator::~Iterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::Iterator::~Iterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::Iterator::reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::Iterator::hasNext() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::Iterator::next(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharsTrie::Iterator::branchNext(char16_t const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::UCharCharacterIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::UCharCharacterIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::UCharCharacterIterator(icu::ConstChar16Ptr, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::UCharCharacterIterator(icu::ConstChar16Ptr, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::UCharCharacterIterator(icu::ConstChar16Ptr, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::UCharCharacterIterator(icu::ConstChar16Ptr, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::UCharCharacterIterator(icu::ConstChar16Ptr, int, int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::UCharCharacterIterator(icu::ConstChar16Ptr, int, int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::UCharCharacterIterator(icu::UCharCharacterIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::UCharCharacterIterator(icu::UCharCharacterIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::operator=(icu::UCharCharacterIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::~UCharCharacterIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::~UCharCharacterIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::~UCharCharacterIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::operator==(icu::ForwardCharacterIterator const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::hashCode() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::first()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::firstPostInc()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::last()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::setIndex(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::current() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::next()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::nextPostInc()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::hasNext()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::previous()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::hasPrevious()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::first32()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::first32PostInc()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::last32()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::setIndex32(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::current32() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::next32()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::next32PostInc()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::previous32()",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::move(int, icu::CharacterIterator::EOrigin)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::move32(int, icu::CharacterIterator::EOrigin)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::setText(icu::ConstChar16Ptr, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UCharCharacterIterator::getText(icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T _u_cleanup",
    "type": "CPP"
  },
  {
    "name": "T _ucln_cleanupOne",
    "type": "CPP"
  },
  {
    "name": "T _ucln_registerCleanup",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_open",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_openPackage",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_openU",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_openCCSID",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_safeClone",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_close",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getAvailableName",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_countAvailable",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getSubstChars",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_setSubstChars",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_setSubstString",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_setFromUCallBack",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_fromUChars",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_reset",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_resetToUnicode",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_resetFromUnicode",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getMaxCharSize",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getMinCharSize",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getName",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getCCSID",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getPlatform",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getToUCallBack",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getFromUCallBack",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_setToUCallBack",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_fromUnicode",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_toUnicode",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_toUChars",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getNextUChar",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_convertEx",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_convert",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_toAlgorithmic",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_fromAlgorithmic",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getType",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getStarters",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_fixFileSeparator",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_isAmbiguous",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_setFallback",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_usesFallback",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getInvalidChars",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getInvalidUChars",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_detectUnicodeSignature",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_fromUCountPending",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_toUCountPending",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_isFixedWidth",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_enableCleanup",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_load",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_unload",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_createConverter",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_flushCache",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getDefaultName",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_setDefaultName",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_swap",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_cbFromUWriteBytes",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_cbFromUWriteUChars",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_cbFromUWriteSub",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_cbToUWriteUChars",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_cbToUWriteSub",
    "type": "CPP"
  },
  {
    "name": "T _UCNV_FROM_U_CALLBACK_STOP",
    "type": "CPP"
  },
  {
    "name": "T _UCNV_TO_U_CALLBACK_STOP",
    "type": "CPP"
  },
  {
    "name": "T _UCNV_FROM_U_CALLBACK_SKIP",
    "type": "CPP"
  },
  {
    "name": "T _UCNV_FROM_U_CALLBACK_SUBSTITUTE",
    "type": "CPP"
  },
  {
    "name": "T _UCNV_FROM_U_CALLBACK_ESCAPE",
    "type": "CPP"
  },
  {
    "name": "T _UCNV_TO_U_CALLBACK_SKIP",
    "type": "CPP"
  },
  {
    "name": "T _UCNV_TO_U_CALLBACK_SUBSTITUTE",
    "type": "CPP"
  },
  {
    "name": "T _UCNV_TO_U_CALLBACK_ESCAPE",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_io_stripASCIIForCompare",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_io_stripEBCDICForCompare",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_compareNames",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_io_getConverterName",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_openStandardNames",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getStandard",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getStandardName",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_countAliases",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getAlias",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getAliases",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_countStandards",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getCanonicalName",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_openAllNames",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_io_countKnownConverters",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_swapAliases",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getUnicodeSet",
    "type": "CPP"
  },
  {
    "name": "T _ucnv_getDisplayName",
    "type": "CPP"
  },
  {
    "name": "T _ucnvsel_open",
    "type": "CPP"
  },
  {
    "name": "T _ucnvsel_close",
    "type": "CPP"
  },
  {
    "name": "T _ucnvsel_serialize",
    "type": "CPP"
  },
  {
    "name": "T _ucnvsel_openFromSerialized",
    "type": "CPP"
  },
  {
    "name": "T _ucnvsel_selectForString",
    "type": "CPP"
  },
  {
    "name": "T _ucnvsel_selectForUTF8",
    "type": "CPP"
  },
  {
    "name": "T _ucol_looksLikeCollationBinary",
    "type": "CPP"
  },
  {
    "name": "T _ucol_swap",
    "type": "CPP"
  },
  {
    "name": "T _ucol_swapInverseUCA",
    "type": "CPP"
  },
  {
    "name": "T _ucptrie_openFromBinary",
    "type": "CPP"
  },
  {
    "name": "T _ucptrie_close",
    "type": "CPP"
  },
  {
    "name": "T _ucptrie_getType",
    "type": "CPP"
  },
  {
    "name": "T _ucptrie_getValueWidth",
    "type": "CPP"
  },
  {
    "name": "T _ucptrie_internalSmallIndex",
    "type": "CPP"
  },
  {
    "name": "T _ucptrie_internalSmallU8Index",
    "type": "CPP"
  },
  {
    "name": "T _ucptrie_internalU8PrevIndex",
    "type": "CPP"
  },
  {
    "name": "T _ucptrie_get",
    "type": "CPP"
  },
  {
    "name": "T _ucptrie_getRange",
    "type": "CPP"
  },
  {
    "name": "T _ucptrie_toBinary",
    "type": "CPP"
  },
  {
    "name": "T _ucpmap_get",
    "type": "CPP"
  },
  {
    "name": "T _ucpmap_getRange",
    "type": "CPP"
  },
  {
    "name": "T _ucurr_forLocale",
    "type": "CPP"
  },
  {
    "name": "T _ucurr_getName",
    "type": "CPP"
  },
  {
    "name": "T _ucurr_getPluralName",
    "type": "CPP"
  },
  {
    "name": "T _uprv_parseCurrency",
    "type": "CPP"
  },
  {
    "name": "T _uprv_getStaticCurrencyName",
    "type": "CPP"
  },
  {
    "name": "T _ucurr_getDefaultFractionDigits",
    "type": "CPP"
  },
  {
    "name": "T _ucurr_getDefaultFractionDigitsForUsage",
    "type": "CPP"
  },
  {
    "name": "T _ucurr_getRoundingIncrement",
    "type": "CPP"
  },
  {
    "name": "T _ucurr_getRoundingIncrementForUsage",
    "type": "CPP"
  },
  {
    "name": "T _ucurr_isAvailable",
    "type": "CPP"
  },
  {
    "name": "T _ucurr_openISOCurrencies",
    "type": "CPP"
  },
  {
    "name": "T _ucurr_countCurrencies",
    "type": "CPP"
  },
  {
    "name": "T _ucurr_forLocaleAndDate",
    "type": "CPP"
  },
  {
    "name": "T _ucurr_getKeywordValuesForLocale",
    "type": "CPP"
  },
  {
    "name": "T _ucurr_getNumericCode",
    "type": "CPP"
  },
  {
    "name": "T _udata_setCommonData",
    "type": "CPP"
  },
  {
    "name": "T _udata_setAppData",
    "type": "CPP"
  },
  {
    "name": "T _udata_open",
    "type": "CPP"
  },
  {
    "name": "T _udata_openChoice",
    "type": "CPP"
  },
  {
    "name": "T _udata_getInfo",
    "type": "CPP"
  },
  {
    "name": "T _udata_setFileAccess",
    "type": "CPP"
  },
  {
    "name": "T _udata_close",
    "type": "CPP"
  },
  {
    "name": "T _udata_getMemory",
    "type": "CPP"
  },
  {
    "name": "T _udata_getLength",
    "type": "CPP"
  },
  {
    "name": "T _udata_getRawMemory",
    "type": "CPP"
  },
  {
    "name": "T _udata_readInt16",
    "type": "CPP"
  },
  {
    "name": "T _udata_readInt32",
    "type": "CPP"
  },
  {
    "name": "T _udata_swapInvStringBlock",
    "type": "CPP"
  },
  {
    "name": "T _udata_printError",
    "type": "CPP"
  },
  {
    "name": "T _udata_swapDataHeader",
    "type": "CPP"
  },
  {
    "name": "T _udata_openSwapper",
    "type": "CPP"
  },
  {
    "name": "T _udata_openSwapperForInputData",
    "type": "CPP"
  },
  {
    "name": "T _udata_closeSwapper",
    "type": "CPP"
  },
  {
    "name": "T _uenum_close",
    "type": "CPP"
  },
  {
    "name": "T _uenum_count",
    "type": "CPP"
  },
  {
    "name": "T _uenum_unextDefault",
    "type": "CPP"
  },
  {
    "name": "T _uenum_nextDefault",
    "type": "CPP"
  },
  {
    "name": "T _uenum_unext",
    "type": "CPP"
  },
  {
    "name": "T _uenum_next",
    "type": "CPP"
  },
  {
    "name": "T _uenum_reset",
    "type": "CPP"
  },
  {
    "name": "T _uhash_open",
    "type": "CPP"
  },
  {
    "name": "T _uhash_openSize",
    "type": "CPP"
  },
  {
    "name": "T _uhash_init",
    "type": "CPP"
  },
  {
    "name": "T _uhash_initSize",
    "type": "CPP"
  },
  {
    "name": "T _uhash_close",
    "type": "CPP"
  },
  {
    "name": "T _uhash_nextElement",
    "type": "CPP"
  },
  {
    "name": "T _uhash_setKeyHasher",
    "type": "CPP"
  },
  {
    "name": "T _uhash_setKeyComparator",
    "type": "CPP"
  },
  {
    "name": "T _uhash_setValueComparator",
    "type": "CPP"
  },
  {
    "name": "T _uhash_setKeyDeleter",
    "type": "CPP"
  },
  {
    "name": "T _uhash_setValueDeleter",
    "type": "CPP"
  },
  {
    "name": "T _uhash_setResizePolicy",
    "type": "CPP"
  },
  {
    "name": "T _uhash_count",
    "type": "CPP"
  },
  {
    "name": "T _uhash_get",
    "type": "CPP"
  },
  {
    "name": "T _uhash_iget",
    "type": "CPP"
  },
  {
    "name": "T _uhash_geti",
    "type": "CPP"
  },
  {
    "name": "T _uhash_igeti",
    "type": "CPP"
  },
  {
    "name": "T _uhash_put",
    "type": "CPP"
  },
  {
    "name": "T _uhash_iput",
    "type": "CPP"
  },
  {
    "name": "T _uhash_puti",
    "type": "CPP"
  },
  {
    "name": "T _uhash_iputi",
    "type": "CPP"
  },
  {
    "name": "T _uhash_remove",
    "type": "CPP"
  },
  {
    "name": "T _uhash_iremove",
    "type": "CPP"
  },
  {
    "name": "T _uhash_removei",
    "type": "CPP"
  },
  {
    "name": "T _uhash_iremovei",
    "type": "CPP"
  },
  {
    "name": "T _uhash_removeAll",
    "type": "CPP"
  },
  {
    "name": "T _uhash_removeElement",
    "type": "CPP"
  },
  {
    "name": "T _uhash_find",
    "type": "CPP"
  },
  {
    "name": "T _uhash_hashUChars",
    "type": "CPP"
  },
  {
    "name": "T _uhash_hashChars",
    "type": "CPP"
  },
  {
    "name": "T _uhash_hashIChars",
    "type": "CPP"
  },
  {
    "name": "T _uhash_equals",
    "type": "CPP"
  },
  {
    "name": "T _uhash_compareUChars",
    "type": "CPP"
  },
  {
    "name": "T _uhash_compareChars",
    "type": "CPP"
  },
  {
    "name": "T _uhash_compareIChars",
    "type": "CPP"
  },
  {
    "name": "T _uhash_hashLong",
    "type": "CPP"
  },
  {
    "name": "T _uhash_compareLong",
    "type": "CPP"
  },
  {
    "name": "T _uhash_deleteHashtable",
    "type": "CPP"
  },
  {
    "name": "T _uidna_toASCII",
    "type": "CPP"
  },
  {
    "name": "T _uidna_toUnicode",
    "type": "CPP"
  },
  {
    "name": "T _uidna_IDNToASCII",
    "type": "CPP"
  },
  {
    "name": "T _uidna_IDNToUnicode",
    "type": "CPP"
  },
  {
    "name": "T _uidna_compare",
    "type": "CPP"
  },
  {
    "name": "T _u_init",
    "type": "CPP"
  },
  {
    "name": "T _u_charsToUChars",
    "type": "CPP"
  },
  {
    "name": "T _u_UCharsToChars",
    "type": "CPP"
  },
  {
    "name": "T _uprv_isInvariantString",
    "type": "CPP"
  },
  {
    "name": "T _uprv_isInvariantUString",
    "type": "CPP"
  },
  {
    "name": "T _uprv_ebcdicFromAscii",
    "type": "CPP"
  },
  {
    "name": "T _uprv_compareInvEbcdicAsAscii",
    "type": "CPP"
  },
  {
    "name": "T _uprv_ebcdicToLowercaseAscii",
    "type": "CPP"
  },
  {
    "name": "T _uprv_aestrncpy",
    "type": "CPP"
  },
  {
    "name": "T _uprv_eastrncpy",
    "type": "CPP"
  },
  {
    "name": "T _uiter_setString",
    "type": "CPP"
  },
  {
    "name": "T _uiter_setUTF16BE",
    "type": "CPP"
  },
  {
    "name": "T _uiter_setCharacterIterator",
    "type": "CPP"
  },
  {
    "name": "T _uiter_setReplaceable",
    "type": "CPP"
  },
  {
    "name": "T _uiter_setUTF8",
    "type": "CPP"
  },
  {
    "name": "T _uiter_current32",
    "type": "CPP"
  },
  {
    "name": "T _uiter_next32",
    "type": "CPP"
  },
  {
    "name": "T _uiter_previous32",
    "type": "CPP"
  },
  {
    "name": "T _uiter_getState",
    "type": "CPP"
  },
  {
    "name": "T _uiter_setState",
    "type": "CPP"
  },
  {
    "name": "T _ulist_createEmptyList",
    "type": "CPP"
  },
  {
    "name": "T _ulist_addItemEndList",
    "type": "CPP"
  },
  {
    "name": "T _ulist_addItemBeginList",
    "type": "CPP"
  },
  {
    "name": "T _ulist_containsString",
    "type": "CPP"
  },
  {
    "name": "T _ulist_removeString",
    "type": "CPP"
  },
  {
    "name": "T _ulist_getNext",
    "type": "CPP"
  },
  {
    "name": "T _ulist_getListSize",
    "type": "CPP"
  },
  {
    "name": "T _ulist_resetList",
    "type": "CPP"
  },
  {
    "name": "T _ulist_deleteList",
    "type": "CPP"
  },
  {
    "name": "T _ulist_close_keyword_values_iterator",
    "type": "CPP"
  },
  {
    "name": "T _ulist_count_keyword_values",
    "type": "CPP"
  },
  {
    "name": "T _ulist_next_keyword_value",
    "type": "CPP"
  },
  {
    "name": "T _ulist_reset_keyword_values_iterator",
    "type": "CPP"
  },
  {
    "name": "T _ulist_getListFromEnum",
    "type": "CPP"
  },
  {
    "name": "T _locale_getKeywordsStart",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getKeywordValue",
    "type": "CPP"
  },
  {
    "name": "T _uloc_setKeywordValue",
    "type": "CPP"
  },
  {
    "name": "T _uloc_openKeywordList",
    "type": "CPP"
  },
  {
    "name": "T _uloc_openKeywords",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getDefault",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getParent",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getLanguage",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getScript",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getCountry",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getVariant",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getName",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getBaseName",
    "type": "CPP"
  },
  {
    "name": "T _uloc_canonicalize",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getISO3Language",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getISO3Country",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getLCID",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getLocaleForLCID",
    "type": "CPP"
  },
  {
    "name": "T _uloc_setDefault",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getISOLanguages",
    "type": "CPP"
  },
  {
    "name": "T _uloc_getISOCountries",
    "type": "CPP"
  },
  {
    "name": "T _uloc_acceptLanguageFromHTTP",
    "type": "CPP"
  },
  {
    "name": "T _uloc_acceptLanguage",
    "type": "CPP"
  },
  {
    "name": "T _uloc_toUnicodeLocaleKey",
    "type": "CPP"
  },
  {
    "name": "T _uloc_toUnicodeLocaleType",
    "type": "CPP"
  },
  {
    "name": "T _uloc_toLegacyKey",
    "type": "CPP"
  },
  {
    "name": "T _uloc_toLegacyType",
    "type": "CPP"
  },
  {
    "name": "T _uloc_toLanguageTag",
    "type": "CPP"
  },
  {
    "name": "T _ulocimp_toLanguageTag",
    "type": "CPP"
  },
  {
    "name": "T _uloc_forLanguageTag",
    "type": "CPP"
  },
  {
    "name": "T _ulocimp_forLanguageTag",
    "type": "CPP"
  },
  {
    "name": "T _uprv_max",
    "type": "CPP"
  },
  {
    "name": "T _uprv_min",
    "type": "CPP"
  },
  {
    "name": "T _umutablecptrie_open",
    "type": "CPP"
  },
  {
    "name": "T _umutablecptrie_clone",
    "type": "CPP"
  },
  {
    "name": "T _umutablecptrie_close",
    "type": "CPP"
  },
  {
    "name": "T _umutablecptrie_fromUCPMap",
    "type": "CPP"
  },
  {
    "name": "T _umutablecptrie_fromUCPTrie",
    "type": "CPP"
  },
  {
    "name": "T _umutablecptrie_get",
    "type": "CPP"
  },
  {
    "name": "T _umutablecptrie_getRange",
    "type": "CPP"
  },
  {
    "name": "T _umutablecptrie_set",
    "type": "CPP"
  },
  {
    "name": "T _umutablecptrie_setRange",
    "type": "CPP"
  },
  {
    "name": "T _umutablecptrie_buildImmutable",
    "type": "CPP"
  },
  {
    "name": "T _umtx_lock",
    "type": "CPP"
  },
  {
    "name": "T _umtx_unlock",
    "type": "CPP"
  },
  {
    "name": "T icu::umtx_initImplPreInit(icu::UInitOnce&)",
    "type": "CPP"
  },
  {
    "name": "T icu::umtx_initImplPostInit(icu::UInitOnce&)",
    "type": "CPP"
  },
  {
    "name": "T _u_setMutexFunctions",
    "type": "CPP"
  },
  {
    "name": "T _u_setAtomicIncDecFunctions",
    "type": "CPP"
  },
  {
    "name": "T _u_charName",
    "type": "CPP"
  },
  {
    "name": "T _u_getISOComment",
    "type": "CPP"
  },
  {
    "name": "T _u_charFromName",
    "type": "CPP"
  },
  {
    "name": "T _u_enumCharNames",
    "type": "CPP"
  },
  {
    "name": "T _uprv_getMaxCharNameLength",
    "type": "CPP"
  },
  {
    "name": "T _uprv_getCharNameCharacters",
    "type": "CPP"
  },
  {
    "name": "T _uchar_swapNames",
    "type": "CPP"
  },
  {
    "name": "T _ucache_hashKeys",
    "type": "CPP"
  },
  {
    "name": "T _ucache_compareKeys",
    "type": "CPP"
  },
  {
    "name": "T _ucache_deleteKey",
    "type": "CPP"
  },
  {
    "name": "T icu::CacheKeyBase::~CacheKeyBase()",
    "type": "CPP"
  },
  {
    "name": "T icu::CacheKeyBase::~CacheKeyBase()",
    "type": "CPP"
  },
  {
    "name": "T icu::CacheKeyBase::~CacheKeyBase()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::getInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::UnifiedCache(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::UnifiedCache(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::setEvictionPolicy(int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::unusedCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::autoEvictedCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::keyCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::flush() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::_flush(signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::handleUnreferencedObject() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::_runEvictionSlice() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::~UnifiedCache()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::~UnifiedCache()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::~UnifiedCache()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::_nextElement() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::_isEvictable(UHashElement const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::removeSoftRef(icu::SharedObject const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::_computeCountOfItemsToEvict() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::_putNew(icu::CacheKeyBase const&, icu::SharedObject const*, UErrorCode, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::_registerMaster(icu::CacheKeyBase const*, icu::SharedObject const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::_putIfAbsentAndGet(icu::CacheKeyBase const&, icu::SharedObject const*&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::_inProgress(UHashElement const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::_fetch(UHashElement const*, icu::SharedObject const*&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::_put(UHashElement const*, icu::SharedObject const*, UErrorCode) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::_poll(icu::CacheKeyBase const&, icu::SharedObject const*&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::_get(icu::CacheKeyBase const&, icu::SharedObject const*&, void const*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::removeHardRef(icu::SharedObject const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::addHardRef(icu::SharedObject const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnifiedCache::_inProgress(icu::SharedObject const*, UErrorCode) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeFilter::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeMatcher::~UnicodeMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeMatcher::~UnicodeMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeMatcher::~UnicodeMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeFilter::~UnicodeFilter()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeFilter::~UnicodeFilter()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to icu::UnicodeFilter::~UnicodeFilter()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeFilter::~UnicodeFilter()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to icu::UnicodeFilter::~UnicodeFilter()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeFilter::toMatcher() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeFilter::setData(icu::TransliterationRuleData const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeFilter::matches(icu::Replaceable const&, int&, int, signed char)",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to icu::UnicodeFilter::matches(icu::Replaceable const&, int&, int, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeFunctor::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeFunctor::~UnicodeFunctor()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeFunctor::~UnicodeFunctor()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeFunctor::~UnicodeFunctor()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeFunctor::toMatcher() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeFunctor::toReplacer() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SymbolTable::~SymbolTable()",
    "type": "CPP"
  },
  {
    "name": "T icu::SymbolTable::~SymbolTable()",
    "type": "CPP"
  },
  {
    "name": "T icu::SymbolTable::~SymbolTable()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::hasStrings() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::stringsSize() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::stringsContains(icu::UnicodeString const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::UnicodeSet()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::UnicodeSet()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::UnicodeSet(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::add(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::UnicodeSet(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::UnicodeSet(icu::UnicodeSet const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::operator=(icu::UnicodeSet const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::UnicodeSet(icu::UnicodeSet const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::UnicodeSet(icu::UnicodeSet const&, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::ensureCapacity(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::allocateStrings(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::setToBogus()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::setPattern(char16_t const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::UnicodeSet(icu::UnicodeSet const&, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::~UnicodeSet()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::releasePattern()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::~UnicodeSet()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to icu::UnicodeSet::~UnicodeSet()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::~UnicodeSet()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to icu::UnicodeSet::~UnicodeSet()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::copyFrom(icu::UnicodeSet const&, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::cloneAsThawed() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::operator==(icu::UnicodeSet const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::hashCode() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::size() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::getRangeCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::getRangeEnd(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::getRangeStart(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::isEmpty() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::contains(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::findCodePoint(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::contains(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::contains(icu::UnicodeString const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::getSingleCP(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::containsAll(icu::UnicodeSet const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::containsAll(icu::UnicodeString const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::span(char16_t const*, int, USetSpanCondition) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::containsNone(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::containsNone(icu::UnicodeSet const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::containsNone(icu::UnicodeString const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::matchesIndexValue(unsigned char) const",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to icu::UnicodeSet::matchesIndexValue(unsigned char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::matches(icu::Replaceable const&, int&, int, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::matchRest(icu::Replaceable const&, int, int, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to icu::UnicodeSet::matches(icu::Replaceable const&, int&, int, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::addMatchSetTo(icu::UnicodeSet&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::addAll(icu::UnicodeSet const&)",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to icu::UnicodeSet::addMatchSetTo(icu::UnicodeSet&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::indexOf(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::charAt(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::set(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::clear()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::complement(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::add(int const*, int, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::add(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::add(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::_add(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::addAll(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::retainAll(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::retainAll(icu::UnicodeSet const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::complementAll(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::complementAll(icu::UnicodeSet const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::removeAll(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::removeAll(icu::UnicodeSet const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::removeAllStrings()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::createFrom(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::createFromAll(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::retain(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::retain(int const*, int, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::retain(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::remove(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::remove(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::remove(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::exclusiveOr(int const*, int, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::complement(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::complement()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::complement(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::getString(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::compact()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::UnicodeSet(unsigned short const*, int, icu::UnicodeSet::ESerialization, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::UnicodeSet(unsigned short const*, int, icu::UnicodeSet::ESerialization, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::serialize(unsigned short*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::nextCapacity(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::ensureBufferCapacity(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::swapBuffers()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::_appendToPat(icu::UnicodeString&, icu::UnicodeString const&, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::_appendToPat(icu::UnicodeString&, int, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::_toPattern(icu::UnicodeString&, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::_generatePattern(icu::UnicodeString&, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::toPattern(icu::UnicodeString&, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to icu::UnicodeSet::toPattern(icu::UnicodeString&, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::freeze()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::spanBack(char16_t const*, int, USetSpanCondition) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::spanUTF8(char const*, int, USetSpanCondition) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::spanBackUTF8(char const*, int, USetSpanCondition) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::UnicodeSet(icu::UnicodeString const&, unsigned int, icu::SymbolTable const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::applyPattern(icu::UnicodeString const&, unsigned int, icu::SymbolTable const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::UnicodeSet(icu::UnicodeString const&, unsigned int, icu::SymbolTable const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::UnicodeSet(icu::UnicodeString const&, icu::ParsePosition&, unsigned int, icu::SymbolTable const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::applyPattern(icu::UnicodeString const&, icu::ParsePosition&, unsigned int, icu::SymbolTable const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::UnicodeSet(icu::UnicodeString const&, icu::ParsePosition&, unsigned int, icu::SymbolTable const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::closeOver(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::UnicodeSet(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::applyPattern(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::UnicodeSet(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::applyPatternIgnoreSpace(icu::UnicodeString const&, icu::ParsePosition&, icu::SymbolTable const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::applyPattern(icu::RuleCharacterIterator&, icu::SymbolTable const*, icu::UnicodeString&, unsigned int, icu::UnicodeSet& (icu::UnicodeSet::*)(int), int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::resemblesPattern(icu::UnicodeString const&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::resemblesPropertyPattern(icu::UnicodeString const&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::resemblesPropertyPattern(icu::RuleCharacterIterator&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::applyPropertyPattern(icu::RuleCharacterIterator&, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::applyFilter(signed char (*)(int, void*), void*, icu::UnicodeSet const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::applyIntPropertyValue(UProperty, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::applyPropertyAlias(icu::UnicodeString const&, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSet::applyPropertyPattern(icu::UnicodeString const&, icu::ParsePosition&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Replaceable::~Replaceable()",
    "type": "CPP"
  },
  {
    "name": "T icu::Replaceable::~Replaceable()",
    "type": "CPP"
  },
  {
    "name": "T icu::Replaceable::~Replaceable()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::operator+(icu::UnicodeString const&, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::~UnicodeString()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::addRef()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::removeRef()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::refCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::releaseArray()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::allocate(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char16_t)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char16_t)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char16_t const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::doAppend(char16_t const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char16_t const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char16_t const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char16_t const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(signed char, icu::ConstChar16Ptr, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::setToBogus()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(signed char, icu::ConstChar16Ptr, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char16_t*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char16_t*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char const*, int, icu::UnicodeString::EInvariant)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::cloneArrayIfNeeded(int, int, signed char, int**, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char const*, int, icu::UnicodeString::EInvariant)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::setToUTF8(icu::StringPiece)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::copyFrom(icu::UnicodeString const&, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(icu::UnicodeString&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::copyFieldsFrom(icu::UnicodeString&, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(icu::UnicodeString&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(icu::UnicodeString const&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(icu::UnicodeString const&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(icu::UnicodeString const&, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(icu::UnicodeString const&, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Replaceable::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::~UnicodeString()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::~UnicodeString()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::fromUTF8(icu::StringPiece)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::fromUTF32(int const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::getBuffer(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::releaseBuffer(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::operator=(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::fastCopyFrom(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::operator=(icu::UnicodeString&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::swap(icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::unescape() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::unescapeAt(int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::append(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::doEquals(icu::UnicodeString const&, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::doCompare(int, int, char16_t const*, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::doCompareCodePointOrder(int, int, char16_t const*, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::getLength() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::getCharAt(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::getChar32At(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::char32At(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::getChar32Start(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::getChar32Limit(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::countChar32(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::hasMoreChar32Than(int, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::moveIndex32(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::doExtract(int, int, char16_t*, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::extract(icu::Char16Ptr, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::extract(int, int, char*, int, icu::UnicodeString::EInvariant) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::tempSubString(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::toUTF8(int, int, char*, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::extract(int, int, char*, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::extractBetween(int, int, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::toUTF8(icu::ByteSink&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::toUTF32(int*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::indexOf(char16_t const*, int, int, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::doIndexOf(char16_t, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::doIndexOf(int, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::lastIndexOf(char16_t const*, int, int, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::doLastIndexOf(char16_t, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::doLastIndexOf(int, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::findAndReplace(int, int, icu::UnicodeString const&, int, int, icu::UnicodeString const&, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::unBogus()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::getTerminatedBuffer()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::setTo(signed char, icu::ConstChar16Ptr, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::setTo(char16_t*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::setCharAt(int, char16_t)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::replace(int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::doReplace(int, int, char16_t const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::doReplace(int, int, icu::UnicodeString const&, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::doAppend(icu::UnicodeString const&, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::handleReplaceBetween(int, int, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::copy(int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Replaceable::hasMetaData() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::hasMetaData() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::doReverse(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::padLeading(int, char16_t)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::padTrailing(int, char16_t)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::doHashCode() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeStringAppendable::~UnicodeStringAppendable()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeStringAppendable::~UnicodeStringAppendable()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeStringAppendable::~UnicodeStringAppendable()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeStringAppendable::appendCodeUnit(char16_t)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeStringAppendable::appendCodePoint(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeStringAppendable::appendString(char16_t const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeStringAppendable::reserveAppendCapacity(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeStringAppendable::getAppendBuffer(int, int, char16_t*, int, int*)",
    "type": "CPP"
  },
  {
    "name": "T _uhash_hashUnicodeString",
    "type": "CPP"
  },
  {
    "name": "T _uhash_compareUnicodeString",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::doCaseCompare(int, int, char16_t const*, int, int, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::caseMap(int, unsigned int, icu::BreakIterator*, int (*)(int, unsigned int, icu::BreakIterator*, char16_t*, int, char16_t const*, int, icu::Edits*, UErrorCode&))",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::foldCase(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T _uhash_hashCaselessUnicodeString",
    "type": "CPP"
  },
  {
    "name": "T _uhash_compareCaselessUnicodeString",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::toLower()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::toLower(icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::toUpper()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::toUpper(icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::doCodepageCreate(char const*, int, char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char const*, int, char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char const*, int, char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char const*, int, UConverter*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::doCodepageCreate(char const*, int, UConverter*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::UnicodeString(char const*, int, UConverter*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::extract(int, int, char*, unsigned int, char const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::doExtract(int, int, char*, int, UConverter*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::extract(char*, int, UConverter*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::trim()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::toTitle(icu::BreakIterator*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::toTitle(icu::BreakIterator*, icu::Locale const&, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeString::toTitle(icu::BreakIterator*, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T _unorm_quickCheck",
    "type": "CPP"
  },
  {
    "name": "T _unorm_quickCheckWithOptions",
    "type": "CPP"
  },
  {
    "name": "T _unorm_isNormalized",
    "type": "CPP"
  },
  {
    "name": "T _unorm_isNormalizedWithOptions",
    "type": "CPP"
  },
  {
    "name": "T _unorm_normalize",
    "type": "CPP"
  },
  {
    "name": "T _unorm_previous",
    "type": "CPP"
  },
  {
    "name": "T _unorm_next",
    "type": "CPP"
  },
  {
    "name": "T _unorm_concatenate",
    "type": "CPP"
  },
  {
    "name": "T _unorm_compare",
    "type": "CPP"
  },
  {
    "name": "T icu::UMemory::operator new(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T icu::UMemory::operator delete(void*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UMemory::operator new[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T icu::UMemory::operator delete[](void*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UObject::~UObject()",
    "type": "CPP"
  },
  {
    "name": "T icu::UObject::~UObject()",
    "type": "CPP"
  },
  {
    "name": "T icu::UObject::~UObject()",
    "type": "CPP"
  },
  {
    "name": "T icu::UObject::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T _uprv_deleteUObject",
    "type": "CPP"
  },
  {
    "name": "T _u_hasBinaryProperty",
    "type": "CPP"
  },
  {
    "name": "T _u_isEmoji",
    "type": "CPP"
  },
  {
    "name": "T _u_getIntPropertyValue",
    "type": "CPP"
  },
  {
    "name": "T _u_getIntPropertyMinValue",
    "type": "CPP"
  },
  {
    "name": "T _u_getIntPropertyMaxValue",
    "type": "CPP"
  },
  {
    "name": "T _u_getFC_NFKC_Closure",
    "type": "CPP"
  },
  {
    "name": "T _urbtok_open",
    "type": "CPP"
  },
  {
    "name": "T _urbtok_openRules",
    "type": "CPP"
  },
  {
    "name": "T _urbtok_openBinaryRules",
    "type": "CPP"
  },
  {
    "name": "T _urbtok_openBinaryRulesNoCopy",
    "type": "CPP"
  },
  {
    "name": "T _urbtok_getBinaryRules",
    "type": "CPP"
  },
  {
    "name": "T _urbtok_tokenize",
    "type": "CPP"
  },
  {
    "name": "T _urbtok_swapBinaryRules",
    "type": "CPP"
  },
  {
    "name": "T _urbtok57_openRules",
    "type": "CPP"
  },
  {
    "name": "T _urbtok57_openBinaryRules",
    "type": "CPP"
  },
  {
    "name": "T _urbtok57_openBinaryRulesNoCopy",
    "type": "CPP"
  },
  {
    "name": "T _urbtok57_getBinaryRules",
    "type": "CPP"
  },
  {
    "name": "T _urbtok57_tokenize",
    "type": "CPP"
  },
  {
    "name": "T _ures_openU",
    "type": "CPP"
  },
  {
    "name": "T _ures_initStackObject",
    "type": "CPP"
  },
  {
    "name": "T icu::StackUResourceBundle::StackUResourceBundle()",
    "type": "CPP"
  },
  {
    "name": "T icu::StackUResourceBundle::StackUResourceBundle()",
    "type": "CPP"
  },
  {
    "name": "T icu::StackUResourceBundle::~StackUResourceBundle()",
    "type": "CPP"
  },
  {
    "name": "T _ures_close",
    "type": "CPP"
  },
  {
    "name": "T icu::StackUResourceBundle::~StackUResourceBundle()",
    "type": "CPP"
  },
  {
    "name": "T _ures_getString",
    "type": "CPP"
  },
  {
    "name": "T _ures_getUTF8String",
    "type": "CPP"
  },
  {
    "name": "T _ures_getBinary",
    "type": "CPP"
  },
  {
    "name": "T _ures_getIntVector",
    "type": "CPP"
  },
  {
    "name": "T _ures_getInt",
    "type": "CPP"
  },
  {
    "name": "T _ures_getUInt",
    "type": "CPP"
  },
  {
    "name": "T _ures_getType",
    "type": "CPP"
  },
  {
    "name": "T _ures_getKey",
    "type": "CPP"
  },
  {
    "name": "T _ures_getSize",
    "type": "CPP"
  },
  {
    "name": "T _ures_resetIterator",
    "type": "CPP"
  },
  {
    "name": "T _ures_hasNext",
    "type": "CPP"
  },
  {
    "name": "T _ures_getNextString",
    "type": "CPP"
  },
  {
    "name": "T _ures_getNextResource",
    "type": "CPP"
  },
  {
    "name": "T _ures_getByIndex",
    "type": "CPP"
  },
  {
    "name": "T _ures_getStringByIndex",
    "type": "CPP"
  },
  {
    "name": "T _ures_getUTF8StringByIndex",
    "type": "CPP"
  },
  {
    "name": "T _ures_findResource",
    "type": "CPP"
  },
  {
    "name": "T _ures_open",
    "type": "CPP"
  },
  {
    "name": "T _ures_findSubResource",
    "type": "CPP"
  },
  {
    "name": "T _ures_getStringByKeyWithFallback",
    "type": "CPP"
  },
  {
    "name": "T _ures_getByKeyWithFallback",
    "type": "CPP"
  },
  {
    "name": "T _ures_getAllItemsWithFallback",
    "type": "CPP"
  },
  {
    "name": "T _ures_getByKey",
    "type": "CPP"
  },
  {
    "name": "T _ures_getStringByKey",
    "type": "CPP"
  },
  {
    "name": "T _ures_getUTF8StringByKey",
    "type": "CPP"
  },
  {
    "name": "T _ures_getLocaleInternal",
    "type": "CPP"
  },
  {
    "name": "T _ures_getLocale",
    "type": "CPP"
  },
  {
    "name": "T _ures_getLocaleByType",
    "type": "CPP"
  },
  {
    "name": "T _ures_openNoDefault",
    "type": "CPP"
  },
  {
    "name": "T _ures_openDirect",
    "type": "CPP"
  },
  {
    "name": "T _ures_openFillIn",
    "type": "CPP"
  },
  {
    "name": "T _ures_openDirectFillIn",
    "type": "CPP"
  },
  {
    "name": "T _ures_countArrayItems",
    "type": "CPP"
  },
  {
    "name": "T _ures_getVersionNumberInternal",
    "type": "CPP"
  },
  {
    "name": "T _ures_getVersionNumber",
    "type": "CPP"
  },
  {
    "name": "T _ures_getVersion",
    "type": "CPP"
  },
  {
    "name": "T _ures_openAvailableLocales",
    "type": "CPP"
  },
  {
    "name": "T _ures_getFunctionalEquivalent",
    "type": "CPP"
  },
  {
    "name": "T _ures_getKeywordValues",
    "type": "CPP"
  },
  {
    "name": "T _ures_getVersionByKey",
    "type": "CPP"
  },
  {
    "name": "T _res_read",
    "type": "CPP"
  },
  {
    "name": "T _res_getPublicType",
    "type": "CPP"
  },
  {
    "name": "T _res_getString",
    "type": "CPP"
  },
  {
    "name": "T _res_getAlias",
    "type": "CPP"
  },
  {
    "name": "T _res_getBinary",
    "type": "CPP"
  },
  {
    "name": "T _res_getIntVector",
    "type": "CPP"
  },
  {
    "name": "T _res_countArrayItems",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceArray::internalGetResource(ResourceData const*, int) const",
    "type": "CPP"
  },
  {
    "name": "T _res_getTableItemByKey",
    "type": "CPP"
  },
  {
    "name": "T _res_getTableItemByIndex",
    "type": "CPP"
  },
  {
    "name": "T _res_getResource",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceTable::getKeyAndValue(int, char const*&, icu::ResourceValue&) const",
    "type": "CPP"
  },
  {
    "name": "T _res_getArrayItem",
    "type": "CPP"
  },
  {
    "name": "T icu::ResourceArray::getValue(int, icu::ResourceValue&) const",
    "type": "CPP"
  },
  {
    "name": "T _ures_swap",
    "type": "CPP"
  },
  {
    "name": "T _uscript_openRun",
    "type": "CPP"
  },
  {
    "name": "T _uscript_setRunText",
    "type": "CPP"
  },
  {
    "name": "T _uscript_closeRun",
    "type": "CPP"
  },
  {
    "name": "T _uscript_resetRun",
    "type": "CPP"
  },
  {
    "name": "T _uscript_nextRun",
    "type": "CPP"
  },
  {
    "name": "T _uscript_getCode",
    "type": "CPP"
  },
  {
    "name": "T _uscript_getSampleString",
    "type": "CPP"
  },
  {
    "name": "T uscript_getSampleUnicodeString(UScriptCode)",
    "type": "CPP"
  },
  {
    "name": "T _uscript_getUsage",
    "type": "CPP"
  },
  {
    "name": "T _uscript_isRightToLeft",
    "type": "CPP"
  },
  {
    "name": "T _uscript_breaksBetweenLetters",
    "type": "CPP"
  },
  {
    "name": "T _uscript_isCased",
    "type": "CPP"
  },
  {
    "name": "T _uset_openEmpty",
    "type": "CPP"
  },
  {
    "name": "T _uset_open",
    "type": "CPP"
  },
  {
    "name": "T _uset_close",
    "type": "CPP"
  },
  {
    "name": "T _uset_clone",
    "type": "CPP"
  },
  {
    "name": "T _uset_isFrozen",
    "type": "CPP"
  },
  {
    "name": "T _uset_freeze",
    "type": "CPP"
  },
  {
    "name": "T _uset_cloneAsThawed",
    "type": "CPP"
  },
  {
    "name": "T _uset_set",
    "type": "CPP"
  },
  {
    "name": "T _uset_addAll",
    "type": "CPP"
  },
  {
    "name": "T _uset_add",
    "type": "CPP"
  },
  {
    "name": "T _uset_addRange",
    "type": "CPP"
  },
  {
    "name": "T _uset_addString",
    "type": "CPP"
  },
  {
    "name": "T _uset_addAllCodePoints",
    "type": "CPP"
  },
  {
    "name": "T _uset_remove",
    "type": "CPP"
  },
  {
    "name": "T _uset_removeRange",
    "type": "CPP"
  },
  {
    "name": "T _uset_removeString",
    "type": "CPP"
  },
  {
    "name": "T _uset_removeAll",
    "type": "CPP"
  },
  {
    "name": "T _uset_retain",
    "type": "CPP"
  },
  {
    "name": "T _uset_retainAll",
    "type": "CPP"
  },
  {
    "name": "T _uset_compact",
    "type": "CPP"
  },
  {
    "name": "T _uset_complement",
    "type": "CPP"
  },
  {
    "name": "T _uset_complementAll",
    "type": "CPP"
  },
  {
    "name": "T _uset_clear",
    "type": "CPP"
  },
  {
    "name": "T _uset_removeAllStrings",
    "type": "CPP"
  },
  {
    "name": "T _uset_isEmpty",
    "type": "CPP"
  },
  {
    "name": "T _uset_contains",
    "type": "CPP"
  },
  {
    "name": "T _uset_containsRange",
    "type": "CPP"
  },
  {
    "name": "T _uset_containsString",
    "type": "CPP"
  },
  {
    "name": "T _uset_containsAll",
    "type": "CPP"
  },
  {
    "name": "T _uset_containsAllCodePoints",
    "type": "CPP"
  },
  {
    "name": "T _uset_containsNone",
    "type": "CPP"
  },
  {
    "name": "T _uset_containsSome",
    "type": "CPP"
  },
  {
    "name": "T _uset_span",
    "type": "CPP"
  },
  {
    "name": "T _uset_spanBack",
    "type": "CPP"
  },
  {
    "name": "T _uset_spanUTF8",
    "type": "CPP"
  },
  {
    "name": "T _uset_spanBackUTF8",
    "type": "CPP"
  },
  {
    "name": "T _uset_equals",
    "type": "CPP"
  },
  {
    "name": "T _uset_indexOf",
    "type": "CPP"
  },
  {
    "name": "T _uset_charAt",
    "type": "CPP"
  },
  {
    "name": "T _uset_size",
    "type": "CPP"
  },
  {
    "name": "T _uset_getItemCount",
    "type": "CPP"
  },
  {
    "name": "T _uset_getItem",
    "type": "CPP"
  },
  {
    "name": "T _uset_serialize",
    "type": "CPP"
  },
  {
    "name": "T _uset_getSerializedSet",
    "type": "CPP"
  },
  {
    "name": "T _uset_setSerializedToOne",
    "type": "CPP"
  },
  {
    "name": "T _uset_serializedContains",
    "type": "CPP"
  },
  {
    "name": "T _uset_getSerializedRangeCount",
    "type": "CPP"
  },
  {
    "name": "T _uset_getSerializedRange",
    "type": "CPP"
  },
  {
    "name": "T _uset_openPattern",
    "type": "CPP"
  },
  {
    "name": "T _uset_openPatternOptions",
    "type": "CPP"
  },
  {
    "name": "T _uset_applyPattern",
    "type": "CPP"
  },
  {
    "name": "T _uset_applyIntPropertyValue",
    "type": "CPP"
  },
  {
    "name": "T _uset_applyPropertyAlias",
    "type": "CPP"
  },
  {
    "name": "T _uset_resemblesPattern",
    "type": "CPP"
  },
  {
    "name": "T _uset_toPattern",
    "type": "CPP"
  },
  {
    "name": "T _uset_closeOver",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSetIterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSetIterator::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSetIterator::UnicodeSetIterator(icu::UnicodeSet const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSetIterator::reset(icu::UnicodeSet const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSetIterator::UnicodeSetIterator(icu::UnicodeSet const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSetIterator::UnicodeSetIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSetIterator::reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSetIterator::UnicodeSetIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSetIterator::~UnicodeSetIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSetIterator::~UnicodeSetIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSetIterator::~UnicodeSetIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSetIterator::next()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSetIterator::nextRange()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSetIterator::loadRange(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeSetIterator::getString()",
    "type": "CPP"
  },
  {
    "name": "T _u_shapeArabic",
    "type": "CPP"
  },
  {
    "name": "T _usprep_open",
    "type": "CPP"
  },
  {
    "name": "T _usprep_openByType",
    "type": "CPP"
  },
  {
    "name": "T _usprep_close",
    "type": "CPP"
  },
  {
    "name": "T _uprv_syntaxError",
    "type": "CPP"
  },
  {
    "name": "T _usprep_prepare",
    "type": "CPP"
  },
  {
    "name": "T _usprep_swap",
    "type": "CPP"
  },
  {
    "name": "T icu::UStack::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::UStack::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UStack::UStack(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UStack::UStack(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UStack::UStack(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UStack::UStack(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UStack::UStack(void (*)(void*), signed char (*)(UElement, UElement), UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UStack::UStack(void (*)(void*), signed char (*)(UElement, UElement), UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UStack::UStack(void (*)(void*), signed char (*)(UElement, UElement), int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UStack::UStack(void (*)(void*), signed char (*)(UElement, UElement), int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UStack::~UStack()",
    "type": "CPP"
  },
  {
    "name": "T icu::UStack::~UStack()",
    "type": "CPP"
  },
  {
    "name": "T icu::UStack::~UStack()",
    "type": "CPP"
  },
  {
    "name": "T icu::UStack::pop()",
    "type": "CPP"
  },
  {
    "name": "T icu::UStack::popi()",
    "type": "CPP"
  },
  {
    "name": "T icu::UStack::search(void*) const",
    "type": "CPP"
  },
  {
    "name": "T _u_getDefaultConverter",
    "type": "CPP"
  },
  {
    "name": "T _u_releaseDefaultConverter",
    "type": "CPP"
  },
  {
    "name": "T _u_flushDefaultConverter",
    "type": "CPP"
  },
  {
    "name": "T _u_uastrncpy",
    "type": "CPP"
  },
  {
    "name": "T _u_uastrcpy",
    "type": "CPP"
  },
  {
    "name": "T _u_austrncpy",
    "type": "CPP"
  },
  {
    "name": "T _u_austrcpy",
    "type": "CPP"
  },
  {
    "name": "T icu::CaseMap::toTitle(char const*, unsigned int, icu::BreakIterator*, char16_t const*, int, char16_t*, int, icu::Edits*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T _u_strToTitle",
    "type": "CPP"
  },
  {
    "name": "T _ucasemap_toTitle",
    "type": "CPP"
  },
  {
    "name": "T _u_strToWCS",
    "type": "CPP"
  },
  {
    "name": "T _u_strFromWCS",
    "type": "CPP"
  },
  {
    "name": "T _u_strFoldCase",
    "type": "CPP"
  },
  {
    "name": "T icu::CaseMap::fold(unsigned int, char16_t const*, int, char16_t*, int, icu::Edits*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T _u_strCaseCompare",
    "type": "CPP"
  },
  {
    "name": "T _u_strcasecmp",
    "type": "CPP"
  },
  {
    "name": "T _u_memcasecmp",
    "type": "CPP"
  },
  {
    "name": "T _u_strncasecmp",
    "type": "CPP"
  },
  {
    "name": "T _u_caseInsensitivePrefixMatch",
    "type": "CPP"
  },
  {
    "name": "T _u_strToLower",
    "type": "CPP"
  },
  {
    "name": "T _u_strToUpper",
    "type": "CPP"
  },
  {
    "name": "T icu::CaseMap::toLower(char const*, unsigned int, char16_t const*, int, char16_t*, int, icu::Edits*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CaseMap::toUpper(char const*, unsigned int, char16_t const*, int, char16_t*, int, icu::Edits*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringEnumeration::StringEnumeration()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringEnumeration::~StringEnumeration()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringEnumeration::~StringEnumeration()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringEnumeration::~StringEnumeration()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringEnumeration::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringEnumeration::next(int*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringEnumeration::ensureCharsCapacity(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringEnumeration::unext(int*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringEnumeration::snext(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringEnumeration::setChars(char const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringEnumeration::operator==(icu::StringEnumeration const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringEnumeration::operator!=(icu::StringEnumeration const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UStringEnumeration::fromUEnumeration(UEnumeration*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UStringEnumeration::UStringEnumeration(UEnumeration*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UStringEnumeration::UStringEnumeration(UEnumeration*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UStringEnumeration::~UStringEnumeration()",
    "type": "CPP"
  },
  {
    "name": "T icu::UStringEnumeration::~UStringEnumeration()",
    "type": "CPP"
  },
  {
    "name": "T icu::UStringEnumeration::~UStringEnumeration()",
    "type": "CPP"
  },
  {
    "name": "T icu::UStringEnumeration::count(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UStringEnumeration::next(int*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UStringEnumeration::snext(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UStringEnumeration::reset(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UStringEnumeration::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::UStringEnumeration::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T _uenum_openFromStringEnumeration",
    "type": "CPP"
  },
  {
    "name": "T _uenum_openCharStringsEnumeration",
    "type": "CPP"
  },
  {
    "name": "T _uenum_openUCharStringsEnumeration",
    "type": "CPP"
  },
  {
    "name": "T _uprv_itou",
    "type": "CPP"
  },
  {
    "name": "T _u_strFindFirst",
    "type": "CPP"
  },
  {
    "name": "T _u_strchr",
    "type": "CPP"
  },
  {
    "name": "T _u_strlen",
    "type": "CPP"
  },
  {
    "name": "T _u_memchr",
    "type": "CPP"
  },
  {
    "name": "T _u_strstr",
    "type": "CPP"
  },
  {
    "name": "T _u_strchr32",
    "type": "CPP"
  },
  {
    "name": "T _u_memchr32",
    "type": "CPP"
  },
  {
    "name": "T _u_strFindLast",
    "type": "CPP"
  },
  {
    "name": "T _u_strrchr",
    "type": "CPP"
  },
  {
    "name": "T _u_memrchr",
    "type": "CPP"
  },
  {
    "name": "T _u_strrstr",
    "type": "CPP"
  },
  {
    "name": "T _u_strrchr32",
    "type": "CPP"
  },
  {
    "name": "T _u_memrchr32",
    "type": "CPP"
  },
  {
    "name": "T _u_strpbrk",
    "type": "CPP"
  },
  {
    "name": "T _u_strcspn",
    "type": "CPP"
  },
  {
    "name": "T _u_strspn",
    "type": "CPP"
  },
  {
    "name": "T _u_strtok_r",
    "type": "CPP"
  },
  {
    "name": "T _u_strcat",
    "type": "CPP"
  },
  {
    "name": "T _u_strncat",
    "type": "CPP"
  },
  {
    "name": "T _u_strcmp",
    "type": "CPP"
  },
  {
    "name": "T _u_strCompareIter",
    "type": "CPP"
  },
  {
    "name": "T _u_strCompare",
    "type": "CPP"
  },
  {
    "name": "T _u_strcmpCodePointOrder",
    "type": "CPP"
  },
  {
    "name": "T _u_strncmp",
    "type": "CPP"
  },
  {
    "name": "T _u_strncmpCodePointOrder",
    "type": "CPP"
  },
  {
    "name": "T _u_strcpy",
    "type": "CPP"
  },
  {
    "name": "T _u_strncpy",
    "type": "CPP"
  },
  {
    "name": "T _u_countChar32",
    "type": "CPP"
  },
  {
    "name": "T _u_strHasMoreChar32Than",
    "type": "CPP"
  },
  {
    "name": "T _u_strIsWellFormed",
    "type": "CPP"
  },
  {
    "name": "T _u_memcpy",
    "type": "CPP"
  },
  {
    "name": "T _u_memmove",
    "type": "CPP"
  },
  {
    "name": "T _u_memset",
    "type": "CPP"
  },
  {
    "name": "T _u_memcmp",
    "type": "CPP"
  },
  {
    "name": "T _u_memcmpCodePointOrder",
    "type": "CPP"
  },
  {
    "name": "T _u_unescapeAt",
    "type": "CPP"
  },
  {
    "name": "T _u_unescape",
    "type": "CPP"
  },
  {
    "name": "T _u_terminateUChars",
    "type": "CPP"
  },
  {
    "name": "T _u_terminateChars",
    "type": "CPP"
  },
  {
    "name": "T _u_terminateUChar32s",
    "type": "CPP"
  },
  {
    "name": "T _u_terminateWChars",
    "type": "CPP"
  },
  {
    "name": "T _ustr_hashUCharsN",
    "type": "CPP"
  },
  {
    "name": "T _ustr_hashCharsN",
    "type": "CPP"
  },
  {
    "name": "T _ustr_hashICharsN",
    "type": "CPP"
  },
  {
    "name": "T _u_strFromUTF32WithSub",
    "type": "CPP"
  },
  {
    "name": "T _u_strFromUTF32",
    "type": "CPP"
  },
  {
    "name": "T _u_strToUTF32WithSub",
    "type": "CPP"
  },
  {
    "name": "T _u_strToUTF32",
    "type": "CPP"
  },
  {
    "name": "T _u_strFromUTF8WithSub",
    "type": "CPP"
  },
  {
    "name": "T _u_strFromUTF8",
    "type": "CPP"
  },
  {
    "name": "T _u_strFromUTF8Lenient",
    "type": "CPP"
  },
  {
    "name": "T _u_strToUTF8WithSub",
    "type": "CPP"
  },
  {
    "name": "T _u_strToUTF8",
    "type": "CPP"
  },
  {
    "name": "T _u_strFromJavaModifiedUTF8WithSub",
    "type": "CPP"
  },
  {
    "name": "T _u_strToJavaModifiedUTF8",
    "type": "CPP"
  },
  {
    "name": "T _utext_moveIndex32",
    "type": "CPP"
  },
  {
    "name": "T _utext_next32",
    "type": "CPP"
  },
  {
    "name": "T _utext_previous32",
    "type": "CPP"
  },
  {
    "name": "T _utext_nativeLength",
    "type": "CPP"
  },
  {
    "name": "T _utext_isLengthExpensive",
    "type": "CPP"
  },
  {
    "name": "T _utext_getNativeIndex",
    "type": "CPP"
  },
  {
    "name": "T _utext_setNativeIndex",
    "type": "CPP"
  },
  {
    "name": "T _utext_getPreviousNativeIndex",
    "type": "CPP"
  },
  {
    "name": "T _utext_current32",
    "type": "CPP"
  },
  {
    "name": "T _utext_char32At",
    "type": "CPP"
  },
  {
    "name": "T _utext_next32From",
    "type": "CPP"
  },
  {
    "name": "T _utext_previous32From",
    "type": "CPP"
  },
  {
    "name": "T _utext_extract",
    "type": "CPP"
  },
  {
    "name": "T _utext_equals",
    "type": "CPP"
  },
  {
    "name": "T _utext_isWritable",
    "type": "CPP"
  },
  {
    "name": "T _utext_freeze",
    "type": "CPP"
  },
  {
    "name": "T _utext_hasMetaData",
    "type": "CPP"
  },
  {
    "name": "T _utext_replace",
    "type": "CPP"
  },
  {
    "name": "T _utext_copy",
    "type": "CPP"
  },
  {
    "name": "T _utext_clone",
    "type": "CPP"
  },
  {
    "name": "T _utext_setup",
    "type": "CPP"
  },
  {
    "name": "T _utext_close",
    "type": "CPP"
  },
  {
    "name": "T _utext_openUTF8",
    "type": "CPP"
  },
  {
    "name": "T _utext_openReplaceable",
    "type": "CPP"
  },
  {
    "name": "T _utext_openUnicodeString",
    "type": "CPP"
  },
  {
    "name": "T _utext_openConstUnicodeString",
    "type": "CPP"
  },
  {
    "name": "T _utext_openUChars",
    "type": "CPP"
  },
  {
    "name": "T _utext_openCharacterIterator",
    "type": "CPP"
  },
  {
    "name": "T _utf8_nextCharSafeBody",
    "type": "CPP"
  },
  {
    "name": "T _utf8_appendCharSafeBody",
    "type": "CPP"
  },
  {
    "name": "T _utf8_prevCharSafeBody",
    "type": "CPP"
  },
  {
    "name": "T _utf8_back1SafeBody",
    "type": "CPP"
  },
  {
    "name": "T icu::ICU_Utility::appendNumber(icu::UnicodeString&, int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::ICU_Utility::isUnprintable(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::ICU_Utility::escapeUnprintable(icu::UnicodeString&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::ICU_Utility::skipWhitespace(icu::UnicodeString const&, int&, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::ICU_Utility::parseChar(icu::UnicodeString const&, int&, char16_t)",
    "type": "CPP"
  },
  {
    "name": "T icu::ICU_Utility::parsePattern(icu::UnicodeString const&, icu::Replaceable const&, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::ICU_Utility::appendToRule(icu::UnicodeString&, int, signed char, signed char, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ICU_Utility::appendToRule(icu::UnicodeString&, icu::UnicodeString const&, signed char, signed char, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ICU_Utility::appendToRule(icu::UnicodeString&, icu::UnicodeMatcher const*, signed char, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ICU_Utility::parseInteger(icu::UnicodeString const&, int&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::ICU_Utility::parsePattern(icu::UnicodeString const&, int, int, icu::UnicodeString const&, int*)",
    "type": "CPP"
  },
  {
    "name": "T icu::ICU_Utility::parseUnicodeIdentifier(icu::UnicodeString const&, int&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ICU_Utility::parseNumber(icu::UnicodeString const&, int&, signed char)",
    "type": "CPP"
  },
  {
    "name": "T _utrace_entry",
    "type": "CPP"
  },
  {
    "name": "T _utrace_exit",
    "type": "CPP"
  },
  {
    "name": "T _utrace_data",
    "type": "CPP"
  },
  {
    "name": "T _utrace_vformat",
    "type": "CPP"
  },
  {
    "name": "T _utrace_format",
    "type": "CPP"
  },
  {
    "name": "T _utrace_setFunctions",
    "type": "CPP"
  },
  {
    "name": "T _utrace_getFunctions",
    "type": "CPP"
  },
  {
    "name": "T _utrace_setLevel",
    "type": "CPP"
  },
  {
    "name": "T _utrace_getLevel",
    "type": "CPP"
  },
  {
    "name": "T _utrace_functionName",
    "type": "CPP"
  },
  {
    "name": "T _utrie_open",
    "type": "CPP"
  },
  {
    "name": "T _utrie_clone",
    "type": "CPP"
  },
  {
    "name": "T _utrie_close",
    "type": "CPP"
  },
  {
    "name": "T _utrie_getData",
    "type": "CPP"
  },
  {
    "name": "T _utrie_set32",
    "type": "CPP"
  },
  {
    "name": "T _utrie_get32",
    "type": "CPP"
  },
  {
    "name": "T _utrie_setRange32",
    "type": "CPP"
  },
  {
    "name": "T _utrie_serialize",
    "type": "CPP"
  },
  {
    "name": "T _utrie_defaultGetFoldingOffset",
    "type": "CPP"
  },
  {
    "name": "T _utrie_unserialize",
    "type": "CPP"
  },
  {
    "name": "T _utrie_unserializeDummy",
    "type": "CPP"
  },
  {
    "name": "T _utrie_enum",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_get32",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_get32FromLeadSurrogateCodeUnit",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_internalU8NextIndex",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_internalU8PrevIndex",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_openFromSerialized",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_openDummy",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_close",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_isFrozen",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_serialize",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_enum",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_enumForLeadSurrogate",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_open",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_set32",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_clone",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_cloneAsThawed",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_set32ForLeadSurrogateCodeUnit",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_fromUTrie",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_freeze",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_setRange32",
    "type": "CPP"
  },
  {
    "name": "T _utrie_swap",
    "type": "CPP"
  },
  {
    "name": "T _utrie2_swap",
    "type": "CPP"
  },
  {
    "name": "T _ucptrie_swap",
    "type": "CPP"
  },
  {
    "name": "T _utrie_swapAnyVersion",
    "type": "CPP"
  },
  {
    "name": "T icu::IDNA::~IDNA()",
    "type": "CPP"
  },
  {
    "name": "T icu::IDNA::~IDNA()",
    "type": "CPP"
  },
  {
    "name": "T icu::IDNA::~IDNA()",
    "type": "CPP"
  },
  {
    "name": "T icu::IDNA::labelToASCII_UTF8(icu::StringPiece, icu::ByteSink&, icu::IDNAInfo&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::IDNA::labelToUnicodeUTF8(icu::StringPiece, icu::ByteSink&, icu::IDNAInfo&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::IDNA::nameToASCII_UTF8(icu::StringPiece, icu::ByteSink&, icu::IDNAInfo&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::IDNA::nameToUnicodeUTF8(icu::StringPiece, icu::ByteSink&, icu::IDNAInfo&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::IDNA::createUTS46Instance(unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T _uidna_openUTS46",
    "type": "CPP"
  },
  {
    "name": "T _uidna_close",
    "type": "CPP"
  },
  {
    "name": "T _uidna_labelToASCII",
    "type": "CPP"
  },
  {
    "name": "T _uidna_labelToUnicode",
    "type": "CPP"
  },
  {
    "name": "T _uidna_nameToASCII",
    "type": "CPP"
  },
  {
    "name": "T _uidna_nameToUnicode",
    "type": "CPP"
  },
  {
    "name": "T _uidna_labelToASCII_UTF8",
    "type": "CPP"
  },
  {
    "name": "T _uidna_labelToUnicodeUTF8",
    "type": "CPP"
  },
  {
    "name": "T _uidna_nameToASCII_UTF8",
    "type": "CPP"
  },
  {
    "name": "T _uidna_nameToUnicodeUTF8",
    "type": "CPP"
  },
  {
    "name": "T _u_errorName",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::UVector(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::_init(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::UVector(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::UVector(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::UVector(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::UVector(void (*)(void*), signed char (*)(UElement, UElement), UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::UVector(void (*)(void*), signed char (*)(UElement, UElement), UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::UVector(void (*)(void*), signed char (*)(UElement, UElement), int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::UVector(void (*)(void*), signed char (*)(UElement, UElement), int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::~UVector()",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::removeAllElements()",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::~UVector()",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::~UVector()",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::assign(icu::UVector const&, void (*)(UElement*, UElement*), UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::ensureCapacity(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::setSize(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::operator==(icu::UVector const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::addElement(void*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::addElement(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::setElementAt(void*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::setElementAt(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::insertElementAt(void*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::insertElementAt(int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::elementAt(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::elementAti(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::containsAll(icu::UVector const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::indexOf(UElement, int, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::containsNone(icu::UVector const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::removeAll(icu::UVector const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::removeElementAt(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::retainAll(icu::UVector const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::orphanElementAt(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::removeElement(void*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::indexOf(void*, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::equals(icu::UVector const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::indexOf(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::toArray(void**) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::setDeleter(void (*)(void*))",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::setComparer(signed char (*)(UElement, UElement))",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::sortedInsert(void*, signed char (*)(UElement, UElement), UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::sortedInsert(UElement, signed char (*)(UElement, UElement), UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::sortedInsert(int, signed char (*)(UElement, UElement), UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::sorti(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::sort(signed char (*)(UElement, UElement), UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector::sortWithUComparator(int (*)(void const*, void const*, void const*), void const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::UVector32(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::_init(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::UVector32(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::UVector32(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::UVector32(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::~UVector32()",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::~UVector32()",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::~UVector32()",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::assign(icu::UVector32 const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::setSize(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::operator==(icu::UVector32 const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::setElementAt(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::insertElementAt(int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::containsAll(icu::UVector32 const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::indexOf(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::containsNone(icu::UVector32 const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::removeAll(icu::UVector32 const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::removeElementAt(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::retainAll(icu::UVector32 const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::removeAllElements()",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::equals(icu::UVector32 const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::expandCapacity(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::setMaxCapacity(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector32::sortedInsert(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector64::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector64::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector64::UVector64(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector64::_init(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector64::UVector64(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector64::UVector64(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector64::UVector64(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector64::~UVector64()",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector64::~UVector64()",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector64::~UVector64()",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector64::assign(icu::UVector64 const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector64::setSize(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector64::operator==(icu::UVector64 const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector64::setElementAt(long long, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector64::insertElementAt(long long, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector64::removeAllElements()",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector64::expandCapacity(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UVector64::setMaxCapacity(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::ImmutableIndex::~ImmutableIndex()",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::ImmutableIndex::~ImmutableIndex()",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::ImmutableIndex::~ImmutableIndex()",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::ImmutableIndex::getBucketCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::ImmutableIndex::getBucketIndex(icu::UnicodeString const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::ImmutableIndex::getBucket(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::AlphabeticIndex(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::init(icu::Locale const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::AlphabeticIndex(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::AlphabeticIndex(icu::RuleBasedCollator*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::AlphabeticIndex(icu::RuleBasedCollator*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::~AlphabeticIndex()",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::~AlphabeticIndex()",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::~AlphabeticIndex()",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::addLabels(icu::UnicodeSet const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::clearBuckets()",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::addLabels(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::addIndexExemplars(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::buildImmutableIndex(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::createBucketList(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::getBucketCount(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::initBuckets(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::getRecordCount(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::initLabels(icu::UVector&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::separated(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::Bucket::Bucket(icu::UnicodeString const&, icu::UnicodeString const&, UAlphabeticIndexLabelType)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::internalResetBucketIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::addChineseIndexCharacters(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::operator==(icu::AlphabeticIndex const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::operator!=(icu::AlphabeticIndex const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::getCollator() const",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::getInflowLabel() const",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::getOverflowLabel() const",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::getUnderflowLabel() const",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::setInflowLabel(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::setOverflowLabel(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::setUnderflowLabel(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::getMaxLabelCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::setMaxLabelCount(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::firstStringsInScript(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::Record::Record(icu::UnicodeString const&, void const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::Record::Record(icu::UnicodeString const&, void const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::Record::~Record()",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::Record::~Record()",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::addRecord(icu::UnicodeString const&, void const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::clearRecords(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::getBucketIndex(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::getBucketIndex() const",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::nextBucket(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::getBucketLabel() const",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::getBucketLabelType() const",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::getBucketRecordCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::resetBucketIterator(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::nextRecord(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::getRecordName() const",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::getRecordData() const",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::resetRecordIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::Bucket::Bucket(icu::UnicodeString const&, icu::UnicodeString const&, UAlphabeticIndexLabelType)",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::Bucket::~Bucket()",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::Bucket::~Bucket()",
    "type": "CPP"
  },
  {
    "name": "T icu::AlphabeticIndex::Bucket::~Bucket()",
    "type": "CPP"
  },
  {
    "name": "T icu::AnyTransliterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::CalendarAstronomer()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::clearCache()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::CalendarAstronomer()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::CalendarAstronomer(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::CalendarAstronomer(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::CalendarAstronomer(double, double)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::CalendarAstronomer(double, double)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::~CalendarAstronomer()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::~CalendarAstronomer()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::setTime(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::setJulianDay(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::getTime()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::getJulianDay()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::getJulianCentury()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::getGreenwichSidereal()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::getSiderealOffset()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::getLocalSidereal()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::lstToUT(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::eclipticToEquatorial(icu::CalendarAstronomer::Equatorial&, icu::CalendarAstronomer::Ecliptic const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::eclipticToEquatorial(icu::CalendarAstronomer::Equatorial&, double, double)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::eclipticObliquity()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::eclipticToEquatorial(icu::CalendarAstronomer::Equatorial&, double)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::eclipticToHorizon(icu::CalendarAstronomer::Horizon&, double)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::adjustSunLongitude(double&, double)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::getSunLongitudeForTime(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::getSunLongitude(double, double&, double&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::getSunLongitude()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::getSunPosition(icu::CalendarAstronomer::Equatorial&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::SUMMER_SOLSTICE()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::WINTER_SOLSTICE()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::AngleFunc::~AngleFunc()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::AngleFunc::~AngleFunc()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::AngleFunc::~AngleFunc()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::getSunTime(double, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::timeOfAngle(icu::CalendarAstronomer::AngleFunc&, double, double, double, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::CoordFunc::~CoordFunc()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::CoordFunc::~CoordFunc()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::CoordFunc::~CoordFunc()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::getSunRiseSet(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::riseOrSet(icu::CalendarAstronomer::CoordFunc&, signed char, double, double, double)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::getMoonPosition()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::getMoonAge()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::getMoonPhase()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::NEW_MOON()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::FULL_MOON()",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::getNewMoonTimeInRange(double, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::getMoonTime(double, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::getMoonTime(icu::CalendarAstronomer::MoonAge const&, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::getMoonRiseSet(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::Ecliptic::toString() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::Equatorial::toString() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CalendarAstronomer::Horizon::toString() const",
    "type": "CPP"
  },
  {
    "name": "T icu::BasicTimeZone::BasicTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::BasicTimeZone::BasicTimeZone(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BasicTimeZone::BasicTimeZone(icu::BasicTimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::BasicTimeZone::~BasicTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::BasicTimeZone::~BasicTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::BasicTimeZone::~BasicTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::BasicTimeZone::hasEquivalentTransitions(icu::BasicTimeZone const&, double, double, signed char, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::BasicTimeZone::getSimpleRulesNear(double, icu::InitialTimeZoneRule*&, icu::AnnualTimeZoneRule*&, icu::AnnualTimeZoneRule*&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::BasicTimeZone::getTimeZoneRulesAfter(double, icu::InitialTimeZoneRule*&, icu::UVector*&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::BasicTimeZone::getOffsetFromLocal(double, int, int, int&, int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::BreakTransliterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::BuddhistCalendar::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedCalendar::~SharedCalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedCalendar::~SharedCalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedCalendar::~SharedCalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleCacheKey<icu::SharedCalendar>::createObject(void const*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::makeInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::Calendar(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::clear()",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::setWeekData(icu::Locale const&, char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::Calendar(icu::TimeZone*, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::Calendar(icu::TimeZone const&, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::~Calendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::~Calendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::~Calendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::Calendar(icu::Calendar const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::operator=(icu::Calendar const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::createInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::createInstance(icu::TimeZone*, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::createInstance(icu::TimeZone const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::createInstance(icu::TimeZone const&, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::createInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::adoptTimeZone(icu::TimeZone*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::setTimeInMillis(double, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getNow()",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::setTimeZone(icu::TimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getCalendarTypeFromLocale(icu::Locale const&, char*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::operator==(icu::Calendar const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getTimeInMillis(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::isEquivalentTo(icu::Calendar const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::equals(icu::Calendar const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::before(icu::Calendar const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::after(icu::Calendar const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getAvailableLocales(int&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getKeywordValuesForLocale(char const*, icu::Locale const&, signed char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::updateTime(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::isLenient() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::get(UCalendarDateFields, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::complete(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::set(UCalendarDateFields, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::recalculateStamp()",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::set(int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::set(int, int, int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::set(int, int, int, int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getRelatedYear(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::setRelatedYear(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::clear(UCalendarDateFields)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::isSet(UCalendarDateFields) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::newestStamp(UCalendarDateFields, UCalendarDateFields, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::pinField(UCalendarDateFields, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::computeFields(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getTimeZone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::computeGregorianAndDOWFields(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::computeWeekFields(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::julianDayToDayOfWeek(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::computeGregorianFields(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getFirstDayOfWeek() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getMinimalDaysInFirstWeek() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::weekNumber(int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::handleComputeFields(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::roll(icu::Calendar::EDateFields, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::roll(UCalendarDateFields, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::add(icu::Calendar::EDateFields, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::add(UCalendarDateFields, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::setLenient(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getImmediatePreviousZoneTransition(double, double*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::fieldDifference(double, icu::Calendar::EDateFields, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::fieldDifference(double, UCalendarDateFields, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::orphanTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::setRepeatedWallTimeOption(UCalendarWallTimeOption)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getRepeatedWallTimeOption() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::setSkippedWallTimeOption(UCalendarWallTimeOption)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getSkippedWallTimeOption() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::setFirstDayOfWeek(UCalendarDaysOfWeek)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getFirstDayOfWeek(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::setMinimalDaysInFirstWeek(unsigned char)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getDayOfWeekType(UCalendarDaysOfWeek, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getWeekendTransition(UCalendarDaysOfWeek, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::isWeekend(double, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::isWeekend() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getMinimum(icu::Calendar::EDateFields) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getMinimum(UCalendarDateFields) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getMaximum(icu::Calendar::EDateFields) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getMaximum(UCalendarDateFields) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getGreatestMinimum(icu::Calendar::EDateFields) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getGreatestMinimum(UCalendarDateFields) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getLeastMaximum(icu::Calendar::EDateFields) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getLeastMaximum(UCalendarDateFields) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getActualMinimum(icu::Calendar::EDateFields, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getLimit(UCalendarDateFields, icu::Calendar::ELimitType) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getActualMinimum(UCalendarDateFields, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::validateFields(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::validateField(UCalendarDateFields, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::validateField(UCalendarDateFields, int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getFieldResolutionTable() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::newerField(UCalendarDateFields, UCalendarDateFields) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::resolveFields(int const (*) [12][8])",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::computeTime(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::computeJulianDay()",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::computeMillisInDay()",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::computeZoneOffset(double, double, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getBasicTimeZone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::handleComputeJulianDay(UCalendarDateFields)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getLocalDOW()",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getDefaultMonthInYear(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getDefaultDayInMonth(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::handleGetExtendedYearFromWeekFields(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::handleGetMonthLength(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::handleGetYearLength(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getActualMaximum(UCalendarDateFields, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getActualHelper(UCalendarDateFields, int, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::prepareGetActual(UCalendarDateFields, signed char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getLocale(ULocDataLocaleType, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::getLocaleID(ULocDataLocaleType, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Calendar::internalSet(icu::Calendar::EDateFields, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CaseMapTransliterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::CECalendar::CECalendar(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CECalendar::CECalendar(icu::CECalendar const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CECalendar::~CECalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::CECalendar::~CECalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::CECalendar::~CECalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::CECalendar::operator=(icu::CECalendar const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CECalendar::handleComputeMonthStart(int, int, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CECalendar::ceToJD(int, int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CECalendar::handleGetLimit(UCalendarDateFields, icu::Calendar::ELimitType) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CECalendar::inDaylightTime(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CECalendar::haveDefaultCentury() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CECalendar::jdToCE(int, int, int&, int&, int&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::ChineseCalendar(icu::ChineseCalendar const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::ChineseCalendar(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::getChineseCalZoneAstroCalc() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::ChineseCalendar(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::ChineseCalendar(icu::Locale const&, int, icu::TimeZone const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::ChineseCalendar(icu::Locale const&, int, icu::TimeZone const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::ChineseCalendar(icu::ChineseCalendar const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::~ChineseCalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::~ChineseCalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::~ChineseCalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::getType() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::handleGetLimit(UCalendarDateFields, icu::Calendar::ELimitType) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::handleGetExtendedYear()",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::handleGetMonthLength(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::handleComputeFields(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::getFieldResolutionTable() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::handleComputeMonthStart(int, int, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::add(UCalendarDateFields, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::add(icu::Calendar::EDateFields, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::roll(UCalendarDateFields, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::roll(icu::Calendar::EDateFields, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::daysToMillis(double) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::millisToDays(double) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::winterSolstice(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::newMoonNear(double, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::synodicMonthsBetween(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::majorSolarTerm(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::hasNoMajorSolarTerm(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::isLeapMonthBetween(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::computeChineseFields(int, int, int, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::newYear(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::offsetMonth(int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::inDaylightTime(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::haveDefaultCentury() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::defaultCenturyStart() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::internalGetDefaultCenturyStart() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::defaultCenturyStartYear() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::internalGetDefaultCenturyStartYear() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::ChineseCalendar::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::ChoiceFormat(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::ChoiceFormat(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::ChoiceFormat(double const*, icu::UnicodeString const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::ChoiceFormat(double const*, icu::UnicodeString const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::ChoiceFormat(double const*, signed char const*, icu::UnicodeString const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::ChoiceFormat(double const*, signed char const*, icu::UnicodeString const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::ChoiceFormat(icu::ChoiceFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::ChoiceFormat(icu::ChoiceFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::ChoiceFormat(icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::ChoiceFormat(icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::operator==(icu::Format const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::operator=(icu::ChoiceFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::~ChoiceFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::~ChoiceFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::~ChoiceFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::dtos(double, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::applyPattern(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::applyPattern(icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::toPattern(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::setChoices(double const*, icu::UnicodeString const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::setChoices(double const*, signed char const*, icu::UnicodeString const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::setChoices(double const*, signed char const*, icu::UnicodeString const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::getLimits(int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::getClosures(int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::getFormats(int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::format(long long, icu::UnicodeString&, icu::FieldPosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::format(int, icu::UnicodeString&, icu::FieldPosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::format(double, icu::UnicodeString&, icu::FieldPosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::findSubMessage(icu::MessagePattern const&, int, double)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::format(icu::Formattable const*, int, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::parse(icu::UnicodeString const&, icu::Formattable&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::parseArgument(icu::MessagePattern const&, int, icu::UnicodeString const&, icu::ParsePosition&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::matchStringUntilLimitPart(icu::MessagePattern const&, int, int, icu::UnicodeString const&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::ChoiceFormat::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::CollationElementIterator(icu::CollationElementIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::operator=(icu::CollationElementIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::CollationElementIterator(icu::CollationElementIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::~CollationElementIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::~CollationElementIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::~CollationElementIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::getOffset() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::next(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::operator!=(icu::CollationElementIterator const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::operator==(icu::CollationElementIterator const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::previous(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::setOffset(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::setText(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::setText(icu::CharacterIterator&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::strengthOrder(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::CollationElementIterator(icu::UnicodeString const&, icu::RuleBasedCollator const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::CollationElementIterator(icu::UnicodeString const&, icu::RuleBasedCollator const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::CollationElementIterator(icu::CharacterIterator const&, icu::RuleBasedCollator const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::CollationElementIterator(icu::CharacterIterator const&, icu::RuleBasedCollator const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::computeMaxExpansions(icu::CollationData const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::getMaxExpansion(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationElementIterator::getMaxExpansion(UHashtable const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::createInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::createInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::makeInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::safeClone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::compare(icu::UnicodeString const&, icu::UnicodeString const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::compare(icu::UnicodeString const&, icu::UnicodeString const&, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::compare(char16_t const*, int, char16_t const*, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::compare(UCharIterator&, UCharIterator&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::compareUTF8(icu::StringPiece const&, icu::StringPiece const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::equals(icu::UnicodeString const&, icu::UnicodeString const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::greaterOrEqual(icu::UnicodeString const&, icu::UnicodeString const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::greater(icu::UnicodeString const&, icu::UnicodeString const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::getAvailableLocales(int&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::getDisplayName(icu::Locale const&, icu::Locale const&, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::getDisplayName(icu::Locale const&, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::Collator()",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::Collator(UColAttributeValue, UNormalizationMode)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::~Collator()",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::~Collator()",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::~Collator()",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::Collator(icu::Collator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::operator==(icu::Collator const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::operator!=(icu::Collator const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::getBound(unsigned char const*, int, UColBoundMode, unsigned int, unsigned char*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::setLocales(icu::Locale const&, icu::Locale const&, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::getTailoredSet(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::getAvailableLocales()",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::getKeywords(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::getKeywordValues(char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::getKeywordValuesForLocale(char const*, icu::Locale const&, signed char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::getFunctionalEquivalent(char const*, icu::Locale const&, signed char&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::getStrength() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::setStrength(icu::Collator::ECollationStrength)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::setMaxVariable(UColReorderCode, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::getMaxVariable() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::getReorderCodes(int*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::setReorderCodes(int const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::getEquivalentReorderCodes(int, int*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::internalGetShortDefinitionString(char const*, char*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::internalCompareUTF8(char const*, int, char const*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Collator::internalNextSortKeyPart(UCharIterator*, unsigned int*, unsigned char*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Collation::incTwoBytePrimaryByOffset(unsigned int, signed char, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collation::incThreeBytePrimaryByOffset(unsigned int, signed char, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collation::decTwoBytePrimaryByOneStep(unsigned int, signed char, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collation::decThreeBytePrimaryByOneStep(unsigned int, signed char, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collation::getThreeBytePrimaryForOffsetData(int, long long)",
    "type": "CPP"
  },
  {
    "name": "T icu::Collation::unassignedPrimaryFromCodePoint(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::RuleBasedCollator()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::RuleBasedCollator()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::RuleBasedCollator(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::internalBuildTailoring(icu::UnicodeString const&, int, UColAttributeValue, UParseError*, icu::UnicodeString*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::RuleBasedCollator(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::RuleBasedCollator(icu::UnicodeString const&, icu::Collator::ECollationStrength, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::RuleBasedCollator(icu::UnicodeString const&, icu::Collator::ECollationStrength, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::RuleBasedCollator(icu::UnicodeString const&, UColAttributeValue, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::RuleBasedCollator(icu::UnicodeString const&, UColAttributeValue, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::RuleBasedCollator(icu::UnicodeString const&, icu::Collator::ECollationStrength, UColAttributeValue, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::RuleBasedCollator(icu::UnicodeString const&, icu::Collator::ECollationStrength, UColAttributeValue, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::RuleBasedCollator(icu::UnicodeString const&, UParseError&, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::RuleBasedCollator(icu::UnicodeString const&, UParseError&, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::CollationBuilder(icu::CollationTailoring const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::parseAndBuild(icu::UnicodeString const&, unsigned char const*, icu::CollationRuleParser::Importer*, UParseError*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::~CollationBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::CollationBuilder(icu::CollationTailoring const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::~CollationBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::~CollationBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::makeTailoredCEs(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::closeOverComposites(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::finalizeCEs(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::addReset(int, icu::UnicodeString const&, char const*&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::getSpecialResetPosition(icu::UnicodeString const&, char const*&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::findOrInsertNodeForCEs(int, char const*&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::findOrInsertNodeForPrimary(unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::findCommonNode(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::getWeight16Before(int, long long, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::insertNodeBetween(int, int, long long, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::findOrInsertWeakNode(int, unsigned int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::ceStrength(long long)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::findOrInsertNodeForRootCE(long long, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::addRelation(int, icu::UnicodeString const&, icu::UnicodeString const&, icu::UnicodeString const&, char const*&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::insertTailoredNodeAfter(int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::setCaseBits(icu::UnicodeString const&, char const*&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::ignorePrefix(icu::UnicodeString const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::ignoreString(icu::UnicodeString const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::addIfDifferent(icu::UnicodeString const&, icu::UnicodeString const&, long long const*, int, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::addWithClosure(icu::UnicodeString const&, icu::UnicodeString const&, long long const*, int, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::suppressContractions(icu::UnicodeSet const&, char const*&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::optimize(icu::UnicodeSet const&, char const*&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::addOnlyClosure(icu::UnicodeString const&, icu::UnicodeString const&, long long const*, int, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::addTailComposites(icu::UnicodeString const&, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::mergeCompositeIntoString(icu::UnicodeString const&, int, int, icu::UnicodeString const&, icu::UnicodeString&, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::isFCD(icu::UnicodeString const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::sameCEs(long long const*, int, long long const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationBuilder::countTailoredNodes(long long const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T _ucol_openRules",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getUnsafeSet",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationCompare::compareUpToQuaternary(icu::CollationIterator&, icu::CollationIterator&, icu::CollationSettings const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationData::getIndirectCE32(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationData::getFinalCE32(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationData::getSingleCE(int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationData::getFirstPrimaryForGroup(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationData::getScriptIndex(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationData::getLastPrimaryForGroup(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationData::getGroupForPrimary(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationData::getEquivalentScripts(int, int*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationData::makeReorderRanges(int const*, int, icu::UVector32&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationData::makeReorderRanges(int const*, int, signed char, icu::UVector32&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationData::addLowScriptRange(unsigned char*, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationData::addHighScriptRange(unsigned char*, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::CEModifier::~CEModifier()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::CEModifier::~CEModifier()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::CEModifier::~CEModifier()",
    "type": "CPP"
  },
  {
    "name": "T _uprv_deleteConditionalCE32",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::buildContext(icu::ConditionalCE32*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::clearContexts()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::CollationDataBuilder(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::CollationDataBuilder(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::~CollationDataBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::~CollationDataBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::~CollationDataBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::initForTailoring(icu::CollationData const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::maybeSetPrimaryRange(int, int, unsigned int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::addCE(long long, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::setPrimaryRangeAndReturnNext(int, int, unsigned int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::getCE32FromOffsetCE32(signed char, int, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::isCompressibleLeadByte(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::isAssigned(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::getLongPrimaryIfSingleCE(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::getSingleCE(int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::addCE32(unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::addConditionalCE32(icu::UnicodeString const&, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::add(icu::UnicodeString const&, icu::UnicodeString const&, long long const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::addCE32(icu::UnicodeString const&, icu::UnicodeString const&, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::copyFromBaseCE32(int, unsigned int, signed char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::encodeOneCEAsCE32(long long)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::encodeOneCE(long long, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::encodeCEs(long long const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::encodeExpansion32(int const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::encodeExpansion(long long const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::copyContractionsFromBaseCE32(icu::UnicodeString&, int, unsigned int, icu::ConditionalCE32*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::copyFrom(icu::CollationDataBuilder const&, icu::CollationDataBuilder::CEModifier const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::optimize(icu::UnicodeSet const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::suppressContractions(icu::UnicodeSet const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::getJamoCE32s(unsigned int*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::setDigitTags(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::setLeadSurrogates(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::build(icu::CollationData&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::buildMappings(icu::CollationData&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::buildFastLatinTable(icu::CollationData&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::buildContexts(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::addContextTrie(unsigned int, icu::UCharsTrieBuilder&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::getCEs(icu::UnicodeString const&, long long*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::getCEs(icu::UnicodeString const&, int, long long*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataBuilder::getCEs(icu::UnicodeString const&, icu::UnicodeString const&, long long*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataReader::read(icu::CollationTailoring const*, unsigned char const*, int, icu::CollationTailoring&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataReader::isAcceptable(void*, char const*, char const*, UDataInfo const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::cloneRuleData(int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::cloneBinary(unsigned char*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataWriter::writeTailoring(icu::CollationTailoring const&, icu::CollationSettings const&, int*, unsigned char*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataWriter::writeBase(icu::CollationData const&, icu::CollationSettings const&, void const*, int, int*, unsigned char*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataWriter::write(signed char, unsigned char const*, icu::CollationData const&, icu::CollationSettings const&, void const*, int, int*, unsigned char*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationDataWriter::copyData(int const*, int, void const*, unsigned char*)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatin::getOptions(icu::CollationData const*, icu::CollationSettings const&, unsigned short*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatin::compareUTF16(unsigned short const*, unsigned short const*, int, char16_t const*, int, char16_t const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatin::lookup(unsigned short const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatin::nextPair(unsigned short const*, int, unsigned int, char16_t const*, unsigned char const*, int&, int&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatin::getSecondaries(unsigned int, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatin::getCases(unsigned int, signed char, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatin::getTertiaries(unsigned int, signed char, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatin::getQuaternaries(unsigned int, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatin::compareUTF8(unsigned short const*, unsigned short const*, int, unsigned char const*, int, unsigned char const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatin::lookupUTF8(unsigned short const*, int, unsigned char const*, int&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatin::lookupUTF8Unsafe(unsigned short const*, int, unsigned char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatinBuilder::CollationFastLatinBuilder(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatinBuilder::CollationFastLatinBuilder(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatinBuilder::~CollationFastLatinBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatinBuilder::~CollationFastLatinBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatinBuilder::~CollationFastLatinBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatinBuilder::forData(icu::CollationData const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatinBuilder::loadGroups(icu::CollationData const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatinBuilder::getCEs(icu::CollationData const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatinBuilder::encodeUniqueCEs(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatinBuilder::resetCEs()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatinBuilder::encodeCharCEs(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatinBuilder::encodeContractions(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatinBuilder::inSameGroup(unsigned int, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatinBuilder::getCEsFromCE32(icu::CollationData const&, int, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatinBuilder::addUniqueCE(long long, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatinBuilder::addContractionEntry(int, long long, long long, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatinBuilder::getCEsFromContractionCE32(icu::CollationData const&, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatinBuilder::getMiniCE(long long) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationFastLatinBuilder::encodeTwoCEs(long long, long long) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::CEBuffer::~CEBuffer()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::CEBuffer::~CEBuffer()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::CEBuffer::ensureAppendCapacity(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::CollationIterator(icu::CollationIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::~CollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::~CollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::~CollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::operator==(icu::CollationIterator const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::fetchCEs(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::handleNextCE32(int&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::handleGetTrailSurrogate()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::foundNULTerminator()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::forbidSurrogateCodePoints() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::getDataCE32(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::getCE32FromBuilderData(unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::nextCEFromCE32(icu::CollationData const*, int, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::appendCEsFromCE32(icu::CollationData const*, int, unsigned int, signed char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::getCE32FromPrefix(icu::CollationData const*, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::nextSkippedCodePoint(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::backwardNumSkipped(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::nextCE32FromContraction(icu::CollationData const*, unsigned int, char16_t const*, unsigned int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::appendNumericCEs(unsigned int, signed char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::nextCE32FromDiscontiguousContraction(icu::CollationData const*, icu::UCharsTrie&, unsigned int, int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::appendNumericSegmentCEs(char const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::previousCE(icu::UVector32&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationIterator::previousCEUnsafe(int, icu::UVector32&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKeys::LevelCallback::~LevelCallback()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKeys::LevelCallback::~LevelCallback()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKeys::LevelCallback::~LevelCallback()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKeys::LevelCallback::needToWrite(icu::Collation::Level)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKeys::writeSortKeyUpToQuaternary(icu::CollationIterator&, signed char const*, icu::CollationSettings const&, icu::SortKeyByteSink&, icu::Collation::Level, icu::CollationKeys::LevelCallback&, signed char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRoot::load(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRoot::getRootCacheEntry(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRoot::getRoot(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRoot::getData(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRoot::getSettings(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRootElements::lastCEWithPrimaryBefore(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRootElements::findP(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRootElements::firstCEWithPrimaryAtLeast(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRootElements::getPrimaryBefore(unsigned int, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRootElements::findPrimary(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRootElements::getSecondaryBefore(unsigned int, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRootElements::getFirstSecTerForPrimary(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRootElements::getTertiaryBefore(unsigned int, unsigned int, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRootElements::getPrimaryAfter(unsigned int, int, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRootElements::getSecondaryAfter(int, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRootElements::getTertiaryAfter(int, unsigned int, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::Sink::~Sink()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::Sink::~Sink()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::Sink::~Sink()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::Sink::suppressContractions(icu::UnicodeSet const&, char const*&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::Sink::optimize(icu::UnicodeSet const&, char const*&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::Importer::~Importer()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::Importer::~Importer()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::Importer::~Importer()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::CollationRuleParser(icu::CollationData const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::CollationRuleParser(icu::CollationData const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::~CollationRuleParser()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::~CollationRuleParser()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::parse(icu::UnicodeString const&, icu::CollationSettings&, UParseError*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::parse(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::parseRuleChain(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::parseSetting(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::skipComment(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::setParseError(char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::parseResetAndPosition(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::parseRelationOperator(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::parseRelationStrings(int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::parseStarredCharacters(int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::skipWhiteSpace(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::parseSpecialPosition(int, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::parseTailoringString(int, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::setErrorContext()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::parseString(int, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::isSyntaxChar(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::readWords(int, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::parseReordering(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::getOnOffValue(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::parseUnicodeSet(int, icu::UnicodeSet&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationRuleParser::getReorderCode(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationSettings::CollationSettings(icu::CollationSettings const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationSettings::copyReorderingFrom(icu::CollationSettings const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationSettings::CollationSettings(icu::CollationSettings const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationSettings::~CollationSettings()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationSettings::~CollationSettings()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationSettings::~CollationSettings()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationSettings::operator==(icu::CollationSettings const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationSettings::hashCode() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationSettings::resetReordering()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationSettings::aliasReordering(icu::CollationData const&, int const*, int, unsigned int const*, int, unsigned char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationSettings::reorderTableHasSplitBytes(unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationSettings::setReordering(icu::CollationData const&, int const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationSettings::setReorderArrays(int const*, int, unsigned int const*, int, unsigned char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationSettings::reorderEx(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationSettings::setStrength(int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationSettings::setFlag(int, UColAttributeValue, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationSettings::setCaseFirst(UColAttributeValue, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationSettings::setAlternateHandling(UColAttributeValue, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationSettings::setMaxVariable(int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationTailoring::CollationTailoring(icu::CollationSettings const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationTailoring::CollationTailoring(icu::CollationSettings const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationTailoring::~CollationTailoring()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationTailoring::~CollationTailoring()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationTailoring::~CollationTailoring()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationTailoring::ensureOwnedData(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationTailoring::makeBaseVersion(unsigned char const*, unsigned char*)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationTailoring::setVersion(unsigned char const*, unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationTailoring::getUCAVersion() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationWeights::CollationWeights()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationWeights::CollationWeights()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationWeights::initForPrimary(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationWeights::initForSecondary()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationWeights::initForTertiary()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationWeights::incWeight(unsigned int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationWeights::incWeightByOffset(unsigned int, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationWeights::lengthenRange(icu::CollationWeights::WeightRange&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationWeights::getWeightRanges(unsigned int, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationWeights::allocWeightsInShortRanges(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationWeights::allocWeightsInMinLengthRanges(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationWeights::allocWeights(unsigned int, unsigned int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationWeights::nextWeight()",
    "type": "CPP"
  },
  {
    "name": "T icu::CompactDecimalFormat::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::CompactDecimalFormat::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CompactDecimalFormat::createInstance(icu::Locale const&, UNumberCompactStyle, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompactDecimalFormat::CompactDecimalFormat(icu::Locale const&, UNumberCompactStyle, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompactDecimalFormat::CompactDecimalFormat(icu::Locale const&, UNumberCompactStyle, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompactDecimalFormat::CompactDecimalFormat(icu::CompactDecimalFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompactDecimalFormat::CompactDecimalFormat(icu::CompactDecimalFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompactDecimalFormat::~CompactDecimalFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::CompactDecimalFormat::~CompactDecimalFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::CompactDecimalFormat::~CompactDecimalFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::CompactDecimalFormat::operator=(icu::CompactDecimalFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompactDecimalFormat::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CompactDecimalFormat::parse(icu::UnicodeString const&, icu::Formattable&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CompactDecimalFormat::parse(icu::UnicodeString const&, icu::Formattable&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CompactDecimalFormat::parseCurrency(icu::UnicodeString const&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CopticCalendar::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::CompoundTransliterator(icu::Transliterator* const*, int, icu::UnicodeFilter*)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::joinIDs(icu::Transliterator* const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::setTransliterators(icu::Transliterator* const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::CompoundTransliterator(icu::Transliterator* const*, int, icu::UnicodeFilter*)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::CompoundTransliterator(icu::UnicodeString const&, UTransDirection, icu::UnicodeFilter*, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::init(icu::UnicodeString const&, UTransDirection, signed char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::CompoundTransliterator(icu::UnicodeString const&, UTransDirection, icu::UnicodeFilter*, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::CompoundTransliterator(icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::CompoundTransliterator(icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::CompoundTransliterator(icu::UnicodeString const&, icu::UVector&, icu::UnicodeFilter*, int, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::init(icu::UVector&, UTransDirection, signed char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::CompoundTransliterator(icu::UnicodeString const&, icu::UVector&, icu::UnicodeFilter*, int, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::CompoundTransliterator(icu::UVector&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::CompoundTransliterator(icu::UVector&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::CompoundTransliterator(icu::UVector&, int, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::CompoundTransliterator(icu::UVector&, int, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::computeMaximumContextLength()",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::CompoundTransliterator(icu::CompoundTransliterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::operator=(icu::CompoundTransliterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::CompoundTransliterator(icu::CompoundTransliterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::~CompoundTransliterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::freeTransliterators()",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::~CompoundTransliterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::~CompoundTransliterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::getCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::getTransliterator(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::adoptTransliterators(icu::Transliterator**, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::toRules(icu::UnicodeString&, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::handleGetSourceSet(icu::UnicodeSet&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::getTargetSet(icu::UnicodeSet&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CompoundTransliterator::handleTransliterate(icu::Replaceable&, UTransPosition&, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyAmount::CurrencyAmount(icu::Formattable const&, icu::ConstChar16Ptr, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyAmount::CurrencyAmount(icu::Formattable const&, icu::ConstChar16Ptr, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyAmount::CurrencyAmount(double, icu::ConstChar16Ptr, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyAmount::CurrencyAmount(double, icu::ConstChar16Ptr, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyAmount::CurrencyAmount(icu::CurrencyAmount const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyAmount::CurrencyAmount(icu::CurrencyAmount const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyAmount::operator=(icu::CurrencyAmount const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyAmount::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyAmount::~CurrencyAmount()",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyAmount::~CurrencyAmount()",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyAmount::~CurrencyAmount()",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyAmount::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyAmount::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::CurrencyPluralInfo(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::initialize(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::CurrencyPluralInfo(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::CurrencyPluralInfo(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::CurrencyPluralInfo(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::CurrencyPluralInfo(icu::CurrencyPluralInfo const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::operator=(icu::CurrencyPluralInfo const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::CurrencyPluralInfo(icu::CurrencyPluralInfo const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::deleteHash(icu::Hashtable*)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::initHash(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::copyHash(icu::Hashtable const*, icu::Hashtable*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::~CurrencyPluralInfo()",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::~CurrencyPluralInfo()",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::~CurrencyPluralInfo()",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::operator==(icu::CurrencyPluralInfo const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::getPluralRules() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::getCurrencyPluralPattern(icu::UnicodeString const&, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::getLocale() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::setPluralRules(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::setCurrencyPluralPattern(icu::UnicodeString const&, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::setLocale(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyPluralInfo::setupCurrencyPluralPattern(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyUnit::CurrencyUnit(icu::ConstChar16Ptr, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyUnit::CurrencyUnit(icu::ConstChar16Ptr, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyUnit::CurrencyUnit(icu::StringPiece, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyUnit::CurrencyUnit(icu::StringPiece, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyUnit::CurrencyUnit(icu::CurrencyUnit const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyUnit::CurrencyUnit(icu::CurrencyUnit const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyUnit::CurrencyUnit(icu::MeasureUnit const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyUnit::CurrencyUnit(icu::MeasureUnit const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyUnit::CurrencyUnit()",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyUnit::CurrencyUnit()",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyUnit::operator=(icu::CurrencyUnit const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyUnit::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyUnit::~CurrencyUnit()",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyUnit::~CurrencyUnit()",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyUnit::~CurrencyUnit()",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyUnit::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::CurrencyUnit::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DangiCalendar::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFmtBestPattern::~DateFmtBestPattern()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFmtBestPattern::~DateFmtBestPattern()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFmtBestPattern::~DateFmtBestPattern()",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleCacheKey<icu::DateFmtBestPattern>::createObject(void const*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFmtBestPatternKey::~DateFmtBestPatternKey()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFmtBestPatternKey::~DateFmtBestPatternKey()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFmtBestPatternKey::~DateFmtBestPatternKey()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::DateFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::DateFormat(icu::DateFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::operator=(icu::DateFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::~DateFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::~DateFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::~DateFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::operator==(icu::Format const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::format(icu::Formattable const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::format(double, icu::UnicodeString&, icu::FieldPosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::format(icu::Formattable const&, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::format(double, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::format(icu::Calendar&, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::format(double, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::parse(icu::UnicodeString const&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::parse(icu::UnicodeString const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::parseObject(icu::UnicodeString const&, icu::Formattable&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::createTimeInstance(icu::DateFormat::EStyle, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::createDateTimeInstance(icu::DateFormat::EStyle, icu::DateFormat::EStyle, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::createDateInstance(icu::DateFormat::EStyle, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::create(icu::DateFormat::EStyle, icu::DateFormat::EStyle, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::createInstance()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::getBestPattern(icu::Locale const&, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::createInstanceForSkeleton(icu::Calendar*, icu::UnicodeString const&, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::createInstanceForSkeleton(icu::UnicodeString const&, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::createInstanceForSkeleton(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::getAvailableLocales(int&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::adoptCalendar(icu::Calendar*)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::setCalendar(icu::Calendar const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::getCalendar() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::adoptNumberFormat(icu::NumberFormat*)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::setNumberFormat(icu::NumberFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::getNumberFormat() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::adoptTimeZone(icu::TimeZone*)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::setTimeZone(icu::TimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::getTimeZone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::setLenient(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::isLenient() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::setCalendarLenient(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::isCalendarLenient() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::setContext(UDisplayContext, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::getContext(UDisplayContextType, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::setBooleanAttribute(UDateFormatBooleanAttribute, signed char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormat::getBooleanAttribute(UDateFormatBooleanAttribute, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::DecimalFormatSymbols(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::initialize(icu::Locale const&, UErrorCode&, signed char, icu::NumberingSystem const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::DecimalFormatSymbols(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::DecimalFormatSymbols(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::DecimalFormatSymbols(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::DecimalFormatSymbols(icu::Locale const&, icu::NumberingSystem const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::DecimalFormatSymbols(icu::Locale const&, icu::NumberingSystem const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::DecimalFormatSymbols()",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::initialize()",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::DecimalFormatSymbols()",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::createWithLastResortData(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::~DecimalFormatSymbols()",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::~DecimalFormatSymbols()",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::~DecimalFormatSymbols()",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::DecimalFormatSymbols(icu::DecimalFormatSymbols const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::operator=(icu::DecimalFormatSymbols const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::DecimalFormatSymbols(icu::DecimalFormatSymbols const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::operator==(icu::DecimalFormatSymbols const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::getLocale(ULocDataLocaleType, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::getPatternForCurrencySpacing(UCurrencySpacing, signed char, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormatSymbols::setPatternForCurrencySpacing(UCurrencySpacing, signed char, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decContextClearStatus",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decContextDefault",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decContextSetStatus",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decContextGetRounding",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decContextGetStatus",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decContextRestoreStatus",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decContextSaveStatus",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decContextSetRounding",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decContextSetStatusFromString",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decContextSetStatusFromStringQuiet",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decContextSetStatusQuiet",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decContextStatusToString",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decContextTestSavedStatus",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decContextTestStatus",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decContextZeroStatus",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberFromInt32",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberFromUInt32",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberZero",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberToInt32",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberToUInt32",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberToString",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberToEngString",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberFromString",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberAbs",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberAdd",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberAnd",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberCompare",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberCompareSignal",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberCompareTotal",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberCompareTotalMag",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberCopy",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberDivide",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberDivideInteger",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberExp",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberFMA",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberInvert",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberLn",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberLogB",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberCopyAbs",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberLog10",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberMax",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberMaxMag",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberMin",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberMinMag",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberMinus",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberNextMinus",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberNextPlus",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberNextToward",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberCopySign",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberIsNormal",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberOr",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberPlus",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberMultiply",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberPower",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberQuantize",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberNormalize",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberReduce",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberRescale",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberRemainder",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberRemainderNear",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberRotate",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberSameQuantum",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberScaleB",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberShift",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberSquareRoot",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberSubtract",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberToIntegralExact",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberToIntegralValue",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberXor",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberClassToString",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberCopyNegate",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberGetBCD",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberSetBCD",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberIsSubnormal",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberTrim",
    "type": "CPP"
  },
  {
    "name": "T _uprv_decNumberVersion",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::DecimalFormat(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::DecimalFormat(icu::DecimalFormatSymbols const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setPropertiesFromPattern(icu::UnicodeString const&, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::touch(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::DecimalFormat(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::DecimalFormat(icu::DecimalFormatSymbols const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::DecimalFormat(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::DecimalFormat(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::DecimalFormat(icu::UnicodeString const&, icu::DecimalFormatSymbols*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::DecimalFormat(icu::UnicodeString const&, icu::DecimalFormatSymbols*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::DecimalFormat(icu::UnicodeString const&, icu::DecimalFormatSymbols*, UNumberFormatStyle, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::DecimalFormat(icu::UnicodeString const&, icu::DecimalFormatSymbols*, UNumberFormatStyle, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setParseAllInput(UNumberFormatAttributeValue)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setAttribute(UNumberFormatAttribute, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setSignificantDigitsUsed(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setMaximumSignificantDigits(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setMinimumSignificantDigits(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setMultiplierScale(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setParseNoExponent(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setCurrencyUsage(UCurrencyUsage, UErrorCode*)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setMinimumGroupingDigits(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setParseCaseSensitive(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setSignAlwaysShown(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setFormatFailIfMoreThanMaxDigits(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::touchNoError()",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getAttribute(UNumberFormatAttribute, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::isDecimalSeparatorAlwaysShown() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::areSignificantDigitsUsed() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getMaximumSignificantDigits() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getMinimumSignificantDigits() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getMultiplier() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getMultiplierScale() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getGroupingSize() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getSecondaryGroupingSize() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::isParseNoExponent() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::isDecimalPatternMatchRequired() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getCurrencyUsage() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getMinimumGroupingDigits() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::isParseCaseSensitive() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::isSignAlwaysShown() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::isFormatFailIfMoreThanMaxDigits() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setGroupingUsed(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setParseIntegerOnly(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setLenient(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::DecimalFormat(icu::UnicodeString const&, icu::DecimalFormatSymbols*, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::DecimalFormat(icu::UnicodeString const&, icu::DecimalFormatSymbols*, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::DecimalFormat(icu::UnicodeString const&, icu::DecimalFormatSymbols const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::DecimalFormat(icu::UnicodeString const&, icu::DecimalFormatSymbols const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::DecimalFormat(icu::DecimalFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::DecimalFormat(icu::DecimalFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::operator=(icu::DecimalFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::~DecimalFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::~DecimalFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::~DecimalFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::operator==(icu::Format const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::format(double, icu::UnicodeString&, icu::FieldPosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::fastFormatDouble(double, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::fieldPositionHelper(icu::number::FormattedNumber const&, icu::FieldPosition&, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::format(double, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::format(double, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::fieldPositionIteratorHelper(icu::number::FormattedNumber const&, icu::FieldPositionIterator*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::format(int, icu::UnicodeString&, icu::FieldPosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::format(int, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::format(int, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::format(long long, icu::UnicodeString&, icu::FieldPosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::fastFormatInt64(long long, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::format(long long, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::format(long long, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::format(icu::StringPiece, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::format(icu::number::impl::DecimalQuantity const&, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::format(icu::number::impl::DecimalQuantity const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::parse(icu::UnicodeString const&, icu::Formattable&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getParser(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::parseCurrency(icu::UnicodeString const&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getCurrencyParser(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getDecimalFormatSymbols() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::adoptDecimalFormatSymbols(icu::DecimalFormatSymbols*)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setDecimalFormatSymbols(icu::DecimalFormatSymbols const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getCurrencyPluralInfo() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::adoptCurrencyPluralInfo(icu::CurrencyPluralInfo*)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setCurrencyPluralInfo(icu::CurrencyPluralInfo const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getPositivePrefix(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setPositivePrefix(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getNegativePrefix(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setNegativePrefix(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getPositiveSuffix(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setPositiveSuffix(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getNegativeSuffix(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setNegativeSuffix(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setMultiplier(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getRoundingIncrement() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setRoundingIncrement(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getRoundingMode() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setRoundingMode(icu::NumberFormat::ERoundingMode)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getFormatWidth() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setFormatWidth(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getPadCharacterString() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setPadCharacter(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getPadPosition() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setPadPosition(icu::DecimalFormat::EPadPosition)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::isScientificNotation() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setScientificNotation(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::getMinimumExponentDigits() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setMinimumExponentDigits(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::isExponentSignAlwaysShown() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setExponentSignAlwaysShown(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setGroupingSize(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setSecondaryGroupingSize(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setDecimalSeparatorAlwaysShown(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setDecimalPatternMatchRequired(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::toPattern(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::toLocalizedPattern(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::applyPattern(icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::applyPattern(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::applyLocalizedPattern(icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::applyLocalizedPattern(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setMaximumIntegerDigits(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setMinimumIntegerDigits(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setMaximumFractionDigits(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setMinimumFractionDigits(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setDateSettings()",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setCurrency(char16_t const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setCurrency(char16_t const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::formatToDecimalQuantity(double, icu::number::impl::DecimalQuantity&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::formatToDecimalQuantity(icu::Formattable const&, icu::number::impl::DecimalQuantity&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::toNumberFormatter(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::toNumberFormatter() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setDFSShallowCopy(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::setupFastFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::DecimalFormat::doFastFormatInt32(int, bool, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::double_conversion::DoubleToStringConverter::DoubleToAscii(double, icu::double_conversion::DoubleToStringConverter::DtoaMode, int, char*, int, bool*, int*, int*)",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedDateFormatSymbols::~SharedDateFormatSymbols()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::~DateFormatSymbols()",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedDateFormatSymbols::~SharedDateFormatSymbols()",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedDateFormatSymbols::~SharedDateFormatSymbols()",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleCacheKey<icu::SharedDateFormatSymbols>::createObject(void const*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::createForLocale(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::DateFormatSymbols(icu::DateFormatSymbols const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::DateFormatSymbols(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::initializeData(icu::Locale const&, char const*, UErrorCode&, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::DateFormatSymbols(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::DateFormatSymbols(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::DateFormatSymbols(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::DateFormatSymbols(icu::Locale const&, char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::DateFormatSymbols(icu::Locale const&, char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::DateFormatSymbols(char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::DateFormatSymbols(char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::DateFormatSymbols(icu::DateFormatSymbols const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::copyData(icu::DateFormatSymbols const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::assignArray(icu::UnicodeString*&, int&, icu::UnicodeString const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::createZoneStrings(icu::UnicodeString const* const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getLocale(ULocDataLocaleType, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::operator=(icu::DateFormatSymbols const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::dispose()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::~DateFormatSymbols()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::~DateFormatSymbols()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::disposeZoneStrings()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::arrayCompare(icu::UnicodeString const*, icu::UnicodeString const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::operator==(icu::DateFormatSymbols const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getEras(int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getEraNames(int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getNarrowEras(int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getMonths(int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getShortMonths(int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getMonths(int&, icu::DateFormatSymbols::DtContextType, icu::DateFormatSymbols::DtWidthType) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getWeekdays(int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getShortWeekdays(int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getWeekdays(int&, icu::DateFormatSymbols::DtContextType, icu::DateFormatSymbols::DtWidthType) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getQuarters(int&, icu::DateFormatSymbols::DtContextType, icu::DateFormatSymbols::DtWidthType) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getTimeSeparatorString(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getAmPmStrings(int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getLeapMonthPatterns(int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getYearNames(int&, icu::DateFormatSymbols::DtContextType, icu::DateFormatSymbols::DtWidthType) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::setYearNames(icu::UnicodeString const*, int, icu::DateFormatSymbols::DtContextType, icu::DateFormatSymbols::DtWidthType)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getZodiacNames(int&, icu::DateFormatSymbols::DtContextType, icu::DateFormatSymbols::DtWidthType) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::setZodiacNames(icu::UnicodeString const*, int, icu::DateFormatSymbols::DtContextType, icu::DateFormatSymbols::DtWidthType)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::setEras(icu::UnicodeString const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::setEraNames(icu::UnicodeString const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::setNarrowEras(icu::UnicodeString const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::setMonths(icu::UnicodeString const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::setShortMonths(icu::UnicodeString const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::setMonths(icu::UnicodeString const*, int, icu::DateFormatSymbols::DtContextType, icu::DateFormatSymbols::DtWidthType)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::setWeekdays(icu::UnicodeString const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::setShortWeekdays(icu::UnicodeString const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::setWeekdays(icu::UnicodeString const*, int, icu::DateFormatSymbols::DtContextType, icu::DateFormatSymbols::DtWidthType)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::setQuarters(icu::UnicodeString const*, int, icu::DateFormatSymbols::DtContextType, icu::DateFormatSymbols::DtWidthType)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::setAmPmStrings(icu::UnicodeString const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::setTimeSeparatorString(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getZoneStrings(int&, int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::initZoneStringsArray()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::setZoneStrings(icu::UnicodeString const* const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getPatternUChars()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getPatternCharIndex(char16_t)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::isNumericField(UDateFormatField, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::isNumericPatternChar(char16_t, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::getLocalPatternChars(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateFormatSymbols::setLocalPatternChars(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedDateInterval::FormattedDateInterval(icu::FormattedDateInterval&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedDateInterval::FormattedDateInterval(icu::FormattedDateInterval&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedDateInterval::~FormattedDateInterval()",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedDateInterval::~FormattedDateInterval()",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedDateInterval::~FormattedDateInterval()",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedDateInterval::operator=(icu::FormattedDateInterval&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedDateInterval::toString(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedDateInterval::toTempString(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedDateInterval::appendTo(icu::Appendable&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedDateInterval::nextPosition(icu::ConstrainedFieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::createInstance(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::createInstance(icu::UnicodeString const&, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::create(icu::Locale const&, icu::DateIntervalInfo*, icu::UnicodeString const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::createInstance(icu::UnicodeString const&, icu::DateIntervalInfo const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::createInstance(icu::UnicodeString const&, icu::Locale const&, icu::DateIntervalInfo const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::DateIntervalFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::DateIntervalFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::DateIntervalFormat(icu::DateIntervalFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::operator=(icu::DateIntervalFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::DateIntervalFormat(icu::DateIntervalFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::~DateIntervalFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::~DateIntervalFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::~DateIntervalFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::operator==(icu::Format const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::format(icu::Formattable const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::format(icu::DateInterval const*, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::formatIntervalImpl(icu::DateInterval const&, icu::UnicodeString&, signed char&, icu::FieldPositionHandler&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::formatToValue(icu::DateInterval const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::format(icu::Calendar&, icu::Calendar&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::formatImpl(icu::Calendar&, icu::Calendar&, icu::UnicodeString&, signed char&, icu::FieldPositionHandler&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::formatToValue(icu::Calendar&, icu::Calendar&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::fallbackFormat(icu::Calendar&, icu::Calendar&, signed char, icu::UnicodeString&, signed char&, icu::FieldPositionHandler&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::parseObject(icu::UnicodeString const&, icu::Formattable&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::getDateIntervalInfo() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::setDateIntervalInfo(icu::DateIntervalInfo const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::initializePattern(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::getDateFormat() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::adoptTimeZone(icu::TimeZone*)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::setTimeZone(icu::TimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::getTimeZone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::setAttribute(UDateIntervalFormatAttribute, UDateIntervalFormatAttributeValue, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::setContext(UDisplayContext, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::getContext(UDisplayContextType, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::DateIntervalFormat(icu::Locale const&, icu::DateIntervalInfo*, icu::UnicodeString const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::DateIntervalFormat(icu::Locale const&, icu::DateIntervalInfo*, icu::UnicodeString const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::getDateTimeSkeleton(icu::UnicodeString const&, icu::UnicodeString&, icu::UnicodeString&, icu::UnicodeString&, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::setSeparateDateTimePtn(icu::UnicodeString const&, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::setPatternInfo(UCalendarDateFields, icu::UnicodeString const*, icu::UnicodeString const*, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::fieldExistsInSkeleton(UCalendarDateFields, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::setFallbackPattern(UCalendarDateFields, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::concatSingleDate2TimeInterval(icu::UnicodeString&, icu::UnicodeString const&, UCalendarDateFields, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::setIntervalPattern(UCalendarDateFields, icu::UnicodeString const*, icu::UnicodeString const*, signed char, icu::UnicodeString*, icu::UnicodeString*)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::setIntervalPattern(UCalendarDateFields, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::setIntervalPattern(UCalendarDateFields, icu::UnicodeString const&, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::splitPatternInto2Part(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::adjustFieldWidth(icu::UnicodeString const&, icu::UnicodeString const&, icu::UnicodeString const&, signed char, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalFormat::fallbackFormatRange(icu::Calendar&, icu::Calendar&, icu::UnicodeString&, signed char&, icu::FieldPositionHandler&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::DateIntervalInfo(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::initHash(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::DateIntervalInfo(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::DateIntervalInfo(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::initializeData(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::DateIntervalInfo(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::setIntervalPattern(icu::UnicodeString const&, UCalendarDateFields, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::setIntervalPatternInternally(icu::UnicodeString const&, UCalendarDateFields, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::setFallbackIntervalPattern(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::DateIntervalInfo(icu::DateIntervalInfo const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::operator=(icu::DateIntervalInfo const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::DateIntervalInfo(icu::DateIntervalInfo const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::deleteHash(icu::Hashtable*)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::copyHash(icu::Hashtable const*, icu::Hashtable*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::~DateIntervalInfo()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::~DateIntervalInfo()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::~DateIntervalInfo()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::operator==(icu::DateIntervalInfo const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::getIntervalPattern(icu::UnicodeString const&, UCalendarDateFields, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::calendarFieldToIntervalIndex(UCalendarDateFields, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::getDefaultOrder() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::getFallbackIntervalPattern(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::DateIntervalSink::~DateIntervalSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::DateIntervalSink::~DateIntervalSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::DateIntervalSink::~DateIntervalSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::parseSkeleton(icu::UnicodeString const&, int*)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::stringNumeric(int, int, char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateIntervalInfo::getBestSkeleton(icu::UnicodeString const&, signed char&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::createInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::createInstance(icu::Locale const&, UErrorCode&, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::DateTimePatternGenerator(icu::Locale const&, UErrorCode&, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::createEmptyInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::DateTimePatternGenerator(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::DateTimePatternGenerator(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::DateTimePatternGenerator(icu::Locale const&, UErrorCode&, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::initData(icu::Locale const&, UErrorCode&, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::DateTimePatternGenerator(icu::DateTimePatternGenerator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::operator=(icu::DateTimePatternGenerator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::DateTimePatternGenerator(icu::DateTimePatternGenerator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::copyHashtable(icu::Hashtable*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::operator==(icu::DateTimePatternGenerator const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::operator!=(icu::DateTimePatternGenerator const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::~DateTimePatternGenerator()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::~DateTimePatternGenerator()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::~DateTimePatternGenerator()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::addCanonicalItems(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::addICUPatterns(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::addCLDRData(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::setDateTimeFromCalendar(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::setDecimalSymbols(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::loadAllowedHourFormatsData(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getAllowedHourFormats(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getSkeleton(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::staticGetSkeleton(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getBaseSkeleton(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::staticGetBaseSkeleton(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::addPattern(icu::UnicodeString const&, signed char, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::consumeShortTimePattern(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::hackTimes(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getCalendarTypeToUse(icu::Locale const&, icu::CharString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::AppendItemFormatsSink::~AppendItemFormatsSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::AppendItemFormatsSink::~AppendItemFormatsSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::AppendItemFormatsSink::~AppendItemFormatsSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::AppendItemNamesSink::~AppendItemNamesSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::AppendItemNamesSink::~AppendItemNamesSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::AppendItemNamesSink::~AppendItemNamesSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::AvailableFormatsSink::~AvailableFormatsSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::AvailableFormatsSink::~AvailableFormatsSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::AvailableFormatsSink::~AvailableFormatsSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::initHashtable(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::setAppendItemFormat(UDateTimePatternField, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getAppendItemFormat(UDateTimePatternField) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::setAppendItemName(UDateTimePatternField, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::setFieldDisplayName(UDateTimePatternField, UDateTimePGDisplayWidth, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getAppendItemName(UDateTimePatternField) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getFieldDisplayName(UDateTimePatternField, UDateTimePGDisplayWidth) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getMutableFieldDisplayName(UDateTimePatternField, UDateTimePGDisplayWidth)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getAppendName(UDateTimePatternField, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getBestPattern(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getBestPattern(icu::UnicodeString const&, UDateTimePatternMatchOptions, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::mapSkeletonMetacharacters(icu::UnicodeString const&, int*, UDateTimePatternMatchOptions, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getBestRaw(icu::DateTimeMatcher&, int, icu::DistanceInfo*, UErrorCode&, icu::PtnSkeleton const**)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::adjustFieldTypes(icu::UnicodeString const&, icu::PtnSkeleton const*, int, UDateTimePatternMatchOptions)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getBestAppending(int, int, UErrorCode&, UDateTimePatternMatchOptions)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getDateTimeFormat() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::replaceFieldTypes(icu::UnicodeString const&, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::replaceFieldTypes(icu::UnicodeString const&, icu::UnicodeString const&, UDateTimePatternMatchOptions, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::setDecimal(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getDecimal() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::setDateTimeFormat(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::addPatternWithSkeleton(icu::UnicodeString const&, icu::UnicodeString const*, signed char, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getAppendFormatNumber(char const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getFieldAndWidthIndices(char const*, UDateTimePGDisplayWidth*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getTopBitNumber(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::setAvailableFormat(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::isAvailableFormatSet(icu::UnicodeString const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getSkeletons(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getPatternForSkeleton(icu::UnicodeString const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getBaseSkeletons(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::getRedundants(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::isCanonicalItem(icu::UnicodeString const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimePatternGenerator::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::DateTimeRule(int, int, int, icu::DateTimeRule::TimeRuleType)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::DateTimeRule(int, int, int, icu::DateTimeRule::TimeRuleType)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::DateTimeRule(int, int, int, int, icu::DateTimeRule::TimeRuleType)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::DateTimeRule(int, int, int, int, icu::DateTimeRule::TimeRuleType)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::DateTimeRule(int, int, int, signed char, int, icu::DateTimeRule::TimeRuleType)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::DateTimeRule(int, int, int, signed char, int, icu::DateTimeRule::TimeRuleType)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::DateTimeRule(icu::DateTimeRule const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::DateTimeRule(icu::DateTimeRule const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::~DateTimeRule()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::~DateTimeRule()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::~DateTimeRule()",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::operator=(icu::DateTimeRule const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::operator==(icu::DateTimeRule const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::operator!=(icu::DateTimeRule const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::getDateRuleType() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::getTimeRuleType() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::getRuleMonth() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::getRuleDayOfMonth() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::getRuleDayOfWeek() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::getRuleWeekInMonth() const",
    "type": "CPP"
  },
  {
    "name": "T icu::DateTimeRule::getRuleMillisInDay() const",
    "type": "CPP"
  },
  {
    "name": "T icu::EraRules::EraRules(icu::LocalMemory<int>&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::EraRules::initCurrentEra()",
    "type": "CPP"
  },
  {
    "name": "T icu::EraRules::EraRules(icu::LocalMemory<int>&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::EraRules::~EraRules()",
    "type": "CPP"
  },
  {
    "name": "T icu::EraRules::~EraRules()",
    "type": "CPP"
  },
  {
    "name": "T icu::EraRules::createInstance(char const*, signed char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::EraRules::getStartDate(int, int (&) [3], UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::EraRules::getStartYear(int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::EraRules::getEraIndex(int, int, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::EscapeTransliterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::EthiopicCalendar::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::init()",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable()",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable()",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(double, icu::Formattable::ISDATE)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(double, icu::Formattable::ISDATE)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(long long)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(long long)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(icu::StringPiece, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::setDecimalNumber(icu::StringPiece, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(icu::StringPiece, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(icu::UnicodeString*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(icu::UnicodeString*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(icu::UObject*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(icu::UObject*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(icu::Formattable const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(icu::Formattable const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(icu::Formattable const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::operator=(icu::Formattable const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(icu::Formattable const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::dispose()",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::operator==(icu::Formattable const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::~Formattable()",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::~Formattable()",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::~Formattable()",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::getType() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::isNumeric() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::getLong(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::getInt64(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::getDouble(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::getObject() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::setDouble(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::setLong(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::setInt64(long long)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::setDate(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::setString(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::setArray(icu::Formattable const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::adoptString(icu::UnicodeString*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::adoptArray(icu::Formattable*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::adoptObject(icu::UObject*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::getString(icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::getString(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::getBogus() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::getString(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::getArray(int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::getDecimalNumber(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::internalGetCharString(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::populateDecimalQuantity(icu::number::impl::DecimalQuantity&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::adoptDecimalQuantity(icu::number::impl::DecimalQuantity*)",
    "type": "CPP"
  },
  {
    "name": "T _ufmt_open",
    "type": "CPP"
  },
  {
    "name": "T _ufmt_close",
    "type": "CPP"
  },
  {
    "name": "T _ufmt_getType",
    "type": "CPP"
  },
  {
    "name": "T _ufmt_isNumeric",
    "type": "CPP"
  },
  {
    "name": "T _ufmt_getDate",
    "type": "CPP"
  },
  {
    "name": "T _ufmt_getDouble",
    "type": "CPP"
  },
  {
    "name": "T _ufmt_getLong",
    "type": "CPP"
  },
  {
    "name": "T _ufmt_getObject",
    "type": "CPP"
  },
  {
    "name": "T _ufmt_getUChars",
    "type": "CPP"
  },
  {
    "name": "T _ufmt_getArrayLength",
    "type": "CPP"
  },
  {
    "name": "T _ufmt_getArrayItemByIndex",
    "type": "CPP"
  },
  {
    "name": "T _ufmt_getDecNumChars",
    "type": "CPP"
  },
  {
    "name": "T _ufmt_getInt64",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Formattable::Formattable(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPosition::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPosition::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPosition::~FieldPosition()",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPosition::~FieldPosition()",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPosition::~FieldPosition()",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPosition::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Format::Format()",
    "type": "CPP"
  },
  {
    "name": "T icu::Format::~Format()",
    "type": "CPP"
  },
  {
    "name": "T icu::Format::~Format()",
    "type": "CPP"
  },
  {
    "name": "T icu::Format::~Format()",
    "type": "CPP"
  },
  {
    "name": "T icu::Format::Format(icu::Format const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Format::operator=(icu::Format const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Format::format(icu::Formattable const&, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Format::format(icu::Formattable const&, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Format::parseObject(icu::UnicodeString const&, icu::Formattable&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Format::operator==(icu::Format const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Format::syntaxError(icu::UnicodeString const&, int, UParseError&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Format::getLocale(ULocDataLocaleType, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Format::getLocaleID(ULocDataLocaleType, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Format::setLocaleIDs(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::ConstrainedFieldPosition::ConstrainedFieldPosition()",
    "type": "CPP"
  },
  {
    "name": "T icu::ConstrainedFieldPosition::ConstrainedFieldPosition()",
    "type": "CPP"
  },
  {
    "name": "T icu::ConstrainedFieldPosition::~ConstrainedFieldPosition()",
    "type": "CPP"
  },
  {
    "name": "T icu::ConstrainedFieldPosition::~ConstrainedFieldPosition()",
    "type": "CPP"
  },
  {
    "name": "T icu::ConstrainedFieldPosition::reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::ConstrainedFieldPosition::constrainCategory(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::ConstrainedFieldPosition::constrainField(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::ConstrainedFieldPosition::setInt64IterationContext(long long)",
    "type": "CPP"
  },
  {
    "name": "T icu::ConstrainedFieldPosition::matchesField(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ConstrainedFieldPosition::setState(int, int, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedValue::~FormattedValue()",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedValue::~FormattedValue()",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedValue::~FormattedValue()",
    "type": "CPP"
  },
  {
    "name": "T _ucfpos_open",
    "type": "CPP"
  },
  {
    "name": "T _ucfpos_reset",
    "type": "CPP"
  },
  {
    "name": "T _ucfpos_constrainCategory",
    "type": "CPP"
  },
  {
    "name": "T _ucfpos_constrainField",
    "type": "CPP"
  },
  {
    "name": "T _ucfpos_getCategory",
    "type": "CPP"
  },
  {
    "name": "T _ucfpos_getField",
    "type": "CPP"
  },
  {
    "name": "T _ucfpos_getIndexes",
    "type": "CPP"
  },
  {
    "name": "T _ucfpos_getInt64IterationContext",
    "type": "CPP"
  },
  {
    "name": "T _ucfpos_setInt64IterationContext",
    "type": "CPP"
  },
  {
    "name": "T _ucfpos_matchesField",
    "type": "CPP"
  },
  {
    "name": "T _ucfpos_setState",
    "type": "CPP"
  },
  {
    "name": "T _ucfpos_close",
    "type": "CPP"
  },
  {
    "name": "T _ufmtval_getString",
    "type": "CPP"
  },
  {
    "name": "T _ufmtval_nextPosition",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPositionHandler::~FieldPositionHandler()",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPositionHandler::~FieldPositionHandler()",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPositionHandler::~FieldPositionHandler()",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPositionHandler::setShift(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPositionIterator::~FieldPositionIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPositionIterator::~FieldPositionIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPositionIterator::~FieldPositionIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPositionIterator::FieldPositionIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPositionIterator::FieldPositionIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPositionIterator::FieldPositionIterator(icu::FieldPositionIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPositionIterator::FieldPositionIterator(icu::FieldPositionIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPositionIterator::operator==(icu::FieldPositionIterator const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPositionIterator::setData(icu::UVector32*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FieldPositionIterator::next(icu::FieldPosition&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GenderInfo::GenderInfo()",
    "type": "CPP"
  },
  {
    "name": "T icu::GenderInfo::~GenderInfo()",
    "type": "CPP"
  },
  {
    "name": "T icu::GenderInfo::GenderInfo()",
    "type": "CPP"
  },
  {
    "name": "T icu::GenderInfo::~GenderInfo()",
    "type": "CPP"
  },
  {
    "name": "T icu::GenderInfo::~GenderInfo()",
    "type": "CPP"
  },
  {
    "name": "T icu::GenderInfo::getInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GenderInfo::loadInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GenderInfo::getListGender(UGender const*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::GenderInfo::getNeutralInstance()",
    "type": "CPP"
  },
  {
    "name": "T icu::GenderInfo::getMixedNeutralInstance()",
    "type": "CPP"
  },
  {
    "name": "T icu::GenderInfo::getMaleTaintsInstance()",
    "type": "CPP"
  },
  {
    "name": "T _ugender_getInstance",
    "type": "CPP"
  },
  {
    "name": "T _ugender_getListGender",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(icu::TimeZone*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(icu::TimeZone*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(icu::TimeZone const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(icu::TimeZone const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(icu::TimeZone*, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(icu::TimeZone*, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(icu::TimeZone const&, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(icu::TimeZone const&, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(int, int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(int, int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(int, int, int, int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(int, int, int, int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(int, int, int, int, int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(int, int, int, int, int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::~GregorianCalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::~GregorianCalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::~GregorianCalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::operator=(icu::GregorianCalendar const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::isEquivalentTo(icu::Calendar const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::setGregorianChange(double, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::handleComputeFields(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::getGregorianChange() const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::isLeapYear(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::handleComputeJulianDay(UCalendarDateFields)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::handleComputeMonthStart(int, int, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::handleGetMonthLength(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::handleGetYearLength(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::monthLength(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::monthLength(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::yearLength(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::yearLength() const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::pinDayOfMonth()",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::validateFields() const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::boundsCheck(int, UCalendarDateFields) const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::getEpochDay(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::computeJulianDayOfYear(signed char, int, signed char&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::millisToJulianDay(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::julianDayToMillis(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::aggregateStamp(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::roll(icu::Calendar::EDateFields, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::roll(UCalendarDateFields, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::getActualMinimum(icu::Calendar::EDateFields) const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::getActualMinimum(icu::Calendar::EDateFields, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::getActualMinimum(UCalendarDateFields, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::handleGetLimit(UCalendarDateFields, icu::Calendar::ELimitType) const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::getActualMaximum(UCalendarDateFields, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::handleGetExtendedYear()",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::handleGetExtendedYearFromWeekFields(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::inDaylightTime(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::internalGetEra() const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::getType() const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::haveDefaultCentury() const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::defaultCenturyStart() const",
    "type": "CPP"
  },
  {
    "name": "T icu::GregorianCalendar::defaultCenturyStartYear() const",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::HebrewCalendar(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::HebrewCalendar(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::~HebrewCalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::~HebrewCalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::~HebrewCalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::getType() const",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::HebrewCalendar(icu::HebrewCalendar const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::HebrewCalendar(icu::HebrewCalendar const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::add(UCalendarDateFields, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::isLeapYear(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::add(icu::Calendar::EDateFields, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::roll(UCalendarDateFields, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::monthsInYear(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::roll(icu::Calendar::EDateFields, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::startOfYear(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::absoluteDayToDayOfWeek(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::yearType(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::handleGetLimit(UCalendarDateFields, icu::Calendar::ELimitType) const",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::handleGetMonthLength(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::handleGetYearLength(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::validateField(UCalendarDateFields, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::handleComputeFields(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::handleGetExtendedYear()",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::handleComputeMonthStart(int, int, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::inDaylightTime(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::haveDefaultCentury() const",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::defaultCenturyStart() const",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::defaultCenturyStartYear() const",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::HebrewCalendar::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::IndianCalendar(icu::IndianCalendar const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::IndianCalendar(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::IndianCalendar(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::IndianCalendar(icu::IndianCalendar const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::~IndianCalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::~IndianCalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::~IndianCalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::getType() const",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::handleGetLimit(UCalendarDateFields, icu::Calendar::ELimitType) const",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::handleGetMonthLength(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::handleGetYearLength(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::handleComputeMonthStart(int, int, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::handleGetExtendedYear()",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::handleComputeFields(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::inDaylightTime(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::haveDefaultCentury() const",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::defaultCenturyStart() const",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::defaultCenturyStartYear() const",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::IndianCalendar::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::getType() const",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::IslamicCalendar(icu::IslamicCalendar const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::IslamicCalendar(icu::Locale const&, UErrorCode&, icu::IslamicCalendar::ECalculationType)",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::IslamicCalendar(icu::Locale const&, UErrorCode&, icu::IslamicCalendar::ECalculationType)",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::IslamicCalendar(icu::IslamicCalendar const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::~IslamicCalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::~IslamicCalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::~IslamicCalendar()",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::setCalculationType(icu::IslamicCalendar::ECalculationType, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::isCivil()",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::handleGetLimit(UCalendarDateFields, icu::Calendar::ELimitType) const",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::civilLeapYear(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::yearStart(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::trueMonthStart(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::monthStart(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::moonAge(double, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::handleGetMonthLength(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::handleGetYearLength(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::handleComputeMonthStart(int, int, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::handleGetExtendedYear()",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::handleComputeFields(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::inDaylightTime(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::haveDefaultCentury() const",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::defaultCenturyStart() const",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::initializeSystemDefaultCentury()",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::defaultCenturyStartYear() const",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::IslamicCalendar::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::JapaneseCalendar::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::JapaneseCalendar::enableTentativeEra()",
    "type": "CPP"
  },
  {
    "name": "T icu::JapaneseCalendar::getCurrentEra()",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedList::FormattedList(icu::FormattedList&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedList::FormattedList(icu::FormattedList&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedList::~FormattedList()",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedList::~FormattedList()",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedList::~FormattedList()",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedList::operator=(icu::FormattedList&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedList::toString(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedList::toTempString(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedList::appendTo(icu::Appendable&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedList::nextPosition(icu::ConstrainedFieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::ListFormatter(icu::ListFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::ListFormatter(icu::ListFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::operator=(icu::ListFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::initializeHash(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::getListFormatInternal(icu::Locale const&, char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::loadListFormatInternal(icu::Locale const&, char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::ListPatternsSink::~ListPatternsSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::ListPatternsSink::~ListPatternsSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::ListPatternsSink::~ListPatternsSink()",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::createInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::createInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::createInstance(icu::Locale const&, char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::ListFormatter(icu::ListFormatInternal const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::ListFormatter(icu::ListFormatData const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::ListFormatter(icu::ListFormatData const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::ListFormatter(icu::ListFormatInternal const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::~ListFormatter()",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::~ListFormatter()",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::~ListFormatter()",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::format(icu::UnicodeString const*, int, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::format(icu::UnicodeString const*, int, icu::UnicodeString&, int, int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::format(icu::UnicodeString const*, int, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::format_(icu::UnicodeString const*, int, icu::UnicodeString&, int, int&, icu::FieldPositionHandler*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ListFormatter::formatStringsToValue(icu::UnicodeString const*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleCacheKey<icu::MeasureFormatCacheData>::createObject(void const*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::MeasureFormat(icu::Locale const&, UMeasureFormatWidth, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::initMeasureFormat(icu::Locale const&, UMeasureFormatWidth, icu::NumberFormat*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::MeasureFormat(icu::Locale const&, UMeasureFormatWidth, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::MeasureFormat(icu::Locale const&, UMeasureFormatWidth, icu::NumberFormat*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::MeasureFormat(icu::Locale const&, UMeasureFormatWidth, icu::NumberFormat*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::MeasureFormat(icu::MeasureFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::MeasureFormat(icu::MeasureFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::operator=(icu::MeasureFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::MeasureFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::MeasureFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::~MeasureFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::~MeasureFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::~MeasureFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::operator==(icu::Format const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::getLocaleID(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::format(icu::Formattable const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::formatMeasure(icu::Measure const&, icu::NumberFormat const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::parseObject(icu::UnicodeString const&, icu::Formattable&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::formatMeasurePerUnit(icu::Measure const&, icu::MeasureUnit const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::getNumberFormatInternal() const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::formatMeasures(icu::Measure const*, int, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::formatNumeric(icu::Formattable const*, int, icu::UnicodeString&, icu::FieldPositionHandler&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::formatMeasuresSlowTrack(icu::Measure const*, int, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::formatMeasures(icu::Measure const*, int, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::getUnitDisplayName(icu::MeasureUnit const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::getLocale(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::adoptNumberFormat(icu::NumberFormat*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::setMeasureFormatLocale(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::getWidth() const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::getCurrencyFormatInternal() const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::getPluralRules() const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::getUnitName(icu::MeasureUnit const*, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::getMultipleUnitNames(icu::MeasureUnit const**, int, UAMeasureNameListStyle, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::formatNumeric(double, icu::DateFormat const&, UDateFormatField, icu::Formattable const&, icu::UnicodeString&, icu::FieldPositionHandler&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::createCurrencyFormat(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureFormat::createCurrencyFormat(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createGForce(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::create(int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getGForce()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMeterPerSecondSquared(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMeterPerSecondSquared()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createArcMinute(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getArcMinute()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createArcSecond(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getArcSecond()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createDegree(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getDegree()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createRadian(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getRadian()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createRevolutionAngle(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getRevolutionAngle()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createAcre(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getAcre()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createDunam(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getDunam()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createHectare(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getHectare()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createSquareCentimeter(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getSquareCentimeter()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createSquareFoot(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getSquareFoot()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createSquareInch(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getSquareInch()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createSquareKilometer(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getSquareKilometer()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createSquareMeter(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getSquareMeter()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createSquareMile(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getSquareMile()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createSquareYard(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getSquareYard()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createKarat(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getKarat()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMilligramPerDeciliter(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMilligramPerDeciliter()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMillimolePerLiter(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMillimolePerLiter()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMole(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMole()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createPartPerMillion(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getPartPerMillion()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createPercent(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getPercent()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createPermille(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getPermille()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createPermyriad(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getPermyriad()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createLiterPer100Kilometers(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getLiterPer100Kilometers()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createLiterPerKilometer(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getLiterPerKilometer()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMilePerGallon(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMilePerGallon()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMilePerGallonImperial(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMilePerGallonImperial()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createBit(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getBit()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createByte(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getByte()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createGigabit(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getGigabit()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createGigabyte(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getGigabyte()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createKilobit(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getKilobit()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createKilobyte(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getKilobyte()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMegabit(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMegabit()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMegabyte(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMegabyte()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createPetabyte(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getPetabyte()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createTerabit(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getTerabit()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createTerabyte(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getTerabyte()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createCentury(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getCentury()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createDay(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getDay()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createDayPerson(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getDayPerson()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createHour(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getHour()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMicrosecond(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMicrosecond()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMillisecond(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMillisecond()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMinute(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMinute()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMonth(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMonth()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMonthPerson(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMonthPerson()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createNanosecond(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getNanosecond()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createSecond(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getSecond()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createWeek(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getWeek()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createWeekPerson(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getWeekPerson()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createYear(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getYear()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createYearPerson(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getYearPerson()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createAmpere(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getAmpere()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMilliampere(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMilliampere()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createOhm(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getOhm()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createVolt(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getVolt()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createBritishThermalUnit(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getBritishThermalUnit()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createCalorie(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getCalorie()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createElectronvolt(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getElectronvolt()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createFoodcalorie(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getFoodcalorie()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createJoule(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getJoule()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createKilocalorie(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getKilocalorie()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createKilojoule(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getKilojoule()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createKilowattHour(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getKilowattHour()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createNewton(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getNewton()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createPoundForce(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getPoundForce()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createGigahertz(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getGigahertz()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createHertz(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getHertz()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createKilohertz(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getKilohertz()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMegahertz(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMegahertz()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createAstronomicalUnit(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getAstronomicalUnit()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createCentimeter(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getCentimeter()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createDecimeter(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getDecimeter()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createFathom(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getFathom()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createFoot(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getFoot()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createFurlong(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getFurlong()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createInch(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getInch()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createKilometer(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getKilometer()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createLightYear(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getLightYear()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMeter(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMeter()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMicrometer(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMicrometer()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMile(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMile()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMileScandinavian(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMileScandinavian()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMillimeter(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMillimeter()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createNanometer(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getNanometer()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createNauticalMile(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getNauticalMile()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createParsec(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getParsec()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createPicometer(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getPicometer()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createPoint(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getPoint()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createSolarRadius(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getSolarRadius()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createYard(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getYard()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createLux(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getLux()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createSolarLuminosity(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getSolarLuminosity()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createCarat(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getCarat()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createDalton(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getDalton()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createEarthMass(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getEarthMass()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createGram(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getGram()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createKilogram(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getKilogram()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMetricTon(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMetricTon()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMicrogram(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMicrogram()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMilligram(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMilligram()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createOunce(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getOunce()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createOunceTroy(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getOunceTroy()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createPound(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getPound()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createSolarMass(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getSolarMass()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createStone(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getStone()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createTon(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getTon()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createGigawatt(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getGigawatt()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createHorsepower(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getHorsepower()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createKilowatt(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getKilowatt()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMegawatt(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMegawatt()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMilliwatt(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMilliwatt()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createWatt(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getWatt()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createAtmosphere(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getAtmosphere()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createHectopascal(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getHectopascal()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createInchHg(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getInchHg()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createKilopascal(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getKilopascal()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMegapascal(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMegapascal()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMillibar(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMillibar()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMillimeterOfMercury(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMillimeterOfMercury()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createPoundPerSquareInch(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getPoundPerSquareInch()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createKilometerPerHour(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getKilometerPerHour()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createKnot(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getKnot()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMeterPerSecond(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMeterPerSecond()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMilePerHour(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMilePerHour()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createCelsius(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getCelsius()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createFahrenheit(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getFahrenheit()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createGenericTemperature(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getGenericTemperature()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createKelvin(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getKelvin()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createNewtonMeter(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getNewtonMeter()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createPoundFoot(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getPoundFoot()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createAcreFoot(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getAcreFoot()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createBarrel(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getBarrel()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createBushel(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getBushel()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createCentiliter(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getCentiliter()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createCubicCentimeter(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getCubicCentimeter()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createCubicFoot(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getCubicFoot()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createCubicInch(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getCubicInch()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createCubicKilometer(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getCubicKilometer()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createCubicMeter(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getCubicMeter()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createCubicMile(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getCubicMile()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createCubicYard(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getCubicYard()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createCup(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getCup()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createCupMetric(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getCupMetric()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createDeciliter(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getDeciliter()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createFluidOunce(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getFluidOunce()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createFluidOunceImperial(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getFluidOunceImperial()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createGallon(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getGallon()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createGallonImperial(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getGallonImperial()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createHectoliter(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getHectoliter()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createLiter(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getLiter()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMegaliter(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMegaliter()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createMilliliter(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getMilliliter()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createPint(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getPint()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createPintMetric(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getPintMetric()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createQuart(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getQuart()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createTablespoon(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getTablespoon()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::createTeaspoon(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getTeaspoon()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::MeasureUnit()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::MeasureUnit()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::MeasureUnit(icu::MeasureUnit const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::MeasureUnit(icu::MeasureUnit const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::operator=(icu::MeasureUnit const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::~MeasureUnit()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::~MeasureUnit()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::~MeasureUnit()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getType() const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getSubtype() const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getOffset() const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::operator==(icu::UObject const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getIndex() const",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getAvailable(icu::MeasureUnit*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::setTo(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getAvailable(char const*, icu::MeasureUnit*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getAvailableTypes(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::getIndexCount()",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::internalGetIndexForTypeAndSubtype(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::resolveUnitPerUnit(icu::MeasureUnit const&, icu::MeasureUnit const&, bool*)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::initTime(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::initCurrency(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::MeasureUnit::initNoUnit(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Measure::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::Measure::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Measure::Measure()",
    "type": "CPP"
  },
  {
    "name": "T icu::Measure::Measure()",
    "type": "CPP"
  },
  {
    "name": "T icu::Measure::Measure(icu::Formattable const&, icu::MeasureUnit*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Measure::Measure(icu::Formattable const&, icu::MeasureUnit*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Measure::Measure(icu::Measure const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Measure::operator=(icu::Measure const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Measure::Measure(icu::Measure const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Measure::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Measure::~Measure()",
    "type": "CPP"
  },
  {
    "name": "T icu::Measure::~Measure()",
    "type": "CPP"
  },
  {
    "name": "T icu::Measure::~Measure()",
    "type": "CPP"
  },
  {
    "name": "T icu::Measure::operator==(icu::UObject const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::MessageFormat(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::PluralSelectorProvider::PluralSelectorProvider(icu::MessageFormat const&, UPluralType)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::MessageFormat(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::MessageFormat(icu::UnicodeString const&, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::MessageFormat(icu::UnicodeString const&, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::MessageFormat(icu::UnicodeString const&, icu::Locale const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::MessageFormat(icu::UnicodeString const&, icu::Locale const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::MessageFormat(icu::MessageFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::copyObjects(icu::MessageFormat const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::resetPattern()",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::MessageFormat(icu::MessageFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::~MessageFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::PluralSelectorProvider::~PluralSelectorProvider()",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::~MessageFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::~MessageFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::allocateArgTypes(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::operator=(icu::MessageFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::operator==(icu::Format const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::setLocale(icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::PluralSelectorProvider::reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::getLocale() const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::applyPattern(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::applyPattern(icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::cacheExplicitFormats(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::applyPattern(icu::UnicodeString const&, UMessagePatternApostropheMode, UParseError*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::toPattern(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::nextTopLevelArgStart(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::setArgStartFormat(int, icu::Format*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::argNameMatches(int, icu::UnicodeString const&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::setCustomArgStartFormat(int, icu::Format*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::getCachedFormatter(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::adoptFormats(icu::Format**, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::setFormats(icu::Format const**, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::adoptFormat(int, icu::Format*)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::adoptFormat(icu::UnicodeString const&, icu::Format*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::setFormat(int, icu::Format const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::getFormat(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::setFormat(icu::UnicodeString const&, icu::Format const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::getFormats(int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::getArgName(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::getFormatNames(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::format(icu::Formattable const*, int, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::format(icu::Formattable const*, icu::UnicodeString const*, int, icu::UnicodeString&, icu::FieldPosition*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::format(icu::UnicodeString const&, icu::Formattable const*, int, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::format(icu::Formattable const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::format(icu::UnicodeString const*, icu::Formattable const*, int, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::getArgFromListByName(icu::Formattable const*, icu::UnicodeString const*, int, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::format(int, void const*, icu::Formattable const*, icu::UnicodeString const*, int, icu::AppendableWrapper&, icu::FieldPosition*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::getDefaultNumberFormat(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::getDefaultDateFormat(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::formatComplexSubMessage(int, void const*, icu::Formattable const*, icu::UnicodeString const*, int, icu::AppendableWrapper&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::updateMetaData(icu::AppendableWrapper&, int, icu::FieldPosition*, icu::Formattable const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::getLiteralStringUntilNextArgument(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::findOtherSubMessage(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::findFirstPluralNumberArg(int, icu::UnicodeString const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::parse(int, icu::UnicodeString const&, icu::ParsePosition&, int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::parse(icu::UnicodeString const&, icu::ParsePosition&, int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::parse(icu::UnicodeString const&, int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::parseObject(icu::UnicodeString const&, icu::Formattable&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::autoQuoteApostrophe(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::createAppropriateFormat(icu::UnicodeString&, icu::UnicodeString&, icu::Formattable::Type&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::findKeyword(icu::UnicodeString const&, char16_t const* const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::createIntegerFormat(icu::Locale const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::usesNamedArguments() const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::getArgTypeCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::equalFormats(void const*, void const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::DummyFormat::operator==(icu::Format const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::DummyFormat::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::DummyFormat::format(icu::Formattable const&, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::DummyFormat::format(icu::Formattable const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::DummyFormat::format(icu::Formattable const&, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::DummyFormat::parseObject(icu::UnicodeString const&, icu::Formattable&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::PluralSelectorProvider::PluralSelectorProvider(icu::MessageFormat const&, UPluralType)",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::PluralSelectorProvider::~PluralSelectorProvider()",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::PluralSelectorProvider::~PluralSelectorProvider()",
    "type": "CPP"
  },
  {
    "name": "T icu::MessageFormat::PluralSelectorProvider::select(void*, double, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NameUnicodeTransliterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::NormalizationTransliterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::NoUnit::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::NoUnit::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::NoUnit::base()",
    "type": "CPP"
  },
  {
    "name": "T icu::NoUnit::NoUnit(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::NoUnit::percent()",
    "type": "CPP"
  },
  {
    "name": "T icu::NoUnit::permille()",
    "type": "CPP"
  },
  {
    "name": "T icu::NoUnit::NoUnit(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::NoUnit::NoUnit(icu::NoUnit const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NoUnit::NoUnit(icu::NoUnit const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NoUnit::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::NoUnit::~NoUnit()",
    "type": "CPP"
  },
  {
    "name": "T icu::NoUnit::~NoUnit()",
    "type": "CPP"
  },
  {
    "name": "T icu::NoUnit::~NoUnit()",
    "type": "CPP"
  },
  {
    "name": "T icu::NullTransliterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolProvider::~SymbolProvider()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolProvider::~SymbolProvider()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolProvider::~SymbolProvider()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::AffixUtils::estimateLength(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::AffixUtils::escape(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::AffixUtils::getFieldForType(icu::number::impl::AffixPatternType)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::AffixUtils::unescape(icu::UnicodeString const&, icu::number::impl::NumberStringBuilder&, int, icu::number::impl::SymbolProvider const&, unsigned char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::AffixUtils::hasNext(icu::number::impl::AffixTag const&, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::AffixUtils::nextToken(icu::number::impl::AffixTag, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::AffixUtils::unescapedCodePointCount(icu::UnicodeString const&, icu::number::impl::SymbolProvider const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::AffixUtils::containsType(icu::UnicodeString const&, icu::number::impl::AffixPatternType, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::AffixUtils::hasCurrencySymbols(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::AffixUtils::replaceType(icu::UnicodeString const&, icu::number::impl::AffixPatternType, char16_t, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::AffixUtils::containsOnlySymbolsAndIgnorables(icu::UnicodeString const&, icu::UnicodeSet const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::AffixUtils::iterateWithConsumer(icu::UnicodeString const&, icu::number::impl::TokenConsumer&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::LocalizedNumberFormatterAsFormat::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::LocalizedNumberFormatterAsFormat::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::LocalizedNumberFormatterAsFormat::LocalizedNumberFormatterAsFormat(icu::number::LocalizedNumberFormatter const&, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::LocalizedNumberFormatterAsFormat::LocalizedNumberFormatterAsFormat(icu::number::LocalizedNumberFormatter const&, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::LocalizedNumberFormatterAsFormat::~LocalizedNumberFormatterAsFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::LocalizedNumberFormatterAsFormat::~LocalizedNumberFormatterAsFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::LocalizedNumberFormatterAsFormat::~LocalizedNumberFormatterAsFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::LocalizedNumberFormatterAsFormat::operator==(icu::Format const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::LocalizedNumberFormatterAsFormat::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::LocalizedNumberFormatterAsFormat::format(icu::Formattable const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::LocalizedNumberFormatterAsFormat::format(icu::Formattable const&, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::LocalizedNumberFormatterAsFormat::parseObject(icu::UnicodeString const&, icu::Formattable&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::LocalizedNumberFormatterAsFormat::getNumberFormatter() const",
    "type": "CPP"
  },
  {
    "name": "T _unumf_openResult",
    "type": "CPP"
  },
  {
    "name": "T _unumf_resultAsValue",
    "type": "CPP"
  },
  {
    "name": "T _unumf_closeResult",
    "type": "CPP"
  },
  {
    "name": "T _unumf_openForSkeletonAndLocale",
    "type": "CPP"
  },
  {
    "name": "T _unumf_openForSkeletonAndLocaleWithError",
    "type": "CPP"
  },
  {
    "name": "T _unumf_formatInt",
    "type": "CPP"
  },
  {
    "name": "T _unumf_formatDouble",
    "type": "CPP"
  },
  {
    "name": "T _unumf_formatDecimal",
    "type": "CPP"
  },
  {
    "name": "T _unumf_resultToString",
    "type": "CPP"
  },
  {
    "name": "T _unumf_resultNextFieldPosition",
    "type": "CPP"
  },
  {
    "name": "T _unumf_resultGetAllFieldPositions",
    "type": "CPP"
  },
  {
    "name": "T _unumf_close",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::CurrencySymbols::CurrencySymbols(icu::CurrencyUnit, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::CurrencySymbols::CurrencySymbols(icu::CurrencyUnit, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::CurrencySymbols::CurrencySymbols(icu::CurrencyUnit, icu::Locale const&, icu::DecimalFormatSymbols const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::CurrencySymbols::CurrencySymbols(icu::CurrencyUnit, icu::Locale const&, icu::DecimalFormatSymbols const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::CurrencySymbols::getIsoCode() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::CurrencySymbols::getNarrowCurrencySymbol(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::CurrencySymbols::loadSymbol(UCurrNameStyle, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::CurrencySymbols::getCurrencySymbol(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::CurrencySymbols::getIntlCurrencySymbol(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::CurrencySymbols::getPluralName(icu::StandardPlural::Form, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::IFixedDecimal::~IFixedDecimal()",
    "type": "CPP"
  },
  {
    "name": "T icu::IFixedDecimal::~IFixedDecimal()",
    "type": "CPP"
  },
  {
    "name": "T icu::IFixedDecimal::~IFixedDecimal()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::DecimalQuantity()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::setBcdToZero()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::DecimalQuantity()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::~DecimalQuantity()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::~DecimalQuantity()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::~DecimalQuantity()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::DecimalQuantity(icu::number::impl::DecimalQuantity const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::operator=(icu::number::impl::DecimalQuantity const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::DecimalQuantity(icu::number::impl::DecimalQuantity const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::DecimalQuantity(icu::number::impl::DecimalQuantity&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::operator=(icu::number::impl::DecimalQuantity&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::DecimalQuantity(icu::number::impl::DecimalQuantity&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::copyBcdFrom(icu::number::impl::DecimalQuantity const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::copyFieldsFrom(icu::number::impl::DecimalQuantity const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::moveBcdFrom(icu::number::impl::DecimalQuantity&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::clear()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::setMinInteger(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::setMinFraction(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::applyMaxInteger(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::getMagnitude() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::popFromLeft(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::compact()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::getPositionFingerprint() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::roundToIncrement(double, UNumberFormatRoundingMode, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::divideBy(icu::number::impl::DecNum const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::roundToMagnitude(int, UNumberFormatRoundingMode, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::multiplyBy(icu::number::impl::DecNum const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::isZero() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::toDecNum(icu::number::impl::DecNum&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::setToDecNum(icu::number::impl::DecNum const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::negate()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::adjustMagnitude(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::getPluralOperand(icu::PluralOperand) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::isNegative() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::toLong(bool) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::toFractionLong(bool) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::fractionCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::fractionCountWithoutTrailingZeros() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::toDouble() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::hasIntegerValue() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::getUpperDisplayMagnitude() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::getLowerDisplayMagnitude() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::getDigit(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::getDigitPos(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::signum() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::isInfinite() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::isNaN() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::setToInt(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::_setToInt(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::readLongToBcd(long long)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::readIntToBcd(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::setToLong(long long)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::_setToLong(long long)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::readDecNumberToBcd(icu::number::impl::DecNum const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::setToDouble(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::_setToDoubleFast(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::convertToAccurateDouble()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::readDoubleConversionToBcd(char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::setToDecNumber(icu::StringPiece, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::_setToDecNum(icu::number::impl::DecNum const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::fitsInLong(bool) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::toScientificString() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::truncate()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::shiftRight(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::roundToNickel(int, UNumberFormatRoundingMode, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::roundToMagnitude(int, UNumberFormatRoundingMode, bool, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::setDigitPos(int, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::roundToInfinity()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::appendDigit(signed char, int, bool)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::shiftLeft(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::toPlainString() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::ensureCapacity(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::switchStorage()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::ensureCapacity()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::checkHealth() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::operator==(icu::number::impl::DecimalQuantity const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalQuantity::toString() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalFormatProperties::DecimalFormatProperties()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalFormatProperties::clear()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalFormatProperties::DecimalFormatProperties()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalFormatProperties::_equals(icu::number::impl::DecimalFormatProperties const&, bool) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalFormatProperties::equalsDefaultExceptFastFormat() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecimalFormatProperties::getDefault()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter> const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolsWrapper::setTo(icu::DecimalFormatSymbols const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolsWrapper::setTo(icu::NumberingSystem const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter> const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::NumberFormatter::with()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::NumberFormatter::withLocale(icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberFormatter::locale(icu::Locale const&) &&",
    "type": "CPP"
  },
  {
    "name": "T icu::number::NumberFormatter::forSkeleton(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::NumberFormatter::forSkeleton(icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(icu::number::UnlocalizedNumberFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter> const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(icu::number::UnlocalizedNumberFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(icu::number::UnlocalizedNumberFormatter&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(icu::number::UnlocalizedNumberFormatter&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberFormatter::operator=(icu::number::UnlocalizedNumberFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberFormatter::operator=(icu::number::UnlocalizedNumberFormatter&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(icu::number::LocalizedNumberFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter> const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(icu::number::LocalizedNumberFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(icu::number::LocalizedNumberFormatter&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(icu::number::LocalizedNumberFormatter&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::lnfMoveHelper(icu::number::LocalizedNumberFormatter&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::operator=(icu::number::LocalizedNumberFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::clear()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::operator=(icu::number::LocalizedNumberFormatter&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(icu::number::impl::MacroProps const&, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(icu::number::impl::MacroProps const&, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(icu::number::impl::MacroProps&&, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(icu::number::impl::MacroProps&&, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberFormatter::locale(icu::Locale const&) const &",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolsWrapper::SymbolsWrapper(icu::number::impl::SymbolsWrapper const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolsWrapper::doCopyFrom(icu::number::impl::SymbolsWrapper const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolsWrapper::SymbolsWrapper(icu::number::impl::SymbolsWrapper const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolsWrapper::SymbolsWrapper(icu::number::impl::SymbolsWrapper&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolsWrapper::doMoveFrom(icu::number::impl::SymbolsWrapper&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolsWrapper::SymbolsWrapper(icu::number::impl::SymbolsWrapper&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolsWrapper::operator=(icu::number::impl::SymbolsWrapper const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolsWrapper::doCleanup()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolsWrapper::operator=(icu::number::impl::SymbolsWrapper&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolsWrapper::~SymbolsWrapper()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolsWrapper::~SymbolsWrapper()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolsWrapper::setDFSShallowCopy(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolsWrapper::isDecimalFormatSymbols() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolsWrapper::isNumberingSystem() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolsWrapper::getDecimalFormatSymbols() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SymbolsWrapper::getNumberingSystem() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::formatInt(long long, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::formatImpl(icu::number::impl::UFormattedNumberData*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::formatDouble(double, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::formatDecimal(icu::StringPiece, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::formatDecimalQuantity(icu::number::impl::DecimalQuantity const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::computeCompiled(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::getAffixImpl(bool, bool, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::getCompiled() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::getCallCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::toFormat(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberFormatter::setDFSShallowCopy(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MicroPropsGenerator::~MicroPropsGenerator()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MicroPropsGenerator::~MicroPropsGenerator()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MicroPropsGenerator::~MicroPropsGenerator()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Grouper::forStrategy(UNumberGroupingStrategy)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Grouper::forProperties(icu::number::impl::DecimalFormatProperties const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Grouper::setLocaleData(icu::number::impl::ParsedPatternInfo const&, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Grouper::groupAtPosition(int, icu::number::impl::DecimalQuantity const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Grouper::getPrimary() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Grouper::getSecondary() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::IntegerWidth::IntegerWidth(short, short, bool)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::IntegerWidth::IntegerWidth(short, short, bool)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::IntegerWidth::zeroFillTo(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::IntegerWidth::truncateAt(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::IntegerWidth::apply(icu::number::impl::DecimalQuantity&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::IntegerWidth::operator==(icu::number::IntegerWidth const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Modifier::~Modifier()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Modifier::~Modifier()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Modifier::~Modifier()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Modifier::Parameters::Parameters()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Modifier::Parameters::Parameters()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Modifier::Parameters::Parameters(icu::number::impl::ModifierStore const*, signed char, icu::StandardPlural::Form)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Modifier::Parameters::Parameters(icu::number::impl::ModifierStore const*, signed char, icu::StandardPlural::Form)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ModifierStore::~ModifierStore()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ModifierStore::~ModifierStore()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ModifierStore::~ModifierStore()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::AdoptingModifierStore::~AdoptingModifierStore()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::AdoptingModifierStore::~AdoptingModifierStore()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::AdoptingModifierStore::~AdoptingModifierStore()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ConstantAffixModifier::apply(icu::number::impl::NumberStringBuilder&, int, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ConstantAffixModifier::getPrefixLength() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ConstantAffixModifier::getCodePointCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ConstantAffixModifier::isStrong() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ConstantAffixModifier::containsField(UNumberFormatFields) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ConstantAffixModifier::getParameters(icu::number::impl::Modifier::Parameters&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ConstantAffixModifier::semanticallyEquivalent(icu::number::impl::Modifier const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SimpleModifier::SimpleModifier(icu::SimpleFormatter const&, unsigned char, bool)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SimpleModifier::SimpleModifier(icu::SimpleFormatter const&, unsigned char, bool, icu::number::impl::Modifier::Parameters)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SimpleModifier::SimpleModifier(icu::SimpleFormatter const&, unsigned char, bool)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SimpleModifier::SimpleModifier(icu::SimpleFormatter const&, unsigned char, bool, icu::number::impl::Modifier::Parameters)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SimpleModifier::SimpleModifier()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SimpleModifier::SimpleModifier()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SimpleModifier::apply(icu::number::impl::NumberStringBuilder&, int, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SimpleModifier::formatAsPrefixSuffix(icu::number::impl::NumberStringBuilder&, int, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SimpleModifier::getPrefixLength() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SimpleModifier::getCodePointCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SimpleModifier::isStrong() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SimpleModifier::containsField(UNumberFormatFields) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SimpleModifier::getParameters(icu::number::impl::Modifier::Parameters&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SimpleModifier::semanticallyEquivalent(icu::number::impl::Modifier const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::SimpleModifier::formatTwoArgPattern(icu::SimpleFormatter const&, icu::number::impl::NumberStringBuilder&, int, int*, int*, unsigned char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ConstantMultiFieldModifier::apply(icu::number::impl::NumberStringBuilder&, int, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ConstantMultiFieldModifier::getPrefixLength() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ConstantMultiFieldModifier::getCodePointCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ConstantMultiFieldModifier::isStrong() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ConstantMultiFieldModifier::containsField(UNumberFormatFields) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ConstantMultiFieldModifier::getParameters(icu::number::impl::Modifier::Parameters&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ConstantMultiFieldModifier::semanticallyEquivalent(icu::number::impl::Modifier const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::CurrencySpacingEnabledModifier::CurrencySpacingEnabledModifier(icu::number::impl::NumberStringBuilder const&, icu::number::impl::NumberStringBuilder const&, bool, bool, icu::DecimalFormatSymbols const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet(icu::DecimalFormatSymbols const&, icu::number::impl::CurrencySpacingEnabledModifier::EPosition, icu::number::impl::CurrencySpacingEnabledModifier::EAffix, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::CurrencySpacingEnabledModifier::getInsertString(icu::DecimalFormatSymbols const&, icu::number::impl::CurrencySpacingEnabledModifier::EAffix, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::CurrencySpacingEnabledModifier::CurrencySpacingEnabledModifier(icu::number::impl::NumberStringBuilder const&, icu::number::impl::NumberStringBuilder const&, bool, bool, icu::DecimalFormatSymbols const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::CurrencySpacingEnabledModifier::apply(icu::number::impl::NumberStringBuilder&, int, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::CurrencySpacingEnabledModifier::applyCurrencySpacing(icu::number::impl::NumberStringBuilder&, int, int, int, int, icu::DecimalFormatSymbols const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::CurrencySpacingEnabledModifier::applyCurrencySpacingAffix(icu::number::impl::NumberStringBuilder&, int, icu::number::impl::CurrencySpacingEnabledModifier::EAffix, icu::DecimalFormatSymbols const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Scale::Scale(int, icu::number::impl::DecNum*)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Scale::Scale(int, icu::number::impl::DecNum*)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Scale::Scale(icu::number::Scale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Scale::Scale(icu::number::Scale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Scale::operator=(icu::number::Scale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Scale::Scale(icu::number::Scale&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Scale::Scale(icu::number::Scale&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Scale::operator=(icu::number::Scale&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Scale::~Scale()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Scale::~Scale()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Scale::none()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Scale::powerOfTen(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Scale::byDecimal(icu::StringPiece)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Scale::byDouble(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Scale::byDoubleAndPowerOfTen(double, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Scale::applyTo(icu::number::impl::DecimalQuantity&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Scale::applyReciprocalTo(icu::number::impl::DecimalQuantity&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MultiplierFormatHandler::setAndChain(icu::number::Scale const&, icu::number::impl::MicroPropsGenerator const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MultiplierFormatHandler::processQuantity(icu::number::impl::DecimalQuantity&, icu::number::impl::MicroProps&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Notation::scientific()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Notation::engineering()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::ScientificNotation::ScientificNotation(signed char, bool, short, UNumberSignDisplay)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::ScientificNotation::ScientificNotation(signed char, bool, short, UNumberSignDisplay)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Notation::compactShort()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Notation::compactLong()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Notation::simple()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::ScientificNotation::withMinExponentDigits(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::ScientificNotation::withExponentSignDisplay(UNumberSignDisplay) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumber::FormattedNumber(icu::number::FormattedNumber&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumber::FormattedNumber(icu::number::FormattedNumber&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumber::~FormattedNumber()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumber::~FormattedNumber()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumber::~FormattedNumber()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumber::operator=(icu::number::FormattedNumber&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumber::toString(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumber::toTempString(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumber::appendTo(icu::Appendable&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumber::nextPosition(icu::ConstrainedFieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumber::nextFieldPosition(icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumber::getAllFieldPositions(icu::FieldPositionIterator&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumber::getAllFieldPositionsImpl(icu::FieldPositionIteratorHandler&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumber::getDecimalQuantity(icu::number::impl::DecimalQuantity&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Padder::Padder(int, int, UNumberFormatPadPosition)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Padder::Padder(int, int, UNumberFormatPadPosition)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Padder::Padder(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Padder::Padder(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Padder::none()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Padder::codePoints(int, int, UNumberFormatPadPosition)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Padder::forProperties(icu::number::impl::DecimalFormatProperties const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::Padder::padAndApply(icu::number::impl::Modifier const&, icu::number::impl::Modifier const&, icu::number::impl::NumberStringBuilder&, int, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::AffixPatternProvider::~AffixPatternProvider()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::AffixPatternProvider::~AffixPatternProvider()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::AffixPatternProvider::~AffixPatternProvider()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::MutablePatternModifier(bool)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::MutablePatternModifier(bool)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::setPatternInfo(icu::number::impl::AffixPatternProvider const*, unsigned char)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::setPatternAttributes(UNumberSignDisplay, bool)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::setSymbols(icu::DecimalFormatSymbols const*, icu::number::impl::CurrencySymbols const*, UNumberUnitWidth, icu::PluralRules const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::setNumberProperties(signed char, icu::StandardPlural::Form)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::needsPlurals() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::createImmutable(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::createImmutableAndChain(icu::number::impl::MicroPropsGenerator const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::createConstantModifier(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ImmutablePatternModifier::ImmutablePatternModifier(icu::number::impl::AdoptingModifierStore*, icu::PluralRules const*, icu::number::impl::MicroPropsGenerator const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::insertPrefix(icu::number::impl::NumberStringBuilder&, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::insertSuffix(icu::number::impl::NumberStringBuilder&, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ImmutablePatternModifier::ImmutablePatternModifier(icu::number::impl::AdoptingModifierStore*, icu::PluralRules const*, icu::number::impl::MicroPropsGenerator const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ImmutablePatternModifier::processQuantity(icu::number::impl::DecimalQuantity&, icu::number::impl::MicroProps&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ImmutablePatternModifier::applyToMicros(icu::number::impl::MicroProps&, icu::number::impl::DecimalQuantity const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ImmutablePatternModifier::getModifier(signed char, icu::StandardPlural::Form) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::addToChain(icu::number::impl::MicroPropsGenerator const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::processQuantity(icu::number::impl::DecimalQuantity&, icu::number::impl::MicroProps&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::apply(icu::number::impl::NumberStringBuilder&, int, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to icu::number::impl::MutablePatternModifier::apply(icu::number::impl::NumberStringBuilder&, int, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::getPrefixLength() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::prepareAffix(bool)",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to icu::number::impl::MutablePatternModifier::getPrefixLength() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::getCodePointCount() const",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to icu::number::impl::MutablePatternModifier::getCodePointCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::isStrong() const",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to icu::number::impl::MutablePatternModifier::isStrong() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::containsField(UNumberFormatFields) const",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to icu::number::impl::MutablePatternModifier::containsField(UNumberFormatFields) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::getParameters(icu::number::impl::Modifier::Parameters&) const",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to icu::number::impl::MutablePatternModifier::getParameters(icu::number::impl::Modifier::Parameters&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::semanticallyEquivalent(icu::number::impl::Modifier const&) const",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to icu::number::impl::MutablePatternModifier::semanticallyEquivalent(icu::number::impl::Modifier const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::getSymbol(icu::number::impl::AffixPatternType) const",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to icu::number::impl::MutablePatternModifier::getSymbol(icu::number::impl::AffixPatternType) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::MutablePatternModifier::toUnicodeString() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::PatternParser::parseToPatternInfo(icu::UnicodeString const&, icu::number::impl::ParsedPatternInfo&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::consumePattern(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::PatternParser::parseToProperties(icu::UnicodeString const&, icu::number::impl::IgnoreRounding, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::PatternParser::parseToExistingPropertiesImpl(icu::UnicodeString const&, icu::number::impl::DecimalFormatProperties&, icu::number::impl::IgnoreRounding, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::PatternParser::parseToProperties(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::PatternParser::parseToExistingProperties(icu::UnicodeString const&, icu::number::impl::DecimalFormatProperties&, icu::number::impl::IgnoreRounding, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::charAt(int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::getEndpoints(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::length(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::getLengthFromEndpoints(icu::number::impl::Endpoints const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::getString(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::positiveHasPlusSign() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::hasNegativeSubpattern() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::negativeHasMinusSign() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::hasCurrencySign() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::containsSymbolType(icu::number::impl::AffixPatternType, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::hasBody() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::ParserState::peek()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::ParserState::next()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::consumeSubpattern(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::consumePadding(UNumberFormatPadPosition, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::consumeAffix(icu::number::impl::Endpoints&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::consumeFormat(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::consumeExponent(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::consumeLiteral(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::consumeIntegerFormat(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ParsedPatternInfo::consumeFractionFormat(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::PatternParser::patternInfoToProperties(icu::number::impl::DecimalFormatProperties&, icu::number::impl::ParsedPatternInfo&, icu::number::impl::IgnoreRounding, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::PatternStringUtils::ignoreRoundingIncrement(double*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::PatternStringUtils::propertiesToPatternString(icu::number::impl::DecimalFormatProperties const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::PatternStringUtils::escapePaddingString(icu::UnicodeString, icu::UnicodeString&, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::PatternStringUtils::convertLocalized(icu::UnicodeString const&, icu::DecimalFormatSymbols const&, bool, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::PatternStringUtils::patternInfoToStringBuilder(icu::number::impl::AffixPatternProvider const&, bool, signed char, UNumberSignDisplay, icu::StandardPlural::Form, bool, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Precision::unlimited()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Precision::integer()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Precision::constructFraction(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Precision::fixedFraction(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Precision::minFraction(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Precision::maxFraction(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Precision::minMaxFraction(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Precision::fixedSignificantDigits(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Precision::constructSignificant(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Precision::minSignificantDigits(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Precision::maxSignificantDigits(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Precision::minMaxSignificantDigits(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Precision::increment(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Precision::constructIncrement(double, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Precision::currency(UCurrencyUsage)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Precision::constructCurrency(UCurrencyUsage)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FractionPrecision::withMinDigits(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Precision::constructFractionSignificant(icu::number::FractionPrecision const&, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FractionPrecision::withMaxDigits(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Precision::withCurrency(icu::CurrencyUnit const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::CurrencyPrecision::withCurrency(icu::CurrencyUnit const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::IncrementPrecision::withMinFraction(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::Precision::constructIncrementSignificant(double, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ScientificModifier::ScientificModifier()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ScientificModifier::ScientificModifier()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ScientificModifier::set(int, icu::number::impl::ScientificHandler const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ScientificModifier::apply(icu::number::impl::NumberStringBuilder&, int, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ScientificModifier::getPrefixLength() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ScientificModifier::getCodePointCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ScientificModifier::isStrong() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ScientificModifier::containsField(UNumberFormatFields) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ScientificModifier::getParameters(icu::number::impl::Modifier::Parameters&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::ScientificModifier::semanticallyEquivalent(icu::number::impl::Modifier const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::NumberStringBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::NumberStringBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::~NumberStringBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::~NumberStringBuilder()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::NumberStringBuilder(icu::number::impl::NumberStringBuilder const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::operator=(icu::number::impl::NumberStringBuilder const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::NumberStringBuilder(icu::number::impl::NumberStringBuilder const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::length() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::codePointCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::getFirstCodePoint() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::getLastCodePoint() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::codePointAt(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::codePointBefore(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::clear()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::appendCodePoint(int, unsigned char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::insertCodePoint(int, int, unsigned char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::prepareForInsert(int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::append(icu::UnicodeString const&, unsigned char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::insert(int, icu::UnicodeString const&, unsigned char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::insert(int, icu::UnicodeString const&, int, int, unsigned char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::splice(int, int, icu::UnicodeString const&, int, int, unsigned char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::remove(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::append(icu::number::impl::NumberStringBuilder const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::insert(int, icu::number::impl::NumberStringBuilder const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::writeTerminator(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::prepareForInsertHelper(int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::toUnicodeString() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::toTempUnicodeString() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::toDebugString() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::chars() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::contentEquals(icu::number::impl::NumberStringBuilder const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::nextFieldPosition(icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::nextPosition(icu::ConstrainedFieldPosition&, unsigned char, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::isIntOrGroup(unsigned char)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::getAllFieldPositions(icu::FieldPositionIteratorHandler&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::trimBack(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::trimFront(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::isNumericField(unsigned char)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::NumberStringBuilder::containsField(unsigned char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecNum::DecNum()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecNum::DecNum()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecNum::DecNum(icu::number::impl::DecNum const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecNum::DecNum(icu::number::impl::DecNum const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecNum::setTo(icu::StringPiece, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecNum::_setTo(char const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecNum::setTo(char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecNum::setTo(double, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecNum::setTo(unsigned char const*, int, int, bool, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecNum::normalize()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecNum::multiplyBy(icu::number::impl::DecNum const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecNum::divideBy(icu::number::impl::DecNum const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecNum::isNegative() const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::impl::DecNum::isZero() const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::NumberFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::~NumberFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::~NumberFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::~NumberFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedNumberFormat::~SharedNumberFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedNumberFormat::~SharedNumberFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedNumberFormat::~SharedNumberFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::NumberFormat(icu::NumberFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::operator=(icu::NumberFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::operator==(icu::Format const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::format(double, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::format(int, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::format(long long, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::format(double, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::format(int, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::format(long long, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::format(icu::StringPiece, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::format(icu::number::impl::DecimalQuantity const&, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::format(icu::number::impl::DecimalQuantity const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::format(icu::Formattable const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::getCurrency() const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::format(icu::Formattable const&, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::format(long long, icu::UnicodeString&, icu::FieldPosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::parseObject(icu::UnicodeString const&, icu::Formattable&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::format(double, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::format(int, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::format(long long, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::parse(icu::UnicodeString const&, icu::Formattable&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::parseCurrency(icu::UnicodeString const&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::setParseIntegerOnly(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::setLenient(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::createInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::createInstance(icu::Locale const&, UNumberFormatStyle, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::createInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::createCurrencyInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::createCurrencyInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::createPercentInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::createPercentInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::createScientificInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::createScientificInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::getAvailableLocales(int&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::internalCreateInstance(icu::Locale const&, UNumberFormatStyle, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::makeInstance(icu::Locale const&, UNumberFormatStyle, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::createSharedInstance(icu::Locale const&, UNumberFormatStyle, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::isGroupingUsed() const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::setGroupingUsed(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::getMaximumIntegerDigits() const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::setMaximumIntegerDigits(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::getMinimumIntegerDigits() const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::setMinimumIntegerDigits(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::getMaximumFractionDigits() const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::setMaximumFractionDigits(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::getMinimumFractionDigits() const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::setMinimumFractionDigits(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::setDateSettings()",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::setCurrency(char16_t const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::getEffectiveCurrency(char16_t*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::setContext(UDisplayContext, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::getContext(UDisplayContextType, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleCacheKey<icu::SharedNumberFormat>::createObject(void const*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::isStyleSupported(UNumberFormatStyle)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::makeInstance(icu::Locale const&, UNumberFormatStyle, signed char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::getRoundingMode() const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberFormat::setRoundingMode(icu::NumberFormat::ERoundingMode)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::AffixTokenMatcherWarehouse::minusSign()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::AffixTokenMatcherWarehouse::plusSign()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::AffixTokenMatcherWarehouse::percent()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::AffixTokenMatcherWarehouse::permille()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::AffixTokenMatcherWarehouse::currency(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::AffixTokenMatcherWarehouse::nextCodePointMatcher(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::AffixPatternMatcher::AffixPatternMatcher(icu::MaybeStackArray<icu::numparse::impl::NumberParseMatcher const*, 3>&, int, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::AffixTokenMatcherWarehouse::AffixTokenMatcherWarehouse(icu::numparse::impl::AffixTokenMatcherSetupData const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::AffixTokenMatcherWarehouse::AffixTokenMatcherWarehouse(icu::numparse::impl::AffixTokenMatcherSetupData const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::AffixTokenMatcherWarehouse::ignorables()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::AffixPatternMatcher::fromAffixPattern(icu::UnicodeString const&, icu::numparse::impl::AffixTokenMatcherWarehouse&, int, bool*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::AffixPatternMatcher::AffixPatternMatcher(icu::MaybeStackArray<icu::numparse::impl::NumberParseMatcher const*, 3>&, int, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::AffixPatternMatcher::getPattern() const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::AffixPatternMatcher::operator==(icu::numparse::impl::AffixPatternMatcher const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::SeriesMatcher::match(icu::numparse::impl::StringSegment&, icu::numparse::impl::ParsedNumber&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::SeriesMatcher::smokeTest(icu::numparse::impl::StringSegment const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::SeriesMatcher::postProcess(icu::numparse::impl::ParsedNumber&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(icu::MaybeStackArray<icu::numparse::impl::NumberParseMatcher const*, 3>&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(icu::MaybeStackArray<icu::numparse::impl::NumberParseMatcher const*, 3>&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::ArraySeriesMatcher::length() const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::ArraySeriesMatcher::begin() const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::ArraySeriesMatcher::end() const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::ArraySeriesMatcher::toString() const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::CombinedCurrencyMatcher::CombinedCurrencyMatcher(icu::number::impl::CurrencySymbols const&, icu::DecimalFormatSymbols const&, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::CombinedCurrencyMatcher::CombinedCurrencyMatcher(icu::number::impl::CurrencySymbols const&, icu::DecimalFormatSymbols const&, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::CombinedCurrencyMatcher::match(icu::numparse::impl::StringSegment&, icu::numparse::impl::ParsedNumber&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::CombinedCurrencyMatcher::matchCurrency(icu::numparse::impl::StringSegment&, icu::numparse::impl::ParsedNumber&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::CombinedCurrencyMatcher::smokeTest(icu::numparse::impl::StringSegment const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::CombinedCurrencyMatcher::toString() const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::NumberParserImpl::createSimpleParser(icu::Locale const&, icu::UnicodeString const&, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::NumberParserImpl::NumberParserImpl(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::NumberParserImpl::freeze()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::NumberParserImpl::createParserFromProperties(icu::number::impl::DecimalFormatProperties const&, icu::DecimalFormatSymbols const&, bool, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::NumberParserImpl::NumberParserImpl(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::NumberParserImpl::~NumberParserImpl()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::NumberParserImpl::~NumberParserImpl()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::NumberParserImpl::~NumberParserImpl()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::NumberParserImpl::addMatcher(icu::numparse::impl::NumberParseMatcher&)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::NumberParserImpl::getParseFlags() const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::NumberParserImpl::parse(icu::UnicodeString const&, bool, icu::numparse::impl::ParsedNumber&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::NumberParserImpl::parse(icu::UnicodeString const&, int, bool, icu::numparse::impl::ParsedNumber&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::NumberParserImpl::parseGreedy(icu::numparse::impl::StringSegment&, icu::numparse::impl::ParsedNumber&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::NumberParserImpl::parseLongestRecursive(icu::numparse::impl::StringSegment&, icu::numparse::impl::ParsedNumber&, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::NumberParserImpl::toString() const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::ParsedNumber::ParsedNumber()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::ParsedNumber::clear()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::ParsedNumber::ParsedNumber()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::ParsedNumber::setCharsConsumed(icu::numparse::impl::StringSegment const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::ParsedNumber::postProcess()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::ParsedNumber::success() const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::ParsedNumber::seenNumber() const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::ParsedNumber::getDouble(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::ParsedNumber::populateFormattable(icu::Formattable&, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::ParsedNumber::isBetterThan(icu::numparse::impl::ParsedNumber const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::StringSegment(icu::UnicodeString const&, bool)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::StringSegment(icu::UnicodeString const&, bool)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::getOffset() const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::setOffset(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::adjustOffset(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::adjustOffsetByCodePoint()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::getCodePoint() const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::setLength(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::resetLength()",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::length() const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::charAt(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::codePointAt(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::toUnicodeString() const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::toTempUnicodeString() const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::startsWith(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::codePointsEqual(int, int, bool)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::startsWith(icu::UnicodeSet const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::startsWith(icu::UnicodeString const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::getCommonPrefixLength(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::getPrefixLengthInternal(icu::UnicodeString const&, bool)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::getCaseSensitivePrefixLength(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::StringSegment::operator==(icu::UnicodeString const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::SymbolMatcher::SymbolMatcher(icu::UnicodeString const&, icu::unisets::Key)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::SymbolMatcher::getSet() const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::SymbolMatcher::match(icu::numparse::impl::StringSegment&, icu::numparse::impl::ParsedNumber&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::SymbolMatcher::smokeTest(icu::numparse::impl::StringSegment const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::SymbolMatcher::toString() const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::IgnorablesMatcher::IgnorablesMatcher(icu::unisets::Key)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::IgnorablesMatcher::IgnorablesMatcher(icu::unisets::Key)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::IgnorablesMatcher::isFlexible() const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::IgnorablesMatcher::toString() const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::IgnorablesMatcher::isDisabled(icu::numparse::impl::ParsedNumber const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::IgnorablesMatcher::accept(icu::numparse::impl::StringSegment&, icu::numparse::impl::ParsedNumber&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::MinusSignMatcher::MinusSignMatcher(icu::DecimalFormatSymbols const&, bool)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::MinusSignMatcher::MinusSignMatcher(icu::DecimalFormatSymbols const&, bool)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::MinusSignMatcher::isDisabled(icu::numparse::impl::ParsedNumber const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::MinusSignMatcher::accept(icu::numparse::impl::StringSegment&, icu::numparse::impl::ParsedNumber&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::PercentMatcher::PercentMatcher(icu::DecimalFormatSymbols const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::PercentMatcher::PercentMatcher(icu::DecimalFormatSymbols const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::PercentMatcher::isDisabled(icu::numparse::impl::ParsedNumber const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::PercentMatcher::accept(icu::numparse::impl::StringSegment&, icu::numparse::impl::ParsedNumber&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::PermilleMatcher::PermilleMatcher(icu::DecimalFormatSymbols const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::PermilleMatcher::PermilleMatcher(icu::DecimalFormatSymbols const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::PermilleMatcher::isDisabled(icu::numparse::impl::ParsedNumber const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::PermilleMatcher::accept(icu::numparse::impl::StringSegment&, icu::numparse::impl::ParsedNumber&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::PlusSignMatcher::PlusSignMatcher(icu::DecimalFormatSymbols const&, bool)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::PlusSignMatcher::PlusSignMatcher(icu::DecimalFormatSymbols const&, bool)",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::PlusSignMatcher::isDisabled(icu::numparse::impl::ParsedNumber const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::numparse::impl::PlusSignMatcher::accept(icu::numparse::impl::StringSegment&, icu::numparse::impl::ParsedNumber&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter(icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter> const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter(icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter> const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberRangeFormatter::~LocalizedNumberRangeFormatter()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::NumberRangeFormatter::with()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::NumberRangeFormatter::withLocale(icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberRangeFormatter::locale(icu::Locale const&) &&",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter(icu::number::UnlocalizedNumberRangeFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter(icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter> const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter(icu::number::UnlocalizedNumberRangeFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter(icu::number::UnlocalizedNumberRangeFormatter&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter(icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter(icu::number::UnlocalizedNumberRangeFormatter&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberRangeFormatter::operator=(icu::number::UnlocalizedNumberRangeFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberRangeFormatter::operator=(icu::number::UnlocalizedNumberRangeFormatter&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(icu::number::LocalizedNumberRangeFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter> const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(icu::number::LocalizedNumberRangeFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(icu::number::LocalizedNumberRangeFormatter&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(icu::number::LocalizedNumberRangeFormatter&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberRangeFormatter::operator=(icu::number::LocalizedNumberRangeFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberRangeFormatter::operator=(icu::number::LocalizedNumberRangeFormatter&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberRangeFormatter::~LocalizedNumberRangeFormatter()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(icu::number::impl::RangeMacroProps const&, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(icu::number::impl::RangeMacroProps const&, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(icu::number::impl::RangeMacroProps&&, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(icu::number::impl::RangeMacroProps&&, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::UnlocalizedNumberRangeFormatter::locale(icu::Locale const&) const &",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberRangeFormatter::formatFormattableRange(icu::Formattable const&, icu::Formattable const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberRangeFormatter::formatImpl(icu::number::impl::UFormattedNumberRangeData&, bool, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::LocalizedNumberRangeFormatter::getFormatter(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumberRange::FormattedNumberRange(icu::number::FormattedNumberRange&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumberRange::FormattedNumberRange(icu::number::FormattedNumberRange&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumberRange::~FormattedNumberRange()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumberRange::~FormattedNumberRange()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumberRange::~FormattedNumberRange()",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumberRange::operator=(icu::number::FormattedNumberRange&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumberRange::toString(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumberRange::toTempString(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumberRange::appendTo(icu::Appendable&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumberRange::nextPosition(icu::ConstrainedFieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumberRange::nextFieldPosition(icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumberRange::getAllFieldPositions(icu::FieldPositionIterator&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumberRange::getAllFieldPositionsImpl(icu::FieldPositionIteratorHandler&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumberRange::getFirstDecimal(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumberRange::getSecondDecimal(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::number::FormattedNumberRange::getIdentityResult(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::NumberingSystem()",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::NumberingSystem()",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::NumberingSystem(icu::NumberingSystem const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::NumberingSystem(icu::NumberingSystem const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::createInstance(int, signed char, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::setRadix(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::setDesc(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::setAlgorithmic(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::setName(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::createInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::createInstanceByName(char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::createInstance(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::~NumberingSystem()",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::~NumberingSystem()",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::~NumberingSystem()",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::getRadix() const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::getDescription() const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::getName() const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::isAlgorithmic() const",
    "type": "CPP"
  },
  {
    "name": "T icu::NumberingSystem::getAvailableNames(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::constructEmpty()",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::OlsonTimeZone(UResourceBundle const*, UResourceBundle const*, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::clearTransitionRules()",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::OlsonTimeZone(UResourceBundle const*, UResourceBundle const*, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::OlsonTimeZone(icu::OlsonTimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::operator=(icu::OlsonTimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::OlsonTimeZone(icu::OlsonTimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::~OlsonTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::deleteTransitionRules()",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::~OlsonTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::~OlsonTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::operator==(icu::TimeZone const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::getOffset(unsigned char, int, int, int, unsigned char, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::getOffset(unsigned char, int, int, int, unsigned char, int, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::getHistoricalOffset(double, signed char, int, int, int&, int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::getOffset(double, signed char, int&, int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::getOffsetFromLocal(double, int, int, int&, int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::setRawOffset(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::getRawOffset() const",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::transitionTimeInSeconds(short) const",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::useDaylightTime() const",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::getDSTSavings() const",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::inDaylightTime(double, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::hasSameRules(icu::TimeZone const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::checkTransitionRules(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::initTransitionRules(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::getNextTransition(double, signed char, icu::TimeZoneTransition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::getPreviousTransition(double, signed char, icu::TimeZoneTransition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::countTransitionRules(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::OlsonTimeZone::getTimeZoneRules(icu::InitialTimeZoneRule const*&, icu::TimeZoneRule const**, int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PersianCalendar::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::init(icu::PluralRules const*, UPluralType, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::PluralRules const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::PluralRules const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::Locale const&, icu::PluralRules const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::Locale const&, icu::PluralRules const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::Locale const&, UPluralType, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::Locale const&, UPluralType, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::applyPattern(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::Locale const&, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::Locale const&, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::PluralRules const&, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::PluralRules const&, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::Locale const&, icu::PluralRules const&, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::Locale const&, icu::PluralRules const&, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::Locale const&, UPluralType, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::Locale const&, UPluralType, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::PluralFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::copyObjects(icu::PluralFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralFormat(icu::PluralFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::~PluralFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralSelectorAdapter::~PluralSelectorAdapter()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::~PluralFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::~PluralFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::format(icu::Formattable const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::format(icu::Formattable const&, double, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::format(int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::format(double, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::format(int, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::format(double, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::findSubMessage(icu::MessagePattern const&, int, icu::PluralFormat::PluralSelector const&, void*, double, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::toPattern(icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::setLocale(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralSelectorAdapter::reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::setNumberFormat(icu::NumberFormat const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::operator=(icu::PluralFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::operator==(icu::Format const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::operator!=(icu::Format const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::parseObject(icu::UnicodeString const&, icu::Formattable&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::parseType(icu::UnicodeString const&, icu::NFRule const*, icu::Formattable&, icu::FieldPosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralSelector::~PluralSelector()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralSelector::~PluralSelector()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralSelector::~PluralSelector()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralSelectorAdapter::~PluralSelectorAdapter()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralSelectorAdapter::~PluralSelectorAdapter()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralFormat::PluralSelectorAdapter::select(void*, double, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::PluralRules(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::PluralRules(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::PluralRules(icu::PluralRules const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::operator=(icu::PluralRules const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::PluralRules(icu::PluralRules const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::~PluralRules()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::~PluralRules()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::~PluralRules()",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedPluralRules::~SharedPluralRules()",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedPluralRules::~SharedPluralRules()",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedPluralRules::~SharedPluralRules()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::getAvailableLocales(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralAvailableLocalesEnumeration::PluralAvailableLocalesEnumeration(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::createRules(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::createDefaultRules(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleCacheKey<icu::SharedPluralRules>::createObject(void const*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::internalForLocale(icu::Locale const&, UPluralType, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::createSharedInstance(icu::Locale const&, UPluralType, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::forLocale(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::forLocale(icu::Locale const&, UPluralType, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::getRuleFromResource(icu::Locale const&, UPluralType, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::select(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::select(icu::IFixedDecimal const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::FixedDecimal(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::~FixedDecimal()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::select(double) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::select(icu::number::FormattedNumber const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::getKeywords(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::getUniqueKeywordValue(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::getAllKeywordValues(icu::UnicodeString const&, double*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::getSamples(icu::UnicodeString const&, double*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::rulesForKeyword(icu::UnicodeString const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::isKeyword(icu::UnicodeString const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::getKeywordOther() const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::operator==(icu::PluralRules const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralRules::getRules() const",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::FixedDecimal(double, int, long long)",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::init(double, int, long long)",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::FixedDecimal(double, int, long long)",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::FixedDecimal(double, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::getFractionalDigits(double, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::FixedDecimal(double, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::FixedDecimal(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::init(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::FixedDecimal()",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::FixedDecimal()",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::FixedDecimal(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::FixedDecimal(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::FixedDecimal(icu::FixedDecimal const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::FixedDecimal(icu::FixedDecimal const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::~FixedDecimal()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to icu::FixedDecimal::~FixedDecimal()",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::~FixedDecimal()",
    "type": "CPP"
  },
  {
    "name": "T non-virtual thunk to icu::FixedDecimal::~FixedDecimal()",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::decimals(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::quickInit(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::adjustForMinFractionDigits(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::getPluralOperand(icu::PluralOperand) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::isNaN() const",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::isInfinite() const",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::hasIntegerValue() const",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::isNanOrInfinity() const",
    "type": "CPP"
  },
  {
    "name": "T icu::FixedDecimal::getVisibleFractionDigitCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralAvailableLocalesEnumeration::PluralAvailableLocalesEnumeration(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralAvailableLocalesEnumeration::~PluralAvailableLocalesEnumeration()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralAvailableLocalesEnumeration::~PluralAvailableLocalesEnumeration()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralAvailableLocalesEnumeration::~PluralAvailableLocalesEnumeration()",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralAvailableLocalesEnumeration::next(int*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralAvailableLocalesEnumeration::reset(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::PluralAvailableLocalesEnumeration::count(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::QuantityFormatter::QuantityFormatter()",
    "type": "CPP"
  },
  {
    "name": "T icu::QuantityFormatter::QuantityFormatter()",
    "type": "CPP"
  },
  {
    "name": "T icu::QuantityFormatter::QuantityFormatter(icu::QuantityFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::QuantityFormatter::QuantityFormatter(icu::QuantityFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::QuantityFormatter::operator=(icu::QuantityFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::QuantityFormatter::~QuantityFormatter()",
    "type": "CPP"
  },
  {
    "name": "T icu::QuantityFormatter::~QuantityFormatter()",
    "type": "CPP"
  },
  {
    "name": "T icu::QuantityFormatter::reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::QuantityFormatter::addIfAbsent(char const*, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::QuantityFormatter::isValid() const",
    "type": "CPP"
  },
  {
    "name": "T icu::QuantityFormatter::getByVariant(char const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::QuantityFormatter::format(icu::Formattable const&, icu::NumberFormat const&, icu::PluralRules const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::QuantityFormatter::selectPlural(icu::Formattable const&, icu::NumberFormat const&, icu::PluralRules const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::QuantityFormatter::format(icu::SimpleFormatter const&, icu::UnicodeString const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::QuantityFormatter::formatAndSelect(double, icu::NumberFormat const&, icu::PluralRules const&, icu::number::impl::NumberStringBuilder&, icu::StandardPlural::Form&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::UnicodeString const&, icu::UnicodeString const&, icu::Locale const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::init(icu::UnicodeString const&, icu::LocalizationInfo*, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::UnicodeString const&, icu::UnicodeString const&, icu::Locale const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::UnicodeString const&, icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::UnicodeString const&, icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::UnicodeString const&, icu::LocalizationInfo*, icu::Locale const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::UnicodeString const&, icu::LocalizationInfo*, icu::Locale const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::UnicodeString const&, icu::Locale const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::UnicodeString const&, icu::Locale const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::URBNFRuleSetTag, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::URBNFRuleSetTag, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::RuleBasedNumberFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::operator=(icu::RuleBasedNumberFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::RuleBasedNumberFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::dispose()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::getDecimalFormatSymbols() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::~RuleBasedNumberFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::~RuleBasedNumberFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::~RuleBasedNumberFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::operator==(icu::Format const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::getRules() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::getRuleSetName(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::getNumberOfRuleSetNames() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::getNumberOfRuleSetDisplayNameLocales() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::getRuleSetDisplayNameLocale(int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::getRuleSetDisplayName(int, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::getRuleSetDisplayName(icu::UnicodeString const&, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::findRuleSet(icu::UnicodeString const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::format(icu::number::impl::DecimalQuantity const&, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::format(icu::number::impl::DecimalQuantity const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::format(int, icu::UnicodeString&, icu::FieldPosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::format(long long, icu::UnicodeString&, icu::FieldPosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::format(long long, icu::NFRuleSet*, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::format(double, icu::UnicodeString&, icu::FieldPosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::format(double, icu::NFRuleSet&, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::format(int, icu::UnicodeString const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::format(long long, icu::UnicodeString const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::format(double, icu::UnicodeString const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::adjustForCapitalizationContext(int, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::parse(icu::UnicodeString const&, icu::Formattable&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::setLenient(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::setDefaultRuleSet(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::initDefaultRuleSet()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::getDefaultRuleSetName() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::initializeDecimalFormatSymbols(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::initializeDefaultInfinityRule(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::initializeDefaultNaNRule(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::stripWhitespace(icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::setContext(UDisplayContext, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::initCapitalizationContextInfo(icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::getCollator() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::getDefaultInfinityRule() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::getDefaultNaNRule() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::adoptDecimalFormatSymbols(icu::DecimalFormatSymbols*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::setDecimalFormatSymbols(icu::DecimalFormatSymbols const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::createPluralFormat(UPluralType, icu::UnicodeString const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::getRoundingMode() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedNumberFormat::setRoundingMode(icu::NumberFormat::ERoundingMode)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTransliterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T _utrans_stripRules",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::RuleBasedTimeZone(icu::UnicodeString const&, icu::InitialTimeZoneRule*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::RuleBasedTimeZone(icu::UnicodeString const&, icu::InitialTimeZoneRule*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::RuleBasedTimeZone(icu::RuleBasedTimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::copyRules(icu::UVector*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::complete(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::RuleBasedTimeZone(icu::RuleBasedTimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::~RuleBasedTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::deleteTransitions()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::deleteRules()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::~RuleBasedTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::~RuleBasedTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::operator=(icu::RuleBasedTimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::operator==(icu::TimeZone const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::operator!=(icu::TimeZone const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::addTransitionRule(icu::TimeZoneRule*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::completeConst(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::getOffset(unsigned char, int, int, int, unsigned char, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::getOffset(unsigned char, int, int, int, unsigned char, int, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::getOffsetInternal(double, signed char, int, int, int&, int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::getOffset(double, signed char, int&, int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::getOffsetFromLocal(double, int, int, int&, int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::getTransitionTime(icu::Transition*, signed char, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::findRuleInFinal(double, signed char, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::setRawOffset(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::getRawOffset() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::useDaylightTime() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::findNext(double, signed char, double&, icu::TimeZoneRule*&, icu::TimeZoneRule*&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::inDaylightTime(double, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::hasSameRules(icu::TimeZone const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::getNextTransition(double, signed char, icu::TimeZoneTransition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::getPreviousTransition(double, signed char, icu::TimeZoneTransition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::findPrev(double, signed char, double&, icu::TimeZoneRule*&, icu::TimeZoneRule*&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::countTransitionRules(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::getTimeZoneRules(icu::InitialTimeZoneRule const*&, icu::TimeZoneRule const**, int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedTimeZone::getLocalDelta(int, int, int, int, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::RegexCompile(icu::RegexPattern*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::RegexCompile(icu::RegexPattern*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::~RegexCompile()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::~RegexCompile()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::~RegexCompile()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::compile(icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::compile(UText*, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::nextChar(icu::RegexCompile::RegexPatternChar&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::doParseActions(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::error(UErrorCode)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::allocateStackData(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::stripNOPs()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::minMatchLength(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::matchStartType()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::appendOp(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::handleCloseParen()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::fixLiterals(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::buildOp(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::allocateData(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::blockTopLoc(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::appendOp(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::insertOp(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::compileInlineInterval()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::compileInterval(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::literalChar(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::scanProp()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::compileSet(icu::UnicodeSet*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::scanNamedChar()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::peekCharLL()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::nextCharLL()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::setPushOp(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::setEval(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::scanPosixProp()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::maxMatchLength(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::findCaseInsensitiveStarters(int, icu::UnicodeSet*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexCompile::createSetForProperty(icu::UnicodeString const&, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::loadRegionData(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::Region()",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::cleanupRegionData()",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::Region()",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::~Region()",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::~Region()",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::~Region()",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::operator==(icu::Region const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::operator!=(icu::Region const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::getInstance(char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::getPreferredValues(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::getInstance(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::getAvailable(URegionType, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::getContainingRegion() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::getContainingRegion(URegionType) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::getContainedRegions(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::getContainedRegions(URegionType, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::getType() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::contains(icu::Region const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::getRegionCode() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Region::getNumericCode() const",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleCacheKey<icu::RelativeDateTimeCacheData>::createObject(void const*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedRelativeDateTime::FormattedRelativeDateTime(icu::FormattedRelativeDateTime&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedRelativeDateTime::FormattedRelativeDateTime(icu::FormattedRelativeDateTime&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedRelativeDateTime::~FormattedRelativeDateTime()",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedRelativeDateTime::~FormattedRelativeDateTime()",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedRelativeDateTime::~FormattedRelativeDateTime()",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedRelativeDateTime::operator=(icu::FormattedRelativeDateTime&&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedRelativeDateTime::toString(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedRelativeDateTime::toTempString(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedRelativeDateTime::appendTo(icu::Appendable&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FormattedRelativeDateTime::nextPosition(icu::ConstrainedFieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::init(icu::NumberFormat*, icu::BreakIterator*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(icu::Locale const&, icu::NumberFormat*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(icu::Locale const&, icu::NumberFormat*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(icu::Locale const&, icu::NumberFormat*, UDateRelativeDateTimeFormatterStyle, UDisplayContext, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(icu::Locale const&, icu::NumberFormat*, UDateRelativeDateTimeFormatterStyle, UDisplayContext, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(icu::RelativeDateTimeFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(icu::RelativeDateTimeFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::operator=(icu::RelativeDateTimeFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::~RelativeDateTimeFormatter()",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::~RelativeDateTimeFormatter()",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::~RelativeDateTimeFormatter()",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::getNumberFormat() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::getCapitalizationContext() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::getFormatStyle() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::format(double, UDateDirection, UDateRelativeUnit, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::formatImpl(double, UDateDirection, UDateRelativeUnit, icu::FormattedRelativeDateTimeData&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::formatToValue(double, UDateDirection, UDateRelativeUnit, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::formatNumeric(double, URelativeDateTimeUnit, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::formatNumericImpl(double, URelativeDateTimeUnit, icu::FormattedRelativeDateTimeData&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::formatNumericToValue(double, URelativeDateTimeUnit, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::format(UDateDirection, UDateAbsoluteUnit, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::formatAbsoluteImpl(UDateDirection, UDateAbsoluteUnit, icu::FormattedRelativeDateTimeData&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::formatToValue(UDateDirection, UDateAbsoluteUnit, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::format(double, URelativeDateTimeUnit, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::formatRelativeImpl(double, URelativeDateTimeUnit, icu::FormattedRelativeDateTimeData&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::formatToValue(double, URelativeDateTimeUnit, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::combineDateAndTime(icu::UnicodeString const&, icu::UnicodeString const&, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::adjustForContext(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateTimeFormatter::checkNoAdjustForContext(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T _ureldatefmt_openResult",
    "type": "CPP"
  },
  {
    "name": "T _ureldatefmt_resultAsValue",
    "type": "CPP"
  },
  {
    "name": "T _ureldatefmt_closeResult",
    "type": "CPP"
  },
  {
    "name": "T _ureldatefmt_open",
    "type": "CPP"
  },
  {
    "name": "T _ureldatefmt_close",
    "type": "CPP"
  },
  {
    "name": "T _ureldatefmt_formatNumeric",
    "type": "CPP"
  },
  {
    "name": "T _ureldatefmt_formatNumericToResult",
    "type": "CPP"
  },
  {
    "name": "T _ureldatefmt_format",
    "type": "CPP"
  },
  {
    "name": "T _ureldatefmt_formatToResult",
    "type": "CPP"
  },
  {
    "name": "T _ureldatefmt_combineDateAndTime",
    "type": "CPP"
  },
  {
    "name": "T icu::RelativeDateFormat::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::RegexMatcher(icu::RegexPattern const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::init(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::init2(UText*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::RegexMatcher(icu::RegexPattern const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::RegexMatcher(icu::UnicodeString const&, icu::UnicodeString const&, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::RegexMatcher(icu::UnicodeString const&, icu::UnicodeString const&, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::RegexMatcher(UText*, UText*, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::RegexMatcher(UText*, UText*, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::RegexMatcher(icu::UnicodeString const&, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::RegexMatcher(icu::UnicodeString const&, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::RegexMatcher(UText*, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::RegexMatcher(UText*, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::~RegexMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::~RegexMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::~RegexMatcher()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::reset(UText*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::setStackLimit(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::appendReplacement(icu::UnicodeString&, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::appendReplacement(UText*, UText*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::appendGroup(int, UText*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::appendTail(icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::appendTail(UText*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::end(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::end(int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::end64(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::end64(int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::find()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::find(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::findUsingChunk(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::MatchAt(long long, signed char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::find(long long, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::MatchChunkAt(int, signed char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::group(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::group(int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::group(UText*, long long&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::group(int, UText*, long long&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::start64(int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::groupCount() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::hasAnchoringBounds() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::hasTransparentBounds() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::hitEnd() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::input() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::inputText() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::getInput(UText*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::lookingAt(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::resetPreserveRegion()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::lookingAt(long long, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::matches(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::matches(long long, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::pattern() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::region(long long, long long, long long, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::region(long long, long long, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::regionEnd() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::regionEnd64() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::regionStart() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::regionStart64() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::replaceAll(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::replaceAll(UText*, UText*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::replaceFirst(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::replaceFirst(UText*, UText*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::requireEnd() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::reset(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::reset(long long, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::refreshInputText(UText*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::setTrace(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::split(icu::UnicodeString const&, icu::UnicodeString*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::split(UText*, UText**, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::start(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::start(int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::start64(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::useAnchoringBounds(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::useTransparentBounds(signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::setTimeLimit(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::getTimeLimit() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::getStackLimit() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::setMatchCallback(signed char (*)(void const*, int), void const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::getMatchCallback(signed char (*&)(void const*, int), void const*&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::setFindProgressCallback(signed char (*)(void const*, long long), void const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::getFindProgressCallback(signed char (*&)(void const*, long long), void const*&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::resetStack()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::isWordBoundary(long long)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::isChunkWordBoundary(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::isUWordBoundary(long long)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::IncrementTime(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexMatcher::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RemoveTransliterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::RegexPattern()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::init()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::RegexPattern()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::RegexPattern(icu::RegexPattern const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::operator=(icu::RegexPattern const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::RegexPattern(icu::RegexPattern const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::zap()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::~RegexPattern()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::~RegexPattern()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::~RegexPattern()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::operator==(icu::RegexPattern const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::compile(icu::UnicodeString const&, unsigned int, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::compile(UText*, unsigned int, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::compile(icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::compile(UText*, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::compile(icu::UnicodeString const&, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::compile(UText*, unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::flags() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::matcher(icu::UnicodeString const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::matcher(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::matches(icu::UnicodeString const&, icu::UnicodeString const&, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::matches(UText*, UText*, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::pattern() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::patternText(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::groupNumberFromName(icu::UnicodeString const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::groupNumberFromName(char const*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::split(icu::UnicodeString const&, icu::UnicodeString*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::split(UText*, UText**, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::dumpOp(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::dumpPattern() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::RegexPattern::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::RuleBasedCollator(icu::RuleBasedCollator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::RuleBasedCollator(icu::RuleBasedCollator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::RuleBasedCollator(unsigned char const*, int, icu::RuleBasedCollator const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::adoptTailoring(icu::CollationTailoring*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::RuleBasedCollator(unsigned char const*, int, icu::RuleBasedCollator const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::RuleBasedCollator(icu::CollationCacheEntry const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::RuleBasedCollator(icu::CollationCacheEntry const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::~RuleBasedCollator()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::~RuleBasedCollator()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::~RuleBasedCollator()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::operator=(icu::RuleBasedCollator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::operator==(icu::Collator const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::hashCode() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::setLocales(icu::Locale const&, icu::Locale const&, icu::Locale const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::getLocale(ULocDataLocaleType, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::internalGetLocaleID(ULocDataLocaleType, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::getRules() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::getRules(UColRuleOption, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::getVersion(unsigned char*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::getTailoredSet(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::internalGetContractionsAndExpansions(icu::UnicodeSet*, icu::UnicodeSet*, signed char, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::internalAddContractions(int, icu::UnicodeSet&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::getDefaultSettings() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::getAttribute(UColAttribute, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::setAttribute(UColAttribute, UColAttributeValue, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::setFastLatinOptions(icu::CollationSettings&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::setMaxVariable(UColReorderCode, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::getMaxVariable() const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::getVariableTop(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::setVariableTop(char16_t const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::setVariableTop(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::setVariableTop(unsigned int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::getReorderCodes(int*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::setReorderCodes(int const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::compare(icu::UnicodeString const&, icu::UnicodeString const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::doCompare(char16_t const*, int, char16_t const*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::compare(icu::UnicodeString const&, icu::UnicodeString const&, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::compare(char16_t const*, int, char16_t const*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::compareUTF8(icu::StringPiece const&, icu::StringPiece const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::doCompare(unsigned char const*, int, unsigned char const*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::internalCompareUTF8(char const*, int, char const*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::compare(UCharIterator&, UCharIterator&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::getCollationKey(icu::UnicodeString const&, icu::CollationKey&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::getCollationKey(char16_t const*, int, icu::CollationKey&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::writeSortKey(char16_t const*, int, icu::SortKeyByteSink&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::getSortKey(icu::UnicodeString const&, unsigned char*, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::getSortKey(char16_t const*, int, unsigned char*, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::writeIdenticalLevel(char16_t const*, char16_t const*, icu::SortKeyByteSink&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::internalNextSortKeyPart(UCharIterator*, unsigned int*, unsigned char*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::internalGetCEs(icu::UnicodeString const&, icu::UVector64&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::internalGetShortDefinitionString(char const*, char*, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::isUnsafe(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::computeMaxExpansions(icu::CollationTailoring const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::initMaxExpansions(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::createCollationElementIterator(icu::UnicodeString const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::createCollationElementIterator(icu::CharacterIterator const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::RuleBasedCollator::getMaxExpansion(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ScientificNumberFormatter::createSuperscriptInstance(icu::DecimalFormat*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ScientificNumberFormatter::createInstance(icu::DecimalFormat*, icu::ScientificNumberFormatter::Style*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ScientificNumberFormatter::createSuperscriptInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ScientificNumberFormatter::createMarkupInstance(icu::DecimalFormat*, icu::UnicodeString const&, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ScientificNumberFormatter::createMarkupInstance(icu::Locale const&, icu::UnicodeString const&, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ScientificNumberFormatter::ScientificNumberFormatter(icu::DecimalFormat*, icu::ScientificNumberFormatter::Style*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ScientificNumberFormatter::SuperscriptStyle::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ScientificNumberFormatter::SuperscriptStyle::format(icu::UnicodeString const&, icu::FieldPositionIterator&, icu::UnicodeString const&, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ScientificNumberFormatter::MarkupStyle::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ScientificNumberFormatter::MarkupStyle::format(icu::UnicodeString const&, icu::FieldPositionIterator&, icu::UnicodeString const&, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ScientificNumberFormatter::ScientificNumberFormatter(icu::DecimalFormat*, icu::ScientificNumberFormatter::Style*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ScientificNumberFormatter::getPreExponent(icu::DecimalFormatSymbols const&, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ScientificNumberFormatter::ScientificNumberFormatter(icu::ScientificNumberFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ScientificNumberFormatter::ScientificNumberFormatter(icu::ScientificNumberFormatter const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ScientificNumberFormatter::~ScientificNumberFormatter()",
    "type": "CPP"
  },
  {
    "name": "T icu::ScientificNumberFormatter::~ScientificNumberFormatter()",
    "type": "CPP"
  },
  {
    "name": "T icu::ScientificNumberFormatter::~ScientificNumberFormatter()",
    "type": "CPP"
  },
  {
    "name": "T icu::ScientificNumberFormatter::format(icu::Formattable const&, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::ScriptSet()",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::ScriptSet()",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::~ScriptSet()",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::~ScriptSet()",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::ScriptSet(icu::ScriptSet const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::operator=(icu::ScriptSet const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::ScriptSet(icu::ScriptSet const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::operator==(icu::ScriptSet const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::test(UScriptCode, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::set(UScriptCode, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::reset(UScriptCode, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::Union(icu::ScriptSet const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::intersect(icu::ScriptSet const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::intersect(UScriptCode, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::intersects(icu::ScriptSet const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::contains(icu::ScriptSet const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::setAll()",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::resetAll()",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::countMembers() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::hashCode() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::nextSetBit(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::isEmpty() const",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::displayScripts(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::parseScripts(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ScriptSet::setScriptExtensions(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T _uhash_equalsScriptSet",
    "type": "CPP"
  },
  {
    "name": "T _uhash_compareScriptSet",
    "type": "CPP"
  },
  {
    "name": "T _uhash_hashScriptSet",
    "type": "CPP"
  },
  {
    "name": "T _uhash_deleteScriptSet",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::SearchIterator(icu::SearchIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::~SearchIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::~SearchIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::~SearchIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::setAttribute(USearchAttribute, USearchAttributeValue, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::getAttribute(USearchAttribute) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::getMatchedStart() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::getMatchedLength() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::getMatchedText(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::setBreakIterator(icu::BreakIterator*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::getBreakIterator() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::setText(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::setText(icu::CharacterIterator&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::getText() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::operator==(icu::SearchIterator const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::first(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::following(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::last(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::preceding(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::next(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::setMatchNotFound()",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::previous(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::SearchIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::SearchIterator(icu::UnicodeString const&, icu::BreakIterator*)",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::SearchIterator(icu::CharacterIterator&, icu::BreakIterator*)",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::operator=(icu::SearchIterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::setMatchLength(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::SearchIterator::setMatchStart(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::SelectFormat::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::SelectFormat::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SelectFormat::SelectFormat(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SelectFormat::applyPattern(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SelectFormat::SelectFormat(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SelectFormat::SelectFormat(icu::SelectFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SelectFormat::SelectFormat(icu::SelectFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SelectFormat::~SelectFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::SelectFormat::~SelectFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::SelectFormat::~SelectFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::SelectFormat::format(icu::Formattable const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SelectFormat::format(icu::UnicodeString const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SelectFormat::findSubMessage(icu::MessagePattern const&, int, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SelectFormat::toPattern(icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SelectFormat::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SelectFormat::operator=(icu::SelectFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SelectFormat::operator==(icu::Format const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SelectFormat::operator!=(icu::Format const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SelectFormat::parseObject(icu::UnicodeString const&, icu::Formattable&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedBreakIterator::SharedBreakIterator(icu::BreakIterator*)",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedBreakIterator::SharedBreakIterator(icu::BreakIterator*)",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedBreakIterator::~SharedBreakIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedBreakIterator::~SharedBreakIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::SharedBreakIterator::~SharedBreakIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::SimpleTimeZone(int, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::clearTransitionRules()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::SimpleTimeZone(int, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::SimpleTimeZone(int, icu::UnicodeString const&, signed char, signed char, signed char, int, signed char, signed char, signed char, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::construct(int, signed char, signed char, signed char, int, icu::SimpleTimeZone::TimeMode, signed char, signed char, signed char, int, icu::SimpleTimeZone::TimeMode, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::SimpleTimeZone(int, icu::UnicodeString const&, signed char, signed char, signed char, int, signed char, signed char, signed char, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::SimpleTimeZone(int, icu::UnicodeString const&, signed char, signed char, signed char, int, signed char, signed char, signed char, int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::SimpleTimeZone(int, icu::UnicodeString const&, signed char, signed char, signed char, int, signed char, signed char, signed char, int, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::SimpleTimeZone(int, icu::UnicodeString const&, signed char, signed char, signed char, int, icu::SimpleTimeZone::TimeMode, signed char, signed char, signed char, int, icu::SimpleTimeZone::TimeMode, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::SimpleTimeZone(int, icu::UnicodeString const&, signed char, signed char, signed char, int, icu::SimpleTimeZone::TimeMode, signed char, signed char, signed char, int, icu::SimpleTimeZone::TimeMode, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::decodeRules(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::~SimpleTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::deleteTransitionRules()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::~SimpleTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::~SimpleTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::SimpleTimeZone(icu::SimpleTimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::operator=(icu::SimpleTimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::SimpleTimeZone(icu::SimpleTimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::operator==(icu::TimeZone const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::setStartYear(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::setStartRule(int, int, int, int, icu::SimpleTimeZone::TimeMode, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::decodeStartRule(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::setStartRule(int, int, int, icu::SimpleTimeZone::TimeMode, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::setStartRule(int, int, int, int, icu::SimpleTimeZone::TimeMode, signed char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::setEndRule(int, int, int, int, icu::SimpleTimeZone::TimeMode, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::decodeEndRule(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::setEndRule(int, int, int, icu::SimpleTimeZone::TimeMode, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::setEndRule(int, int, int, int, icu::SimpleTimeZone::TimeMode, signed char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::getOffset(unsigned char, int, int, int, unsigned char, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::getOffset(unsigned char, int, int, int, unsigned char, int, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::getOffset(unsigned char, int, int, int, unsigned char, int, int, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::compareToRule(signed char, signed char, signed char, signed char, signed char, int, int, icu::SimpleTimeZone::EMode, signed char, signed char, signed char, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::getOffsetFromLocal(double, int, int, int&, int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::getRawOffset() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::setRawOffset(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::setDSTSavings(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::getDSTSavings() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::useDaylightTime() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::inDaylightTime(double, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::hasSameRules(icu::TimeZone const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::getNextTransition(double, signed char, icu::TimeZoneTransition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::checkTransitionRules(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::getPreviousTransition(double, signed char, icu::TimeZoneTransition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::initTransitionRules(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::countTransitionRules(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleTimeZone::getTimeZoneRules(icu::InitialTimeZoneRule const*&, icu::TimeZoneRule const**, int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::NSOverride::~NSOverride()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::NSOverride::~NSOverride()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::NSOverride::free()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::getNumberFormatByIndex(UDateFormatField) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::~SimpleDateFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::freeFastNumberFormatters()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::~SimpleDateFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::~SimpleDateFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::initializeBooleanAttributes()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::construct(icu::DateFormat::EStyle, icu::DateFormat::EStyle, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::initializeDefaultCentury()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::initializeCalendar(icu::TimeZone*, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::initialize(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(icu::UnicodeString const&, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::processOverrideString(icu::Locale const&, icu::UnicodeString const&, signed char, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(icu::UnicodeString const&, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(icu::UnicodeString const&, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(icu::UnicodeString const&, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(icu::UnicodeString const&, icu::UnicodeString const&, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(icu::UnicodeString const&, icu::UnicodeString const&, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(icu::UnicodeString const&, icu::DateFormatSymbols*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(icu::UnicodeString const&, icu::DateFormatSymbols*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(icu::UnicodeString const&, icu::DateFormatSymbols const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(icu::UnicodeString const&, icu::DateFormatSymbols const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(icu::DateFormat::EStyle, icu::DateFormat::EStyle, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(icu::DateFormat::EStyle, icu::DateFormat::EStyle, icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(icu::SimpleDateFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::operator=(icu::SimpleDateFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::SimpleDateFormat(icu::SimpleDateFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::initFastNumberFormatters(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::operator==(icu::Format const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::parsePattern()",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::initNumberFormatters(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::parseAmbiguousDatesAsAfter(double, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::format(icu::Calendar&, icu::UnicodeString&, icu::FieldPosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::_format(icu::Calendar&, icu::UnicodeString&, icu::FieldPositionHandler&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::format(icu::Calendar&, icu::UnicodeString&, icu::FieldPositionIterator*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::subFormat(icu::UnicodeString&, char16_t, int, UDisplayContext, int, icu::FieldPositionHandler&, icu::Calendar&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::isSyntaxChar(char16_t)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::getLevelFromChar(char16_t)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::zeroPaddingNumber(icu::NumberFormat const*, icu::UnicodeString&, int, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::tzFormat(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::getSmpFmtLocale() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::adoptNumberFormat(icu::NumberFormat*)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::adoptNumberFormat(icu::UnicodeString const&, icu::NumberFormat*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::getNumberFormatForField(char16_t) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::isNumeric(char16_t, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::isAtNumericField(icu::UnicodeString const&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::isAfterNonNumericField(icu::UnicodeString const&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::parse(icu::UnicodeString const&, icu::Calendar&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::subParse(icu::UnicodeString const&, int&, char16_t, int, signed char, signed char, signed char*, int&, icu::Calendar&, int, icu::MessageFormat*, UTimeZoneFormatTimeType*, int*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::matchLiterals(icu::UnicodeString const&, int&, icu::UnicodeString const&, int&, signed char, signed char, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::matchQuarterString(icu::UnicodeString const&, int, UCalendarDateFields, icu::UnicodeString const*, int, icu::Calendar&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::matchDayPeriodStrings(icu::UnicodeString const&, int, icu::UnicodeString const*, int, int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::matchString(icu::UnicodeString const&, int, UCalendarDateFields, icu::UnicodeString const*, int, icu::UnicodeString const*, icu::Calendar&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::set2DigitYearStart(double, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::parseInt(icu::UnicodeString const&, icu::Formattable&, icu::ParsePosition&, signed char, icu::NumberFormat const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::checkIntSuffix(icu::UnicodeString const&, int, int, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::countDigits(icu::UnicodeString const&, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::parseInt(icu::UnicodeString const&, icu::Formattable&, int, icu::ParsePosition&, signed char, icu::NumberFormat const*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::translatePattern(icu::UnicodeString const&, icu::UnicodeString&, icu::UnicodeString const&, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::toPattern(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::toLocalizedPattern(icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::applyPattern(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::applyLocalizedPattern(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::getDateFormatSymbols() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::adoptDateFormatSymbols(icu::DateFormatSymbols*)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::setDateFormatSymbols(icu::DateFormatSymbols const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::getTimeZoneFormat() const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::adoptTimeZoneFormat(icu::TimeZoneFormat*)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::setTimeZoneFormat(icu::TimeZoneFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::adoptCalendar(icu::Calendar*)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::setContext(UDisplayContext, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::isFieldUnitIgnored(UCalendarDateFields) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::isFieldUnitIgnored(icu::UnicodeString const&, UCalendarDateFields)",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::compareSimpleAffix(icu::UnicodeString const&, icu::UnicodeString const&, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::skipPatternWhiteSpace(icu::UnicodeString const&, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::SimpleDateFormat::skipUWhiteSpace(icu::UnicodeString const&, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::CollationKey()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::CollationKey()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::CollationKey(unsigned char const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::reallocate(int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::setToBogus()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::CollationKey(unsigned char const*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::CollationKey(icu::CollationKey const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::CollationKey(icu::CollationKey const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::~CollationKey()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::~CollationKey()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::~CollationKey()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::setLength(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::operator==(icu::CollationKey const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::operator=(icu::CollationKey const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::compareTo(icu::CollationKey const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::compareTo(icu::CollationKey const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::CollationKey::hashCode() const",
    "type": "CPP"
  },
  {
    "name": "T _ucol_keyHashCode",
    "type": "CPP"
  },
  {
    "name": "T icu::StandardPlural::getKeyword(icu::StandardPlural::Form)",
    "type": "CPP"
  },
  {
    "name": "T icu::StandardPlural::indexOrNegativeFromString(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::StandardPlural::indexOrNegativeFromString(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StandardPlural::indexFromString(char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StandardPlural::indexFromString(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeReplacer::~UnicodeReplacer()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeReplacer::~UnicodeReplacer()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeReplacer::~UnicodeReplacer()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::StringSearch(icu::UnicodeString const&, icu::UnicodeString const&, icu::Locale const&, icu::BreakIterator*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::StringSearch(icu::UnicodeString const&, icu::UnicodeString const&, icu::Locale const&, icu::BreakIterator*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::StringSearch(icu::UnicodeString const&, icu::UnicodeString const&, icu::RuleBasedCollator*, icu::BreakIterator*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::StringSearch(icu::UnicodeString const&, icu::UnicodeString const&, icu::RuleBasedCollator*, icu::BreakIterator*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::StringSearch(icu::UnicodeString const&, icu::CharacterIterator&, icu::Locale const&, icu::BreakIterator*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::StringSearch(icu::UnicodeString const&, icu::CharacterIterator&, icu::Locale const&, icu::BreakIterator*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::StringSearch(icu::UnicodeString const&, icu::CharacterIterator&, icu::RuleBasedCollator*, icu::BreakIterator*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::StringSearch(icu::UnicodeString const&, icu::CharacterIterator&, icu::RuleBasedCollator*, icu::BreakIterator*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::StringSearch(icu::StringSearch const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::StringSearch(icu::StringSearch const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::~StringSearch()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::~StringSearch()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::~StringSearch()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::operator=(icu::StringSearch const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::operator==(icu::SearchIterator const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::setOffset(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::getOffset() const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::setText(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::setText(icu::CharacterIterator&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::getCollator() const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::setCollator(icu::RuleBasedCollator*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::setPattern(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::getPattern() const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::reset()",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::safeClone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::handleNext(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::StringSearch::handlePrev(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TaiwanCalendar::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::loadRule(UResourceBundle const*, icu::UnicodeString const&, UResourceBundle*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::getUnknown()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::getGMT()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::TimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::TimeZone(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::~TimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::~TimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::~TimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::TimeZone(icu::TimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::operator=(icu::TimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::operator==(icu::TimeZone const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::createTimeZone(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::createCustomTimeZone(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::detectHostTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::createDefault()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::adoptDefault(icu::TimeZone*)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::setDefault(icu::TimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::getOffset(double, signed char, int&, int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::createTimeZoneIDEnumeration(USystemTimeZoneType, char const*, int const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::createEnumeration()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::createEnumeration(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::createEnumeration(char const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::countEquivalentIDs(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::getEquivalentID(icu::UnicodeString const&, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::findID(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::dereferOlsonLink(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::getRegion(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::getRegion(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::getRegion(icu::UnicodeString const&, char*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::getDisplayName(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::getDisplayName(signed char, icu::TimeZone::EDisplayType, icu::Locale const&, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::getDisplayName(icu::Locale const&, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::getDisplayName(signed char, icu::TimeZone::EDisplayType, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::getDSTSavings() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::parseCustomID(icu::UnicodeString const&, int&, int&, int&, int&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::formatCustomID(int, int, int, signed char, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::getCustomID(icu::UnicodeString const&, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::hasSameRules(icu::TimeZone const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::getTZDataVersion(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::getCanonicalID(icu::UnicodeString const&, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::getCanonicalID(icu::UnicodeString const&, icu::UnicodeString&, signed char&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::getWindowsID(icu::UnicodeString const&, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZone::getIDForWindowsID(icu::UnicodeString const&, char const*, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TitlecaseTransliterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnit::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnit::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnit::createInstance(icu::TimeUnit::UTimeUnitFields, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnit::TimeUnit(icu::TimeUnit::UTimeUnitFields)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnit::TimeUnit(icu::TimeUnit::UTimeUnitFields)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnit::TimeUnit(icu::TimeUnit const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnit::TimeUnit(icu::TimeUnit const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnit::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnit::operator=(icu::TimeUnit const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnit::getTimeUnitField() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnit::~TimeUnit()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnit::~TimeUnit()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnit::~TimeUnit()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitAmount::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitAmount::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitAmount::TimeUnitAmount(icu::Formattable const&, icu::TimeUnit::UTimeUnitFields, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitAmount::TimeUnitAmount(icu::Formattable const&, icu::TimeUnit::UTimeUnitFields, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitAmount::TimeUnitAmount(double, icu::TimeUnit::UTimeUnitFields, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitAmount::TimeUnitAmount(double, icu::TimeUnit::UTimeUnitFields, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitAmount::TimeUnitAmount(icu::TimeUnitAmount const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitAmount::TimeUnitAmount(icu::TimeUnitAmount const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitAmount::operator=(icu::TimeUnitAmount const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitAmount::operator==(icu::UObject const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitAmount::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitAmount::~TimeUnitAmount()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitAmount::~TimeUnitAmount()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitAmount::~TimeUnitAmount()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitAmount::getTimeUnit() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitAmount::getTimeUnitField() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::TimeUnitFormat(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::create(UTimeUnitFormatStyle, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::TimeUnitFormat(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::TimeUnitFormat(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::TimeUnitFormat(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::TimeUnitFormat(icu::Locale const&, UTimeUnitFormatStyle, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::TimeUnitFormat(icu::Locale const&, UTimeUnitFormatStyle, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::TimeUnitFormat(icu::TimeUnitFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::initHash(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::copyHash(icu::Hashtable const*, icu::Hashtable*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::TimeUnitFormat(icu::TimeUnitFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::~TimeUnitFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::deleteHash(icu::Hashtable*)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::~TimeUnitFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::~TimeUnitFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::operator=(icu::TimeUnitFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::parseObject(icu::UnicodeString const&, icu::Formattable&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::setup(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::initDataMembers(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::readFromCurrentLocale(UTimeUnitFormatStyle, char const*, icu::UVector const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::checkConsistency(UTimeUnitFormatStyle, char const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::searchInLocaleChain(UTimeUnitFormatStyle, char const*, char const*, icu::TimeUnit::UTimeUnitFields, icu::UnicodeString const&, char const*, icu::Hashtable*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::getTimeUnitName(icu::TimeUnit::UTimeUnitFields, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::setLocale(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeUnitFormat::setNumberFormat(icu::NumberFormat const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::LowercaseTransliterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::UppercaseTransliterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::Transliterator(icu::UnicodeString const&, icu::UnicodeFilter*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::~Transliterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::~Transliterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::~Transliterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::Transliterator(icu::Transliterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::operator=(icu::Transliterator const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::adoptFilter(icu::UnicodeFilter*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::transliterate(icu::Replaceable&, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::transliterate(icu::Replaceable&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::transliterate(icu::Replaceable&, UTransPosition&, icu::UnicodeString const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::_transliterate(icu::Replaceable&, UTransPosition&, icu::UnicodeString const*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::transliterate(icu::Replaceable&, UTransPosition&, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::transliterate(icu::Replaceable&, UTransPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::finishTransliteration(icu::Replaceable&, UTransPosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::filteredTransliterate(icu::Replaceable&, UTransPosition&, signed char, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::filteredTransliterate(icu::Replaceable&, UTransPosition&, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::setMaximumContextLength(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::getID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::getDisplayName(icu::UnicodeString const&, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::getDisplayName(icu::UnicodeString const&, icu::Locale const&, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::getFilter() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::orphanFilter()",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::createInverse(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::createInstance(icu::UnicodeString const&, UTransDirection, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::createInstance(icu::UnicodeString const&, UTransDirection, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::createBasicInstance(icu::UnicodeString const&, icu::UnicodeString const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::initializeRegistry(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::createFromRules(icu::UnicodeString const&, icu::UnicodeString const&, UTransDirection, UParseError&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::toRules(icu::UnicodeString&, signed char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::countElements() const",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::getElement(int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::getSourceSet(icu::UnicodeSet&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::handleGetSourceSet(icu::UnicodeSet&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::getTargetSet(icu::UnicodeSet&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::registerFactory(icu::UnicodeString const&, icu::Transliterator* (*)(icu::UnicodeString const&, icu::Transliterator::Token), icu::Transliterator::Token)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::_registerFactory(icu::UnicodeString const&, icu::Transliterator* (*)(icu::UnicodeString const&, icu::Transliterator::Token), icu::Transliterator::Token)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::_registerSpecialInverse(icu::UnicodeString const&, icu::UnicodeString const&, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::registerInstance(icu::Transliterator*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::_registerInstance(icu::Transliterator*)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::registerAlias(icu::UnicodeString const&, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::_registerAlias(icu::UnicodeString const&, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::unregister(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::countAvailableIDs()",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::getAvailableID(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::getAvailableIDs(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::countAvailableSources()",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::_countAvailableSources()",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::getAvailableSource(int, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::_getAvailableSource(int, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::countAvailableTargets(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::_countAvailableTargets(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::getAvailableTarget(int, icu::UnicodeString const&, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::_getAvailableTarget(int, icu::UnicodeString const&, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::countAvailableVariants(icu::UnicodeString const&, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::_countAvailableVariants(icu::UnicodeString const&, icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::getAvailableVariant(int, icu::UnicodeString const&, icu::UnicodeString const&, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::Transliterator::_getAvailableVariant(int, icu::UnicodeString const&, icu::UnicodeString const&, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::TimeZoneFormat(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::initGMTPattern(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::expandOffsetPattern(icu::UnicodeString const&, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::truncateOffsetPattern(icu::UnicodeString const&, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::initGMTOffsetPatterns(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::toCodePoints(icu::UnicodeString const&, int*, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::TimeZoneFormat(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::TimeZoneFormat(icu::TimeZoneFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::operator=(icu::TimeZoneFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::TimeZoneFormat(icu::TimeZoneFormat const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::~TimeZoneFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::~TimeZoneFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::~TimeZoneFormat()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::operator==(icu::Format const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::createInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::getTimeZoneNames() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::adoptTimeZoneNames(icu::TimeZoneNames*)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::setTimeZoneNames(icu::TimeZoneNames const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::setDefaultParseOptions(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::getDefaultParseOptions() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::getGMTPattern(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::setGMTPattern(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::getGMTOffsetPattern(UTimeZoneFormatGMTOffsetPatternType, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::setGMTOffsetPattern(UTimeZoneFormatGMTOffsetPatternType, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseOffsetPattern(icu::UnicodeString const&, icu::TimeZoneFormat::OffsetFields, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::checkAbuttingHoursAndMinutes()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::getGMTOffsetDigits(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::setGMTOffsetDigits(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::getGMTZeroFormat(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::setGMTZeroFormat(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::format(UTimeZoneFormatStyle, icu::TimeZone const&, double, icu::UnicodeString&, UTimeZoneFormatTimeType*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::formatGeneric(icu::TimeZone const&, int, double, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::formatSpecific(icu::TimeZone const&, UTimeZoneNameType, UTimeZoneNameType, double, icu::UnicodeString&, UTimeZoneFormatTimeType*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::formatExemplarLocation(icu::TimeZone const&, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::formatOffsetLocalizedGMT(int, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::formatOffsetShortLocalizedGMT(int, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::formatOffsetISO8601Basic(int, signed char, signed char, signed char, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::formatOffsetISO8601Extended(int, signed char, signed char, signed char, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::format(icu::Formattable const&, icu::UnicodeString&, icu::FieldPosition&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parse(UTimeZoneFormatStyle, icu::UnicodeString const&, icu::ParsePosition&, UTimeZoneFormatTimeType*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parse(UTimeZoneFormatStyle, icu::UnicodeString const&, icu::ParsePosition&, int, UTimeZoneFormatTimeType*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseOffsetLocalizedGMT(icu::UnicodeString const&, icu::ParsePosition&, signed char, signed char*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::createTimeZoneForOffset(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseOffsetLocalizedGMT(icu::UnicodeString const&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseOffsetShortLocalizedGMT(icu::UnicodeString const&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseOffsetISO8601(icu::UnicodeString const&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseOffsetISO8601(icu::UnicodeString const&, icu::ParsePosition&, signed char, signed char*) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::getTimeType(UTimeZoneNameType)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::getTimeZoneID(icu::TimeZoneNames::MatchInfoCollection const*, int, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::getTZDBTimeZoneNames(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::getTimeZoneGenericNames(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseZoneID(icu::UnicodeString const&, icu::ParsePosition&, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseShortZoneID(icu::UnicodeString const&, icu::ParsePosition&, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseExemplarLocation(icu::UnicodeString const&, icu::ParsePosition&, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseObject(icu::UnicodeString const&, icu::Formattable&, icu::ParsePosition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::formatOffsetISO8601(int, signed char, signed char, signed char, signed char, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::formatOffsetLocalizedGMT(int, signed char, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::appendOffsetDigits(icu::UnicodeString&, int, unsigned char) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseAsciiOffsetFields(icu::UnicodeString const&, icu::ParsePosition&, char16_t, icu::TimeZoneFormat::OffsetFields, icu::TimeZoneFormat::OffsetFields)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseAbuttingAsciiOffsetFields(icu::UnicodeString const&, icu::ParsePosition&, icu::TimeZoneFormat::OffsetFields, icu::TimeZoneFormat::OffsetFields, signed char)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseOffsetLocalizedGMTPattern(icu::UnicodeString const&, int, signed char, int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseOffsetDefaultLocalizedGMT(icu::UnicodeString const&, int, int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseOffsetFields(icu::UnicodeString const&, int, signed char, int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseOffsetFieldsWithPattern(icu::UnicodeString const&, int, icu::UVector*, signed char, int&, int&, int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits(icu::UnicodeString const&, int, unsigned char, unsigned char, unsigned short, unsigned short, int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseAbuttingOffsetFields(icu::UnicodeString const&, int, int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseSingleLocalizedDigit(icu::UnicodeString const&, int, int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::parseDefaultOffsetFields(icu::UnicodeString const&, int, char16_t, int&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::formatOffsetWithAsciiDigits(int, char16_t, icu::TimeZoneFormat::OffsetFields, icu::TimeZoneFormat::OffsetFields, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneFormat::unquote(icu::UnicodeString const&, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneGenericNames::TimeZoneGenericNames()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneGenericNames::TimeZoneGenericNames()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneGenericNames::~TimeZoneGenericNames()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneGenericNames::~TimeZoneGenericNames()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneGenericNames::~TimeZoneGenericNames()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneGenericNames::createInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneGenericNames::operator==(icu::TimeZoneGenericNames const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneGenericNames::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneGenericNames::getDisplayName(icu::TimeZone const&, UTimeZoneGenericNameType, double, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneGenericNames::getGenericLocationName(icu::UnicodeString const&, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneGenericNames::findBestMatch(icu::UnicodeString const&, int, unsigned int, icu::UnicodeString&, UTimeZoneFormatTimeType&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::~TimeZoneNames()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::~TimeZoneNames()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::~TimeZoneNames()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::createInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::createTZDBInstance(icu::Locale const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::getExemplarLocationName(icu::UnicodeString const&, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::getDisplayName(icu::UnicodeString const&, UTimeZoneNameType, double, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::loadAllDisplayNames(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::getDisplayNames(icu::UnicodeString const&, UTimeZoneNameType const*, int, double, icu::UnicodeString*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::MatchInfoCollection::MatchInfoCollection()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::MatchInfoCollection::MatchInfoCollection()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::MatchInfoCollection::~MatchInfoCollection()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::MatchInfoCollection::~MatchInfoCollection()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::MatchInfoCollection::~MatchInfoCollection()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::MatchInfoCollection::addZone(UTimeZoneNameType, int, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::MatchInfoCollection::matches(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::MatchInfoCollection::addMetaZone(UTimeZoneNameType, int, icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::MatchInfoCollection::size() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::MatchInfoCollection::getNameTypeAt(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::MatchInfoCollection::getTimeZoneIDAt(int, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneNames::MatchInfoCollection::getMetaZoneIDAt(int, icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TextTrieMap::TextTrieMap(signed char, void (*)(void*))",
    "type": "CPP"
  },
  {
    "name": "T icu::TextTrieMap::TextTrieMap(signed char, void (*)(void*))",
    "type": "CPP"
  },
  {
    "name": "T icu::TextTrieMap::~TextTrieMap()",
    "type": "CPP"
  },
  {
    "name": "T icu::TextTrieMap::~TextTrieMap()",
    "type": "CPP"
  },
  {
    "name": "T icu::TextTrieMap::~TextTrieMap()",
    "type": "CPP"
  },
  {
    "name": "T icu::TextTrieMap::isEmpty() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TextTrieMap::put(icu::UnicodeString const&, void*, icu::ZNStringPool&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ZNStringPool::get(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TextTrieMap::put(char16_t const*, void*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TextTrieMap::putImpl(icu::UnicodeString const&, void*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TextTrieMap::addChildNode(icu::CharacterNode*, char16_t, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TextTrieMap::growNodes()",
    "type": "CPP"
  },
  {
    "name": "T icu::TextTrieMap::getChildNode(icu::CharacterNode*, char16_t) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TextTrieMap::buildTrie(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TextTrieMap::search(icu::UnicodeString const&, int, icu::TextTrieMapSearchResultHandler*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TextTrieMap::search(icu::CharacterNode*, icu::UnicodeString const&, int, int, icu::TextTrieMapSearchResultHandler*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::ZNStringPool::ZNStringPool(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ZNStringPool::ZNStringPool(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ZNStringPool::~ZNStringPool()",
    "type": "CPP"
  },
  {
    "name": "T icu::ZNStringPool::~ZNStringPool()",
    "type": "CPP"
  },
  {
    "name": "T icu::ZNStringPool::get(char16_t const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ZNStringPool::adopt(char16_t const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ZNStringPool::freeze()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneRule::TimeZoneRule(icu::UnicodeString const&, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneRule::TimeZoneRule(icu::TimeZoneRule const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneRule::~TimeZoneRule()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneRule::~TimeZoneRule()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneRule::~TimeZoneRule()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneRule::operator=(icu::TimeZoneRule const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneRule::operator==(icu::TimeZoneRule const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneRule::operator!=(icu::TimeZoneRule const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneRule::getName(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneRule::getRawOffset() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneRule::getDSTSavings() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneRule::isEquivalentTo(icu::TimeZoneRule const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::InitialTimeZoneRule::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::InitialTimeZoneRule::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::InitialTimeZoneRule::InitialTimeZoneRule(icu::UnicodeString const&, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::InitialTimeZoneRule::InitialTimeZoneRule(icu::UnicodeString const&, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::InitialTimeZoneRule::InitialTimeZoneRule(icu::InitialTimeZoneRule const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::InitialTimeZoneRule::InitialTimeZoneRule(icu::InitialTimeZoneRule const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::InitialTimeZoneRule::~InitialTimeZoneRule()",
    "type": "CPP"
  },
  {
    "name": "T icu::InitialTimeZoneRule::~InitialTimeZoneRule()",
    "type": "CPP"
  },
  {
    "name": "T icu::InitialTimeZoneRule::~InitialTimeZoneRule()",
    "type": "CPP"
  },
  {
    "name": "T icu::InitialTimeZoneRule::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::InitialTimeZoneRule::operator=(icu::InitialTimeZoneRule const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::InitialTimeZoneRule::operator==(icu::TimeZoneRule const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::InitialTimeZoneRule::operator!=(icu::TimeZoneRule const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::InitialTimeZoneRule::isEquivalentTo(icu::TimeZoneRule const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::InitialTimeZoneRule::getFirstStart(int, int, double&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::InitialTimeZoneRule::getFinalStart(int, int, double&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::InitialTimeZoneRule::getNextStart(double, int, int, signed char, double&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::InitialTimeZoneRule::getPreviousStart(double, int, int, signed char, double&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::AnnualTimeZoneRule(icu::UnicodeString const&, int, int, icu::DateTimeRule const&, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::AnnualTimeZoneRule(icu::UnicodeString const&, int, int, icu::DateTimeRule const&, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::AnnualTimeZoneRule(icu::UnicodeString const&, int, int, icu::DateTimeRule*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::AnnualTimeZoneRule(icu::UnicodeString const&, int, int, icu::DateTimeRule*, int, int)",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::AnnualTimeZoneRule(icu::AnnualTimeZoneRule const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::AnnualTimeZoneRule(icu::AnnualTimeZoneRule const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::~AnnualTimeZoneRule()",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::~AnnualTimeZoneRule()",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::~AnnualTimeZoneRule()",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::operator=(icu::AnnualTimeZoneRule const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::operator==(icu::TimeZoneRule const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::operator!=(icu::TimeZoneRule const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::getRule() const",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::getStartYear() const",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::getEndYear() const",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::getStartInYear(int, int, int, double&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::isEquivalentTo(icu::TimeZoneRule const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::getFirstStart(int, int, double&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::getFinalStart(int, int, double&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::getNextStart(double, int, int, signed char, double&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::AnnualTimeZoneRule::getPreviousStart(double, int, int, signed char, double&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(icu::UnicodeString const&, int, int, double const*, int, icu::DateTimeRule::TimeRuleType)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::initStartTimes(double const*, int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(icu::UnicodeString const&, int, int, double const*, int, icu::DateTimeRule::TimeRuleType)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(icu::TimeArrayTimeZoneRule const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(icu::TimeArrayTimeZoneRule const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::~TimeArrayTimeZoneRule()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::~TimeArrayTimeZoneRule()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::~TimeArrayTimeZoneRule()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::operator=(icu::TimeArrayTimeZoneRule const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::operator==(icu::TimeZoneRule const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::operator!=(icu::TimeZoneRule const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::getTimeType() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::getStartTimeAt(int, double&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::countStartTimes() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::isEquivalentTo(icu::TimeZoneRule const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::getFirstStart(int, int, double&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::getUTC(double, int, int) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::getFinalStart(int, int, double&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::getNextStart(double, int, int, signed char, double&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeArrayTimeZoneRule::getPreviousStart(double, int, int, signed char, double&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::TimeZoneTransition(double, icu::TimeZoneRule const&, icu::TimeZoneRule const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::TimeZoneTransition(double, icu::TimeZoneRule const&, icu::TimeZoneRule const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::TimeZoneTransition()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::TimeZoneTransition()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::TimeZoneTransition(icu::TimeZoneTransition const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::TimeZoneTransition(icu::TimeZoneTransition const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::~TimeZoneTransition()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::~TimeZoneTransition()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::~TimeZoneTransition()",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::operator=(icu::TimeZoneTransition const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::setFrom(icu::TimeZoneRule const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::setTo(icu::TimeZoneRule const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::operator==(icu::TimeZoneTransition const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::operator!=(icu::TimeZoneTransition const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::setTime(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::adoptFrom(icu::TimeZoneRule*)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::adoptTo(icu::TimeZoneRule*)",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::getTime() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::getTo() const",
    "type": "CPP"
  },
  {
    "name": "T icu::TimeZoneTransition::getFrom() const",
    "type": "CPP"
  },
  {
    "name": "T _uameasfmt_open",
    "type": "CPP"
  },
  {
    "name": "T _uameasfmt_close",
    "type": "CPP"
  },
  {
    "name": "T _uameasfmt_format",
    "type": "CPP"
  },
  {
    "name": "T _uameasfmt_formatGetPosition",
    "type": "CPP"
  },
  {
    "name": "T _uameasfmt_formatMultiple",
    "type": "CPP"
  },
  {
    "name": "T _uameasfmt_formatMultipleForFields",
    "type": "CPP"
  },
  {
    "name": "T _uameasfmt_getUnitName",
    "type": "CPP"
  },
  {
    "name": "T _uameasfmt_getMultipleUnitNames",
    "type": "CPP"
  },
  {
    "name": "T _uameasfmt_getUnitsForUsage",
    "type": "CPP"
  },
  {
    "name": "T _uameasfmt_getUnitCategory",
    "type": "CPP"
  },
  {
    "name": "T _uatmufmt_open",
    "type": "CPP"
  },
  {
    "name": "T _uatmufmt_openWithNumberFormat",
    "type": "CPP"
  },
  {
    "name": "T _uatmufmt_close",
    "type": "CPP"
  },
  {
    "name": "T _uatmufmt_setNumberFormat",
    "type": "CPP"
  },
  {
    "name": "T _uatmufmt_format",
    "type": "CPP"
  },
  {
    "name": "T _uatmufmt_parse",
    "type": "CPP"
  },
  {
    "name": "T _uatmufmt_getTimePattern",
    "type": "CPP"
  },
  {
    "name": "T _uatmufmt_getListPattern",
    "type": "CPP"
  },
  {
    "name": "T _ucal_openTimeZoneIDEnumeration",
    "type": "CPP"
  },
  {
    "name": "T _ucal_openTimeZones",
    "type": "CPP"
  },
  {
    "name": "T _ucal_openCountryTimeZones",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getDefaultTimeZone",
    "type": "CPP"
  },
  {
    "name": "T _ucal_setDefaultTimeZone",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getDSTSavings",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getNow",
    "type": "CPP"
  },
  {
    "name": "T _ucal_open",
    "type": "CPP"
  },
  {
    "name": "T _ucal_close",
    "type": "CPP"
  },
  {
    "name": "T _ucal_clone",
    "type": "CPP"
  },
  {
    "name": "T _ucal_setTimeZone",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getTimeZoneID",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getTimeZoneDisplayName",
    "type": "CPP"
  },
  {
    "name": "T _ucal_inDaylightTime",
    "type": "CPP"
  },
  {
    "name": "T _ucal_setGregorianChange",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getGregorianChange",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getAttribute",
    "type": "CPP"
  },
  {
    "name": "T _ucal_setAttribute",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getAvailable",
    "type": "CPP"
  },
  {
    "name": "T _ucal_countAvailable",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getMillis",
    "type": "CPP"
  },
  {
    "name": "T _ucal_setMillis",
    "type": "CPP"
  },
  {
    "name": "T _ucal_setDate",
    "type": "CPP"
  },
  {
    "name": "T _ucal_setDateTime",
    "type": "CPP"
  },
  {
    "name": "T _ucal_equivalentTo",
    "type": "CPP"
  },
  {
    "name": "T _ucal_add",
    "type": "CPP"
  },
  {
    "name": "T _ucal_roll",
    "type": "CPP"
  },
  {
    "name": "T _ucal_get",
    "type": "CPP"
  },
  {
    "name": "T _ucal_set",
    "type": "CPP"
  },
  {
    "name": "T _ucal_isSet",
    "type": "CPP"
  },
  {
    "name": "T _ucal_clearField",
    "type": "CPP"
  },
  {
    "name": "T _ucal_clear",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getLimit",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getLocaleByType",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getTZDataVersion",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getCanonicalTimeZoneID",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getType",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getDayOfWeekType",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getWeekendTransition",
    "type": "CPP"
  },
  {
    "name": "T _ucal_isWeekend",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getFieldDifference",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getKeywordValuesForLocale",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getTimeZoneTransitionDate",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getWindowsTimeZoneID",
    "type": "CPP"
  },
  {
    "name": "T _ucal_getTimeZoneIDForWindowsID",
    "type": "CPP"
  },
  {
    "name": "T _uacal_getDayPeriod",
    "type": "CPP"
  },
  {
    "name": "T _ucol_openBinary",
    "type": "CPP"
  },
  {
    "name": "T _ucol_cloneBinary",
    "type": "CPP"
  },
  {
    "name": "T _ucol_safeClone",
    "type": "CPP"
  },
  {
    "name": "T _ucol_close",
    "type": "CPP"
  },
  {
    "name": "T _ucol_mergeSortkeys",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getSortKey",
    "type": "CPP"
  },
  {
    "name": "T _ucol_nextSortKeyPart",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getBound",
    "type": "CPP"
  },
  {
    "name": "T _ucol_setMaxVariable",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getMaxVariable",
    "type": "CPP"
  },
  {
    "name": "T _ucol_setVariableTop",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getVariableTop",
    "type": "CPP"
  },
  {
    "name": "T _ucol_restoreVariableTop",
    "type": "CPP"
  },
  {
    "name": "T _ucol_setAttribute",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getAttribute",
    "type": "CPP"
  },
  {
    "name": "T _ucol_setStrength",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getStrength",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getReorderCodes",
    "type": "CPP"
  },
  {
    "name": "T _ucol_setReorderCodes",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getEquivalentReorderCodes",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getVersion",
    "type": "CPP"
  },
  {
    "name": "T _ucol_strcollIter",
    "type": "CPP"
  },
  {
    "name": "T _ucol_strcoll",
    "type": "CPP"
  },
  {
    "name": "T _ucol_strcollUTF8",
    "type": "CPP"
  },
  {
    "name": "T _ucol_greater",
    "type": "CPP"
  },
  {
    "name": "T _ucol_greaterOrEqual",
    "type": "CPP"
  },
  {
    "name": "T _ucol_equal",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getUCAVersion",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getRules",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getRulesEx",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getLocale",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getLocaleByType",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getTailoredSet",
    "type": "CPP"
  },
  {
    "name": "T _ucol_equals",
    "type": "CPP"
  },
  {
    "name": "T icu::LocaleCacheKey<icu::CollationCacheEntry>::createObject(void const*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T _ucol_open",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getDisplayName",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getAvailable",
    "type": "CPP"
  },
  {
    "name": "T _ucol_countAvailable",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getKeywords",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getKeywordValues",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getKeywordValuesForLocale",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getFunctionalEquivalent",
    "type": "CPP"
  },
  {
    "name": "T _ucol_prepareShortStringOpen",
    "type": "CPP"
  },
  {
    "name": "T _ucol_openFromShortString",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getShortDefinitionString",
    "type": "CPP"
  },
  {
    "name": "T _ucol_normalizeShortDefinitionString",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getContractions",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getContractionsAndExpansions",
    "type": "CPP"
  },
  {
    "name": "T _ucol_tertiaryOrder",
    "type": "CPP"
  },
  {
    "name": "T _ucol_secondaryOrder",
    "type": "CPP"
  },
  {
    "name": "T _ucol_primaryOrder",
    "type": "CPP"
  },
  {
    "name": "T _ucol_openElements",
    "type": "CPP"
  },
  {
    "name": "T _ucol_closeElements",
    "type": "CPP"
  },
  {
    "name": "T _ucol_reset",
    "type": "CPP"
  },
  {
    "name": "T _ucol_next",
    "type": "CPP"
  },
  {
    "name": "T _ucol_nextProcessed",
    "type": "CPP"
  },
  {
    "name": "T _ucol_previous",
    "type": "CPP"
  },
  {
    "name": "T _ucol_previousProcessed",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getMaxExpansion",
    "type": "CPP"
  },
  {
    "name": "T _ucol_setText",
    "type": "CPP"
  },
  {
    "name": "T _ucol_getOffset",
    "type": "CPP"
  },
  {
    "name": "T _ucol_setOffset",
    "type": "CPP"
  },
  {
    "name": "T _ucsdet_open",
    "type": "CPP"
  },
  {
    "name": "T _ucsdet_close",
    "type": "CPP"
  },
  {
    "name": "T _ucsdet_setText",
    "type": "CPP"
  },
  {
    "name": "T _ucsdet_getName",
    "type": "CPP"
  },
  {
    "name": "T _ucsdet_getConfidence",
    "type": "CPP"
  },
  {
    "name": "T _ucsdet_getLanguage",
    "type": "CPP"
  },
  {
    "name": "T _ucsdet_detect",
    "type": "CPP"
  },
  {
    "name": "T _ucsdet_setDeclaredEncoding",
    "type": "CPP"
  },
  {
    "name": "T _ucsdet_detectAll",
    "type": "CPP"
  },
  {
    "name": "T _ucsdet_isInputFilterEnabled",
    "type": "CPP"
  },
  {
    "name": "T _ucsdet_enableInputFilter",
    "type": "CPP"
  },
  {
    "name": "T _ucsdet_getUChars",
    "type": "CPP"
  },
  {
    "name": "T _ucsdet_setDetectableCharset",
    "type": "CPP"
  },
  {
    "name": "T _ucsdet_getAllDetectableCharsets",
    "type": "CPP"
  },
  {
    "name": "T _ucsdet_getDetectableCharsets",
    "type": "CPP"
  },
  {
    "name": "T _udat_toCalendarDateField",
    "type": "CPP"
  },
  {
    "name": "T _udat_registerOpener",
    "type": "CPP"
  },
  {
    "name": "T _udat_unregisterOpener",
    "type": "CPP"
  },
  {
    "name": "T _udat_open",
    "type": "CPP"
  },
  {
    "name": "T _udat_close",
    "type": "CPP"
  },
  {
    "name": "T _udat_clone",
    "type": "CPP"
  },
  {
    "name": "T _udat_format",
    "type": "CPP"
  },
  {
    "name": "T _udat_formatCalendar",
    "type": "CPP"
  },
  {
    "name": "T _udat_formatForFields",
    "type": "CPP"
  },
  {
    "name": "T _udat_formatCalendarForFields",
    "type": "CPP"
  },
  {
    "name": "T _udat_parse",
    "type": "CPP"
  },
  {
    "name": "T _udat_parseCalendar",
    "type": "CPP"
  },
  {
    "name": "T _udat_isLenient",
    "type": "CPP"
  },
  {
    "name": "T _udat_setLenient",
    "type": "CPP"
  },
  {
    "name": "T _udat_getBooleanAttribute",
    "type": "CPP"
  },
  {
    "name": "T _udat_setBooleanAttribute",
    "type": "CPP"
  },
  {
    "name": "T _udat_getCalendar",
    "type": "CPP"
  },
  {
    "name": "T _udat_setCalendar",
    "type": "CPP"
  },
  {
    "name": "T _udat_getNumberFormatForField",
    "type": "CPP"
  },
  {
    "name": "T _udat_getNumberFormat",
    "type": "CPP"
  },
  {
    "name": "T _udat_adoptNumberFormatForFields",
    "type": "CPP"
  },
  {
    "name": "T _udat_setNumberFormat",
    "type": "CPP"
  },
  {
    "name": "T _udat_adoptNumberFormat",
    "type": "CPP"
  },
  {
    "name": "T _udat_getAvailable",
    "type": "CPP"
  },
  {
    "name": "T _udat_countAvailable",
    "type": "CPP"
  },
  {
    "name": "T _udat_get2DigitYearStart",
    "type": "CPP"
  },
  {
    "name": "T _udat_set2DigitYearStart",
    "type": "CPP"
  },
  {
    "name": "T _udat_toPattern",
    "type": "CPP"
  },
  {
    "name": "T _udat_applyPattern",
    "type": "CPP"
  },
  {
    "name": "T _udat_getSymbols",
    "type": "CPP"
  },
  {
    "name": "T _udat_countSymbols",
    "type": "CPP"
  },
  {
    "name": "T _udat_setSymbols",
    "type": "CPP"
  },
  {
    "name": "T _udat_getLocaleByType",
    "type": "CPP"
  },
  {
    "name": "T _udat_setContext",
    "type": "CPP"
  },
  {
    "name": "T _udat_getContext",
    "type": "CPP"
  },
  {
    "name": "T _udat_toPatternRelativeDate",
    "type": "CPP"
  },
  {
    "name": "T _udat_toPatternRelativeTime",
    "type": "CPP"
  },
  {
    "name": "T _udat_applyPatternRelative",
    "type": "CPP"
  },
  {
    "name": "T _udtitvfmt_openResult",
    "type": "CPP"
  },
  {
    "name": "T _udtitvfmt_resultAsValue",
    "type": "CPP"
  },
  {
    "name": "T _udtitvfmt_closeResult",
    "type": "CPP"
  },
  {
    "name": "T _udtitvfmt_open",
    "type": "CPP"
  },
  {
    "name": "T _udtitvfmt_close",
    "type": "CPP"
  },
  {
    "name": "T _udtitvfmt_format",
    "type": "CPP"
  },
  {
    "name": "T _udtitvfmt_setAttribute",
    "type": "CPP"
  },
  {
    "name": "T _udtitvfmt_formatToResult",
    "type": "CPP"
  },
  {
    "name": "T _udtitvfmt_setContext",
    "type": "CPP"
  },
  {
    "name": "T _udtitvfmt_getContext",
    "type": "CPP"
  },
  {
    "name": "T _udatintv_open",
    "type": "CPP"
  },
  {
    "name": "T _udatintv_close",
    "type": "CPP"
  },
  {
    "name": "T _udatintv_format",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_open",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_openEmpty",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_close",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_clone",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_getBestPattern",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_getBestPatternWithOptions",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_getSkeleton",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_getBaseSkeleton",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_addPattern",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_setAppendItemFormat",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_getAppendItemFormat",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_setAppendItemName",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_getAppendItemName",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_getFieldDisplayName",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_setDateTimeFormat",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_getDateTimeFormat",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_setDecimal",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_getDecimal",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_replaceFieldTypes",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_replaceFieldTypesWithOptions",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_openSkeletons",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_openBaseSkeletons",
    "type": "CPP"
  },
  {
    "name": "T _udatpg_getPatternForSkeleton",
    "type": "CPP"
  },
  {
    "name": "T _uadatpg_remapPatternWithOptions",
    "type": "CPP"
  },
  {
    "name": "T _ufieldpositer_open",
    "type": "CPP"
  },
  {
    "name": "T _ufieldpositer_close",
    "type": "CPP"
  },
  {
    "name": "T _ufieldpositer_next",
    "type": "CPP"
  },
  {
    "name": "T icu::UIterCollationIterator::~UIterCollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UIterCollationIterator::~UIterCollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UIterCollationIterator::~UIterCollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UIterCollationIterator::resetToOffset(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UIterCollationIterator::getOffset() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UIterCollationIterator::handleNextCE32(int&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UIterCollationIterator::handleGetTrailSurrogate()",
    "type": "CPP"
  },
  {
    "name": "T icu::UIterCollationIterator::nextCodePoint(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UIterCollationIterator::previousCodePoint(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UIterCollationIterator::forwardNumCodePoints(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UIterCollationIterator::backwardNumCodePoints(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUIterCollationIterator::~FCDUIterCollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUIterCollationIterator::~FCDUIterCollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUIterCollationIterator::~FCDUIterCollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUIterCollationIterator::resetToOffset(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUIterCollationIterator::getOffset() const",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUIterCollationIterator::handleNextCE32(int&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUIterCollationIterator::nextSegment(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUIterCollationIterator::switchToForward()",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUIterCollationIterator::handleGetTrailSurrogate()",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUIterCollationIterator::nextCodePoint(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUIterCollationIterator::previousCodePoint(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUIterCollationIterator::previousSegment(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUIterCollationIterator::switchToBackward()",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUIterCollationIterator::forwardNumCodePoints(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUIterCollationIterator::backwardNumCodePoints(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUIterCollationIterator::normalize(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T _ulistfmt_open",
    "type": "CPP"
  },
  {
    "name": "T _ulistfmt_close",
    "type": "CPP"
  },
  {
    "name": "T _ulistfmt_openResult",
    "type": "CPP"
  },
  {
    "name": "T _ulistfmt_resultAsValue",
    "type": "CPP"
  },
  {
    "name": "T _ulistfmt_closeResult",
    "type": "CPP"
  },
  {
    "name": "T _ulistfmt_format",
    "type": "CPP"
  },
  {
    "name": "T _ulistfmt_formatStringsToResult",
    "type": "CPP"
  },
  {
    "name": "T _ulocdata_open",
    "type": "CPP"
  },
  {
    "name": "T _ulocdata_close",
    "type": "CPP"
  },
  {
    "name": "T _ulocdata_setNoSubstitute",
    "type": "CPP"
  },
  {
    "name": "T _ulocdata_getNoSubstitute",
    "type": "CPP"
  },
  {
    "name": "T _ulocdata_getExemplarSet",
    "type": "CPP"
  },
  {
    "name": "T _ulocdata_getDelimiter",
    "type": "CPP"
  },
  {
    "name": "T _ulocdata_getMeasurementSystem",
    "type": "CPP"
  },
  {
    "name": "T _ulocdata_getPaperSize",
    "type": "CPP"
  },
  {
    "name": "T _ulocdata_getCLDRVersion",
    "type": "CPP"
  },
  {
    "name": "T _ulocdata_getLocaleDisplayPattern",
    "type": "CPP"
  },
  {
    "name": "T _ulocdata_getLocaleSeparator",
    "type": "CPP"
  },
  {
    "name": "T _u_formatMessage",
    "type": "CPP"
  },
  {
    "name": "T _u_vformatMessage",
    "type": "CPP"
  },
  {
    "name": "T _umsg_open",
    "type": "CPP"
  },
  {
    "name": "T _umsg_vformat",
    "type": "CPP"
  },
  {
    "name": "T _umsg_close",
    "type": "CPP"
  },
  {
    "name": "T _u_formatMessageWithError",
    "type": "CPP"
  },
  {
    "name": "T _u_vformatMessageWithError",
    "type": "CPP"
  },
  {
    "name": "T _u_parseMessage",
    "type": "CPP"
  },
  {
    "name": "T _u_vparseMessage",
    "type": "CPP"
  },
  {
    "name": "T _umsg_vparse",
    "type": "CPP"
  },
  {
    "name": "T _u_parseMessageWithError",
    "type": "CPP"
  },
  {
    "name": "T _u_vparseMessageWithError",
    "type": "CPP"
  },
  {
    "name": "T _umsg_clone",
    "type": "CPP"
  },
  {
    "name": "T _umsg_setLocale",
    "type": "CPP"
  },
  {
    "name": "T _umsg_getLocale",
    "type": "CPP"
  },
  {
    "name": "T _umsg_applyPattern",
    "type": "CPP"
  },
  {
    "name": "T _umsg_toPattern",
    "type": "CPP"
  },
  {
    "name": "T _umsg_format",
    "type": "CPP"
  },
  {
    "name": "T _umsg_parse",
    "type": "CPP"
  },
  {
    "name": "T _umsg_autoQuoteApostrophe",
    "type": "CPP"
  },
  {
    "name": "T icu::UnescapeTransliterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::UnicodeNameTransliterator::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T _unum_open",
    "type": "CPP"
  },
  {
    "name": "T _unum_close",
    "type": "CPP"
  },
  {
    "name": "T _unum_clone",
    "type": "CPP"
  },
  {
    "name": "T _unum_format",
    "type": "CPP"
  },
  {
    "name": "T _unum_formatInt64",
    "type": "CPP"
  },
  {
    "name": "T _unum_formatDouble",
    "type": "CPP"
  },
  {
    "name": "T _unum_formatDoubleForFields",
    "type": "CPP"
  },
  {
    "name": "T _unum_formatDecimal",
    "type": "CPP"
  },
  {
    "name": "T _unum_formatDoubleCurrency",
    "type": "CPP"
  },
  {
    "name": "T _unum_parse",
    "type": "CPP"
  },
  {
    "name": "T _unum_parseInt64",
    "type": "CPP"
  },
  {
    "name": "T _unum_parseDouble",
    "type": "CPP"
  },
  {
    "name": "T _unum_parseDecimal",
    "type": "CPP"
  },
  {
    "name": "T _unum_parseDoubleCurrency",
    "type": "CPP"
  },
  {
    "name": "T _unum_getAvailable",
    "type": "CPP"
  },
  {
    "name": "T _unum_countAvailable",
    "type": "CPP"
  },
  {
    "name": "T _unum_getAttribute",
    "type": "CPP"
  },
  {
    "name": "T _unum_setAttribute",
    "type": "CPP"
  },
  {
    "name": "T _unum_getDoubleAttribute",
    "type": "CPP"
  },
  {
    "name": "T _unum_setDoubleAttribute",
    "type": "CPP"
  },
  {
    "name": "T _unum_getTextAttribute",
    "type": "CPP"
  },
  {
    "name": "T _unum_setTextAttribute",
    "type": "CPP"
  },
  {
    "name": "T _unum_toPattern",
    "type": "CPP"
  },
  {
    "name": "T _unum_getSymbol",
    "type": "CPP"
  },
  {
    "name": "T _unum_setSymbol",
    "type": "CPP"
  },
  {
    "name": "T _unum_applyPattern",
    "type": "CPP"
  },
  {
    "name": "T _unum_getLocaleByType",
    "type": "CPP"
  },
  {
    "name": "T _unum_setContext",
    "type": "CPP"
  },
  {
    "name": "T _unum_getContext",
    "type": "CPP"
  },
  {
    "name": "T _unum_parseToUFormattable",
    "type": "CPP"
  },
  {
    "name": "T _unum_formatUFormattable",
    "type": "CPP"
  },
  {
    "name": "T _unumsys_open",
    "type": "CPP"
  },
  {
    "name": "T _unumsys_openByName",
    "type": "CPP"
  },
  {
    "name": "T _unumsys_close",
    "type": "CPP"
  },
  {
    "name": "T _unumsys_openAvailableNames",
    "type": "CPP"
  },
  {
    "name": "T _unumsys_getName",
    "type": "CPP"
  },
  {
    "name": "T _unumsys_getRadix",
    "type": "CPP"
  },
  {
    "name": "T _unumsys_isAlgorithmic",
    "type": "CPP"
  },
  {
    "name": "T _unumsys_getDescription",
    "type": "CPP"
  },
  {
    "name": "T _uplrule_open",
    "type": "CPP"
  },
  {
    "name": "T _uplrule_close",
    "type": "CPP"
  },
  {
    "name": "T _uplrule_select",
    "type": "CPP"
  },
  {
    "name": "T _uplrule_selectDouble",
    "type": "CPP"
  },
  {
    "name": "T _uplrules_open",
    "type": "CPP"
  },
  {
    "name": "T _uplrules_openForType",
    "type": "CPP"
  },
  {
    "name": "T _uplrules_close",
    "type": "CPP"
  },
  {
    "name": "T _uplrules_select",
    "type": "CPP"
  },
  {
    "name": "T _uplrules_selectFormatted",
    "type": "CPP"
  },
  {
    "name": "T _uplrules_selectWithFormat",
    "type": "CPP"
  },
  {
    "name": "T _uplrules_getKeywords",
    "type": "CPP"
  },
  {
    "name": "T _uregex_open",
    "type": "CPP"
  },
  {
    "name": "T _uregex_openUText",
    "type": "CPP"
  },
  {
    "name": "T _uregex_close",
    "type": "CPP"
  },
  {
    "name": "T _uregex_clone",
    "type": "CPP"
  },
  {
    "name": "T _uregex_pattern",
    "type": "CPP"
  },
  {
    "name": "T _uregex_patternUText",
    "type": "CPP"
  },
  {
    "name": "T _uregex_flags",
    "type": "CPP"
  },
  {
    "name": "T _uregex_setText",
    "type": "CPP"
  },
  {
    "name": "T _uregex_setUText",
    "type": "CPP"
  },
  {
    "name": "T _uregex_getText",
    "type": "CPP"
  },
  {
    "name": "T _uregex_getUText",
    "type": "CPP"
  },
  {
    "name": "T _uregex_refreshUText",
    "type": "CPP"
  },
  {
    "name": "T _uregex_matches",
    "type": "CPP"
  },
  {
    "name": "T _uregex_matches64",
    "type": "CPP"
  },
  {
    "name": "T _uregex_lookingAt",
    "type": "CPP"
  },
  {
    "name": "T _uregex_lookingAt64",
    "type": "CPP"
  },
  {
    "name": "T _uregex_find",
    "type": "CPP"
  },
  {
    "name": "T _uregex_find64",
    "type": "CPP"
  },
  {
    "name": "T _uregex_findNext",
    "type": "CPP"
  },
  {
    "name": "T _uregex_groupCount",
    "type": "CPP"
  },
  {
    "name": "T _uregex_groupNumberFromName",
    "type": "CPP"
  },
  {
    "name": "T _uregex_groupNumberFromCName",
    "type": "CPP"
  },
  {
    "name": "T _uregex_group",
    "type": "CPP"
  },
  {
    "name": "T _uregex_groupUText",
    "type": "CPP"
  },
  {
    "name": "T _uregex_start",
    "type": "CPP"
  },
  {
    "name": "T _uregex_start64",
    "type": "CPP"
  },
  {
    "name": "T _uregex_end",
    "type": "CPP"
  },
  {
    "name": "T _uregex_end64",
    "type": "CPP"
  },
  {
    "name": "T _uregex_reset",
    "type": "CPP"
  },
  {
    "name": "T _uregex_reset64",
    "type": "CPP"
  },
  {
    "name": "T _uregex_setRegion",
    "type": "CPP"
  },
  {
    "name": "T _uregex_setRegion64",
    "type": "CPP"
  },
  {
    "name": "T _uregex_setRegionAndStart",
    "type": "CPP"
  },
  {
    "name": "T _uregex_regionStart",
    "type": "CPP"
  },
  {
    "name": "T _uregex_regionStart64",
    "type": "CPP"
  },
  {
    "name": "T _uregex_regionEnd",
    "type": "CPP"
  },
  {
    "name": "T _uregex_regionEnd64",
    "type": "CPP"
  },
  {
    "name": "T _uregex_hasTransparentBounds",
    "type": "CPP"
  },
  {
    "name": "T _uregex_useTransparentBounds",
    "type": "CPP"
  },
  {
    "name": "T _uregex_hasAnchoringBounds",
    "type": "CPP"
  },
  {
    "name": "T _uregex_useAnchoringBounds",
    "type": "CPP"
  },
  {
    "name": "T _uregex_hitEnd",
    "type": "CPP"
  },
  {
    "name": "T _uregex_requireEnd",
    "type": "CPP"
  },
  {
    "name": "T _uregex_setTimeLimit",
    "type": "CPP"
  },
  {
    "name": "T _uregex_getTimeLimit",
    "type": "CPP"
  },
  {
    "name": "T _uregex_setStackLimit",
    "type": "CPP"
  },
  {
    "name": "T _uregex_getStackLimit",
    "type": "CPP"
  },
  {
    "name": "T _uregex_setMatchCallback",
    "type": "CPP"
  },
  {
    "name": "T _uregex_getMatchCallback",
    "type": "CPP"
  },
  {
    "name": "T _uregex_setFindProgressCallback",
    "type": "CPP"
  },
  {
    "name": "T _uregex_getFindProgressCallback",
    "type": "CPP"
  },
  {
    "name": "T _uregex_replaceAll",
    "type": "CPP"
  },
  {
    "name": "T _uregex_appendReplacement",
    "type": "CPP"
  },
  {
    "name": "T _uregex_appendTail",
    "type": "CPP"
  },
  {
    "name": "T _uregex_replaceAllUText",
    "type": "CPP"
  },
  {
    "name": "T _uregex_replaceFirst",
    "type": "CPP"
  },
  {
    "name": "T _uregex_replaceFirstUText",
    "type": "CPP"
  },
  {
    "name": "T _uregex_appendReplacementUText",
    "type": "CPP"
  },
  {
    "name": "T _uregex_appendTailUText",
    "type": "CPP"
  },
  {
    "name": "T _uregex_split",
    "type": "CPP"
  },
  {
    "name": "T _uregex_splitUText",
    "type": "CPP"
  },
  {
    "name": "T _uregex_openC",
    "type": "CPP"
  },
  {
    "name": "T _uregion_getRegionFromCode",
    "type": "CPP"
  },
  {
    "name": "T _uregion_getRegionFromNumericCode",
    "type": "CPP"
  },
  {
    "name": "T _uregion_getAvailable",
    "type": "CPP"
  },
  {
    "name": "T _uregion_areEqual",
    "type": "CPP"
  },
  {
    "name": "T _uregion_getContainingRegion",
    "type": "CPP"
  },
  {
    "name": "T _uregion_getContainingRegionOfType",
    "type": "CPP"
  },
  {
    "name": "T _uregion_getContainedRegions",
    "type": "CPP"
  },
  {
    "name": "T _uregion_getContainedRegionsOfType",
    "type": "CPP"
  },
  {
    "name": "T _uregion_contains",
    "type": "CPP"
  },
  {
    "name": "T _uregion_getPreferredValues",
    "type": "CPP"
  },
  {
    "name": "T _uregion_getRegionCode",
    "type": "CPP"
  },
  {
    "name": "T _uregion_getNumericCode",
    "type": "CPP"
  },
  {
    "name": "T _uregion_getType",
    "type": "CPP"
  },
  {
    "name": "T _usearch_open",
    "type": "CPP"
  },
  {
    "name": "T _usearch_openFromCollator",
    "type": "CPP"
  },
  {
    "name": "T _usearch_close",
    "type": "CPP"
  },
  {
    "name": "T _usearch_setOffset",
    "type": "CPP"
  },
  {
    "name": "T _usearch_getOffset",
    "type": "CPP"
  },
  {
    "name": "T _usearch_setAttribute",
    "type": "CPP"
  },
  {
    "name": "T _usearch_getAttribute",
    "type": "CPP"
  },
  {
    "name": "T _usearch_getMatchedStart",
    "type": "CPP"
  },
  {
    "name": "T _usearch_getMatchedText",
    "type": "CPP"
  },
  {
    "name": "T _usearch_getMatchedLength",
    "type": "CPP"
  },
  {
    "name": "T _usearch_setBreakIterator",
    "type": "CPP"
  },
  {
    "name": "T _usearch_getBreakIterator",
    "type": "CPP"
  },
  {
    "name": "T _usearch_setText",
    "type": "CPP"
  },
  {
    "name": "T _usearch_getText",
    "type": "CPP"
  },
  {
    "name": "T _usearch_setCollator",
    "type": "CPP"
  },
  {
    "name": "T _usearch_getCollator",
    "type": "CPP"
  },
  {
    "name": "T _usearch_setPattern",
    "type": "CPP"
  },
  {
    "name": "T _usearch_getPattern",
    "type": "CPP"
  },
  {
    "name": "T _usearch_first",
    "type": "CPP"
  },
  {
    "name": "T _usearch_next",
    "type": "CPP"
  },
  {
    "name": "T _usearch_following",
    "type": "CPP"
  },
  {
    "name": "T _usearch_last",
    "type": "CPP"
  },
  {
    "name": "T _usearch_previous",
    "type": "CPP"
  },
  {
    "name": "T _usearch_preceding",
    "type": "CPP"
  },
  {
    "name": "T _usearch_reset",
    "type": "CPP"
  },
  {
    "name": "T _usearch_search",
    "type": "CPP"
  },
  {
    "name": "T _usearch_searchBackwards",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_open",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_openFromSerialized",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_clone",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_close",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_setChecks",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_getChecks",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_setRestrictionLevel",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_getRestrictionLevel",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_setAllowedLocales",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_getAllowedLocales",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_getAllowedChars",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_getAllowedUnicodeSet",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_setAllowedChars",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_setAllowedUnicodeSet",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_check",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_check2",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_check2UnicodeString",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_checkUTF8",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_check2UTF8",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_areConfusable",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_areConfusableUnicodeString",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_areConfusableUTF8",
    "type": "CPP"
  },
  {
    "name": "T uspoof_getSkeletonUnicodeString(USpoofChecker const*, unsigned int, icu::UnicodeString const&, icu::UnicodeString&, UErrorCode*)",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_checkUnicodeString",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_getSkeleton",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_getSkeletonUTF8",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_serialize",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_getInclusionSet",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_getRecommendedSet",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_getInclusionUnicodeSet",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_getRecommendedUnicodeSet",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_openCheckResult",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_closeCheckResult",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_getCheckResultChecks",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_getCheckResultRestrictionLevel",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_getCheckResultNumerics",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_openFromSource",
    "type": "CPP"
  },
  {
    "name": "T _uspoof_swap",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF16CollationIterator::UTF16CollationIterator(icu::UTF16CollationIterator const&, char16_t const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF16CollationIterator::UTF16CollationIterator(icu::UTF16CollationIterator const&, char16_t const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF16CollationIterator::~UTF16CollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF16CollationIterator::~UTF16CollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF16CollationIterator::~UTF16CollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF16CollationIterator::operator==(icu::CollationIterator const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF16CollationIterator::resetToOffset(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF16CollationIterator::getOffset() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF16CollationIterator::handleNextCE32(int&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF16CollationIterator::handleGetTrailSurrogate()",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF16CollationIterator::foundNULTerminator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF16CollationIterator::nextCodePoint(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF16CollationIterator::previousCodePoint(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF16CollationIterator::forwardNumCodePoints(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF16CollationIterator::backwardNumCodePoints(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF16CollationIterator::FCDUTF16CollationIterator(icu::FCDUTF16CollationIterator const&, char16_t const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF16CollationIterator::FCDUTF16CollationIterator(icu::FCDUTF16CollationIterator const&, char16_t const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF16CollationIterator::operator==(icu::CollationIterator const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF16CollationIterator::resetToOffset(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF16CollationIterator::getOffset() const",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF16CollationIterator::handleNextCE32(int&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF16CollationIterator::nextSegment(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF16CollationIterator::switchToForward()",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF16CollationIterator::foundNULTerminator()",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF16CollationIterator::nextCodePoint(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF16CollationIterator::previousCodePoint(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF16CollationIterator::previousSegment(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF16CollationIterator::switchToBackward()",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF16CollationIterator::forwardNumCodePoints(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF16CollationIterator::backwardNumCodePoints(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF16CollationIterator::normalize(char16_t const*, char16_t const*, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF8CollationIterator::~UTF8CollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF8CollationIterator::~UTF8CollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF8CollationIterator::~UTF8CollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF8CollationIterator::resetToOffset(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF8CollationIterator::getOffset() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF8CollationIterator::handleNextCE32(int&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF8CollationIterator::foundNULTerminator()",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF8CollationIterator::forbidSurrogateCodePoints() const",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF8CollationIterator::nextCodePoint(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF8CollationIterator::previousCodePoint(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF8CollationIterator::forwardNumCodePoints(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::UTF8CollationIterator::backwardNumCodePoints(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF8CollationIterator::~FCDUTF8CollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF8CollationIterator::~FCDUTF8CollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF8CollationIterator::~FCDUTF8CollationIterator()",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF8CollationIterator::resetToOffset(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF8CollationIterator::getOffset() const",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF8CollationIterator::handleNextCE32(int&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF8CollationIterator::nextHasLccc() const",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF8CollationIterator::nextSegment(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF8CollationIterator::switchToForward()",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF8CollationIterator::previousHasTccc() const",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF8CollationIterator::handleGetTrailSurrogate()",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF8CollationIterator::foundNULTerminator()",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF8CollationIterator::nextCodePoint(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF8CollationIterator::previousCodePoint(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF8CollationIterator::previousSegment(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF8CollationIterator::switchToBackward()",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF8CollationIterator::forwardNumCodePoints(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF8CollationIterator::backwardNumCodePoints(int, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::FCDUTF8CollationIterator::normalize(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T _utmscale_getTimeScaleValue",
    "type": "CPP"
  },
  {
    "name": "T _utmscale_fromInt64",
    "type": "CPP"
  },
  {
    "name": "T _utmscale_toInt64",
    "type": "CPP"
  },
  {
    "name": "T _utrans_openU",
    "type": "CPP"
  },
  {
    "name": "T _utrans_open",
    "type": "CPP"
  },
  {
    "name": "T _utrans_openInverse",
    "type": "CPP"
  },
  {
    "name": "T _utrans_clone",
    "type": "CPP"
  },
  {
    "name": "T _utrans_close",
    "type": "CPP"
  },
  {
    "name": "T _utrans_getUnicodeID",
    "type": "CPP"
  },
  {
    "name": "T _utrans_getID",
    "type": "CPP"
  },
  {
    "name": "T _utrans_register",
    "type": "CPP"
  },
  {
    "name": "T _utrans_unregisterID",
    "type": "CPP"
  },
  {
    "name": "T _utrans_unregister",
    "type": "CPP"
  },
  {
    "name": "T _utrans_setFilter",
    "type": "CPP"
  },
  {
    "name": "T _utrans_countAvailableIDs",
    "type": "CPP"
  },
  {
    "name": "T _utrans_getAvailableID",
    "type": "CPP"
  },
  {
    "name": "T _utrans_openIDs",
    "type": "CPP"
  },
  {
    "name": "T _utrans_trans",
    "type": "CPP"
  },
  {
    "name": "T _utrans_transIncremental",
    "type": "CPP"
  },
  {
    "name": "T _utrans_transUChars",
    "type": "CPP"
  },
  {
    "name": "T _utrans_transIncrementalUChars",
    "type": "CPP"
  },
  {
    "name": "T _utrans_toRules",
    "type": "CPP"
  },
  {
    "name": "T _utrans_getSourceSet",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::getStaticClassID()",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::getDynamicClassID() const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::VTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::VTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::VTimeZone(icu::VTimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::VTimeZone(icu::VTimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::~VTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::~VTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::~VTimeZone()",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::operator=(icu::VTimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::operator==(icu::TimeZone const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::operator!=(icu::TimeZone const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::createVTimeZoneByID(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::createVTimeZoneFromBasicTimeZone(icu::BasicTimeZone const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::createVTimeZone(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::load(icu::VTZReader&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::getTZURL(icu::UnicodeString&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::setTZURL(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::getLastModified(double&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::setLastModified(double)",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::write(icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::write(icu::VTZWriter&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::write(double, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::write(double, icu::VTZWriter&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::writeSimple(double, icu::UnicodeString&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::writeSimple(double, icu::VTZWriter&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::clone() const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::getOffset(unsigned char, int, int, int, unsigned char, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::getOffset(unsigned char, int, int, int, unsigned char, int, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::getOffset(double, signed char, int&, int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::setRawOffset(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::getRawOffset() const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::useDaylightTime() const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::inDaylightTime(double, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::hasSameRules(icu::TimeZone const&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::getNextTransition(double, signed char, icu::TimeZoneTransition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::getPreviousTransition(double, signed char, icu::TimeZoneTransition&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::countTransitionRules(UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::getTimeZoneRules(icu::InitialTimeZoneRule const*&, icu::TimeZoneRule const**, int&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::parse(UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::writeZone(icu::VTZWriter&, icu::BasicTimeZone&, icu::UVector*, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::writeHeaders(icu::VTZWriter&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::writeZonePropsByTime(icu::VTZWriter&, signed char, icu::UnicodeString const&, int, int, double, signed char, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::writeZonePropsByDOW(icu::VTZWriter&, signed char, icu::UnicodeString const&, int, int, int, int, int, double, double, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::writeFinalRule(icu::VTZWriter&, signed char, icu::AnnualTimeZoneRule const*, int, int, double, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::writeFooter(icu::VTZWriter&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::beginZoneProps(icu::VTZWriter&, signed char, icu::UnicodeString const&, int, int, double, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::endZoneProps(icu::VTZWriter&, signed char, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::writeZonePropsByDOM(icu::VTZWriter&, signed char, icu::UnicodeString const&, int, int, int, int, double, double, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::beginRRULE(icu::VTZWriter&, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::appendUNTIL(icu::VTZWriter&, icu::UnicodeString const&, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM(icu::VTZWriter&, signed char, icu::UnicodeString const&, int, int, int, int, int, double, double, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM_sub(icu::VTZWriter&, int, int, int, int, double, int, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T icu::VTimeZone::writeZonePropsByDOW_LEQ_DOM(icu::VTZWriter&, signed char, icu::UnicodeString const&, int, int, int, int, int, double, double, UErrorCode&) const",
    "type": "CPP"
  },
  {
    "name": "T _vzone_openID",
    "type": "CPP"
  },
  {
    "name": "T _vzone_openData",
    "type": "CPP"
  },
  {
    "name": "T _vzone_close",
    "type": "CPP"
  },
  {
    "name": "T _vzone_clone",
    "type": "CPP"
  },
  {
    "name": "T _vzone_equals",
    "type": "CPP"
  },
  {
    "name": "T _vzone_getTZURL",
    "type": "CPP"
  },
  {
    "name": "T _vzone_setTZURL",
    "type": "CPP"
  },
  {
    "name": "T _vzone_getLastModified",
    "type": "CPP"
  },
  {
    "name": "T _vzone_setLastModified",
    "type": "CPP"
  },
  {
    "name": "T _vzone_write",
    "type": "CPP"
  },
  {
    "name": "T _vzone_writeFromStart",
    "type": "CPP"
  },
  {
    "name": "T _vzone_writeSimple",
    "type": "CPP"
  },
  {
    "name": "T _vzone_getOffset",
    "type": "CPP"
  },
  {
    "name": "T _vzone_getOffset2",
    "type": "CPP"
  },
  {
    "name": "T _vzone_getOffset3",
    "type": "CPP"
  },
  {
    "name": "T _vzone_setRawOffset",
    "type": "CPP"
  },
  {
    "name": "T _vzone_getRawOffset",
    "type": "CPP"
  },
  {
    "name": "T _vzone_useDaylightTime",
    "type": "CPP"
  },
  {
    "name": "T _vzone_inDaylightTime",
    "type": "CPP"
  },
  {
    "name": "T _vzone_hasSameRules",
    "type": "CPP"
  },
  {
    "name": "T _vzone_getNextTransition",
    "type": "CPP"
  },
  {
    "name": "T _vzone_getPreviousTransition",
    "type": "CPP"
  },
  {
    "name": "T _vzone_countTransitionRules",
    "type": "CPP"
  },
  {
    "name": "T _vzone_getStaticClassID",
    "type": "CPP"
  },
  {
    "name": "T _vzone_getDynamicClassID",
    "type": "CPP"
  },
  {
    "name": "T icu::ZoneMeta::getCanonicalCLDRID(icu::UnicodeString const&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ZoneMeta::findTimeZoneID(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ZoneMeta::getCanonicalCLDRID(icu::UnicodeString const&, icu::UnicodeString&, UErrorCode&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ZoneMeta::getCanonicalCLDRID(icu::TimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ZoneMeta::getCanonicalCountry(icu::UnicodeString const&, icu::UnicodeString&, signed char*)",
    "type": "CPP"
  },
  {
    "name": "T icu::ZoneMeta::getMetazoneID(icu::UnicodeString const&, double, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ZoneMeta::getMetazoneMappings(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ZoneMeta::createMetazoneMappings(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ZoneMeta::getZoneIdByMetazone(icu::UnicodeString const&, icu::UnicodeString const&, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ZoneMeta::getAvailableMetazoneIDs()",
    "type": "CPP"
  },
  {
    "name": "T icu::ZoneMeta::findMetaZoneID(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ZoneMeta::createCustomTimeZone(int)",
    "type": "CPP"
  },
  {
    "name": "T icu::ZoneMeta::formatCustomID(unsigned char, unsigned char, unsigned char, signed char, icu::UnicodeString&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ZoneMeta::getShortID(icu::TimeZone const&)",
    "type": "CPP"
  },
  {
    "name": "T icu::ZoneMeta::getShortIDFromCanonical(char16_t const*)",
    "type": "CPP"
  },
  {
    "name": "T icu::ZoneMeta::getShortID(icu::UnicodeString const&)",
    "type": "CPP"
  },
  {
    "name": "T _zrule_close",
    "type": "CPP"
  },
  {
    "name": "T _zrule_equals",
    "type": "CPP"
  },
  {
    "name": "T _zrule_getName",
    "type": "CPP"
  },
  {
    "name": "T _zrule_getRawOffset",
    "type": "CPP"
  },
  {
    "name": "T _zrule_getDSTSavings",
    "type": "CPP"
  },
  {
    "name": "T _zrule_isEquivalentTo",
    "type": "CPP"
  },
  {
    "name": "T _izrule_open",
    "type": "CPP"
  },
  {
    "name": "T _izrule_close",
    "type": "CPP"
  },
  {
    "name": "T _izrule_clone",
    "type": "CPP"
  },
  {
    "name": "T _izrule_equals",
    "type": "CPP"
  },
  {
    "name": "T _izrule_getName",
    "type": "CPP"
  },
  {
    "name": "T _izrule_getRawOffset",
    "type": "CPP"
  },
  {
    "name": "T _izrule_getDSTSavings",
    "type": "CPP"
  },
  {
    "name": "T _izrule_isEquivalentTo",
    "type": "CPP"
  },
  {
    "name": "T _izrule_getFirstStart",
    "type": "CPP"
  },
  {
    "name": "T _izrule_getFinalStart",
    "type": "CPP"
  },
  {
    "name": "T _izrule_getNextStart",
    "type": "CPP"
  },
  {
    "name": "T _izrule_getPreviousStart",
    "type": "CPP"
  },
  {
    "name": "T _izrule_getStaticClassID",
    "type": "CPP"
  },
  {
    "name": "T _izrule_getDynamicClassID",
    "type": "CPP"
  },
  {
    "name": "T _ztrans_open",
    "type": "CPP"
  },
  {
    "name": "T _ztrans_openEmpty",
    "type": "CPP"
  },
  {
    "name": "T _ztrans_close",
    "type": "CPP"
  },
  {
    "name": "T _ztrans_clone",
    "type": "CPP"
  },
  {
    "name": "T _ztrans_equals",
    "type": "CPP"
  },
  {
    "name": "T _ztrans_getTime",
    "type": "CPP"
  },
  {
    "name": "T _ztrans_setTime",
    "type": "CPP"
  },
  {
    "name": "T _ztrans_getFrom",
    "type": "CPP"
  },
  {
    "name": "T _ztrans_setFrom",
    "type": "CPP"
  },
  {
    "name": "T _ztrans_adoptFrom",
    "type": "CPP"
  },
  {
    "name": "T _ztrans_getTo",
    "type": "CPP"
  },
  {
    "name": "T _ztrans_setTo",
    "type": "CPP"
  },
  {
    "name": "T _ztrans_adoptTo",
    "type": "CPP"
  },
  {
    "name": "T _ztrans_getStaticClassID",
    "type": "CPP"
  },
  {
    "name": "T _ztrans_getDynamicClassID",
    "type": "CPP"
  },
  {
    "name": "T _u_locbund_init",
    "type": "CPP"
  },
  {
    "name": "T _u_locbund_close",
    "type": "CPP"
  },
  {
    "name": "T _u_locbund_getNumberFormat",
    "type": "CPP"
  },
  {
    "name": "T _u_sprintf",
    "type": "CPP"
  },
  {
    "name": "T _u_vsnprintf",
    "type": "CPP"
  },
  {
    "name": "T _u_sprintf_u",
    "type": "CPP"
  },
  {
    "name": "T _u_vsnprintf_u",
    "type": "CPP"
  },
  {
    "name": "T _u_vsprintf",
    "type": "CPP"
  },
  {
    "name": "T _u_snprintf",
    "type": "CPP"
  },
  {
    "name": "T _u_snprintf_u",
    "type": "CPP"
  },
  {
    "name": "T _u_vsprintf_u",
    "type": "CPP"
  },
  {
    "name": "T _u_sscanf",
    "type": "CPP"
  },
  {
    "name": "T _u_vsscanf",
    "type": "CPP"
  },
  {
    "name": "T _u_sscanf_u",
    "type": "CPP"
  },
  {
    "name": "T _u_vsscanf_u",
    "type": "CPP"
  },
  {
    "name": "T _u_finit",
    "type": "CPP"
  },
  {
    "name": "T _u_fadopt",
    "type": "CPP"
  },
  {
    "name": "T _u_fopen",
    "type": "CPP"
  },
  {
    "name": "T _u_fopen_u",
    "type": "CPP"
  },
  {
    "name": "T _u_fstropen",
    "type": "CPP"
  },
  {
    "name": "T _u_feof",
    "type": "CPP"
  },
  {
    "name": "T _u_fflush",
    "type": "CPP"
  },
  {
    "name": "T _u_frewind",
    "type": "CPP"
  },
  {
    "name": "T _u_fclose",
    "type": "CPP"
  },
  {
    "name": "T _u_fgetfile",
    "type": "CPP"
  },
  {
    "name": "T _u_fgetlocale",
    "type": "CPP"
  },
  {
    "name": "T _u_fsetlocale",
    "type": "CPP"
  },
  {
    "name": "T _u_fgetcodepage",
    "type": "CPP"
  },
  {
    "name": "T _u_fsetcodepage",
    "type": "CPP"
  },
  {
    "name": "T _u_fgetConverter",
    "type": "CPP"
  },
  {
    "name": "T _u_fgetNumberFormat",
    "type": "CPP"
  },
  {
    "name": "T _u_get_stdout",
    "type": "CPP"
  },
  {
    "name": "T _u_fprintf",
    "type": "CPP"
  },
  {
    "name": "T _u_vfprintf",
    "type": "CPP"
  },
  {
    "name": "T _u_printf",
    "type": "CPP"
  },
  {
    "name": "T _u_fprintf_u",
    "type": "CPP"
  },
  {
    "name": "T _u_vfprintf_u",
    "type": "CPP"
  },
  {
    "name": "T _u_printf_u",
    "type": "CPP"
  },
  {
    "name": "T _u_fscanf",
    "type": "CPP"
  },
  {
    "name": "T _u_vfscanf",
    "type": "CPP"
  },
  {
    "name": "T _u_fscanf_u",
    "type": "CPP"
  },
  {
    "name": "T _u_vfscanf_u",
    "type": "CPP"
  },
  {
    "name": "T _u_fsettransliterator",
    "type": "CPP"
  },
  {
    "name": "T _u_fputs",
    "type": "CPP"
  },
  {
    "name": "T _u_file_write",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/libz.1.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _inflateInit_",
    "type": "CPP"
  },
  {
    "name": "T _inflateInit2_",
    "type": "CPP"
  },
  {
    "name": "T _inflateReset2",
    "type": "CPP"
  },
  {
    "name": "T _inflateReset",
    "type": "CPP"
  },
  {
    "name": "T _inflateResetKeep",
    "type": "CPP"
  },
  {
    "name": "T _inflate",
    "type": "CPP"
  },
  {
    "name": "T _adler32",
    "type": "CPP"
  },
  {
    "name": "T _adler32_z",
    "type": "CPP"
  },
  {
    "name": "T _inflateEnd",
    "type": "CPP"
  },
  {
    "name": "T _crc32",
    "type": "CPP"
  },
  {
    "name": "T _crc32_z",
    "type": "CPP"
  },
  {
    "name": "T _uncompress",
    "type": "CPP"
  },
  {
    "name": "T _uncompress2",
    "type": "CPP"
  },
  {
    "name": "T _deflateInit_",
    "type": "CPP"
  },
  {
    "name": "T _deflateInit2_",
    "type": "CPP"
  },
  {
    "name": "T _deflateReset",
    "type": "CPP"
  },
  {
    "name": "T _deflateResetKeep",
    "type": "CPP"
  },
  {
    "name": "T _deflateBound",
    "type": "CPP"
  },
  {
    "name": "T _deflate",
    "type": "CPP"
  },
  {
    "name": "T _deflateEnd",
    "type": "CPP"
  },
  {
    "name": "T _compress2",
    "type": "CPP"
  },
  {
    "name": "T _deflateSetDictionary",
    "type": "CPP"
  },
  {
    "name": "T _inflateSetDictionary",
    "type": "CPP"
  },
  {
    "name": "T _adler32_combine",
    "type": "CPP"
  },
  {
    "name": "T _compress",
    "type": "CPP"
  },
  {
    "name": "T _compressBound",
    "type": "CPP"
  },
  {
    "name": "T _get_crc_table",
    "type": "CPP"
  },
  {
    "name": "T _crc32_combine",
    "type": "CPP"
  },
  {
    "name": "T _deflateGetDictionary",
    "type": "CPP"
  },
  {
    "name": "T _deflateSetHeader",
    "type": "CPP"
  },
  {
    "name": "T _deflatePending",
    "type": "CPP"
  },
  {
    "name": "T _deflatePrime",
    "type": "CPP"
  },
  {
    "name": "T _deflateParams",
    "type": "CPP"
  },
  {
    "name": "T _deflateTune",
    "type": "CPP"
  },
  {
    "name": "T _deflateCopy",
    "type": "CPP"
  },
  {
    "name": "T _inflateBackInit_",
    "type": "CPP"
  },
  {
    "name": "T _inflateBack",
    "type": "CPP"
  },
  {
    "name": "T _inflateBackEnd",
    "type": "CPP"
  },
  {
    "name": "T _inflatePrime",
    "type": "CPP"
  },
  {
    "name": "T _inflateGetDictionary",
    "type": "CPP"
  },
  {
    "name": "T _inflateGetHeader",
    "type": "CPP"
  },
  {
    "name": "T _inflateSync",
    "type": "CPP"
  },
  {
    "name": "T _inflateSyncPoint",
    "type": "CPP"
  },
  {
    "name": "T _inflateCopy",
    "type": "CPP"
  },
  {
    "name": "T _inflateUndermine",
    "type": "CPP"
  },
  {
    "name": "T _inflateValidate",
    "type": "CPP"
  },
  {
    "name": "T _inflateMark",
    "type": "CPP"
  },
  {
    "name": "T _inflateCodesUsed",
    "type": "CPP"
  },
  {
    "name": "T _zlibVersion",
    "type": "CPP"
  },
  {
    "name": "T _zlibCompileFlags",
    "type": "CPP"
  },
  {
    "name": "T _zError",
    "type": "CPP"
  },
  {
    "name": "T _gzclose",
    "type": "CPP"
  },
  {
    "name": "T _gzopen",
    "type": "CPP"
  },
  {
    "name": "T _gzdopen",
    "type": "CPP"
  },
  {
    "name": "T _gzbuffer",
    "type": "CPP"
  },
  {
    "name": "T _gzrewind",
    "type": "CPP"
  },
  {
    "name": "T _gzseek",
    "type": "CPP"
  },
  {
    "name": "T _gztell",
    "type": "CPP"
  },
  {
    "name": "T _gzoffset",
    "type": "CPP"
  },
  {
    "name": "T _gzeof",
    "type": "CPP"
  },
  {
    "name": "T _gzerror",
    "type": "CPP"
  },
  {
    "name": "T _gzclearerr",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/libc++abi.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T ___cxa_bad_cast",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_bad_typeid",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_throw_bad_array_new_length",
    "type": "CPP"
  },
  {
    "name": "T std::set_unexpected(void (*)())",
    "type": "CPP"
  },
  {
    "name": "T std::set_terminate(void (*)())",
    "type": "CPP"
  },
  {
    "name": "t demangling_terminate_handler()",
    "type": "CPP"
  },
  {
    "name": "t demangling_unexpected_handler()",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_demangle",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::OutputStream::grow(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseEncoding()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseNumber(bool)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseName((anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::NameState*)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseTemplateArg()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PODSmallVector<(anonymous namespace)::itanium_demangle::Node*, 32ul>::push_back((anonymous namespace)::itanium_demangle::Node* const&)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::popTrailingNodeArray(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseCallOffset()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseSeqId(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::BumpPointerAllocator::allocate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::Node::hasRHSComponentSlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::Node::hasArraySlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::Node::hasFunctionSlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::Node::getSyntaxNode((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::SpecialName::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::Node::printRight((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::Node::getBaseName() const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::SpecialName::~SpecialName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::SpecialName::~SpecialName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::CtorVtableSpecialName::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::CtorVtableSpecialName::~CtorVtableSpecialName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::CtorVtableSpecialName::~CtorVtableSpecialName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseSubstitution()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseTemplateArgs(bool)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseCVQualifiers()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseTemplateParam()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseDecltype()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseCtorDtorName((anonymous namespace)::itanium_demangle::Node*&, (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::NameState*)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseAbiTags((anonymous namespace)::itanium_demangle::Node*)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseUnqualifiedName((anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::NameState*)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NameType::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NameType::getBaseName() const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NameType::~NameType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NameType::~NameType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NestedName::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NestedName::getBaseName() const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NestedName::~NestedName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NestedName::~NestedName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parsePositiveInteger(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PODSmallVector<(anonymous namespace)::itanium_demangle::PODSmallVector<(anonymous namespace)::itanium_demangle::Node*, 8ul>*, 4ul>::push_back((anonymous namespace)::itanium_demangle::PODSmallVector<(anonymous namespace)::itanium_demangle::Node*, 8ul>* const&)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ForwardTemplateReference::hasRHSComponentSlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ForwardTemplateReference::hasArraySlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ForwardTemplateReference::hasFunctionSlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ForwardTemplateReference::getSyntaxNode((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ForwardTemplateReference::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ForwardTemplateReference::printRight((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ForwardTemplateReference::~ForwardTemplateReference()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ForwardTemplateReference::~ForwardTemplateReference()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::Node* (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::make<(anonymous namespace)::itanium_demangle::EnclosingExpr, char const (&) [10], (anonymous namespace)::itanium_demangle::Node*&, char const (&) [2]>(char const (&) [10], (anonymous namespace)::itanium_demangle::Node*&, char const (&) [2])",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseExprPrimary()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseFunctionParam()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseFoldExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseBinaryExpr((anonymous namespace)::itanium_demangle::StringView)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parsePrefixExpr((anonymous namespace)::itanium_demangle::StringView)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseUnresolvedName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseBracedExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::Node* (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::make<(anonymous namespace)::itanium_demangle::EnclosingExpr, char const (&) [9], (anonymous namespace)::itanium_demangle::Node*&, char const (&) [2]>(char const (&) [9], (anonymous namespace)::itanium_demangle::Node*&, char const (&) [2])",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseIntegerLiteral((anonymous namespace)::itanium_demangle::StringView)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseUnnamedTypeName((anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::NameState*)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::IntegerLiteral::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::IntegerLiteral::~IntegerLiteral()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::IntegerLiteral::~IntegerLiteral()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::BoolExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::BoolExpr::~BoolExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::BoolExpr::~BoolExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FloatLiteralImpl<float>::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FloatLiteralImpl<float>::~FloatLiteralImpl()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FloatLiteralImpl<float>::~FloatLiteralImpl()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FloatLiteralImpl<double>::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FloatLiteralImpl<double>::~FloatLiteralImpl()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FloatLiteralImpl<double>::~FloatLiteralImpl()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FloatLiteralImpl<long double>::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FloatLiteralImpl<long double>::~FloatLiteralImpl()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FloatLiteralImpl<long double>::~FloatLiteralImpl()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::StringLiteral::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::StringLiteral::~StringLiteral()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::StringLiteral::~StringLiteral()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseTemplateParamDecl()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::UnnamedTypeName::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::UnnamedTypeName::~UnnamedTypeName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::UnnamedTypeName::~UnnamedTypeName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PODSmallVector<(anonymous namespace)::itanium_demangle::Node*, 8ul>::push_back((anonymous namespace)::itanium_demangle::Node* const&)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::SyntheticTemplateParamName::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::SyntheticTemplateParamName::~SyntheticTemplateParamName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::SyntheticTemplateParamName::~SyntheticTemplateParamName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::TypeTemplateParamDecl::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::TypeTemplateParamDecl::printRight((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::TypeTemplateParamDecl::~TypeTemplateParamDecl()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::TypeTemplateParamDecl::~TypeTemplateParamDecl()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NonTypeTemplateParamDecl::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NonTypeTemplateParamDecl::printRight((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NonTypeTemplateParamDecl::~NonTypeTemplateParamDecl()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NonTypeTemplateParamDecl::~NonTypeTemplateParamDecl()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::TemplateTemplateParamDecl::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::TemplateTemplateParamDecl::printRight((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::TemplateTemplateParamDecl::~TemplateTemplateParamDecl()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::TemplateTemplateParamDecl::~TemplateTemplateParamDecl()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NodeArray::printWithComma((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::TemplateParamPackDecl::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::TemplateParamPackDecl::printRight((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::TemplateParamPackDecl::~TemplateParamPackDecl()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::TemplateParamPackDecl::~TemplateParamPackDecl()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ClosureTypeName::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ClosureTypeName::~ClosureTypeName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ClosureTypeName::~ClosureTypeName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ClosureTypeName::printDeclarator((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::LambdaExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::LambdaExpr::~LambdaExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::LambdaExpr::~LambdaExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::IntegerCastExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::IntegerCastExpr::~IntegerCastExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::IntegerCastExpr::~IntegerCastExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FunctionParam::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FunctionParam::~FunctionParam()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FunctionParam::~FunctionParam()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FoldExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FoldExpr::~FoldExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FoldExpr::~FoldExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ParameterPackExpansion::~ParameterPackExpansion()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ParameterPackExpansion::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ParameterPackExpansion::~ParameterPackExpansion()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::BinaryExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::BinaryExpr::~BinaryExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::BinaryExpr::~BinaryExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PrefixExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PrefixExpr::~PrefixExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PrefixExpr::~PrefixExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::CastExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::CastExpr::~CastExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::CastExpr::~CastExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::CallExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::CallExpr::~CallExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::CallExpr::~CallExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ConversionExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ConversionExpr::~ConversionExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ConversionExpr::~ConversionExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::DeleteExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::DeleteExpr::~DeleteExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::DeleteExpr::~DeleteExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseUnresolvedType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseSimpleId()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseBaseUnresolvedName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseSourceName((anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::NameState*)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::QualifiedName::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::QualifiedName::getBaseName() const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::QualifiedName::~QualifiedName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::QualifiedName::~QualifiedName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseOperatorName((anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::NameState*)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::DtorName::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::DtorName::~DtorName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::DtorName::~DtorName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ConversionOperatorType::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ConversionOperatorType::~ConversionOperatorType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ConversionOperatorType::~ConversionOperatorType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::LiteralOperator::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::LiteralOperator::~LiteralOperator()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::LiteralOperator::~LiteralOperator()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::GlobalQualifiedName::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::GlobalQualifiedName::getBaseName() const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::GlobalQualifiedName::~GlobalQualifiedName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::GlobalQualifiedName::~GlobalQualifiedName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::MemberExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::MemberExpr::~MemberExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::MemberExpr::~MemberExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ArraySubscriptExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ArraySubscriptExpr::~ArraySubscriptExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ArraySubscriptExpr::~ArraySubscriptExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::BracedExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::BracedExpr::~BracedExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::BracedExpr::~BracedExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::BracedRangeExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::BracedRangeExpr::~BracedRangeExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::BracedRangeExpr::~BracedRangeExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::InitListExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::InitListExpr::~InitListExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::InitListExpr::~InitListExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PostfixExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PostfixExpr::~PostfixExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PostfixExpr::~PostfixExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NewExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NewExpr::~NewExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NewExpr::~NewExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::EnclosingExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::EnclosingExpr::~EnclosingExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::EnclosingExpr::~EnclosingExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ConditionalExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ConditionalExpr::~ConditionalExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ConditionalExpr::~ConditionalExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::SizeofParamPackExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::SizeofParamPackExpr::~SizeofParamPackExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::SizeofParamPackExpr::~SizeofParamPackExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NodeArrayNode::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NodeArrayNode::~NodeArrayNode()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NodeArrayNode::~NodeArrayNode()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ThrowExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ThrowExpr::~ThrowExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ThrowExpr::~ThrowExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::UUIDOfExpr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::UUIDOfExpr::~UUIDOfExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::UUIDOfExpr::~UUIDOfExpr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ExpandedSpecialSubstitution::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ExpandedSpecialSubstitution::getBaseName() const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ExpandedSpecialSubstitution::~ExpandedSpecialSubstitution()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ExpandedSpecialSubstitution::~ExpandedSpecialSubstitution()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::CtorDtorName::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::CtorDtorName::~CtorDtorName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::CtorDtorName::~CtorDtorName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseBareSourceName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbiTagAttr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbiTagAttr::~AbiTagAttr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbiTagAttr::~AbiTagAttr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::StructuredBindingName::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::StructuredBindingName::~StructuredBindingName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::StructuredBindingName::~StructuredBindingName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::parse_discriminator(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::LocalName::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::LocalName::~LocalName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::LocalName::~LocalName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::SpecialSubstitution::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::SpecialSubstitution::getBaseName() const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::SpecialSubstitution::~SpecialSubstitution()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::SpecialSubstitution::~SpecialSubstitution()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ParameterPack::hasRHSComponentSlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ParameterPack::hasArraySlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ParameterPack::hasFunctionSlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ParameterPack::getSyntaxNode((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ParameterPack::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ParameterPack::printRight((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ParameterPack::~ParameterPack()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ParameterPack::~ParameterPack()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::TemplateArgs::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::TemplateArgs::~TemplateArgs()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::TemplateArgs::~TemplateArgs()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NameWithTemplateArgs::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NameWithTemplateArgs::getBaseName() const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NameWithTemplateArgs::~NameWithTemplateArgs()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NameWithTemplateArgs::~NameWithTemplateArgs()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::StdQualifiedName::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::StdQualifiedName::getBaseName() const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::StdQualifiedName::~StdQualifiedName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::StdQualifiedName::~StdQualifiedName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::TemplateArgumentPack::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::TemplateArgumentPack::~TemplateArgumentPack()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::TemplateArgumentPack::~TemplateArgumentPack()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::EnableIfAttr::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::EnableIfAttr::~EnableIfAttr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::EnableIfAttr::~EnableIfAttr()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FunctionEncoding::hasRHSComponentSlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FunctionEncoding::hasFunctionSlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FunctionEncoding::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FunctionEncoding::printRight((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FunctionEncoding::~FunctionEncoding()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FunctionEncoding::~FunctionEncoding()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::DotSuffix::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::DotSuffix::~DotSuffix()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::DotSuffix::~DotSuffix()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseFunctionType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseQualifiedType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::AbstractManglingParser<(anonymous namespace)::itanium_demangle::ManglingParser<(anonymous namespace)::DefaultAllocator>, (anonymous namespace)::DefaultAllocator>::parseClassEnumType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NoexceptSpec::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NoexceptSpec::~NoexceptSpec()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::NoexceptSpec::~NoexceptSpec()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::DynamicExceptionSpec::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::DynamicExceptionSpec::~DynamicExceptionSpec()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::DynamicExceptionSpec::~DynamicExceptionSpec()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FunctionType::hasRHSComponentSlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FunctionType::hasFunctionSlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FunctionType::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FunctionType::printRight((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FunctionType::~FunctionType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::FunctionType::~FunctionType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ObjCProtoName::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ObjCProtoName::~ObjCProtoName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ObjCProtoName::~ObjCProtoName()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::VendorExtQualType::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::VendorExtQualType::~VendorExtQualType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::VendorExtQualType::~VendorExtQualType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::QualType::hasRHSComponentSlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::QualType::hasArraySlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::QualType::hasFunctionSlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::QualType::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::QualType::printRight((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::QualType::~QualType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::QualType::~QualType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PixelVectorType::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PixelVectorType::~PixelVectorType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PixelVectorType::~PixelVectorType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::VectorType::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::VectorType::~VectorType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::VectorType::~VectorType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ArrayType::hasRHSComponentSlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ArrayType::hasArraySlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ArrayType::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ArrayType::printRight((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ArrayType::~ArrayType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ArrayType::~ArrayType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PointerToMemberType::hasRHSComponentSlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PointerToMemberType::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PointerToMemberType::printRight((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PointerToMemberType::~PointerToMemberType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PointerToMemberType::~PointerToMemberType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ElaboratedTypeSpefType::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ElaboratedTypeSpefType::~ElaboratedTypeSpefType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ElaboratedTypeSpefType::~ElaboratedTypeSpefType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PointerType::hasRHSComponentSlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PointerType::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PointerType::printRight((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PointerType::~PointerType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PointerType::~PointerType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ObjCProtoName::isObjCObject() const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ReferenceType::hasRHSComponentSlow((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ReferenceType::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ReferenceType::printRight((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ReferenceType::~ReferenceType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ReferenceType::~ReferenceType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::ReferenceType::collapse((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PostfixQualifiedType::printLeft((anonymous namespace)::itanium_demangle::OutputStream&) const",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PostfixQualifiedType::~PostfixQualifiedType()",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::itanium_demangle::PostfixQualifiedType::~PostfixQualifiedType()",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_get_globals",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_get_globals_fast",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::(anonymous namespace)::construct_()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::(anonymous namespace)::destruct_(void*)",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_guard_acquire",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_guard_release",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_guard_abort",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::(anonymous namespace)::InitByteGlobalMutex<__cxxabiv1::(anonymous namespace)::LibcppMutex, __cxxabiv1::(anonymous namespace)::LibcppCondVar, __cxxabiv1::(anonymous namespace)::GlobalStatic<__cxxabiv1::(anonymous namespace)::LibcppMutex>::instance, __cxxabiv1::(anonymous namespace)::GlobalStatic<__cxxabiv1::(anonymous namespace)::LibcppCondVar>::instance, &(__cxxabiv1::(anonymous namespace)::PlatformThreadID())>::LockGuard::~LockGuard()",
    "type": "CPP"
  },
  {
    "name": "t ___clang_call_terminate",
    "type": "CPP"
  },
  {
    "name": "T std::get_unexpected()",
    "type": "CPP"
  },
  {
    "name": "T std::terminate()",
    "type": "CPP"
  },
  {
    "name": "t std::__unexpected(void (*)())",
    "type": "CPP"
  },
  {
    "name": "T std::unexpected()",
    "type": "CPP"
  },
  {
    "name": "T std::get_terminate()",
    "type": "CPP"
  },
  {
    "name": "t std::__terminate(void (*)())",
    "type": "CPP"
  },
  {
    "name": "T std::set_new_handler(void (*)())",
    "type": "CPP"
  },
  {
    "name": "T std::get_new_handler()",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_vec_new",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_vec_new2",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::(anonymous namespace)::calculate_allocation_size_or_throw(unsigned long, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_vec_ctor",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_vec_new3",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_vec_cctor",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::(anonymous namespace)::st_cxa_cleanup::~st_cxa_cleanup()",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_vec_dtor",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_vec_cleanup",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_vec_delete",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_vec_delete2",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_vec_delete3",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::(anonymous namespace)::throw_bad_array_new_length()",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_pure_virtual",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_deleted_virtual",
    "type": "CPP"
  },
  {
    "name": "T std::exception::~exception()",
    "type": "CPP"
  },
  {
    "name": "T std::exception::~exception()",
    "type": "CPP"
  },
  {
    "name": "T std::exception::~exception()",
    "type": "CPP"
  },
  {
    "name": "T std::exception::what() const",
    "type": "CPP"
  },
  {
    "name": "T std::bad_exception::~bad_exception()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_exception::~bad_exception()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_exception::~bad_exception()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_exception::what() const",
    "type": "CPP"
  },
  {
    "name": "T std::bad_alloc::bad_alloc()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_alloc::bad_alloc()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_alloc::~bad_alloc()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_alloc::~bad_alloc()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_alloc::~bad_alloc()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_alloc::what() const",
    "type": "CPP"
  },
  {
    "name": "T std::bad_array_new_length::bad_array_new_length()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_array_new_length::bad_array_new_length()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_array_new_length::~bad_array_new_length()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_array_new_length::~bad_array_new_length()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_array_new_length::~bad_array_new_length()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_array_new_length::what() const",
    "type": "CPP"
  },
  {
    "name": "T std::logic_error::~logic_error()",
    "type": "CPP"
  },
  {
    "name": "T std::logic_error::~logic_error()",
    "type": "CPP"
  },
  {
    "name": "T std::logic_error::~logic_error()",
    "type": "CPP"
  },
  {
    "name": "T std::logic_error::what() const",
    "type": "CPP"
  },
  {
    "name": "T std::runtime_error::~runtime_error()",
    "type": "CPP"
  },
  {
    "name": "T std::runtime_error::~runtime_error()",
    "type": "CPP"
  },
  {
    "name": "T std::runtime_error::~runtime_error()",
    "type": "CPP"
  },
  {
    "name": "T std::runtime_error::what() const",
    "type": "CPP"
  },
  {
    "name": "T std::domain_error::~domain_error()",
    "type": "CPP"
  },
  {
    "name": "T std::domain_error::~domain_error()",
    "type": "CPP"
  },
  {
    "name": "T std::domain_error::~domain_error()",
    "type": "CPP"
  },
  {
    "name": "T std::invalid_argument::~invalid_argument()",
    "type": "CPP"
  },
  {
    "name": "T std::invalid_argument::~invalid_argument()",
    "type": "CPP"
  },
  {
    "name": "T std::invalid_argument::~invalid_argument()",
    "type": "CPP"
  },
  {
    "name": "T std::length_error::~length_error()",
    "type": "CPP"
  },
  {
    "name": "T std::length_error::~length_error()",
    "type": "CPP"
  },
  {
    "name": "T std::length_error::~length_error()",
    "type": "CPP"
  },
  {
    "name": "T std::out_of_range::~out_of_range()",
    "type": "CPP"
  },
  {
    "name": "T std::out_of_range::~out_of_range()",
    "type": "CPP"
  },
  {
    "name": "T std::out_of_range::~out_of_range()",
    "type": "CPP"
  },
  {
    "name": "T std::range_error::~range_error()",
    "type": "CPP"
  },
  {
    "name": "T std::range_error::~range_error()",
    "type": "CPP"
  },
  {
    "name": "T std::range_error::~range_error()",
    "type": "CPP"
  },
  {
    "name": "T std::overflow_error::~overflow_error()",
    "type": "CPP"
  },
  {
    "name": "T std::overflow_error::~overflow_error()",
    "type": "CPP"
  },
  {
    "name": "T std::overflow_error::~overflow_error()",
    "type": "CPP"
  },
  {
    "name": "T std::underflow_error::~underflow_error()",
    "type": "CPP"
  },
  {
    "name": "T std::underflow_error::~underflow_error()",
    "type": "CPP"
  },
  {
    "name": "T std::underflow_error::~underflow_error()",
    "type": "CPP"
  },
  {
    "name": "T std::type_info::~type_info()",
    "type": "CPP"
  },
  {
    "name": "T std::type_info::~type_info()",
    "type": "CPP"
  },
  {
    "name": "T std::type_info::~type_info()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_cast::bad_cast()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_cast::bad_cast()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_cast::~bad_cast()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_cast::~bad_cast()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_cast::~bad_cast()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_cast::what() const",
    "type": "CPP"
  },
  {
    "name": "T std::bad_typeid::bad_typeid()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_typeid::bad_typeid()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_typeid::~bad_typeid()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_typeid::~bad_typeid()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_typeid::~bad_typeid()",
    "type": "CPP"
  },
  {
    "name": "T std::bad_typeid::what() const",
    "type": "CPP"
  },
  {
    "name": "t _abort_message",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__aligned_malloc_with_fallback(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::fallback_malloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__calloc_with_fallback(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__aligned_free_with_fallback(void*)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::fallback_free(void*)",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__free_with_fallback(void*)",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__shim_type_info::~__shim_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__shim_type_info::~__shim_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__shim_type_info::~__shim_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__shim_type_info::noop1() const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__shim_type_info::noop2() const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__fundamental_type_info::~__fundamental_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__fundamental_type_info::~__fundamental_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__fundamental_type_info::~__fundamental_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__array_type_info::~__array_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__array_type_info::~__array_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__array_type_info::~__array_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__function_type_info::~__function_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__function_type_info::~__function_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__function_type_info::~__function_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__enum_type_info::~__enum_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__enum_type_info::~__enum_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__enum_type_info::~__enum_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__class_type_info::~__class_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__class_type_info::~__class_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__class_type_info::~__class_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__si_class_type_info::~__si_class_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__si_class_type_info::~__si_class_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__si_class_type_info::~__si_class_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__pbase_type_info::~__pbase_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__pbase_type_info::~__pbase_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__pbase_type_info::~__pbase_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__pointer_type_info::~__pointer_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__pointer_type_info::~__pointer_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__pointer_type_info::~__pointer_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__fundamental_type_info::can_catch(__cxxabiv1::__shim_type_info const*, void*&) const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__array_type_info::can_catch(__cxxabiv1::__shim_type_info const*, void*&) const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__function_type_info::can_catch(__cxxabiv1::__shim_type_info const*, void*&) const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__enum_type_info::can_catch(__cxxabiv1::__shim_type_info const*, void*&) const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__class_type_info::can_catch(__cxxabiv1::__shim_type_info const*, void*&) const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::is_class_type(__cxxabiv1::__shim_type_info const*)",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__class_type_info::process_found_base_class(__cxxabiv1::__dynamic_cast_info*, void*, int) const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__base_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__vmi_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__pbase_type_info::can_catch(__cxxabiv1::__shim_type_info const*, void*&) const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__pointer_type_info::can_catch(__cxxabiv1::__shim_type_info const*, void*&) const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__pointer_type_info::can_catch_nested(__cxxabiv1::__shim_type_info const*) const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__pointer_to_member_type_info::can_catch_nested(__cxxabiv1::__shim_type_info const*) const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__pointer_to_member_type_info::can_catch(__cxxabiv1::__shim_type_info const*, void*&) const",
    "type": "CPP"
  },
  {
    "name": "T ___dynamic_cast",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, void const*, void const*, int) const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__vmi_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int, bool) const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__base_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, void const*, void const*, int, bool) const",
    "type": "CPP"
  },
  {
    "name": "t __cxxabiv1::__base_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int, bool) const",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libcache.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _cache_create",
    "type": "CPP"
  },
  {
    "name": "t __cache_init_globals",
    "type": "CPP"
  },
  {
    "name": "t __entry_table_resize",
    "type": "CPP"
  },
  {
    "name": "t __value_entry_table_resize",
    "type": "CPP"
  },
  {
    "name": "T _cache_set_name",
    "type": "CPP"
  },
  {
    "name": "T _cache_set_and_retain",
    "type": "CPP"
  },
  {
    "name": "t __value_entry_get",
    "type": "CPP"
  },
  {
    "name": "t _super_fast_hash",
    "type": "CPP"
  },
  {
    "name": "t __entry_get_optionally_checking_collisions",
    "type": "CPP"
  },
  {
    "name": "t __entry_add_to_lru_list",
    "type": "CPP"
  },
  {
    "name": "t __entry_add_to_list",
    "type": "CPP"
  },
  {
    "name": "t __cache_update_limits",
    "type": "CPP"
  },
  {
    "name": "t __cache_enforce_limits",
    "type": "CPP"
  },
  {
    "name": "t _cache_release",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libcommonCrypto.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _CC_MD5_Init",
    "type": "CPP"
  },
  {
    "name": "t _CCDigestGetDigestInfo",
    "type": "CPP"
  },
  {
    "name": "t _init_globals",
    "type": "CPP"
  },
  {
    "name": "t _setReverseMap",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin",
    "type": "CPP"
  },
  {
    "name": "T _CC_MD5_Update",
    "type": "CPP"
  },
  {
    "name": "T _CC_MD5_Final",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA1",
    "type": "CPP"
  },
  {
    "name": "T _CCDigest",
    "type": "CPP"
  },
  {
    "name": "T _CC_MD5",
    "type": "CPP"
  },
  {
    "name": "T _CCHmac",
    "type": "CPP"
  },
  {
    "name": "t _convertccHmacSelector",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA256_Init",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA256_Update",
    "type": "CPP"
  },
  {
    "name": "t _ccdigest_process",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA256_Final",
    "type": "CPP"
  },
  {
    "name": "t _ccdigest_finalize",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA1_Init",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA1_Update",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA1_Final",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA256",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorGCM",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorCreateWithMode",
    "type": "CPP"
  },
  {
    "name": "t _setCryptorCipherMode",
    "type": "CPP"
  },
  {
    "name": "t _getCipherMode",
    "type": "CPP"
  },
  {
    "name": "t _ccgcm_mode_get_ctx_size",
    "type": "CPP"
  },
  {
    "name": "t _ccInitCryptor",
    "type": "CPP"
  },
  {
    "name": "t _ccgcm_mode_setup",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorGCMAddIV",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorGCMAddAAD",
    "type": "CPP"
  },
  {
    "name": "t _gcm_update",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorGCMFinal",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorRelease",
    "type": "CPP"
  },
  {
    "name": "t _ccClearCryptor",
    "type": "CPP"
  },
  {
    "name": "T _CCRandomCopyBytes",
    "type": "CPP"
  },
  {
    "name": "T _CCRandomGenerateBytes",
    "type": "CPP"
  },
  {
    "name": "T _ccDRBGGetRngState",
    "type": "CPP"
  },
  {
    "name": "T _CCDigestCreate",
    "type": "CPP"
  },
  {
    "name": "T _CCDigestInit",
    "type": "CPP"
  },
  {
    "name": "T _CCDigestOutputSize",
    "type": "CPP"
  },
  {
    "name": "T _CCDigestUpdate",
    "type": "CPP"
  },
  {
    "name": "T _CCDigestFinal",
    "type": "CPP"
  },
  {
    "name": "T _CCDigestDestroy",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorCreate",
    "type": "CPP"
  },
  {
    "name": "t _cccbc_mode_get_ctx_size",
    "type": "CPP"
  },
  {
    "name": "t _cccbc_mode_setup",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorUpdate",
    "type": "CPP"
  },
  {
    "name": "t _cccbc_mode_get_block_size",
    "type": "CPP"
  },
  {
    "name": "t _ccpkcs7_padlen",
    "type": "CPP"
  },
  {
    "name": "t _ccpkcs7_reserve",
    "type": "CPP"
  },
  {
    "name": "t _ccSimpleUpdate",
    "type": "CPP"
  },
  {
    "name": "t _cccbc_mode_crypt",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorReset",
    "type": "CPP"
  },
  {
    "name": "t _cccbc_setiv",
    "type": "CPP"
  },
  {
    "name": "T _CCCrypt",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorGetOutputLength",
    "type": "CPP"
  },
  {
    "name": "t _ccnopad_padlen",
    "type": "CPP"
  },
  {
    "name": "t _ccnopad_reserve",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorFinal",
    "type": "CPP"
  },
  {
    "name": "t _ccnopad_encrypt_pad",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA512_Init",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA512_Update",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA512_Final",
    "type": "CPP"
  },
  {
    "name": "T _CNEncode",
    "type": "CPP"
  },
  {
    "name": "T _CNEncoderCreate",
    "type": "CPP"
  },
  {
    "name": "t _CNBufferCreate",
    "type": "CPP"
  },
  {
    "name": "T _CNEncoderUpdate",
    "type": "CPP"
  },
  {
    "name": "t _CNBufferProcessData",
    "type": "CPP"
  },
  {
    "name": "t _encodeLen",
    "type": "CPP"
  },
  {
    "name": "t _enCode",
    "type": "CPP"
  },
  {
    "name": "T _CNEncoderFinal",
    "type": "CPP"
  },
  {
    "name": "t _CNBufferFlushData",
    "type": "CPP"
  },
  {
    "name": "T _CNEncoderRelease",
    "type": "CPP"
  },
  {
    "name": "t _CNBufferRelease",
    "type": "CPP"
  },
  {
    "name": "t _ccnopad_decrypt_pad",
    "type": "CPP"
  },
  {
    "name": "t _ccpkcs7_decrypt_pad",
    "type": "CPP"
  },
  {
    "name": "T _CNCRC",
    "type": "CPP"
  },
  {
    "name": "t _getDesc",
    "type": "CPP"
  },
  {
    "name": "t _crc_reverse_oneshot",
    "type": "CPP"
  },
  {
    "name": "t _gen_std_crc_table",
    "type": "CPP"
  },
  {
    "name": "t _reflect_byte",
    "type": "CPP"
  },
  {
    "name": "t _reflect",
    "type": "CPP"
  },
  {
    "name": "t _crc_reverse_update",
    "type": "CPP"
  },
  {
    "name": "T _CC_MD4_Init",
    "type": "CPP"
  },
  {
    "name": "T _CC_MD4_Update",
    "type": "CPP"
  },
  {
    "name": "T _CC_MD4_Final",
    "type": "CPP"
  },
  {
    "name": "T _CCHmacInit",
    "type": "CPP"
  },
  {
    "name": "T _CCHmacUpdate",
    "type": "CPP"
  },
  {
    "name": "T _CCHmacFinal",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorGCMDecrypt",
    "type": "CPP"
  },
  {
    "name": "T _CC_MD2",
    "type": "CPP"
  },
  {
    "name": "T _CCDesSetOddParity",
    "type": "CPP"
  },
  {
    "name": "T _CCDesIsWeakKey",
    "type": "CPP"
  },
  {
    "name": "T _ccDevRandomGetRngState",
    "type": "CPP"
  },
  {
    "name": "t _noMode",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorGCMEncrypt",
    "type": "CPP"
  },
  {
    "name": "T _CCKeyDerivationPBKDF",
    "type": "CPP"
  },
  {
    "name": "t _adler32_implementation",
    "type": "CPP"
  },
  {
    "name": "t _adler32_final",
    "type": "CPP"
  },
  {
    "name": "t _adler32_oneshot",
    "type": "CPP"
  },
  {
    "name": "t _adler32_setup",
    "type": "CPP"
  },
  {
    "name": "T _CCKDFParametersCreatePbkdf2",
    "type": "CPP"
  },
  {
    "name": "T _CCKDFParametersCreateCtrHmac",
    "type": "CPP"
  },
  {
    "name": "T _CCKDFParametersCreateCtrHmacFixed",
    "type": "CPP"
  },
  {
    "name": "T _CCKDFParametersCreateHkdf",
    "type": "CPP"
  },
  {
    "name": "T _CCKDFParametersCreateAnsiX963",
    "type": "CPP"
  },
  {
    "name": "T _CCKDFParametersDestroy",
    "type": "CPP"
  },
  {
    "name": "T _CCKeyDerivationHMac",
    "type": "CPP"
  },
  {
    "name": "T _CCDeriveKey",
    "type": "CPP"
  },
  {
    "name": "t _dump_crc_table",
    "type": "CPP"
  },
  {
    "name": "t _crc_normal_init",
    "type": "CPP"
  },
  {
    "name": "t _crc_normal_update",
    "type": "CPP"
  },
  {
    "name": "t _crc_normal_final",
    "type": "CPP"
  },
  {
    "name": "t _crc_normal_oneshot",
    "type": "CPP"
  },
  {
    "name": "t _crc_reverse_init",
    "type": "CPP"
  },
  {
    "name": "t _crc_reverse_final",
    "type": "CPP"
  },
  {
    "name": "t _reverse_poly",
    "type": "CPP"
  },
  {
    "name": "T _CCCreateBigNum",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumClear",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumFree",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumCopy",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumBitCount",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumZeroLSBCount",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumByteCount",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumFromData",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumToData",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumFromHexString",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumToHexString",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumFromDecimalString",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumToDecimalString",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumCompare",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumCompareI",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumSetNegative",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumSetI",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumGetI",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumCreateRandom",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumAdd",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumAddI",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumSub",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumSubI",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumMul",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumMulI",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumDiv",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumDiv2",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumMod",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumModI",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumSquare",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumGCD",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumLCM",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumMulMod",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumSquareMod",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumInverseMod",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumModExp",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumLeftShift",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumRightShift",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumMontgomerySetup",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumMontgomeryNormalization",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumMontgomeryReduce",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumIsPrime",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumIsOdd",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumIsZero",
    "type": "CPP"
  },
  {
    "name": "T _CCBigNumIsNegative",
    "type": "CPP"
  },
  {
    "name": "t _cc_alloc",
    "type": "CPP"
  },
  {
    "name": "t _cc_realloc",
    "type": "CPP"
  },
  {
    "name": "t _cc_free",
    "type": "CPP"
  },
  {
    "name": "T _CCAESCmac",
    "type": "CPP"
  },
  {
    "name": "T _CCAESCmacCreate",
    "type": "CPP"
  },
  {
    "name": "T _CCAESCmacUpdate",
    "type": "CPP"
  },
  {
    "name": "T _CCAESCmacFinal",
    "type": "CPP"
  },
  {
    "name": "T _CCAESCmacDestroy",
    "type": "CPP"
  },
  {
    "name": "T _CCAESCmacOutputSizeFromContext",
    "type": "CPP"
  },
  {
    "name": "T _CCCKGGetCommitmentSize",
    "type": "CPP"
  },
  {
    "name": "T _CCCKGGetShareSize",
    "type": "CPP"
  },
  {
    "name": "T _CCCKGGetOpeningSize",
    "type": "CPP"
  },
  {
    "name": "T _CCCKGContributorCreate",
    "type": "CPP"
  },
  {
    "name": "t _CCCKGContextCreate",
    "type": "CPP"
  },
  {
    "name": "T _CCCKGOwnerCreate",
    "type": "CPP"
  },
  {
    "name": "T _CCCKGContributorDestroy",
    "type": "CPP"
  },
  {
    "name": "T _CCCKGOwnerDestroy",
    "type": "CPP"
  },
  {
    "name": "T _CCCKGContributorCommit",
    "type": "CPP"
  },
  {
    "name": "T _CCCKGOwnerGenerateShare",
    "type": "CPP"
  },
  {
    "name": "T _CCCKGContributorFinish",
    "type": "CPP"
  },
  {
    "name": "t _CCCKGConvertNativeToECCryptor",
    "type": "CPP"
  },
  {
    "name": "T _CCCKGOwnerFinish",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin_probe",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorCreateFromData",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorCreateFromDataWithMode",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorReset_binary_compatibility",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorGetIV",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorEncryptDataBlock",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorDecryptDataBlock",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorAddParameter",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorGetParameter",
    "type": "CPP"
  },
  {
    "name": "t _kCCDHRFC2409Group2_storage",
    "type": "CPP"
  },
  {
    "name": "t _kCCDHRFC3526Group5_storage",
    "type": "CPP"
  },
  {
    "name": "T _CCDHCreate",
    "type": "CPP"
  },
  {
    "name": "T _CCDHRelease",
    "type": "CPP"
  },
  {
    "name": "T _CCDHGenerateKey",
    "type": "CPP"
  },
  {
    "name": "T _CCDHComputeKey",
    "type": "CPP"
  },
  {
    "name": "T _CCDHParametersCreateFromData",
    "type": "CPP"
  },
  {
    "name": "T _CCDHParametersRelease",
    "type": "CPP"
  },
  {
    "name": "T _CCDHParametersCreateFromPKCS3",
    "type": "CPP"
  },
  {
    "name": "T _CCDHParametersPKCS3EncodeLength",
    "type": "CPP"
  },
  {
    "name": "T _CCDHParametersPKCS3Encode",
    "type": "CPP"
  },
  {
    "name": "T _CCDigestGetBlockSize",
    "type": "CPP"
  },
  {
    "name": "T _CCDigestGetOutputSize",
    "type": "CPP"
  },
  {
    "name": "T _CCDigestGetBlockSizeFromRef",
    "type": "CPP"
  },
  {
    "name": "T _CCDigestBlockSize",
    "type": "CPP"
  },
  {
    "name": "T _CCDigestGetOutputSizeFromRef",
    "type": "CPP"
  },
  {
    "name": "T _CCDigestOID",
    "type": "CPP"
  },
  {
    "name": "T _CCDigestOIDLen",
    "type": "CPP"
  },
  {
    "name": "T _CCDigestCreateByOID",
    "type": "CPP"
  },
  {
    "name": "T _CCDigestReset",
    "type": "CPP"
  },
  {
    "name": "T _CC_MD4",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA224",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA384",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA512",
    "type": "CPP"
  },
  {
    "name": "T _MD5Final",
    "type": "CPP"
  },
  {
    "name": "T _CC_MD2_Init",
    "type": "CPP"
  },
  {
    "name": "T _CC_MD2_Update",
    "type": "CPP"
  },
  {
    "name": "T _CC_MD2_Final",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA224_Init",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA224_Update",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA224_Final",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA384_Init",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA384_Update",
    "type": "CPP"
  },
  {
    "name": "T _CC_SHA384_Final",
    "type": "CPP"
  },
  {
    "name": "T _CCECCryptorGeneratePair",
    "type": "CPP"
  },
  {
    "name": "t _ccMallocECCryptor",
    "type": "CPP"
  },
  {
    "name": "T _CCECCryptorGetPublicKeyFromPrivateKey",
    "type": "CPP"
  },
  {
    "name": "t _ccECpairwiseConsistencyCheck",
    "type": "CPP"
  },
  {
    "name": "t _ccECCryptorFree",
    "type": "CPP"
  },
  {
    "name": "T _CCECCryptorGetKeyComponents",
    "type": "CPP"
  },
  {
    "name": "T _CCECCryptorCreateFromData",
    "type": "CPP"
  },
  {
    "name": "T _CCECGetKeyType",
    "type": "CPP"
  },
  {
    "name": "T _CCECGetKeySize",
    "type": "CPP"
  },
  {
    "name": "T _CCECCryptorRelease",
    "type": "CPP"
  },
  {
    "name": "T _CCECCryptorImportPublicKey",
    "type": "CPP"
  },
  {
    "name": "T _CCECCryptorImportKey",
    "type": "CPP"
  },
  {
    "name": "T _CCECCryptorExportPublicKey",
    "type": "CPP"
  },
  {
    "name": "T _CCECCryptorExportKey",
    "type": "CPP"
  },
  {
    "name": "T _CCECCryptorSignHash",
    "type": "CPP"
  },
  {
    "name": "T _CCECCryptorVerifyHash",
    "type": "CPP"
  },
  {
    "name": "T _CCECCryptorWrapKey",
    "type": "CPP"
  },
  {
    "name": "T _CCECCryptorUnwrapKey",
    "type": "CPP"
  },
  {
    "name": "T _CCECCryptorComputeSharedSecret",
    "type": "CPP"
  },
  {
    "name": "T _CCECCryptorTwinDiversifyEntropySize",
    "type": "CPP"
  },
  {
    "name": "T _CCECCryptorTwinDiversifyKey",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorGCMSetIV",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorGCMAddADD",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorGCMaddAAD",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorGCMFinalize",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorGCMReset",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorGCMOneshotEncrypt",
    "type": "CPP"
  },
  {
    "name": "T _CCCryptorGCMOneshotDecrypt",
    "type": "CPP"
  },
  {
    "name": "T _CCHmacDestroy",
    "type": "CPP"
  },
  {
    "name": "T _CCHmacOutputSizeFromRef",
    "type": "CPP"
  },
  {
    "name": "T _CCHmacOutputSize",
    "type": "CPP"
  },
  {
    "name": "T _CCHmacCreate",
    "type": "CPP"
  },
  {
    "name": "T _CCHmacOneShot",
    "type": "CPP"
  },
  {
    "name": "T _CCHmacClone",
    "type": "CPP"
  },
  {
    "name": "T _CCCalibratePBKDF",
    "type": "CPP"
  },
  {
    "name": "T _CCRandomUniform",
    "type": "CPP"
  },
  {
    "name": "T _CCRSACryptorGeneratePair",
    "type": "CPP"
  },
  {
    "name": "t _ccMallocRSACryptor",
    "type": "CPP"
  },
  {
    "name": "T _CCRSACryptorCreatePublicKeyFromPrivateKey",
    "type": "CPP"
  },
  {
    "name": "t _ccRSACryptorClear",
    "type": "CPP"
  },
  {
    "name": "T _CCRSACryptorRelease",
    "type": "CPP"
  },
  {
    "name": "T _CCRSACryptorGetPublicKeyFromPrivateKey",
    "type": "CPP"
  },
  {
    "name": "T _CCRSAGetKeyType",
    "type": "CPP"
  },
  {
    "name": "T _CCRSAGetKeySize",
    "type": "CPP"
  },
  {
    "name": "T _CCRSACryptorImport",
    "type": "CPP"
  },
  {
    "name": "T _CCRSACryptorExport",
    "type": "CPP"
  },
  {
    "name": "T _CCRSACryptorEncrypt",
    "type": "CPP"
  },
  {
    "name": "T _CCRSACryptorDecrypt",
    "type": "CPP"
  },
  {
    "name": "T _CCRSACryptorCrypt",
    "type": "CPP"
  },
  {
    "name": "T _CCRSACryptorCreateFromData",
    "type": "CPP"
  },
  {
    "name": "T _CCRSAGetKeyComponents",
    "type": "CPP"
  },
  {
    "name": "T _CCRSAGetCRTComponentsSizes",
    "type": "CPP"
  },
  {
    "name": "T _CCRSAGetCRTComponents",
    "type": "CPP"
  },
  {
    "name": "T _CCRSACryptorSign",
    "type": "CPP"
  },
  {
    "name": "t _validate_sign_verify_params",
    "type": "CPP"
  },
  {
    "name": "T _CCRSACryptorVerify",
    "type": "CPP"
  },
  {
    "name": "T _CCSymmetricKeyWrap",
    "type": "CPP"
  },
  {
    "name": "T _CCSymmetricKeyUnwrap",
    "type": "CPP"
  },
  {
    "name": "T _CCSymmetricWrappedSize",
    "type": "CPP"
  },
  {
    "name": "T _CCSymmetricUnwrappedSize",
    "type": "CPP"
  },
  {
    "name": "t _cc_rc4_crypt_mode",
    "type": "CPP"
  },
  {
    "name": "t _ccecb_mode_get_ctx_size",
    "type": "CPP"
  },
  {
    "name": "t _ccecb_mode_get_block_size",
    "type": "CPP"
  },
  {
    "name": "t _ccecb_mode_setup",
    "type": "CPP"
  },
  {
    "name": "t _ccecb_mode_crypt",
    "type": "CPP"
  },
  {
    "name": "t _cccbc_getiv",
    "type": "CPP"
  },
  {
    "name": "t _cccfb_mode_get_ctx_size",
    "type": "CPP"
  },
  {
    "name": "t _cccfb_mode_get_block_size",
    "type": "CPP"
  },
  {
    "name": "t _cccfb_mode_setup",
    "type": "CPP"
  },
  {
    "name": "t _cccfb_mode_crypt",
    "type": "CPP"
  },
  {
    "name": "t _cccfb8_mode_get_ctx_size",
    "type": "CPP"
  },
  {
    "name": "t _cccfb8_mode_get_block_size",
    "type": "CPP"
  },
  {
    "name": "t _cccfb8_mode_setup",
    "type": "CPP"
  },
  {
    "name": "t _cccfb8_mode_crypt",
    "type": "CPP"
  },
  {
    "name": "t _ccctr_mode_get_ctx_size",
    "type": "CPP"
  },
  {
    "name": "t _ccctr_mode_get_block_size",
    "type": "CPP"
  },
  {
    "name": "t _ccctr_mode_setup",
    "type": "CPP"
  },
  {
    "name": "t _ccctr_mode_crypt",
    "type": "CPP"
  },
  {
    "name": "t _ccctr_setiv",
    "type": "CPP"
  },
  {
    "name": "t _ccofb_mode_get_ctx_size",
    "type": "CPP"
  },
  {
    "name": "t _ccofb_mode_get_block_size",
    "type": "CPP"
  },
  {
    "name": "t _ccofb_mode_setup",
    "type": "CPP"
  },
  {
    "name": "t _ccofb_mode_crypt",
    "type": "CPP"
  },
  {
    "name": "t _ccxts_mode_get_ctx_size",
    "type": "CPP"
  },
  {
    "name": "t _ccxts_mode_get_block_size",
    "type": "CPP"
  },
  {
    "name": "t _ccxts_mode_setup",
    "type": "CPP"
  },
  {
    "name": "t _ccxts_mode_encrypt_tweak",
    "type": "CPP"
  },
  {
    "name": "t _ccxts_mode_decrypt_tweak",
    "type": "CPP"
  },
  {
    "name": "t _ccgcm_mode_get_block_size",
    "type": "CPP"
  },
  {
    "name": "t _ccgcm_mode_crypt",
    "type": "CPP"
  },
  {
    "name": "t _ccgcm_setiv",
    "type": "CPP"
  },
  {
    "name": "t _ccccm_mode_get_ctx_size",
    "type": "CPP"
  },
  {
    "name": "t _ccccm_mode_get_block_size",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libcompiler_rt.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T ___udivti3",
    "type": "CPP"
  },
  {
    "name": "T ___udivmodti4",
    "type": "CPP"
  },
  {
    "name": "T ___udivdi3",
    "type": "CPP"
  },
  {
    "name": "T ___umoddi3",
    "type": "CPP"
  },
  {
    "name": "T ___fixunsdfdi",
    "type": "CPP"
  },
  {
    "name": "T ___fixunsxfdi",
    "type": "CPP"
  },
  {
    "name": "T ___moddi3",
    "type": "CPP"
  },
  {
    "name": "T ___divdi3",
    "type": "CPP"
  },
  {
    "name": "T ___divti3",
    "type": "CPP"
  },
  {
    "name": "T ___absvdi2",
    "type": "CPP"
  },
  {
    "name": "T ___absvsi2",
    "type": "CPP"
  },
  {
    "name": "T ___absvti2",
    "type": "CPP"
  },
  {
    "name": "T ___addvdi3",
    "type": "CPP"
  },
  {
    "name": "T ___addvsi3",
    "type": "CPP"
  },
  {
    "name": "T ___addvti3",
    "type": "CPP"
  },
  {
    "name": "T ___ashldi3",
    "type": "CPP"
  },
  {
    "name": "T ___ashlti3",
    "type": "CPP"
  },
  {
    "name": "T ___ashrdi3",
    "type": "CPP"
  },
  {
    "name": "T ___ashrti3",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_load",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_store",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_compare_exchange",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_exchange",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_load_1",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_load_2",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_load_4",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_load_8",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_store_1",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_store_2",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_store_4",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_store_8",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_exchange_1",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_exchange_2",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_exchange_4",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_exchange_8",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_compare_exchange_1",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_compare_exchange_2",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_compare_exchange_4",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_compare_exchange_8",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_add_1",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_add_2",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_add_4",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_add_8",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_sub_1",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_sub_2",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_sub_4",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_sub_8",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_and_1",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_and_2",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_and_4",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_and_8",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_or_1",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_or_2",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_or_4",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_or_8",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_xor_1",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_xor_2",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_xor_4",
    "type": "CPP"
  },
  {
    "name": "T ___atomic_fetch_xor_8",
    "type": "CPP"
  },
  {
    "name": "T _atomic_flag_clear",
    "type": "CPP"
  },
  {
    "name": "T _atomic_flag_clear_explicit",
    "type": "CPP"
  },
  {
    "name": "T _atomic_flag_test_and_set",
    "type": "CPP"
  },
  {
    "name": "T _atomic_flag_test_and_set_explicit",
    "type": "CPP"
  },
  {
    "name": "T _atomic_signal_fence",
    "type": "CPP"
  },
  {
    "name": "T _atomic_thread_fence",
    "type": "CPP"
  },
  {
    "name": "T ___clear_cache",
    "type": "CPP"
  },
  {
    "name": "T ___clzdi2",
    "type": "CPP"
  },
  {
    "name": "T ___clzsi2",
    "type": "CPP"
  },
  {
    "name": "T ___clzti2",
    "type": "CPP"
  },
  {
    "name": "T ___cmpdi2",
    "type": "CPP"
  },
  {
    "name": "T ___cmpti2",
    "type": "CPP"
  },
  {
    "name": "T ___ctzdi2",
    "type": "CPP"
  },
  {
    "name": "T ___ctzsi2",
    "type": "CPP"
  },
  {
    "name": "T ___ctzti2",
    "type": "CPP"
  },
  {
    "name": "T ___divdc3",
    "type": "CPP"
  },
  {
    "name": "T ___divsc3",
    "type": "CPP"
  },
  {
    "name": "T ___divxc3",
    "type": "CPP"
  },
  {
    "name": "T ___enable_execute_stack",
    "type": "CPP"
  },
  {
    "name": "T ___extendhfsf2",
    "type": "CPP"
  },
  {
    "name": "T ___gnu_h2f_ieee",
    "type": "CPP"
  },
  {
    "name": "T ___ffsdi2",
    "type": "CPP"
  },
  {
    "name": "T ___ffsti2",
    "type": "CPP"
  },
  {
    "name": "T ___fixdfdi",
    "type": "CPP"
  },
  {
    "name": "T ___fixdfti",
    "type": "CPP"
  },
  {
    "name": "T ___fixsfdi",
    "type": "CPP"
  },
  {
    "name": "T ___fixsfti",
    "type": "CPP"
  },
  {
    "name": "T ___fixunsdfsi",
    "type": "CPP"
  },
  {
    "name": "T ___fixunsdfti",
    "type": "CPP"
  },
  {
    "name": "T ___fixunssfdi",
    "type": "CPP"
  },
  {
    "name": "T ___fixunssfsi",
    "type": "CPP"
  },
  {
    "name": "T ___fixunssfti",
    "type": "CPP"
  },
  {
    "name": "T ___fixunsxfsi",
    "type": "CPP"
  },
  {
    "name": "T ___fixunsxfti",
    "type": "CPP"
  },
  {
    "name": "T ___fixxfdi",
    "type": "CPP"
  },
  {
    "name": "T ___fixxfti",
    "type": "CPP"
  },
  {
    "name": "T ___floatdidf",
    "type": "CPP"
  },
  {
    "name": "T ___floatdisf",
    "type": "CPP"
  },
  {
    "name": "T ___floatdixf",
    "type": "CPP"
  },
  {
    "name": "T ___floattidf",
    "type": "CPP"
  },
  {
    "name": "T ___floattisf",
    "type": "CPP"
  },
  {
    "name": "T ___floattixf",
    "type": "CPP"
  },
  {
    "name": "T ___floatundidf",
    "type": "CPP"
  },
  {
    "name": "T ___floatundisf",
    "type": "CPP"
  },
  {
    "name": "T ___floatundixf",
    "type": "CPP"
  },
  {
    "name": "T ___floatuntidf",
    "type": "CPP"
  },
  {
    "name": "T ___floatuntisf",
    "type": "CPP"
  },
  {
    "name": "T ___floatuntixf",
    "type": "CPP"
  },
  {
    "name": "T ___gcc_personality_v0",
    "type": "CPP"
  },
  {
    "name": "t _readEncodedPointer",
    "type": "CPP"
  },
  {
    "name": "t ___compilerrt_abort_impl",
    "type": "CPP"
  },
  {
    "name": "T ___lshrdi3",
    "type": "CPP"
  },
  {
    "name": "T ___lshrti3",
    "type": "CPP"
  },
  {
    "name": "T ___modti3",
    "type": "CPP"
  },
  {
    "name": "T ___muldc3",
    "type": "CPP"
  },
  {
    "name": "T ___muldi3",
    "type": "CPP"
  },
  {
    "name": "T ___mulodi4",
    "type": "CPP"
  },
  {
    "name": "T ___mulosi4",
    "type": "CPP"
  },
  {
    "name": "T ___muloti4",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libcopyfile.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _copyfile",
    "type": "CPP"
  },
  {
    "name": "t _copyfile_preamble",
    "type": "CPP"
  },
  {
    "name": "T _copyfile_state_alloc",
    "type": "CPP"
  },
  {
    "name": "T _copyfile_state_free",
    "type": "CPP"
  },
  {
    "name": "t _copyfile_quarantine",
    "type": "CPP"
  },
  {
    "name": "t _copyfile_internal",
    "type": "CPP"
  },
  {
    "name": "t _copyfile_stat",
    "type": "CPP"
  },
  {
    "name": "T _xattr_name_with_flags",
    "type": "CPP"
  },
  {
    "name": "t _nameInDefaultList",
    "type": "CPP"
  },
  {
    "name": "t ___nameInDefaultList_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _doesdecmpfs",
    "type": "CPP"
  },
  {
    "name": "T _fcopyfile",
    "type": "CPP"
  },
  {
    "name": "T _copyfile_state_get",
    "type": "CPP"
  },
  {
    "name": "T _copyfile_state_set",
    "type": "CPP"
  },
  {
    "name": "t _add_uberace",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libcorecrypto.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _ccrng",
    "type": "CPP"
  },
  {
    "name": "t _ccrng_cryptographic_init_once_user",
    "type": "CPP"
  },
  {
    "name": "t _ccrng_cryptographic_init_once",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_ctr_crypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_ecb_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccdrbg_factory_nistctr",
    "type": "CPP"
  },
  {
    "name": "t _cc_uptime_seconds",
    "type": "CPP"
  },
  {
    "name": "t _get_two_blocks_entropy",
    "type": "CPP"
  },
  {
    "name": "t _cc_get_entropy",
    "type": "CPP"
  },
  {
    "name": "T _cc_cmp_safe",
    "type": "CPP"
  },
  {
    "name": "t _init",
    "type": "CPP"
  },
  {
    "name": "t _nistctr_init",
    "type": "CPP"
  },
  {
    "name": "t _validate_inputs",
    "type": "CPP"
  },
  {
    "name": "t _df_initialize",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_ctr_init",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_encrypt_aesni_key",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_decrypt_aesni_key",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_ctr_setctr",
    "type": "CPP"
  },
  {
    "name": "T _cc_clear",
    "type": "CPP"
  },
  {
    "name": "t _bcc_update",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_vng_ctr_crypt",
    "type": "CPP"
  },
  {
    "name": "t ONE",
    "type": "CPP"
  },
  {
    "name": "t TWO",
    "type": "CPP"
  },
  {
    "name": "t .Lbswap_mask",
    "type": "CPP"
  },
  {
    "name": "t _aes_ctr_crypt",
    "type": "CPP"
  },
  {
    "name": "t Main_Decrypt_Loop",
    "type": "CPP"
  },
  {
    "name": "t _df",
    "type": "CPP"
  },
  {
    "name": "t _df_bcc_update",
    "type": "CPP"
  },
  {
    "name": "t _drbg_update",
    "type": "CPP"
  },
  {
    "name": "t _ccrng_cryptographic_generate",
    "type": "CPP"
  },
  {
    "name": "t _generate",
    "type": "CPP"
  },
  {
    "name": "T _ccmd5_di",
    "type": "CPP"
  },
  {
    "name": "T _ccsha1_di",
    "type": "CPP"
  },
  {
    "name": "T _ccsha224_di",
    "type": "CPP"
  },
  {
    "name": "T _ccsha256_di",
    "type": "CPP"
  },
  {
    "name": "T _ccsha384_di",
    "type": "CPP"
  },
  {
    "name": "T _ccsha512_di",
    "type": "CPP"
  },
  {
    "name": "T _ccdigest_init",
    "type": "CPP"
  },
  {
    "name": "T _ccdigest_update",
    "type": "CPP"
  },
  {
    "name": "t _ccdigest_final_64le",
    "type": "CPP"
  },
  {
    "name": "t _md5_compress",
    "type": "CPP"
  },
  {
    "name": "t _reseed",
    "type": "CPP"
  },
  {
    "name": "T _ccdigest",
    "type": "CPP"
  },
  {
    "name": "t _AccelerateCrypto_SHA1",
    "type": "CPP"
  },
  {
    "name": "t _AccelerateCrypto_SHA1_compress",
    "type": "CPP"
  },
  {
    "name": "t _AccelerateCrypto_SHA1_compress_AVX2",
    "type": "CPP"
  },
  {
    "name": "t _ccdigest_final_64be",
    "type": "CPP"
  },
  {
    "name": "T _ccder_sizeof",
    "type": "CPP"
  },
  {
    "name": "T _ccder_sizeof_tag",
    "type": "CPP"
  },
  {
    "name": "T _ccder_sizeof_len",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_body",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_tl",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_len",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_tag",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_constructed_tl",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_tag",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_constructed_tl",
    "type": "CPP"
  },
  {
    "name": "t _ccder_decode_tl_internal",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_len",
    "type": "CPP"
  },
  {
    "name": "t _ccder_decode_len_internal",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_tl",
    "type": "CPP"
  },
  {
    "name": "T _cchmac",
    "type": "CPP"
  },
  {
    "name": "T _cchmac_init",
    "type": "CPP"
  },
  {
    "name": "T _cchmac_update",
    "type": "CPP"
  },
  {
    "name": "T _cchmac_final",
    "type": "CPP"
  },
  {
    "name": "t _AccelerateCrypto_SHA256",
    "type": "CPP"
  },
  {
    "name": "t _AccelerateCrypto_SHA256_compress",
    "type": "CPP"
  },
  {
    "name": "t _AccelerateCrypto_SHA256_compress_AVX2",
    "type": "CPP"
  },
  {
    "name": "T _ccrng_system_init",
    "type": "CPP"
  },
  {
    "name": "T _ccder_sizeof_raw_octet_string",
    "type": "CPP"
  },
  {
    "name": "T _ccder_sizeof_implicit_raw_octet_string",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_gcm_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_gcm_init",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_gcm_reset",
    "type": "CPP"
  },
  {
    "name": "t _gcm_init",
    "type": "CPP"
  },
  {
    "name": "t _gcm_gmult",
    "type": "CPP"
  },
  {
    "name": "t _gcm_ghash",
    "type": "CPP"
  },
  {
    "name": "T _ccgcm_set_iv_legacy",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_gcm_set_iv",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_gcm_mult_h",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_gcm_aad",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_vng_gcm_decrypt",
    "type": "CPP"
  },
  {
    "name": "t ONE",
    "type": "CPP"
  },
  {
    "name": "t TWO",
    "type": "CPP"
  },
  {
    "name": "t .Lbswap_mask",
    "type": "CPP"
  },
  {
    "name": "t _gcmEncrypt_avx1",
    "type": "CPP"
  },
  {
    "name": "t Main_Encrypt_Loop",
    "type": "CPP"
  },
  {
    "name": "t .End_Main_Encrypt_Loop",
    "type": "CPP"
  },
  {
    "name": "t _gcmDecrypt_avx1",
    "type": "CPP"
  },
  {
    "name": "t Main_Decrypt_Loop",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_gcm_finalize",
    "type": "CPP"
  },
  {
    "name": "T _ccnistkdf_ctr_hmac",
    "type": "CPP"
  },
  {
    "name": "T _ccnistkdf_ctr_hmac_fixed",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_sequence_tl",
    "type": "CPP"
  },
  {
    "name": "T _ccec_compact_import_priv_size",
    "type": "CPP"
  },
  {
    "name": "T _ccec_keysize_is_supported",
    "type": "CPP"
  },
  {
    "name": "T _ccec_get_cp",
    "type": "CPP"
  },
  {
    "name": "T _ccec_cp_256",
    "type": "CPP"
  },
  {
    "name": "T _ccec_compact_import_priv",
    "type": "CPP"
  },
  {
    "name": "T _ccn_bitlen",
    "type": "CPP"
  },
  {
    "name": "T _ccec_compact_import_pub",
    "type": "CPP"
  },
  {
    "name": "T _ccn_read_uint",
    "type": "CPP"
  },
  {
    "name": "t _ccec_affine_point_from_x",
    "type": "CPP"
  },
  {
    "name": "T _ccn_cmp",
    "type": "CPP"
  },
  {
    "name": "t _ccn_mul_ws",
    "type": "CPP"
  },
  {
    "name": "T _ccn_mul",
    "type": "CPP"
  },
  {
    "name": "T _ccn_set",
    "type": "CPP"
  },
  {
    "name": "T _ccn_sub",
    "type": "CPP"
  },
  {
    "name": "t _ccn_mux",
    "type": "CPP"
  },
  {
    "name": "t _cczp_sqr",
    "type": "CPP"
  },
  {
    "name": "t _ccn_sqr_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_mul",
    "type": "CPP"
  },
  {
    "name": "t _cczp_add",
    "type": "CPP"
  },
  {
    "name": "t _cczp_add_ws",
    "type": "CPP"
  },
  {
    "name": "T _ccn_add",
    "type": "CPP"
  },
  {
    "name": "t _cczp_sub",
    "type": "CPP"
  },
  {
    "name": "t _cczp_sub_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_sqrt",
    "type": "CPP"
  },
  {
    "name": "t _cczp_sqrt_blinded",
    "type": "CPP"
  },
  {
    "name": "T _ccn_add1",
    "type": "CPP"
  },
  {
    "name": "T _ccn_shift_right",
    "type": "CPP"
  },
  {
    "name": "t _cczp_power_fast_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_sqr_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_mul_ws",
    "type": "CPP"
  },
  {
    "name": "T _ccec_compact_export",
    "type": "CPP"
  },
  {
    "name": "T _ccn_write_uint_padded_ct",
    "type": "CPP"
  },
  {
    "name": "T _ccec_x963_import_pub_size",
    "type": "CPP"
  },
  {
    "name": "T _ccec_compact_import_pub_size",
    "type": "CPP"
  },
  {
    "name": "T _ccec_rfc6637_wrap_key_size",
    "type": "CPP"
  },
  {
    "name": "T _ccec_rfc6637_wrap_key",
    "type": "CPP"
  },
  {
    "name": "T _ccec_generate_key_fips",
    "type": "CPP"
  },
  {
    "name": "T _ccec_generate_key_internal_fips",
    "type": "CPP"
  },
  {
    "name": "t _ccec_generate_scalar_fips_retry",
    "type": "CPP"
  },
  {
    "name": "T _ccn_sub1",
    "type": "CPP"
  },
  {
    "name": "T _ccn_random_bits",
    "type": "CPP"
  },
  {
    "name": "t _ccec_make_pub_from_priv",
    "type": "CPP"
  },
  {
    "name": "T _ccn_n",
    "type": "CPP"
  },
  {
    "name": "t _ccec_projectify",
    "type": "CPP"
  },
  {
    "name": "t _ccec_mult",
    "type": "CPP"
  },
  {
    "name": "t _ccec_mult_edge_cases",
    "type": "CPP"
  },
  {
    "name": "T _ccn_div_euclid_ws",
    "type": "CPP"
  },
  {
    "name": "t _ccn_make_recip_ws",
    "type": "CPP"
  },
  {
    "name": "t _ccn_shift_right_multi",
    "type": "CPP"
  },
  {
    "name": "t _ccn_shift_left_multi",
    "type": "CPP"
  },
  {
    "name": "t _ccn_shift_left",
    "type": "CPP"
  },
  {
    "name": "t _ccn_shift_left_asm",
    "type": "CPP"
  },
  {
    "name": "t _ccn_div_use_recip_ws",
    "type": "CPP"
  },
  {
    "name": "t _ccn_cond_swap",
    "type": "CPP"
  },
  {
    "name": "t _ccec_mult_ws",
    "type": "CPP"
  },
  {
    "name": "t _XYCZaddC_ws",
    "type": "CPP"
  },
  {
    "name": "t _XYCZadd_ws",
    "type": "CPP"
  },
  {
    "name": "t _ccec_add_ws",
    "type": "CPP"
  },
  {
    "name": "t _ccec_is_point_projective",
    "type": "CPP"
  },
  {
    "name": "t _ccec_affinify",
    "type": "CPP"
  },
  {
    "name": "t _cczp_inv_field_ws",
    "type": "CPP"
  },
  {
    "name": "T _ccec_pairwise_consistency_check",
    "type": "CPP"
  },
  {
    "name": "T _ccec_sign",
    "type": "CPP"
  },
  {
    "name": "t _ccec_sign_internal",
    "type": "CPP"
  },
  {
    "name": "t _cczp_modn",
    "type": "CPP"
  },
  {
    "name": "t _ccec_validate_scalar",
    "type": "CPP"
  },
  {
    "name": "t _cczp_mod_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_inv_field",
    "type": "CPP"
  },
  {
    "name": "T _ccder_sizeof_integer",
    "type": "CPP"
  },
  {
    "name": "T _ccder_sizeof_implicit_integer",
    "type": "CPP"
  },
  {
    "name": "T _ccn_write_int_size",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_integer",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_implicit_integer",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_body_nocopy",
    "type": "CPP"
  },
  {
    "name": "T _ccn_write_int",
    "type": "CPP"
  },
  {
    "name": "T _ccn_write_uint",
    "type": "CPP"
  },
  {
    "name": "T _ccec_verify",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_seqii",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_uint",
    "type": "CPP"
  },
  {
    "name": "t _ccder_decode_uint_internal",
    "type": "CPP"
  },
  {
    "name": "t _ccec_verify_internal",
    "type": "CPP"
  },
  {
    "name": "t _cczp_inv_odd",
    "type": "CPP"
  },
  {
    "name": "t _ccec_is_point",
    "type": "CPP"
  },
  {
    "name": "t _ccec_twin_mult",
    "type": "CPP"
  },
  {
    "name": "t _ccec_full_add_ws",
    "type": "CPP"
  },
  {
    "name": "t _ccec_full_sub_ws",
    "type": "CPP"
  },
  {
    "name": "T _cczp_inv",
    "type": "CPP"
  },
  {
    "name": "t _cczp_inv_ws",
    "type": "CPP"
  },
  {
    "name": "t _xgcd_ws",
    "type": "CPP"
  },
  {
    "name": "t _get_msd",
    "type": "CPP"
  },
  {
    "name": "T _cc_muxp",
    "type": "CPP"
  },
  {
    "name": "t _aX_plus_bY_pair",
    "type": "CPP"
  },
  {
    "name": "t _aX_plus_bY",
    "type": "CPP"
  },
  {
    "name": "T _ccn_mul1",
    "type": "CPP"
  },
  {
    "name": "t _add_signed",
    "type": "CPP"
  },
  {
    "name": "t _ccn_div_euclid_sp_ws",
    "type": "CPP"
  },
  {
    "name": "T _ccn_div_equal_size_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_init_ws",
    "type": "CPP"
  },
  {
    "name": "t _twin_mult_normalize",
    "type": "CPP"
  },
  {
    "name": "t _ccec_double_ws",
    "type": "CPP"
  },
  {
    "name": "t _ccec_full_add_normalized_ws",
    "type": "CPP"
  },
  {
    "name": "t _ccec_full_sub_normalized_ws",
    "type": "CPP"
  },
  {
    "name": "t _ccec_affinify_x_only",
    "type": "CPP"
  },
  {
    "name": "t _ccec_rfc6637_wrap_core",
    "type": "CPP"
  },
  {
    "name": "T _ccecdh_compute_shared_secret",
    "type": "CPP"
  },
  {
    "name": "T _ccn_write_uint_size",
    "type": "CPP"
  },
  {
    "name": "t _ccec_validate_pub_and_projectify",
    "type": "CPP"
  },
  {
    "name": "t _pgp_key_checksum",
    "type": "CPP"
  },
  {
    "name": "t _ccec_rfc6637_kdf",
    "type": "CPP"
  },
  {
    "name": "t _ccec_rfc6637_wrap_pub_size",
    "type": "CPP"
  },
  {
    "name": "T _ccwrap_auth_encrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccwrap_auth_encrypt_withiv",
    "type": "CPP"
  },
  {
    "name": "T _ccwrap_wrapped_size",
    "type": "CPP"
  },
  {
    "name": "t _ccwrap_argsvalid",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_gcm_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_vng_gcm_encrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccrng_pbkdf2_prng_init",
    "type": "CPP"
  },
  {
    "name": "T _ccpbkdf2_hmac",
    "type": "CPP"
  },
  {
    "name": "t _F",
    "type": "CPP"
  },
  {
    "name": "T _ccec_generate_key_legacy",
    "type": "CPP"
  },
  {
    "name": "t _ccec_generate_key_internal_legacy",
    "type": "CPP"
  },
  {
    "name": "t _ccrng_pbkdf2_prng_generate",
    "type": "CPP"
  },
  {
    "name": "t _ccec_generate_scalar_legacy",
    "type": "CPP"
  },
  {
    "name": "T _ccdrbg_factory_nisthmac",
    "type": "CPP"
  },
  {
    "name": "t _update",
    "type": "CPP"
  },
  {
    "name": "T _ccrng_drbg_init_withdrbg",
    "type": "CPP"
  },
  {
    "name": "T _ccec_export_pub",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_rsa_pub_x509_n",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_rsa_pub_n",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_uint_n",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_import_pub",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_rsa_pub_x509",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_rsa_pub",
    "type": "CPP"
  },
  {
    "name": "T _cczp_init",
    "type": "CPP"
  },
  {
    "name": "t _ccn_make_recip",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_pub_crypt",
    "type": "CPP"
  },
  {
    "name": "T _cczp_power_fast",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_emsa_pkcs1v15_verify",
    "type": "CPP"
  },
  {
    "name": "t ONE",
    "type": "CPP"
  },
  {
    "name": "t TWO",
    "type": "CPP"
  },
  {
    "name": "t .Lbswap_mask",
    "type": "CPP"
  },
  {
    "name": "t _gcmEncrypt_SupplementalSSE3",
    "type": "CPP"
  },
  {
    "name": "t Main_Encrypt_Loop",
    "type": "CPP"
  },
  {
    "name": "t .End_Main_Encrypt_Loop",
    "type": "CPP"
  },
  {
    "name": "t _gcmDecrypt_SupplementalSSE3",
    "type": "CPP"
  },
  {
    "name": "t Main_Decrypt_Loop",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_cbc_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_cbc_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "t _init_wrapper_aesni",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_encrypt_cbc_hw",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_decrypt_cbc_hw",
    "type": "CPP"
  },
  {
    "name": "T _ccrng_uniform",
    "type": "CPP"
  },
  {
    "name": "t _AccelerateCrypto_SHA512",
    "type": "CPP"
  },
  {
    "name": "t _AccelerateCrypto_SHA512_compress",
    "type": "CPP"
  },
  {
    "name": "t _AccelerateCrypto_SHA512_compress_AVX2",
    "type": "CPP"
  },
  {
    "name": "t _ccsha512_final",
    "type": "CPP"
  },
  {
    "name": "t _cbc_wrapper_aesni",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_init_pub",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_verify_pkcs1v15",
    "type": "CPP"
  },
  {
    "name": "t _ccrsa_verify_pkcs1v15_internal",
    "type": "CPP"
  },
  {
    "name": "T _ccec_import_pub",
    "type": "CPP"
  },
  {
    "name": "T _ccec_x963_import_pub",
    "type": "CPP"
  },
  {
    "name": "T _ccec_raw_import_pub",
    "type": "CPP"
  },
  {
    "name": "T _ccec_generate_key",
    "type": "CPP"
  },
  {
    "name": "T _ccgcm_init_with_iv",
    "type": "CPP"
  },
  {
    "name": "T _ccgcm_inc_iv",
    "type": "CPP"
  },
  {
    "name": "T _ccpad_pkcs7_decrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccpad_pkcs7_decode",
    "type": "CPP"
  },
  {
    "name": "T _cc_atfork_prepare",
    "type": "CPP"
  },
  {
    "name": "t _ccrng_cryptographic_atfork_prepare",
    "type": "CPP"
  },
  {
    "name": "T _cc_atfork_parent",
    "type": "CPP"
  },
  {
    "name": "t _ccrng_cryptographic_atfork_parent",
    "type": "CPP"
  },
  {
    "name": "T _cchkdf",
    "type": "CPP"
  },
  {
    "name": "T _cchkdf_extract",
    "type": "CPP"
  },
  {
    "name": "T _cchkdf_expand",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_siv_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccmode_factory_siv_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_siv_init",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_siv_reset",
    "type": "CPP"
  },
  {
    "name": "T _cccmac_one_shot_generate",
    "type": "CPP"
  },
  {
    "name": "T _cccmac_init",
    "type": "CPP"
  },
  {
    "name": "t _cccmac_generate_subkeys",
    "type": "CPP"
  },
  {
    "name": "T _cccbc_one_shot",
    "type": "CPP"
  },
  {
    "name": "T _cccmac_update",
    "type": "CPP"
  },
  {
    "name": "T _cccmac_final_generate",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_siv_auth",
    "type": "CPP"
  },
  {
    "name": "t _cccmac_sl_test_xor",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_siv_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_siv_auth_finalize",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_siv_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccmode_factory_siv_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_siv_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _ecb_wrapper_aesni",
    "type": "CPP"
  },
  {
    "name": "t _ccsha256_vng_intel_avx2_compress",
    "type": "CPP"
  },
  {
    "name": "t _ccsha1_vng_intel_compress_AVX2",
    "type": "CPP"
  },
  {
    "name": "t _ccsha512_vng_intel_avx2_compress",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_encrypt_eme_pkcs1v15",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_eme_pkcs1v15_encode",
    "type": "CPP"
  },
  {
    "name": "t _md4_compress",
    "type": "CPP"
  },
  {
    "name": "T _ccrng_drbg_init",
    "type": "CPP"
  },
  {
    "name": "T _ccrng_drbg_done",
    "type": "CPP"
  },
  {
    "name": "t _ccsha1_vng_intel_compress_SupplementalSSE3",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_cfb_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccmode_factory_cfb_encrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_cfb8_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccmode_factory_cfb8_encrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_ofb_crypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccmode_factory_ofb_crypt",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_xts_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_ccm_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_ecb_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_cfb_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccmode_factory_cfb_decrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_cfb8_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccmode_factory_cfb8_decrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_xts_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_ccm_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "t _ccsha256_vng_intel_avx1_compress",
    "type": "CPP"
  },
  {
    "name": "t _ccsha512_ltc_compress",
    "type": "CPP"
  },
  {
    "name": "t _ccec_full_add",
    "type": "CPP"
  },
  {
    "name": "t _ccec_full_sub",
    "type": "CPP"
  },
  {
    "name": "T _ccec_compute_key",
    "type": "CPP"
  },
  {
    "name": "t _md2_processblock",
    "type": "CPP"
  },
  {
    "name": "t _md2_compress",
    "type": "CPP"
  },
  {
    "name": "t _md2_final",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_ecb_encrypt_init",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_ecb_encrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccrc4",
    "type": "CPP"
  },
  {
    "name": "t _eay_RC4_set_key",
    "type": "CPP"
  },
  {
    "name": "t _eay_RC4",
    "type": "CPP"
  },
  {
    "name": "T _ccdes_key_set_odd_parity",
    "type": "CPP"
  },
  {
    "name": "T _ccdes_key_is_weak",
    "type": "CPP"
  },
  {
    "name": "T _cccurve25519",
    "type": "CPP"
  },
  {
    "name": "T _ccdes3_ecb_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccdes3_cbc_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccmode_factory_cbc_encrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccdes3_cfb_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccdes3_cfb8_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccdes3_ctr_crypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccmode_factory_ctr_crypt",
    "type": "CPP"
  },
  {
    "name": "T _ccdes3_ofb_crypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccdes3_ecb_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccdes3_cbc_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccmode_factory_cbc_decrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccdes3_cfb_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccdes3_cfb8_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_cbc_init",
    "type": "CPP"
  },
  {
    "name": "t _ccdes3_ltc_setup",
    "type": "CPP"
  },
  {
    "name": "t _deskey",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_cbc_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _ltc_des3_ecb_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _desfunc3",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_cbc_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _ltc_des3_ecb_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccsha256_vng_intel_sse3_compress",
    "type": "CPP"
  },
  {
    "name": "T _ccmode_factory_gcm_encrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccmode_factory_gcm_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_gcm_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_gcm_gf_mult",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_gcm_decrypt",
    "type": "CPP"
  },
  {
    "name": "T _cczp_power",
    "type": "CPP"
  },
  {
    "name": "t _fipspost_post_drbg_hmac",
    "type": "CPP"
  },
  {
    "name": "t _fipspost_post_ecdsa",
    "type": "CPP"
  },
  {
    "name": "T _fipspost_post",
    "type": "CPP"
  },
  {
    "name": "t _fipspost_post_aes_cbc",
    "type": "CPP"
  },
  {
    "name": "t _fipspost_post_aes_gcm",
    "type": "CPP"
  },
  {
    "name": "t _ge_frombytes_vartime",
    "type": "CPP"
  },
  {
    "name": "t _ge_from_uniform",
    "type": "CPP"
  },
  {
    "name": "t _ge_scalarmult",
    "type": "CPP"
  },
  {
    "name": "t _ge_scalarmult_cofactor",
    "type": "CPP"
  },
  {
    "name": "t _ge_has_small_order",
    "type": "CPP"
  },
  {
    "name": "t _ge_cmov_cached",
    "type": "CPP"
  },
  {
    "name": "T _ccvrf_factory_irtfdraft03",
    "type": "CPP"
  },
  {
    "name": "T _ccvrf_factory_irtfdraft03_default",
    "type": "CPP"
  },
  {
    "name": "T _ccvrf_sizeof_proof",
    "type": "CPP"
  },
  {
    "name": "T _ccvrf_sizeof_hash",
    "type": "CPP"
  },
  {
    "name": "T _ccvrf_sizeof_public_key",
    "type": "CPP"
  },
  {
    "name": "T _ccvrf_sizeof_secret_key",
    "type": "CPP"
  },
  {
    "name": "t _fipspost_get_hmac",
    "type": "CPP"
  },
  {
    "name": "t _fipspost_post_ecdh",
    "type": "CPP"
  },
  {
    "name": "t _ccvrf_irtf_ed25519_proof_to_hash",
    "type": "CPP"
  },
  {
    "name": "T _ccvrf_proof_to_hash",
    "type": "CPP"
  },
  {
    "name": "t _fipspost_post_integrity",
    "type": "CPP"
  },
  {
    "name": "t _fipspost_post_hmac",
    "type": "CPP"
  },
  {
    "name": "t _fipspost_post_aes_ecb",
    "type": "CPP"
  },
  {
    "name": "t _ccecb_one_shot",
    "type": "CPP"
  },
  {
    "name": "t _fipspost_post_rsa_sig",
    "type": "CPP"
  },
  {
    "name": "t _ccvrf_irtf_ed25519_prove",
    "type": "CPP"
  },
  {
    "name": "T _ccvrf_prove",
    "type": "CPP"
  },
  {
    "name": "t _ccvrf_irtf_nonce_generation",
    "type": "CPP"
  },
  {
    "name": "t _fipspost_post_aes_xts",
    "type": "CPP"
  },
  {
    "name": "t _fipspost_post_aes_ccm",
    "type": "CPP"
  },
  {
    "name": "t _ccccm_one_shot",
    "type": "CPP"
  },
  {
    "name": "t _ccvrf_irtf_ed25519_hash2curve_elligator2",
    "type": "CPP"
  },
  {
    "name": "t _ccvrf_irtf_ed25519_string_to_point",
    "type": "CPP"
  },
  {
    "name": "t _ccvrf_irtf_ed25519_point_to_string",
    "type": "CPP"
  },
  {
    "name": "t _ccvrf_irtf_ed25519_decode_proof",
    "type": "CPP"
  },
  {
    "name": "t _ccvrf_irtf_ed25519_encode_proof",
    "type": "CPP"
  },
  {
    "name": "t _ccvrf_irtf_ed25519_hash_points",
    "type": "CPP"
  },
  {
    "name": "t _fipspost_post_tdes_cbc",
    "type": "CPP"
  },
  {
    "name": "t _ccvrf_irtf_ed25519_derive_scalar_internal",
    "type": "CPP"
  },
  {
    "name": "t _ccvrf_irtf_ed25519_derive_public_key_internal",
    "type": "CPP"
  },
  {
    "name": "t _ccvrf_irtf_ed25519_derive_public_key",
    "type": "CPP"
  },
  {
    "name": "T _ccvrf_derive_public_key",
    "type": "CPP"
  },
  {
    "name": "t _fipspost_post_drbg_ctr",
    "type": "CPP"
  },
  {
    "name": "t _fipspost_post_ffdh",
    "type": "CPP"
  },
  {
    "name": "t _fipspost_post_rsa_enc_dec",
    "type": "CPP"
  },
  {
    "name": "t _ccvrf_irtf_ed25519_verify",
    "type": "CPP"
  },
  {
    "name": "T _ccvrf_verify",
    "type": "CPP"
  },
  {
    "name": "t _cczp_generate_non_zero_element",
    "type": "CPP"
  },
  {
    "name": "t _cczp_generate_non_zero_element_ws",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_bitstring",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_gladman_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_gladman_decrypt",
    "type": "CPP"
  },
  {
    "name": "T _cccmac_one_shot_verify",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_gladman_encrypt_key128",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_gladman_encrypt_key192",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_gladman_encrypt_key256",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_gladman_encrypt_key",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_gladman_decrypt_key128",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_gladman_decrypt_key192",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_gladman_decrypt_key256",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_gladman_decrypt_key",
    "type": "CPP"
  },
  {
    "name": "T _ccec_diversify_min_entropy_len",
    "type": "CPP"
  },
  {
    "name": "T _ccec_diversify_pub",
    "type": "CPP"
  },
  {
    "name": "t _CC_CAST_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _CC_CAST_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccsha512_vng_intel_ssse3_compress",
    "type": "CPP"
  },
  {
    "name": "t _CC_CAST_set_key",
    "type": "CPP"
  },
  {
    "name": "t _cczp_generate_random_element",
    "type": "CPP"
  },
  {
    "name": "t _cczp_generate_random_element_ws",
    "type": "CPP"
  },
  {
    "name": "t _AccelerateCrypto_SHA256_compress_ssse3",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_generate_fips186_key_trace",
    "type": "CPP"
  },
  {
    "name": "t _ccrsa_generate_fips186_prime_factors",
    "type": "CPP"
  },
  {
    "name": "t _ccrsa_crt_make_fips186_key",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_make_fips186_key_trace",
    "type": "CPP"
  },
  {
    "name": "t _ccrsa_generate_probable_prime",
    "type": "CPP"
  },
  {
    "name": "t _cczp_check_delta_100bits",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_generate_fips186_key",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_make_fips186_key",
    "type": "CPP"
  },
  {
    "name": "t _ccrsa_generate_probable_prime_from_auxilary_primes",
    "type": "CPP"
  },
  {
    "name": "t _cczp_find_next_prime",
    "type": "CPP"
  },
  {
    "name": "t _cczp_compute_R",
    "type": "CPP"
  },
  {
    "name": "t _ccn_seed_X",
    "type": "CPP"
  },
  {
    "name": "t _AccelerateCrypto_SHA1_compress_ssse3",
    "type": "CPP"
  },
  {
    "name": "t _ccss_shamir_share_bag_set_ith_share",
    "type": "CPP"
  },
  {
    "name": "t _ccss_shamir_share_bag_copy_ith_share_x",
    "type": "CPP"
  },
  {
    "name": "t _ccss_shamir_share_bag_ith_share_y",
    "type": "CPP"
  },
  {
    "name": "T _ccss_shamir_share_import",
    "type": "CPP"
  },
  {
    "name": "T _ccss_shamir_share_sizeof_y",
    "type": "CPP"
  },
  {
    "name": "T _ccss_shamir_share_export",
    "type": "CPP"
  },
  {
    "name": "t _ccecies_decrypt_gcm_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_gladman_cbc_decrypt_init",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_gladman_cbc_encrypt_init",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_ecb_decrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_eckey_size",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_eckey",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_factory_siv_hmac_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccsrp_generate_K_from_S",
    "type": "CPP"
  },
  {
    "name": "t _ccsrp_digest_ccn",
    "type": "CPP"
  },
  {
    "name": "t _ccsrp_sha_interleave_RFC2945",
    "type": "CPP"
  },
  {
    "name": "t _ccsrp_mgf",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_init_gp_with_order",
    "type": "CPP"
  },
  {
    "name": "T _ccblowfish_ecb_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccblowfish_ecb_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccblowfish_cbc_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccblowfish_cbc_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccblowfish_cfb_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccblowfish_cfb_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccblowfish_cfb8_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccblowfish_cfb8_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccblowfish_ctr_crypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccblowfish_ofb_crypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccec_compact_export_pub",
    "type": "CPP"
  },
  {
    "name": "t _ccss_shamir_poly_coefficient",
    "type": "CPP"
  },
  {
    "name": "t _ccss_shamir_field_of",
    "type": "CPP"
  },
  {
    "name": "T _ccss_shamir_share_init",
    "type": "CPP"
  },
  {
    "name": "t _ccss_shamir_consistent_fields",
    "type": "CPP"
  },
  {
    "name": "T _csss_shamir_share_bag_can_recover_secret",
    "type": "CPP"
  },
  {
    "name": "T _ccss_shamir_parameters_init",
    "type": "CPP"
  },
  {
    "name": "T _ccss_shamir_parameters_maximum_secret_length",
    "type": "CPP"
  },
  {
    "name": "t _ccblowfish_ltc_setup",
    "type": "CPP"
  },
  {
    "name": "t _ccblowfish_ltc_ecb_encrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_gp_apple768",
    "type": "CPP"
  },
  {
    "name": "t _ccblowfish_ltc_ecb_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccn_abs_ws",
    "type": "CPP"
  },
  {
    "name": "T _cccast_ecb_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _cccast_ecb_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _cccast_cbc_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _cccast_cbc_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _cccast_cfb_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _cccast_cfb_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _cccast_cfb8_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _cccast_cfb8_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _cccast_ctr_crypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _cccast_ofb_crypt_mode",
    "type": "CPP"
  },
  {
    "name": "t _cccast_ecb_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _cccast_ecb_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _cccast_setup",
    "type": "CPP"
  },
  {
    "name": "T _ccspake_mac_hkdf_hmac_sha256",
    "type": "CPP"
  },
  {
    "name": "T _ccspake_mac_hkdf_hmac_sha512",
    "type": "CPP"
  },
  {
    "name": "t _ccspake_mac_hkdf_hmac_derive",
    "type": "CPP"
  },
  {
    "name": "t _ccspake_mac_hkdf_hmac_compute",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_constructed_tl_strict",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_len_strict",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_oid",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_seqii_strict",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_ltc_init",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_ecb_decrypt_init",
    "type": "CPP"
  },
  {
    "name": "T _ccspake_cp_384",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_sign_pss_blinded",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_sequence_tl_strict",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_tl_strict",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_uint_strict",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_uint64",
    "type": "CPP"
  },
  {
    "name": "T _ccwrap_unwrapped_size",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_siv_hmac_init",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_implicit_octet_string",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_implicit_raw_octet_string",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_implicit_uint64",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_octet_string",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_oid",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_raw_octet_string",
    "type": "CPP"
  },
  {
    "name": "T _ccxts_one_shot",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_uint64",
    "type": "CPP"
  },
  {
    "name": "T _ccec_rfc6637_unwrap_key",
    "type": "CPP"
  },
  {
    "name": "T _ccmode_factory_ccm_encrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccder_sizeof_implicit_octet_string",
    "type": "CPP"
  },
  {
    "name": "T _ccder_sizeof_implicit_uint64",
    "type": "CPP"
  },
  {
    "name": "t _ccdh_ramp_gp_exponent",
    "type": "CPP"
  },
  {
    "name": "t _ccscrypt_salsa20_8",
    "type": "CPP"
  },
  {
    "name": "t _ccscrypt_blockmix_salsa8",
    "type": "CPP"
  },
  {
    "name": "t _ccscrypt_romix",
    "type": "CPP"
  },
  {
    "name": "T _ccscrypt_storage_size",
    "type": "CPP"
  },
  {
    "name": "T _ccscrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_eckey",
    "type": "CPP"
  },
  {
    "name": "T _ccspake_cp_521",
    "type": "CPP"
  },
  {
    "name": "T _ccder_sizeof_octet_string",
    "type": "CPP"
  },
  {
    "name": "T _ccder_sizeof_oid",
    "type": "CPP"
  },
  {
    "name": "T _ccder_sizeof_uint64",
    "type": "CPP"
  },
  {
    "name": "t _AccelerateCrypto_SHA1_compress_AVX1",
    "type": "CPP"
  },
  {
    "name": "t _ccecies_encrypt_gcm_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccss_shamir_init_share_poly",
    "type": "CPP"
  },
  {
    "name": "t _cc_print",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_emsa_pss_encode",
    "type": "CPP"
  },
  {
    "name": "t _cczp_to_default_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_to_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_to",
    "type": "CPP"
  },
  {
    "name": "T _ccdes_cbc_cksum",
    "type": "CPP"
  },
  {
    "name": "T _ccdes_cbc_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccdes_cbc_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccdes_cfb_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccdes_cfb_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccdes_cfb8_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccdes_cfb8_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccdes_ctr_crypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccdes_ofb_crypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccsiv_hmac_plaintext_size",
    "type": "CPP"
  },
  {
    "name": "T _ccdes_ecb_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccdes_ecb_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "t _cczp_negate",
    "type": "CPP"
  },
  {
    "name": "T _ccecies_encrypt_gcm_setup",
    "type": "CPP"
  },
  {
    "name": "t _ccdes_ltc_setup",
    "type": "CPP"
  },
  {
    "name": "t _ltc_des_ecb_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _cczp_from_default_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_from_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_from",
    "type": "CPP"
  },
  {
    "name": "t _ltc_des_ecb_encrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_compute_key",
    "type": "CPP"
  },
  {
    "name": "T _ccec_compact_transform_key",
    "type": "CPP"
  },
  {
    "name": "T _ccec_compact_generate_key",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_export_pub",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_generate_key",
    "type": "CPP"
  },
  {
    "name": "t ONE",
    "type": "CPP"
  },
  {
    "name": "t .Lbswap_mask",
    "type": "CPP"
  },
  {
    "name": "t _ccm128_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccm192_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccm256_encrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_init_gp_from_bytes",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_gp_rfc3526group05",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_gp_rfc3526group14",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_gp_rfc3526group15",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_gp_rfc3526group16",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_gp_rfc3526group17",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_pubkeylength",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_siv_hmac_temp_key_gen",
    "type": "CPP"
  },
  {
    "name": "t _ccctr_one_shot",
    "type": "CPP"
  },
  {
    "name": "T _ccrng_drbg_reseed",
    "type": "CPP"
  },
  {
    "name": "t _generate",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_gp_rfc3526group18",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_gp_rfc5114_MODP_1024_160",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_gp_rfc5114_MODP_2048_224",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_dump_public_key",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_dump_full_key",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_gp_rfc5114_MODP_2048_256",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_import_priv",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_import_pub",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_init_gp",
    "type": "CPP"
  },
  {
    "name": "t _cccurve25519_internal",
    "type": "CPP"
  },
  {
    "name": "t _cswap",
    "type": "CPP"
  },
  {
    "name": "t _ccec_scalar_fips_extrabits_min_entropy_len",
    "type": "CPP"
  },
  {
    "name": "t _ccec_generate_scalar_fips_extrabits",
    "type": "CPP"
  },
  {
    "name": "T _ccec_signature_r_s_size",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_verify_pkcs1v15_allowshortsigs",
    "type": "CPP"
  },
  {
    "name": "t _done",
    "type": "CPP"
  },
  {
    "name": "T _ccec_cp_192",
    "type": "CPP"
  },
  {
    "name": "t _ccn_mod_192",
    "type": "CPP"
  },
  {
    "name": "t _ccn_sqr",
    "type": "CPP"
  },
  {
    "name": "T _ccec_cp_224",
    "type": "CPP"
  },
  {
    "name": "t _ccn_p224_mul",
    "type": "CPP"
  },
  {
    "name": "t _ccn_p224_sqr",
    "type": "CPP"
  },
  {
    "name": "t _ccn_p224_mod",
    "type": "CPP"
  },
  {
    "name": "t _ccn_p224_to",
    "type": "CPP"
  },
  {
    "name": "t _ccn_p224_from",
    "type": "CPP"
  },
  {
    "name": "t _ccn_p224_is_one",
    "type": "CPP"
  },
  {
    "name": "t _ccn_p256_mul",
    "type": "CPP"
  },
  {
    "name": "t _ccn_p256_sqr",
    "type": "CPP"
  },
  {
    "name": "t _ccn_p256_mod",
    "type": "CPP"
  },
  {
    "name": "t _ccn_p256_to",
    "type": "CPP"
  },
  {
    "name": "t _ccn_p256_from",
    "type": "CPP"
  },
  {
    "name": "t _ccn_p256_is_one",
    "type": "CPP"
  },
  {
    "name": "T _ccec_cp_384",
    "type": "CPP"
  },
  {
    "name": "t _ccn_mod_384",
    "type": "CPP"
  },
  {
    "name": "T _ccmode_factory_ccm_decrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccec_cp_521",
    "type": "CPP"
  },
  {
    "name": "t _ccn_mod_521",
    "type": "CPP"
  },
  {
    "name": "t _ccec_plprint",
    "type": "CPP"
  },
  {
    "name": "T _ccec_print_full_key",
    "type": "CPP"
  },
  {
    "name": "T _ccec_print_public_key",
    "type": "CPP"
  },
  {
    "name": "T _ccckg_contributor_commit",
    "type": "CPP"
  },
  {
    "name": "t _ccckg_build_commitment",
    "type": "CPP"
  },
  {
    "name": "T _ccckg_contributor_finish",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_import_full",
    "type": "CPP"
  },
  {
    "name": "t _fsum",
    "type": "CPP"
  },
  {
    "name": "t _fdiff",
    "type": "CPP"
  },
  {
    "name": "t _fmul_121666",
    "type": "CPP"
  },
  {
    "name": "t _fmul",
    "type": "CPP"
  },
  {
    "name": "t _fsquare_times",
    "type": "CPP"
  },
  {
    "name": "t _fexpand",
    "type": "CPP"
  },
  {
    "name": "t _fcontract",
    "type": "CPP"
  },
  {
    "name": "T _ccss_shamir_share_generator_generate_share",
    "type": "CPP"
  },
  {
    "name": "T _ccec_get_fullkey_components",
    "type": "CPP"
  },
  {
    "name": "T _ccec_get_pubkey_components",
    "type": "CPP"
  },
  {
    "name": "T _ccec_make_pub",
    "type": "CPP"
  },
  {
    "name": "t _init_wrapper_opt",
    "type": "CPP"
  },
  {
    "name": "t _cbc_wrapper_opt",
    "type": "CPP"
  },
  {
    "name": "T _ccckg_sizeof_ctx",
    "type": "CPP"
  },
  {
    "name": "T _ccckg_sizeof_commitment",
    "type": "CPP"
  },
  {
    "name": "T _ccckg_sizeof_share",
    "type": "CPP"
  },
  {
    "name": "T _ccckg_sizeof_opening",
    "type": "CPP"
  },
  {
    "name": "T _ccckg_init",
    "type": "CPP"
  },
  {
    "name": "t _ccckg_derive_sk",
    "type": "CPP"
  },
  {
    "name": "T _ccec_x963_export",
    "type": "CPP"
  },
  {
    "name": "T _ccec_x963_import_priv_size",
    "type": "CPP"
  },
  {
    "name": "T _ccec_x963_import_priv",
    "type": "CPP"
  },
  {
    "name": "t _init_wrapper_opt",
    "type": "CPP"
  },
  {
    "name": "t _cbc_wrapper_opt",
    "type": "CPP"
  },
  {
    "name": "t _init_wrapper_aesni",
    "type": "CPP"
  },
  {
    "name": "t _cbc_wrapper_aesni",
    "type": "CPP"
  },
  {
    "name": "T _ccecies_pub_key_size",
    "type": "CPP"
  },
  {
    "name": "T _ccecies_pub_key_size_cp",
    "type": "CPP"
  },
  {
    "name": "t _ccprime_sieve",
    "type": "CPP"
  },
  {
    "name": "t _ccprime_rabin_miller",
    "type": "CPP"
  },
  {
    "name": "t _cc_try_abort",
    "type": "CPP"
  },
  {
    "name": "T _ccmgf",
    "type": "CPP"
  },
  {
    "name": "t _key_sched_wrapper_opt",
    "type": "CPP"
  },
  {
    "name": "t _set_tweak_wrapper_opt",
    "type": "CPP"
  },
  {
    "name": "t _xts_wrapper_opt",
    "type": "CPP"
  },
  {
    "name": "t _key_sched_wrapper_aesni",
    "type": "CPP"
  },
  {
    "name": "t _set_tweak_wrapper_aesni",
    "type": "CPP"
  },
  {
    "name": "t _xts_wrapper_aesni",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_cfb8_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_cfb8_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_cfb8_init",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_cfb_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_cfb_encrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccn_div_euclid",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_cfb_init",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_ctr_crypt",
    "type": "CPP"
  },
  {
    "name": "T _ccec_generate_key_deterministic",
    "type": "CPP"
  },
  {
    "name": "t __ccmode_gcm_gf_mult_by_lookup",
    "type": "CPP"
  },
  {
    "name": "T _ccrng_sequence_init",
    "type": "CPP"
  },
  {
    "name": "t _sequence_repeat_generate",
    "type": "CPP"
  },
  {
    "name": "t _ccrng_sequence_non_repeat_init",
    "type": "CPP"
  },
  {
    "name": "t _non_repeat_sequence_generate",
    "type": "CPP"
  },
  {
    "name": "T _ccec_der_import_priv_keytype",
    "type": "CPP"
  },
  {
    "name": "T _ccec_der_import_priv",
    "type": "CPP"
  },
  {
    "name": "t _cczp_is_quadratic_residue_ws",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_ofb_crypt",
    "type": "CPP"
  },
  {
    "name": "T _ccecies_encrypt_gcm_ciphertext_size",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_siv_hmac_reset",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_ofb_init",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_omac_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_omac_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_omac_init",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_xts_crypt",
    "type": "CPP"
  },
  {
    "name": "t _cczp_inv_odd_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_power_ssma_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_power_ssma",
    "type": "CPP"
  },
  {
    "name": "T _ccmode_factory_xts_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _AccelerateCrypto_SHA256_compress_AVX1",
    "type": "CPP"
  },
  {
    "name": "T _ccmode_factory_xts_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_xts_init",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_xts_mult_alpha",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_xts_set_tweak",
    "type": "CPP"
  },
  {
    "name": "t _ccecdh_pairwise_consistency_check",
    "type": "CPP"
  },
  {
    "name": "t _ccecdh_fast_compute_pub_from_priv",
    "type": "CPP"
  },
  {
    "name": "t _ccecdh_fast_compute_shared_secret",
    "type": "CPP"
  },
  {
    "name": "t _ccecdh_fast_scalar_mult",
    "type": "CPP"
  },
  {
    "name": "T _ccn_print",
    "type": "CPP"
  },
  {
    "name": "T _ccn_lprint",
    "type": "CPP"
  },
  {
    "name": "T _ccec_diversify_priv_twin",
    "type": "CPP"
  },
  {
    "name": "T _cc_abort",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_emsa_pss_decode",
    "type": "CPP"
  },
  {
    "name": "t _ccn_gcdn",
    "type": "CPP"
  },
  {
    "name": "t _ccn_gcd",
    "type": "CPP"
  },
  {
    "name": "t _ccn_lcm",
    "type": "CPP"
  },
  {
    "name": "T _ccss_shamir_share_bag_recover_secret",
    "type": "CPP"
  },
  {
    "name": "T _ccec_raw_import_priv_only",
    "type": "CPP"
  },
  {
    "name": "t _fe_0",
    "type": "CPP"
  },
  {
    "name": "t _fe_1",
    "type": "CPP"
  },
  {
    "name": "t _fe_add",
    "type": "CPP"
  },
  {
    "name": "t _fe_cmov",
    "type": "CPP"
  },
  {
    "name": "t _fe_copy",
    "type": "CPP"
  },
  {
    "name": "t _fe_invert",
    "type": "CPP"
  },
  {
    "name": "t _fe_sq",
    "type": "CPP"
  },
  {
    "name": "t _fe_mul",
    "type": "CPP"
  },
  {
    "name": "t _fe_isnegative",
    "type": "CPP"
  },
  {
    "name": "t _fe_tobytes",
    "type": "CPP"
  },
  {
    "name": "t _fe_isnonzero",
    "type": "CPP"
  },
  {
    "name": "t _crypto_verify_32",
    "type": "CPP"
  },
  {
    "name": "t _fe_frombytes",
    "type": "CPP"
  },
  {
    "name": "t _fe_neg",
    "type": "CPP"
  },
  {
    "name": "t _fe_pow22523",
    "type": "CPP"
  },
  {
    "name": "t _fe_sq2",
    "type": "CPP"
  },
  {
    "name": "t _fe_sub",
    "type": "CPP"
  },
  {
    "name": "t _ge_add",
    "type": "CPP"
  },
  {
    "name": "t _ge_double_scalarmult_vartime",
    "type": "CPP"
  },
  {
    "name": "t _ge_slide",
    "type": "CPP"
  },
  {
    "name": "t _ge_p3_to_cached",
    "type": "CPP"
  },
  {
    "name": "t _ge_p3_dbl",
    "type": "CPP"
  },
  {
    "name": "t _ge_p1p1_to_p3",
    "type": "CPP"
  },
  {
    "name": "t _ge_p2_dbl",
    "type": "CPP"
  },
  {
    "name": "t _ge_sub",
    "type": "CPP"
  },
  {
    "name": "t _ge_madd",
    "type": "CPP"
  },
  {
    "name": "t _ge_p1p1_to_p2",
    "type": "CPP"
  },
  {
    "name": "t _ge_frombytes_negate_vartime",
    "type": "CPP"
  },
  {
    "name": "t _ge_p3_to_p2",
    "type": "CPP"
  },
  {
    "name": "t _ge_p3_tobytes",
    "type": "CPP"
  },
  {
    "name": "t _ge_p3_0",
    "type": "CPP"
  },
  {
    "name": "t _ge_scalarmult_base",
    "type": "CPP"
  },
  {
    "name": "t _ge_scalarmult_base_internal",
    "type": "CPP"
  },
  {
    "name": "t _ge_scalarmult_base_masked",
    "type": "CPP"
  },
  {
    "name": "t _ge_tobytes",
    "type": "CPP"
  },
  {
    "name": "t _sc_muladd",
    "type": "CPP"
  },
  {
    "name": "t _sc_reduce",
    "type": "CPP"
  },
  {
    "name": "t _ge_select",
    "type": "CPP"
  },
  {
    "name": "t _ge_cmov",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_factory_siv_hmac_decrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccn_addmul1",
    "type": "CPP"
  },
  {
    "name": "t _ccansikdf_x963_init",
    "type": "CPP"
  },
  {
    "name": "t _ccansikdf_x963_update",
    "type": "CPP"
  },
  {
    "name": "t _ccansikdf_x963_final",
    "type": "CPP"
  },
  {
    "name": "T _ccansikdf_x963",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_siv_hmac_sha256_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _cc_atfork_child",
    "type": "CPP"
  },
  {
    "name": "T _ccec_verify_composite",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_dhparams",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_dhparam_n",
    "type": "CPP"
  },
  {
    "name": "T _ccec_diversify_pub_twin",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_verify_pss",
    "type": "CPP"
  },
  {
    "name": "T _ccpad_cts1_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _ecb_from_cbc",
    "type": "CPP"
  },
  {
    "name": "T _ccpad_cts1_encrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccpad_cts2_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _ecb_from_cbc",
    "type": "CPP"
  },
  {
    "name": "T _ccpad_cts2_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccss_shamir_evaluate_poly_to_buffer",
    "type": "CPP"
  },
  {
    "name": "T _ccspake_prover_init",
    "type": "CPP"
  },
  {
    "name": "T _ccspake_verifier_init",
    "type": "CPP"
  },
  {
    "name": "T _ccrng_test_init",
    "type": "CPP"
  },
  {
    "name": "t _ccrng_test_generate",
    "type": "CPP"
  },
  {
    "name": "T _ccrng_test_done",
    "type": "CPP"
  },
  {
    "name": "T _ccpad_cts3_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _ecb_from_cbc",
    "type": "CPP"
  },
  {
    "name": "t _ccctr_one_shot",
    "type": "CPP"
  },
  {
    "name": "T _ccpad_cts3_encrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_make_priv",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_encrypt_aesni",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_decrypt_aesni",
    "type": "CPP"
  },
  {
    "name": "t _init_wrapper_opt",
    "type": "CPP"
  },
  {
    "name": "t _ecb_wrapper_opt",
    "type": "CPP"
  },
  {
    "name": "t _init_wrapper_aesni",
    "type": "CPP"
  },
  {
    "name": "t _ecb_wrapper_aesni",
    "type": "CPP"
  },
  {
    "name": "T _ccpad_pkcs7_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccdh_generate_private_key",
    "type": "CPP"
  },
  {
    "name": "T _ccecies_decrypt_gcm_setup",
    "type": "CPP"
  },
  {
    "name": "T _ccpad_xts_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _init",
    "type": "CPP"
  },
  {
    "name": "t _generate",
    "type": "CPP"
  },
  {
    "name": "t _reseed",
    "type": "CPP"
  },
  {
    "name": "t _done",
    "type": "CPP"
  },
  {
    "name": "t _cc_try_abort",
    "type": "CPP"
  },
  {
    "name": "t _cced25519_sign_internal",
    "type": "CPP"
  },
  {
    "name": "T _cced25519_sign",
    "type": "CPP"
  },
  {
    "name": "T _ccpad_xts_encrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccspake_mac_hkdf_cmac_aes128_sha256",
    "type": "CPP"
  },
  {
    "name": "t _ccspake_mac_hkdf_cmac_derive",
    "type": "CPP"
  },
  {
    "name": "t _ccspake_mac_hkdf_cmac_compute",
    "type": "CPP"
  },
  {
    "name": "t _F",
    "type": "CPP"
  },
  {
    "name": "T _ccrng_rsafips_test_init",
    "type": "CPP"
  },
  {
    "name": "t _ccrng_rsafips_test_generate",
    "type": "CPP"
  },
  {
    "name": "T _ccrng_rsafips_test_set_next",
    "type": "CPP"
  },
  {
    "name": "T _ccrc2_ecb_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccrc2_ecb_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccrc2_cbc_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccrc2_cbc_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccrc2_cfb_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccrc2_cfb_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccrc2_cfb8_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccrc2_cfb8_decrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccrc2_ctr_crypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccrc2_ofb_crypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccspake_kex_generate",
    "type": "CPP"
  },
  {
    "name": "t _ccspake_lazy_gen_xy_XY",
    "type": "CPP"
  },
  {
    "name": "T _ccspake_kex_process",
    "type": "CPP"
  },
  {
    "name": "t _ltc_rc2_ecb_decrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_priv_crypt_blinded",
    "type": "CPP"
  },
  {
    "name": "t _ccrsa_crt_power_blinded",
    "type": "CPP"
  },
  {
    "name": "T _ccec_rfc6637_wrap_key_diversified",
    "type": "CPP"
  },
  {
    "name": "t _ltc_rc2_ecb_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccrc2_ltc_setup",
    "type": "CPP"
  },
  {
    "name": "t _ccspake_kdf_label_size",
    "type": "CPP"
  },
  {
    "name": "t _ccspake_build_kdf_label",
    "type": "CPP"
  },
  {
    "name": "T _ccspake_mac_compute",
    "type": "CPP"
  },
  {
    "name": "t _ccspake_derive_shared_key",
    "type": "CPP"
  },
  {
    "name": "t _ccspake_mac_compute_internal",
    "type": "CPP"
  },
  {
    "name": "T _ccspake_mac_verify_and_get_session_key",
    "type": "CPP"
  },
  {
    "name": "t _ccspake_ikm_write_point",
    "type": "CPP"
  },
  {
    "name": "t _ccspake_ikm_write_point_data",
    "type": "CPP"
  },
  {
    "name": "T _ccec_make_priv",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_siv_hmac_auth_backend",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_siv_hmac_auth",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_siv_hmac_auth_finalize",
    "type": "CPP"
  },
  {
    "name": "t _rmd160_compress",
    "type": "CPP"
  },
  {
    "name": "t _ccsha1_vng_intel_compress_AVX1",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_xts_encrypt_opt",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_xts_encrypt_aesni",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_xts_decrypt_opt",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_xts_decrypt_aesni",
    "type": "CPP"
  },
  {
    "name": "T _ccrng_system_done",
    "type": "CPP"
  },
  {
    "name": "T _ccec_validate_pub",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_decrypt_eme_pkcs1v15",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_decrypt_oaep",
    "type": "CPP"
  },
  {
    "name": "t _ccecies_derive_gcm_key_iv",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_eme_pkcs1v15_decode",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_emsa_pkcs1v15_encode",
    "type": "CPP"
  },
  {
    "name": "t _ccdh_pairwise_consistency_check",
    "type": "CPP"
  },
  {
    "name": "T _ccss_shamir_share_bag_init",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_encrypt_oaep",
    "type": "CPP"
  },
  {
    "name": "T _cccmac_final_verify",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_generate_key",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_encrypt_opt_cbc",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_decrypt_opt_cbc",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_get_fullkey_components",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_get_pubkey_components",
    "type": "CPP"
  },
  {
    "name": "t _ccrsa_init_pub_ws",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_compute_shared_secret",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_oaep_decode_parameter",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_oaep_encode_parameter",
    "type": "CPP"
  },
  {
    "name": "t _ccecies_export_eph_pub",
    "type": "CPP"
  },
  {
    "name": "t _ccrsa_pairwise_consistency_check",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_siv_hmac_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccctr_one_shot",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_priv_crypt",
    "type": "CPP"
  },
  {
    "name": "t _ccprime_generate",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_sign_pkcs1v15_blinded",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_sign_pkcs1v15",
    "type": "CPP"
  },
  {
    "name": "T _ccsiv_hmac_init",
    "type": "CPP"
  },
  {
    "name": "T _ccsiv_hmac_aad",
    "type": "CPP"
  },
  {
    "name": "T _ccsiv_hmac_set_nonce",
    "type": "CPP"
  },
  {
    "name": "T _ccsiv_hmac_crypt",
    "type": "CPP"
  },
  {
    "name": "T _ccsiv_hmac_reset",
    "type": "CPP"
  },
  {
    "name": "T _ccsiv_hmac_one_shot",
    "type": "CPP"
  },
  {
    "name": "t _ccecies_decrypt_gcm_from_shared_secret_composite",
    "type": "CPP"
  },
  {
    "name": "T _ccecies_decrypt_gcm_from_shared_secret",
    "type": "CPP"
  },
  {
    "name": "t _sha1_compress",
    "type": "CPP"
  },
  {
    "name": "t _ccss_encode_string_into_field",
    "type": "CPP"
  },
  {
    "name": "t _ccss_shamir_bit_secret_fits_in_field",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_xts_key_sched",
    "type": "CPP"
  },
  {
    "name": "t _sha1_compress",
    "type": "CPP"
  },
  {
    "name": "T _ccspake_cp_256",
    "type": "CPP"
  },
  {
    "name": "T _ccss_shamir_share_bag_add_share",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_siv_hmac_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccctr_one_shot",
    "type": "CPP"
  },
  {
    "name": "t _ccec_diversify_twin_scalars",
    "type": "CPP"
  },
  {
    "name": "t _ccss_shamir_generate_random_poly",
    "type": "CPP"
  },
  {
    "name": "T _cced25519_make_pub",
    "type": "CPP"
  },
  {
    "name": "T _cced25519_make_key_pair",
    "type": "CPP"
  },
  {
    "name": "t _ccrsa_crt_makekey_ws",
    "type": "CPP"
  },
  {
    "name": "t _ccrsa_crt_makekey",
    "type": "CPP"
  },
  {
    "name": "t _ccsha256_ltc_compress",
    "type": "CPP"
  },
  {
    "name": "t _ccdh_ccn_lookup_gp",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_lookup_gp",
    "type": "CPP"
  },
  {
    "name": "T _ccgcm_one_shot",
    "type": "CPP"
  },
  {
    "name": "T _ccgcm_one_shot_legacy",
    "type": "CPP"
  },
  {
    "name": "t ONE",
    "type": "CPP"
  },
  {
    "name": "t .Lbswap_mask",
    "type": "CPP"
  },
  {
    "name": "t _ccm128_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccm192_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccm256_decrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccecies_encrypt_gcm_composite",
    "type": "CPP"
  },
  {
    "name": "T _ccecies_encrypt_gcm",
    "type": "CPP"
  },
  {
    "name": "T _ccz_add",
    "type": "CPP"
  },
  {
    "name": "T _ccz_addi",
    "type": "CPP"
  },
  {
    "name": "T _ccz_bit",
    "type": "CPP"
  },
  {
    "name": "T _ccz_bitlen",
    "type": "CPP"
  },
  {
    "name": "T _ccz_cmp",
    "type": "CPP"
  },
  {
    "name": "T _ccz_cmpi",
    "type": "CPP"
  },
  {
    "name": "T _ccz_print",
    "type": "CPP"
  },
  {
    "name": "T _ccz_lprint",
    "type": "CPP"
  },
  {
    "name": "T _ccz_divmod",
    "type": "CPP"
  },
  {
    "name": "t _ccz_swap",
    "type": "CPP"
  },
  {
    "name": "T _cced25519_verify",
    "type": "CPP"
  },
  {
    "name": "T _ccecies_decrypt_gcm_composite",
    "type": "CPP"
  },
  {
    "name": "t _ccecies_make_shared_secret_from_ecdh_priv",
    "type": "CPP"
  },
  {
    "name": "T _ccecies_decrypt_gcm",
    "type": "CPP"
  },
  {
    "name": "t _AccelerateCrypto_SHA512_compress_ssse3",
    "type": "CPP"
  },
  {
    "name": "T _ccz_expmod",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_vng_ccm_encrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccz_free",
    "type": "CPP"
  },
  {
    "name": "T _ccz_gcd",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_make_pub",
    "type": "CPP"
  },
  {
    "name": "T _ccz_init",
    "type": "CPP"
  },
  {
    "name": "T _ccz_invmod",
    "type": "CPP"
  },
  {
    "name": "T _ccz_is_negative",
    "type": "CPP"
  },
  {
    "name": "T _ccz_is_one",
    "type": "CPP"
  },
  {
    "name": "T _ccec_der_export_diversified_pub_size",
    "type": "CPP"
  },
  {
    "name": "T _ccec_der_export_diversified_pub",
    "type": "CPP"
  },
  {
    "name": "T _ccz_is_prime",
    "type": "CPP"
  },
  {
    "name": "t _key_sched_wrapper_opt",
    "type": "CPP"
  },
  {
    "name": "t _set_tweak_wrapper_opt",
    "type": "CPP"
  },
  {
    "name": "t _xts_wrapper_opt",
    "type": "CPP"
  },
  {
    "name": "t _key_sched_wrapper_aesni",
    "type": "CPP"
  },
  {
    "name": "t _set_tweak_wrapper_aesni",
    "type": "CPP"
  },
  {
    "name": "t _xts_wrapper_aesni",
    "type": "CPP"
  },
  {
    "name": "T _ccz_is_zero",
    "type": "CPP"
  },
  {
    "name": "T _ccwrap_auth_decrypt_withiv",
    "type": "CPP"
  },
  {
    "name": "T _ccz_lcm",
    "type": "CPP"
  },
  {
    "name": "T _ccz_lsl",
    "type": "CPP"
  },
  {
    "name": "T _ccnistkdf_ctr_cmac_fixed",
    "type": "CPP"
  },
  {
    "name": "t _PRF_EVAL",
    "type": "CPP"
  },
  {
    "name": "T _ccnistkdf_ctr_cmac",
    "type": "CPP"
  },
  {
    "name": "T _ccz_lsr",
    "type": "CPP"
  },
  {
    "name": "T _ccsrp_gp_rfc5054_3072",
    "type": "CPP"
  },
  {
    "name": "T _ccz_mod",
    "type": "CPP"
  },
  {
    "name": "t _ccaes_vng_ccm_decrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccz_mul",
    "type": "CPP"
  },
  {
    "name": "T _ccecies_import_eph_pub",
    "type": "CPP"
  },
  {
    "name": "T _ccec_der_export_priv_size",
    "type": "CPP"
  },
  {
    "name": "T _ccec_der_export_priv",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_decrypt_oaep_blinded",
    "type": "CPP"
  },
  {
    "name": "T _ccz_muli",
    "type": "CPP"
  },
  {
    "name": "t _ccn_trailing_zeros",
    "type": "CPP"
  },
  {
    "name": "T _ccz_mulmod",
    "type": "CPP"
  },
  {
    "name": "T _ccz_neg",
    "type": "CPP"
  },
  {
    "name": "T _ccz_random_bits",
    "type": "CPP"
  },
  {
    "name": "t _singlemults",
    "type": "CPP"
  },
  {
    "name": "T _ccz_read_radix",
    "type": "CPP"
  },
  {
    "name": "T _ccz_read_uint",
    "type": "CPP"
  },
  {
    "name": "t _AccelerateCrypto_SHA512_compress_AVX1",
    "type": "CPP"
  },
  {
    "name": "t _ccdh_check_pub",
    "type": "CPP"
  },
  {
    "name": "T _ccz_set",
    "type": "CPP"
  },
  {
    "name": "T _ccspake_sizeof_w",
    "type": "CPP"
  },
  {
    "name": "T _ccspake_sizeof_point",
    "type": "CPP"
  },
  {
    "name": "T _ccspake_sizeof_ctx",
    "type": "CPP"
  },
  {
    "name": "T _ccspake_generate_L",
    "type": "CPP"
  },
  {
    "name": "t _ccspake_cmp_pub_key",
    "type": "CPP"
  },
  {
    "name": "t _ccspake_store_pub_key",
    "type": "CPP"
  },
  {
    "name": "t _ccspake_import_pub",
    "type": "CPP"
  },
  {
    "name": "T _ccz_set_bit",
    "type": "CPP"
  },
  {
    "name": "t _frandom",
    "type": "CPP"
  },
  {
    "name": "T _ccec_sign_composite",
    "type": "CPP"
  },
  {
    "name": "T _ccz_seti",
    "type": "CPP"
  },
  {
    "name": "t _cczp_is_one_default_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_is_one_ws",
    "type": "CPP"
  },
  {
    "name": "T _ccz_size",
    "type": "CPP"
  },
  {
    "name": "t _aesxts_mult_x",
    "type": "CPP"
  },
  {
    "name": "t _aesxts_tweak_crypt_opt",
    "type": "CPP"
  },
  {
    "name": "t _aesxts_tweak_crypt_aesni",
    "type": "CPP"
  },
  {
    "name": "t _aesxts_tweak_crypt_group_aesni",
    "type": "CPP"
  },
  {
    "name": "t _aesxts_tweak_crypt_group_opt",
    "type": "CPP"
  },
  {
    "name": "t _aesxts_tweak_uncrypt_opt",
    "type": "CPP"
  },
  {
    "name": "t _aesxts_tweak_uncrypt_aesni",
    "type": "CPP"
  },
  {
    "name": "t _aesxts_tweak_uncrypt_group_aesni",
    "type": "CPP"
  },
  {
    "name": "t _aesxts_tweak_uncrypt_group_opt",
    "type": "CPP"
  },
  {
    "name": "T _ccz_sqr",
    "type": "CPP"
  },
  {
    "name": "T _ccz_sqrmod",
    "type": "CPP"
  },
  {
    "name": "T _ccss_shamir_share_generator_init",
    "type": "CPP"
  },
  {
    "name": "T _ccz_sub",
    "type": "CPP"
  },
  {
    "name": "T _ccz_subi",
    "type": "CPP"
  },
  {
    "name": "T _ccz_trailing_zeros",
    "type": "CPP"
  },
  {
    "name": "T _ccz_write_int_size",
    "type": "CPP"
  },
  {
    "name": "T _ccz_write_int",
    "type": "CPP"
  },
  {
    "name": "T _ccz_write_radix_size",
    "type": "CPP"
  },
  {
    "name": "t _ccn_write_radix_size",
    "type": "CPP"
  },
  {
    "name": "T _ccz_write_radix",
    "type": "CPP"
  },
  {
    "name": "t _ccn_write_radix",
    "type": "CPP"
  },
  {
    "name": "t _ccn_div1",
    "type": "CPP"
  },
  {
    "name": "t _ccn_divn",
    "type": "CPP"
  },
  {
    "name": "T _ccz_write_uint_size",
    "type": "CPP"
  },
  {
    "name": "T _ccz_write_uint",
    "type": "CPP"
  },
  {
    "name": "T _ccz_zero",
    "type": "CPP"
  },
  {
    "name": "T _ccnistkdf_fb_hmac_fixed",
    "type": "CPP"
  },
  {
    "name": "t _F",
    "type": "CPP"
  },
  {
    "name": "T _ccnistkdf_fb_hmac",
    "type": "CPP"
  },
  {
    "name": "t _cczp_div2_ws",
    "type": "CPP"
  },
  {
    "name": "T _cczp_init_with_recip",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_sign_pss",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_decrypt_eme_pkcs1v15_blinded",
    "type": "CPP"
  },
  {
    "name": "t _cczp_modn_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_mod_default_ws",
    "type": "CPP"
  },
  {
    "name": "t _ccsha512_vng_intel_avx1_compress",
    "type": "CPP"
  },
  {
    "name": "t _ccec_generate_scalar_pka",
    "type": "CPP"
  },
  {
    "name": "t _cczp_mm_mod_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_mm_to_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_mm_from_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_mm_is_one_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_mm_init_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_mm_power_fast",
    "type": "CPP"
  },
  {
    "name": "t _cczp_mm_power_func_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_mm_power_ssma_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_mul_default_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_powern",
    "type": "CPP"
  },
  {
    "name": "t _cczp_power_ml_ws",
    "type": "CPP"
  },
  {
    "name": "t _cczp_sqr_default_ws",
    "type": "CPP"
  },
  {
    "name": "t _desfunc",
    "type": "CPP"
  },
  {
    "name": "T _ccckg_owner_generate_share",
    "type": "CPP"
  },
  {
    "name": "T _ccckg_owner_finish",
    "type": "CPP"
  },
  {
    "name": "T _ccpad_pkcs7_ecb_encrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccpad_pkcs7_ecb_decrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccecdh_generate_key",
    "type": "CPP"
  },
  {
    "name": "t _ccdh_power_blinded",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_rsa_pub_size",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_rsa_pub",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_siv_hmac_nonce",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_rsa_priv_size",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_rsa_priv",
    "type": "CPP"
  },
  {
    "name": "t _init_wrapper_opt",
    "type": "CPP"
  },
  {
    "name": "t _ecb_wrapper_opt",
    "type": "CPP"
  },
  {
    "name": "t _init_wrapper_aesni",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_encrypt_opt",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_decrypt_opt",
    "type": "CPP"
  },
  {
    "name": "t _aes_encrypt_xmm_no_save",
    "type": "CPP"
  },
  {
    "name": "t _aes_decrypt_xmm_no_save",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_encrypt_opt_key",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_encrypt_key128",
    "type": "CPP"
  },
  {
    "name": "t EKeyHas4Words",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_encrypt_key192",
    "type": "CPP"
  },
  {
    "name": "t EKeyHas6Words",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_encrypt_key256",
    "type": "CPP"
  },
  {
    "name": "t EKeyHas8Words",
    "type": "CPP"
  },
  {
    "name": "t InvMixColumn",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_decrypt_opt_key",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_decrypt_key128",
    "type": "CPP"
  },
  {
    "name": "t DKeyHas4Words",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_decrypt_key192",
    "type": "CPP"
  },
  {
    "name": "t DKeyHas6Words",
    "type": "CPP"
  },
  {
    "name": "t _vng_aes_decrypt_key256",
    "type": "CPP"
  },
  {
    "name": "t DKeyHas8Words",
    "type": "CPP"
  },
  {
    "name": "t _ccrng_cryptographic_atfork_child",
    "type": "CPP"
  },
  {
    "name": "t _cc_try_abort",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_rsa_priv_n",
    "type": "CPP"
  },
  {
    "name": "T _ccaes_siv_hmac_sha256_encrypt_mode",
    "type": "CPP"
  },
  {
    "name": "T _ccec_der_import_diversified_pub",
    "type": "CPP"
  },
  {
    "name": "T _ccder_decode_rsa_priv",
    "type": "CPP"
  },
  {
    "name": "T _ccrsa_export_pub",
    "type": "CPP"
  },
  {
    "name": "T _ccdigest_oid_lookup",
    "type": "CPP"
  },
  {
    "name": "t _ccdh_copy_gp",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_dhparams_size",
    "type": "CPP"
  },
  {
    "name": "T _ccder_encode_dhparams",
    "type": "CPP"
  },
  {
    "name": "T _ccrng_ecfips_test_init",
    "type": "CPP"
  },
  {
    "name": "t _ecfips_test_generate",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_ccm_init",
    "type": "CPP"
  },
  {
    "name": "T _ccchacha20",
    "type": "CPP"
  },
  {
    "name": "T _ccchacha20_init",
    "type": "CPP"
  },
  {
    "name": "T _ccchacha20_setnonce",
    "type": "CPP"
  },
  {
    "name": "T _ccchacha20_setcounter",
    "type": "CPP"
  },
  {
    "name": "t __ccchacha20_xor",
    "type": "CPP"
  },
  {
    "name": "T _ccchacha20_reset",
    "type": "CPP"
  },
  {
    "name": "T _ccchacha20_update",
    "type": "CPP"
  },
  {
    "name": "T _ccchacha20_final",
    "type": "CPP"
  },
  {
    "name": "T _ccpoly1305_init",
    "type": "CPP"
  },
  {
    "name": "T _ccpoly1305_update",
    "type": "CPP"
  },
  {
    "name": "t __ccpoly1305_update",
    "type": "CPP"
  },
  {
    "name": "T _ccpoly1305_final",
    "type": "CPP"
  },
  {
    "name": "T _ccpoly1305",
    "type": "CPP"
  },
  {
    "name": "T _ccchacha20poly1305_info",
    "type": "CPP"
  },
  {
    "name": "T _ccchacha20poly1305_init",
    "type": "CPP"
  },
  {
    "name": "T _ccchacha20poly1305_reset",
    "type": "CPP"
  },
  {
    "name": "T _ccchacha20poly1305_setnonce",
    "type": "CPP"
  },
  {
    "name": "T _ccchacha20poly1305_incnonce",
    "type": "CPP"
  },
  {
    "name": "T _ccchacha20poly1305_aad",
    "type": "CPP"
  },
  {
    "name": "T _ccchacha20poly1305_encrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccchacha20poly1305_decrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccchacha20poly1305_finalize",
    "type": "CPP"
  },
  {
    "name": "T _ccchacha20poly1305_verify",
    "type": "CPP"
  },
  {
    "name": "T _ccchacha20poly1305_encrypt_oneshot",
    "type": "CPP"
  },
  {
    "name": "T _ccchacha20poly1305_decrypt_oneshot",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_ccm_set_iv",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_ccm_macdata",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_ccm_cbcmac",
    "type": "CPP"
  },
  {
    "name": "T _ccmode_factory_omac_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccecies_encrypt_gcm_from_shared_secret_composite",
    "type": "CPP"
  },
  {
    "name": "T _ccecies_encrypt_gcm_from_shared_secret",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_ccm_crypt",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_ccm_encrypt",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_ccm_decrypt",
    "type": "CPP"
  },
  {
    "name": "t _cc_try_abort",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_ccm_finalize",
    "type": "CPP"
  },
  {
    "name": "t _ccmode_ccm_reset",
    "type": "CPP"
  },
  {
    "name": "T _ccec_curve_for_length_lookup",
    "type": "CPP"
  },
  {
    "name": "t _ccctr_one_shot",
    "type": "CPP"
  },
  {
    "name": "T _ccsrp_gp_rfc5054_1024",
    "type": "CPP"
  },
  {
    "name": "T _ccsiv_hmac_ciphertext_size",
    "type": "CPP"
  },
  {
    "name": "T _ccsrp_gp_rfc5054_2048",
    "type": "CPP"
  },
  {
    "name": "T _ccdh_gp_rfc2409group02",
    "type": "CPP"
  },
  {
    "name": "T _ccsrp_gp_rfc5054_4096",
    "type": "CPP"
  },
  {
    "name": "t _ccss_shamir_generate_share_poly",
    "type": "CPP"
  },
  {
    "name": "T _ccmode_factory_omac_encrypt",
    "type": "CPP"
  },
  {
    "name": "T _ccsrp_gp_rfc5054_8192",
    "type": "CPP"
  },
  {
    "name": "T _ccn_zero_multi",
    "type": "CPP"
  },
  {
    "name": "T _ccsrp_client_start_authentication",
    "type": "CPP"
  },
  {
    "name": "T _ccsrp_client_process_challenge",
    "type": "CPP"
  },
  {
    "name": "t _ccsrp_generate_x",
    "type": "CPP"
  },
  {
    "name": "t _ccsrp_generate_client_S",
    "type": "CPP"
  },
  {
    "name": "t _ccsrp_generate_M",
    "type": "CPP"
  },
  {
    "name": "t _ccsrp_generate_H_AMK",
    "type": "CPP"
  },
  {
    "name": "T _ccsrp_client_verify_session",
    "type": "CPP"
  },
  {
    "name": "t _ccsrp_digest_ccn_ccn",
    "type": "CPP"
  },
  {
    "name": "t _ccsrp_digest_update_ccn",
    "type": "CPP"
  },
  {
    "name": "t _ccsrp_digest_ccn",
    "type": "CPP"
  },
  {
    "name": "T _ccecies_decrypt_gcm_plaintext_size",
    "type": "CPP"
  },
  {
    "name": "T _ccecies_decrypt_gcm_plaintext_size_cp",
    "type": "CPP"
  },
  {
    "name": "T _ccsrp_generate_salt_and_verification",
    "type": "CPP"
  },
  {
    "name": "T _ccsrp_generate_verifier",
    "type": "CPP"
  },
  {
    "name": "t _ccsrp_generate_x",
    "type": "CPP"
  },
  {
    "name": "T _ccsrp_server_generate_public_key",
    "type": "CPP"
  },
  {
    "name": "t _ccsrp_generate_server_pubkey",
    "type": "CPP"
  },
  {
    "name": "T _ccsrp_server_compute_session",
    "type": "CPP"
  },
  {
    "name": "t _ccsrp_generate_server_S",
    "type": "CPP"
  },
  {
    "name": "t _ccsrp_generate_M",
    "type": "CPP"
  },
  {
    "name": "t _ccsrp_generate_H_AMK",
    "type": "CPP"
  },
  {
    "name": "T _ccsrp_server_start_authentication",
    "type": "CPP"
  },
  {
    "name": "T _ccsrp_server_verify_session",
    "type": "CPP"
  },
  {
    "name": "t _ccsrp_digest_ccn_ccn",
    "type": "CPP"
  },
  {
    "name": "t _ccsrp_digest_update_ccn",
    "type": "CPP"
  },
  {
    "name": "t _ccsrp_digest_ccn",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libdispatch.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _dispatch_atfork_prepare",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_atfork_parent",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_atfork_child",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sigmask",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_is_multithreaded",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_is_fork_of_multithreaded_parent",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_get_global_queue",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_get_current_queue",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_attr_to_info",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_queue_attr_make_with_qos_class",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_attr_from_info",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_queue_attr_make_initially_inactive",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_queue_attr_make_with_overcommit",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_queue_attr_make_with_autorelease_frequency",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_object_no_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_object_no_dispose",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_object_missing_debug",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_no_activate",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_vtable_init",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_data_destructor_free_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_data_destructor_none_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_data_destructor_vm_deallocate_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_data_destructor_inline_block_invoke_4",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_parse_bool",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_getenv_bool",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_build_init",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_fault",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_continuation_get_function_symbol",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_debugv",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_temporary_resource_shortage",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_calloc",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_strdup_if_mutable",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_Block_copy",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_call_block_and_release",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_msg_get_context",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_wakeup_runloop_thread",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_consume_send_once_right",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_notify_port_destroyed",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_notify_no_senders",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_notify_send_once",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_xpc_no_handle_message",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_msg_context_no_async_reply_queue",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_default_async_reply_handler",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_enable_sigterm",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_logv_init",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_logv_file",
    "type": "CPP"
  },
  {
    "name": "t __os_object_retain_count",
    "type": "CPP"
  },
  {
    "name": "T __os_object_retain_internal",
    "type": "CPP"
  },
  {
    "name": "T __os_object_retain_internal_n",
    "type": "CPP"
  },
  {
    "name": "T __os_object_release_internal",
    "type": "CPP"
  },
  {
    "name": "T __os_object_release_internal_n",
    "type": "CPP"
  },
  {
    "name": "T __os_object_retain",
    "type": "CPP"
  },
  {
    "name": "T __os_object_retain_with_resurrect",
    "type": "CPP"
  },
  {
    "name": "T __os_object_release",
    "type": "CPP"
  },
  {
    "name": "T __os_object_release_without_xref_dispose",
    "type": "CPP"
  },
  {
    "name": "t __os_object_retain_weak",
    "type": "CPP"
  },
  {
    "name": "t __os_object_allows_weak_reference",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_object_alloc",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_object_finalize",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_object_dealloc",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_retain",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_release",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_xref_dispose",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_dispose",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_get_context",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_set_context",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_set_finalizer_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_set_target_queue",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_activate",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_suspend",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_resume",
    "type": "CPP"
  },
  {
    "name": "t __os_object_init",
    "type": "CPP"
  },
  {
    "name": "t __os_objc_destructInstance",
    "type": "CPP"
  },
  {
    "name": "T __os_object_alloc_realized",
    "type": "CPP"
  },
  {
    "name": "T __os_object_alloc",
    "type": "CPP"
  },
  {
    "name": "T __os_object_dealloc",
    "type": "CPP"
  },
  {
    "name": "t __os_object_xref_dispose",
    "type": "CPP"
  },
  {
    "name": "t __os_object_dispose",
    "type": "CPP"
  },
  {
    "name": "T _os_retain",
    "type": "CPP"
  },
  {
    "name": "T _os_release",
    "type": "CPP"
  },
  {
    "name": "t __os_object_atfork_prepare",
    "type": "CPP"
  },
  {
    "name": "t __os_object_atfork_parent",
    "type": "CPP"
  },
  {
    "name": "t __os_object_atfork_child",
    "type": "CPP"
  },
  {
    "name": "t -[OS_object init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_object retain]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_object release]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_object retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_object retainWeakReference]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_object allowsWeakReference]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_object _xref_dispose]",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_objc_alloc",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_objc_retain",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_objc_release",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_objc_set_context",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_objc_get_context",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_objc_set_finalizer_f",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_objc_set_target_queue",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_objc_suspend",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_objc_resume",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_objc_activate",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_object init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_object debugDescription]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_object dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue release]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue description]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue _xref_dispose]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_channel init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_channel release]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_channel _xref_dispose]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_source init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_source release]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_source _xref_dispose]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_mach init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_mach release]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_mach _xref_dispose]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue_runloop init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue_runloop release]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue_runloop _xref_dispose]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_semaphore init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_group init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_workloop init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue_serial init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue_concurrent init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue_main init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue_global init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue_pthread_root init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue_mgr init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue_attr init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_mach_msg init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_io init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_operation init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_disk init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_voucher init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_voucher retain]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_voucher release]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_voucher dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_voucher debugDescription]",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_last_resort_autorelease_pool_push",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_last_resort_autorelease_pool_pop",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_client_callout",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_client_callout2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_client_callout3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_client_callout4",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_block_create",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_block_create_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32c35_ZTS29dispatch_block_private_data_s",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32c35_ZTS29dispatch_block_private_data_s",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_create_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_dispose_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_signal",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_wait",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_timedwait",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_wait_on_address",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_wake_by_address",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_thread_event_signal_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_thread_event_wait_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_unfair_lock_lock_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_unfair_lock_unlock_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_once_wait",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_gate_broadcast_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_firehose_gate_wait",
    "type": "CPP"
  },
  {
    "name": "t __dlock_wait",
    "type": "CPP"
  },
  {
    "name": "t __dlock_wake",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_semaphore_create",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_semaphore_dispose",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_semaphore_signal_slow",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_semaphore_signal",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_semaphore_wait",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_semaphore_wait_slow",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_group_create",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_group_create_and_enter",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_group_dispose",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_group_wait",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_group_wait_slow",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_group_leave",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_group_wake",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_group_enter",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_group_notify_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_group_notify",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_group_async_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_group_async",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_once",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_once_f",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_once_callout",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_assert_queue$V2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_assert_queue_fail",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_assert_queue_not$V2",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_assert_queue_barrier",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_assert_queue_barrier_fail",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_set_priority_and_mach_voucher_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_set_priority_and_voucher_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_async_redirect_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_stealer_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_override_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_continuation_free_to_cache_limit",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_continuation_pop",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_block_create",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_block_create_with_qos_class",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_block_create_with_voucher",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_block_create_with_voucher_and_qos_class",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_block_perform",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_block_invoke_direct",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_block_sync_invoke",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_block_cancel",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_block_testcancel",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_block_wait",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_block_notify",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_continuation_init_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_block_async_invoke_and_release",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_block_async_invoke",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_barrier_async_f",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_async_f_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_barrier_async_detached_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_barrier_async",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_channel_async_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_async_enforce_qos_class_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_channel_async",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_barrier_trysync_or_async_f",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_barrier_trysync_or_async_f_complete",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_barrier_sync_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_sync_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_barrier_sync",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sync_block_with_privdata",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_barrier_sync_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_sync",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sync_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_async_and_wait_f",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sync_function_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_async_and_wait_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_barrier_async_and_wait_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_barrier_async_and_wait",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_async_and_wait_block_with_privdata",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_async_and_wait",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_queue_set_specific",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_init_specific",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_queue_get_specific",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_get_specific",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_queue_set_label_nocopy",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_compute_priority_and_wlh",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_set_qos_class_floor",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_workloop_set_qos_class_floor",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_set_qos_class",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_set_qos_class_fallback",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_queue_create_with_target$V2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_create_with_target",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_queue_create",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_queue_create_with_accounting_override_voucher",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_class_dispose",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_dispose",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_dispose",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_xref_dispose",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_suspend",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_suspend_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_resume",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_resume_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_resume_activate",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_queue_get_label",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_queue_get_qos_class",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_queue_set_width",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_set_width",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_set_target_queue",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_legacy_set_target_queue",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_poll_for_events_4launchd",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_return_to_kernel",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_serial_drain",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_invoke_finish",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_drain_barrier_waiter",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_drain_barrier_waiter",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_activate",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_priority_inherit_from_target",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_inherit_wlh_from_target",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_invoke",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_workloop_copy_current",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_workloop_is_current",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_workloop_should_yield_4NW",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_workloop_create",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_create",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_workloop_create_inactive",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_workloop_set_autorelease_frequency",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_workloop_set_scheduler_priority",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_workloop_set_qos_class",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_workloop_set_cpupercent",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_workloop_set_observer_hooks_4IOHID",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_dispose",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_activate",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_wakeup",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_barrier_complete",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_push",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_push_waiter",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_wakeup",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_class_barrier_complete",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_wakeup",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_barrier_complete",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_push",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_push_waiter",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_concurrent_push",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_continuation_redirect_push",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_channel_dispose",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_channel_xref_dispose",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_channel_invoke",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_channel_foreach_work_item_peek_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_channel_drain_f",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_channel_invoke_checks",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_channel_foreach_work_item_peek",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_channel_drain",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_channel_wakeup",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_channel_create",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_channel_enqueue",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_channel_enqueue_slow",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_channel_wakeup",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mgr_queue_push",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mgr_queue_wakeup",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kevent_workqueue_init",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mgr_sched_init",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_root_queue_poke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_root_queue_poke_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_root_queue_wakeup",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_root_queue_push",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_root_queue_push_override",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_pthread_root_queue_create",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_pthread_root_queue_create",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_pthread_root_queue_create_with_observer_hooks_4IOHID",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_queue_is_exclusively_owned_by_current_thread_4IOHID",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_pthread_root_queue_copy_current",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_pthread_root_queue_dispose",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_runloop_queue_wakeup",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_runloop_queue_poke",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_runloop_root_queue_create_4CF",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_runloop_queue_handle_init",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_runloop_queue_xref_dispose",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_runloop_queue_dispose",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_runloop_queue_handle_dispose",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_runloop_root_queue_perform_4CF",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_runloop_root_queue_wakeup_4CF",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_runloop_root_queue_get_port_4CF",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_get_main_queue_handle_4CF",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_get_main_queue_port_4CF",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_main_queue_callback_4CF",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_main_queue_push",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_main_queue_wakeup",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_main",
    "type": "CPP"
  },
  {
    "name": "T _libdispatch_init",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_cleanup",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_frame_cleanup",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_cache_cleanup",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_context_cleanup",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_wlh_cleanup",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_deferred_items_cleanup",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_atfork_child",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_fork_becomes_unsafe_slow",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_prohibit_transition_to_multithreaded",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_block_async_invoke2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_non_barrier_complete",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sync_f_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sync_recurse",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_barrier_sync_invoke_and_complete",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_async_and_wait_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___DISPATCH_WAIT_FOR_QUEUE__",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sync_complete_recurse",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sync_invoke_and_complete_recurse",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_wait_compute_wlh",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sync_invoke_and_complete",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_async_and_wait_recurse",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_async_and_wait_f_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_async_and_wait_invoke_and_complete_recurse",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_specific_head_dispose",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_specific_head_dispose_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_non_barrier_waiter_redirect_or_wake",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_drain_should_narrow_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_waiter_wake_wlh_anon",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_barrier_waiter_redirect_or_wake",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_waiter_wake",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_concurrent_drain",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_wakeup_with_override_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_root_queue_push_override_stealer",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_push_stealer",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_drain_non_barriers",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_channel_invoke_cancel_check",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mgr_sched_qos2prio",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_worker_thread",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_root_queue_drain",
    "type": "CPP"
  },
  {
    "name": "t ___DISPATCH_ROOT_QUEUE_CONTENDED_WAIT__",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_root_queue_head_tail_quiesced",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_root_queue_mediator_is_gone",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mgr_priority_raise",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_main_queue_update_priority_from_thread",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_root_queues_init_once",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_worker_thread2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kevent_worker_thread",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_worker_thread",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_cleanup2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sig_thread",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sigsuspend",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_apply_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_apply_redirect_invoke",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_apply_f",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_apply_serial",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_apply_redirect",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_apply",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_apply_invoke_and_wait",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_source_create",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_source_set_timer",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_dispose",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_xref_dispose",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_source_testcancel",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_source_get_mask",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_source_get_handle",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_source_get_data",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_source_get_extended_data",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_source_merge_data",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_source_set_event_handler",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_set_handler",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_source_set_event_handler_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_source_set_cancel_handler",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_source_set_mandatory_cancel_handler",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_source_set_cancel_handler_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_source_set_mandatory_cancel_handler_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_source_set_registration_handler",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_source_set_registration_handler_f",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_source_will_reenable_kevent_4NW",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_activate",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_refs_finalize_unregistration",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_install",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_wakeup",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_source_cancel",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_source_cancel_and_wait",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_refs_unregister",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_cancel_callout",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_merge_evt",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_after_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_after",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_handler_dispose",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_set_handler_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_handle_wlh_change",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_timer_telemetry_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_timer_telemetry_init",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_wait_for_enqueuer",
    "type": "CPP"
  },
  {
    "name": "t ___DISPATCH_WAIT_FOR_ENQUEUER__",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_hooks_install_4libxpc",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_mach_hooks_install_default",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_create",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_create",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_create_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_create_4libxpc",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_dispose",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_request_no_senders",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_set_flags",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_connect",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_arm_no_senders",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_merge_msg",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_no_senders_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_handle_or_push_received_msg",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_reply_merge_msg",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_reply_unregister",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_send_barrier_drain_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_send_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_notification_merge_evt",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_send",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_send_msg",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_send_with_result",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_send_and_wait_for_reply",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_send_and_wait_for_reply",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_send_with_result_and_wait_for_reply",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_send_with_result_and_async_reply_4libxpc",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_reconnect",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_reconnect_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_send_push",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_get_checkin_port",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_handoff_reply_f",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_handoff_context",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_handoff_set_wlh",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_handoff_reply",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_ipc_handoff_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_ipc_handoff_async",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_msg_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_barrier_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_connect_invoke",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_send_barrier_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_send_barrier",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_receive_barrier_f",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_receive_barrier",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_cancel",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_activate",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_install",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_wakeup",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_xpc_sigterm_merge_evt",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_sigterm_invoke",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_msg_create",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_msg_dispose",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_msg_get_msg",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_msg_async_reply_invoke",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mig_server",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_mig_demux",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_mach_mig_demux_get_context",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_msg_create_reply_disconnected",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_destruct_reply_port",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_send_drain",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_msg_not_sent",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_msg_send",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_push_send_barrier_drain",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_reply_waiter_register",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_reply_kevent_register",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_send_push_and_trydrain",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_procinfo_init",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_handle_wlh_change",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_cancel",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_cancel_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin_probe",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_unote_create_with_handle",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_unote_create",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_unote_create_with_fd",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_unote_create_without_handle",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_unote_dispose",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_unote_register",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_timer_unote_register",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_unote_resume",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_timer_unote_resume",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_unote_unregister",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_timer_unote_unregister",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_data_create",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_signal_create",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_timer_unote_configure",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_timer_create",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_drain_timers",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_timer_unote_disarm",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_timer_unote_arm",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_timer_heap_resift",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sync_ipc_handoff_begin",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kq_immediate_update",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sync_ipc_handoff_end",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kq_deferred_update",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_unote_register_muxed",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_unote_resume_muxed",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_unote_unregister_muxed",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_unote_register_direct",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kq_unote_update",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_unote_resume_direct",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_unote_unregister_direct",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_atfork_child",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_poke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_drain",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kq_drain",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_merge",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kevent_drain",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_leave_immediate",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kq_poll",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_leave_deferred",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_cancel_waiter",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_wake_owner",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_wait_for_ownership",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_end_ownership",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_timer_arm",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_timer_program",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_timer_delete",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_proc_create",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_vm_create",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_msg_sender_is_kernel",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_get_mach_host_port",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_host_port_init",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_notify_port_deleted",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_notify_merge",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_notify_dead_name",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_notify_send_possible",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_notification_set_armed",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_mach_send_create",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_send_update",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_send_create",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_notification_event",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_notification_merge_msg",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_recv_direct_merge_evt",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_reply_merge_evt",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kevent_workloop_override_self",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kevent_workloop_poke_drain",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kevent_print_error",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kevent_mach_msg_drain",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kevent_merge_muxed",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kevent_merge",
    "type": "CPP"
  },
  {
    "name": "t __evfiltstr",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kevent_mach_msg_recv",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kq_init",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_memorypressure_handler",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_host_notify_update",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_notify_port_init",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kevent_mach_notify_resume",
    "type": "CPP"
  },
  {
    "name": "T _voucher_adopt",
    "type": "CPP"
  },
  {
    "name": "T _voucher_copy",
    "type": "CPP"
  },
  {
    "name": "T _voucher_copy_without_importance",
    "type": "CPP"
  },
  {
    "name": "t _voucher_retain",
    "type": "CPP"
  },
  {
    "name": "t _voucher_release",
    "type": "CPP"
  },
  {
    "name": "t __voucher_thread_cleanup",
    "type": "CPP"
  },
  {
    "name": "t __voucher_dealloc_mach_voucher",
    "type": "CPP"
  },
  {
    "name": "t __voucher_task_mach_voucher_init",
    "type": "CPP"
  },
  {
    "name": "T _voucher_replace_default_voucher",
    "type": "CPP"
  },
  {
    "name": "t __voucher_get_mach_voucher",
    "type": "CPP"
  },
  {
    "name": "t __voucher_insert",
    "type": "CPP"
  },
  {
    "name": "t __voucher_create_mach_voucher_with_priority",
    "type": "CPP"
  },
  {
    "name": "t __voucher_create_with_priority_and_mach_voucher",
    "type": "CPP"
  },
  {
    "name": "t __voucher_find_and_retain",
    "type": "CPP"
  },
  {
    "name": "t __voucher_create_without_importance",
    "type": "CPP"
  },
  {
    "name": "T _voucher_create_with_mach_msg",
    "type": "CPP"
  },
  {
    "name": "t __voucher_create_with_mach_voucher",
    "type": "CPP"
  },
  {
    "name": "T _voucher_decrement_importance_count4CF",
    "type": "CPP"
  },
  {
    "name": "t __voucher_xref_dispose",
    "type": "CPP"
  },
  {
    "name": "t __voucher_dispose",
    "type": "CPP"
  },
  {
    "name": "t __voucher_activity_debug_channel_init",
    "type": "CPP"
  },
  {
    "name": "t __voucher_atfork_child",
    "type": "CPP"
  },
  {
    "name": "T _voucher_copy_with_persona_mach_voucher",
    "type": "CPP"
  },
  {
    "name": "T _mach_voucher_persona_self",
    "type": "CPP"
  },
  {
    "name": "T _mach_voucher_persona_for_originator",
    "type": "CPP"
  },
  {
    "name": "T _voucher_get_current_persona",
    "type": "CPP"
  },
  {
    "name": "T _voucher_get_current_persona_originator_info",
    "type": "CPP"
  },
  {
    "name": "t __voucher_get_current_persona_token",
    "type": "CPP"
  },
  {
    "name": "T _voucher_get_current_persona_proximate_info",
    "type": "CPP"
  },
  {
    "name": "t _voucher_mach_msg_set",
    "type": "CPP"
  },
  {
    "name": "t _voucher_mach_msg_clear",
    "type": "CPP"
  },
  {
    "name": "t _voucher_mach_msg_adopt",
    "type": "CPP"
  },
  {
    "name": "t _voucher_mach_msg_revert",
    "type": "CPP"
  },
  {
    "name": "T _voucher_activity_initialize_4libtrace",
    "type": "CPP"
  },
  {
    "name": "t __voucher_init",
    "type": "CPP"
  },
  {
    "name": "T _voucher_activity_id_allocate",
    "type": "CPP"
  },
  {
    "name": "T _voucher_activity_get_logging_preferences",
    "type": "CPP"
  },
  {
    "name": "T _voucher_activity_should_send_strings",
    "type": "CPP"
  },
  {
    "name": "T _voucher_activity_get_metadata_buffer",
    "type": "CPP"
  },
  {
    "name": "T _voucher_activity_create_with_data",
    "type": "CPP"
  },
  {
    "name": "T _voucher_activity_create_with_location",
    "type": "CPP"
  },
  {
    "name": "T _voucher_get_activity_id_and_creator",
    "type": "CPP"
  },
  {
    "name": "T _voucher_get_activity_id",
    "type": "CPP"
  },
  {
    "name": "T _voucher_activity_flush",
    "type": "CPP"
  },
  {
    "name": "T _voucher_activity_trace_v_2",
    "type": "CPP"
  },
  {
    "name": "T _voucher_activity_trace_v",
    "type": "CPP"
  },
  {
    "name": "T _voucher_activity_trace",
    "type": "CPP"
  },
  {
    "name": "t __voucher_debug",
    "type": "CPP"
  },
  {
    "name": "t __voucher_activity_id_allocate_slow",
    "type": "CPP"
  },
  {
    "name": "t __firehose_task_buffer_init",
    "type": "CPP"
  },
  {
    "name": "t _firehose_buffer_create",
    "type": "CPP"
  },
  {
    "name": "t _firehose_buffer_update_limits_unlocked",
    "type": "CPP"
  },
  {
    "name": "t _firehose_buffer_get_logging_prefs",
    "type": "CPP"
  },
  {
    "name": "t _firehose_buffer_should_send_strings",
    "type": "CPP"
  },
  {
    "name": "t _firehose_client_reconnect",
    "type": "CPP"
  },
  {
    "name": "t _firehose_client_push_reply",
    "type": "CPP"
  },
  {
    "name": "t _firehose_client_push_notify_async",
    "type": "CPP"
  },
  {
    "name": "t _firehose_client_merge_updates",
    "type": "CPP"
  },
  {
    "name": "t _firehose_buffer_update_limits",
    "type": "CPP"
  },
  {
    "name": "t _firehose_buffer_ring_enqueue",
    "type": "CPP"
  },
  {
    "name": "t _firehose_buffer_force_connect",
    "type": "CPP"
  },
  {
    "name": "t _firehose_buffer_tracepoint_reserve_slow",
    "type": "CPP"
  },
  {
    "name": "t _firehose_drain_notifications_once",
    "type": "CPP"
  },
  {
    "name": "t _firehose_buffer_stream_chunk_install",
    "type": "CPP"
  },
  {
    "name": "t _firehose_buffer_tracepoint_reserve_wait_for_chunks_from_logd",
    "type": "CPP"
  },
  {
    "name": "t _firehose_client_start_quarantine",
    "type": "CPP"
  },
  {
    "name": "t ___FIREHOSE_CLIENT_THROTTLED_DUE_TO_HEAVY_LOGGING__",
    "type": "CPP"
  },
  {
    "name": "t _firehose_client_send_push_and_wait",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_iocntl",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_io_dispose",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_io_create",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_io_create",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_fd_entry_init_async",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_create_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_io_init",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32b",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32b",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_io_create_f",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_create_f_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_io_create_with_path",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_create_with_path_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_io_queues_init",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_create_with_path_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_fd_entry_create_with_path",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_io_create_with_path_f",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_create_with_path_f_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_io_create_with_io",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_create_with_io_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_create_with_io_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_create_with_io_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_io_create_with_io_f",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_create_with_io_f_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_io_set_high_water",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_set_high_water_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_io_set_low_water",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_set_low_water_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_io_set_interval",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_set_interval_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_io_set_target_queue",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_io_set_target_queue_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_io_get_descriptor",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_fd_entry_open",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_io_close",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_close_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_close_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_io_barrier",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_barrier_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_barrier_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_barrier_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_io_barrier_f",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_barrier_f_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_io_read",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_read_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_operation_create",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_read_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_operation_enqueue",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_io_read_f",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_read_f_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_io_write",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_write_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_write_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_io_write_f",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_io_write_f_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_read",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_read_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_read_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_read_block_invoke.30",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_read_block_invoke_2.31",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32b40r48r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32b40r48r",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_read_block_invoke.34",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_read_f",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_read_f_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_write",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_write_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_write_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_write_block_invoke.40",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_write_block_invoke_2.41",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_write_block_invoke.44",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_write_f",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_write_f_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_operation_dispose",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_operation_deliver_data",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_disk_dispose",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_io_init_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_io_init_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_io_stop_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_io_stop_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_fd_entry_cleanup_operations",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_io_stop_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_fd_entry_cleanup_operations_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_fd_entry_cleanup_operations_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_stream_cleanup_operations",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_disk_complete_operation",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_stream_complete_operation",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_operation_create_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_operation_create_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_operation_enqueue_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_operation_enqueue_block_invoke.67",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_operation_enqueue_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_operation_should_enqueue",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_stream_queue_handler",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_operation_timer_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_stream_handler",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_operation_perform",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_stream_handler_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_operation_perform_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_stream_source_handler",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_stream_source_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_disk_handler",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_disk_perform",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_disk_perform_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_fd_entry_init_async_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_fd_entry_init_async_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_fd_entry_create",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_fd_entry_create_with_fd_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_fd_entry_create_with_fd_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_disk_init",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_stream_init",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_fd_entry_create_with_fd_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_stream_dispose",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_fd_entry_create_with_fd_block_invoke_4",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_fd_entry_create_with_fd_block_invoke_5",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_fd_entry_create_with_path_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_fd_entry_create_with_path_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_operation_deliver_data_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_data_init_with_bytes",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_data_destroy_buffer",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_data_create",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_data_create_f",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_data_create_f_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_data_create_alloc",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_data_dispose",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_data_set_target_queue",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_data_get_size",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_data_create_concat",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_data_create_subrange",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_data_create_map",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_data_flatten",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_data_get_flattened_bytes_4libxpc",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_data_apply_f",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_data_apply",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_data_apply",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_data_copy_region",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_data_make_memory_entry",
    "type": "CPP"
  },
  {
    "name": "t ___dispatch_data_make_memory_entry_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_data_flatten_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_data_apply_client_callout",
    "type": "CPP"
  },
  {
    "name": "t +[OS_dispatch_data allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data initWithBytes:length:copy:freeWhenDone:bytesAreVM:]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data _bytesAreVM]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data _setContext:]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data _getContext]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data _setFinalizer:]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data _setTargetQueue:]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data debugDescription]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data length]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data bytes]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data _isCompact]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data _suspend]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data _resume]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data _activate]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data_empty retain]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data_empty release]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data_empty autorelease]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data_empty retainCount]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_dispatch_data_empty allocWithZone:]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data_empty _setContext:]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data_empty _getContext]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data_empty _setFinalizer:]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data_empty _setTargetQueue:]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data_empty _suspend]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data_empty _resume]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_data_empty _activate]",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_data_create_with_transform",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_transform_from_base32",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_transform_to_base32",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_transform_from_base32hex",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_transform_to_base32hex",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_transform_from_base64",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_transform_to_base64",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_transform_from_utf16le",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_transform_to_utf16le",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_transform_from_utf16be",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_transform_to_utf16be",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_transform_to_utf8_without_bom",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_data_subrange_map",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_transform_from_base32_with_table",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_transform_from_base32_with_table_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32r40r48r56r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32r40r48r56r",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_transform_to_base32_with_table",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_transform_to_base32_with_table_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32r40r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32r40r",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_transform_from_base64_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_transform_to_base64_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_transform_from_utf16",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_transform_from_utf16_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_transform_buffer_new",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_transform_to_utf16",
    "type": "CPP"
  },
  {
    "name": "t ____dispatch_transform_to_utf16_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_transform_read_utf8_sequence",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_time_init",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_time",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_walltime",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_timeout",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_continuation_alloc_from_heap",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_alloc_continuation_alloc",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_continuation_free_to_heap",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_alloc_continuation_free",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_continuation_alloc_init",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_alloc_continuation_from_heap",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_alloc_continuation_from_heap_slow",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_alloc_try_create_heap",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_alloc_maybe_madvise_page",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_benchmark",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_benchmark_f",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_benchmark_dummy_function",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_benchmark_init",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_send_wakeup_runloop_thread",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_send_consume_send_once_right",
    "type": "CPP"
  },
  {
    "name": "t _libdispatch_internal_protocol_server_routine",
    "type": "CPP"
  },
  {
    "name": "t __Xmach_notify_port_deleted",
    "type": "CPP"
  },
  {
    "name": "t __Xmach_notify_send_possible",
    "type": "CPP"
  },
  {
    "name": "t __Xmach_notify_port_destroyed",
    "type": "CPP"
  },
  {
    "name": "t __Xmach_notify_no_senders",
    "type": "CPP"
  },
  {
    "name": "t __Xmach_notify_send_once",
    "type": "CPP"
  },
  {
    "name": "t __Xmach_notify_dead_name",
    "type": "CPP"
  },
  {
    "name": "t __Xwakeup_runloop_thread",
    "type": "CPP"
  },
  {
    "name": "t __Xconsume_send_once_right",
    "type": "CPP"
  },
  {
    "name": "t _libdispatch_internal_protocol_server",
    "type": "CPP"
  },
  {
    "name": "t _firehose_send_register",
    "type": "CPP"
  },
  {
    "name": "t _firehose_send_push_and_wait",
    "type": "CPP"
  },
  {
    "name": "t _firehose_send_push_async",
    "type": "CPP"
  },
  {
    "name": "t _firehose_send_get_logging_prefs",
    "type": "CPP"
  },
  {
    "name": "t _firehose_send_should_send_strings",
    "type": "CPP"
  },
  {
    "name": "t _firehoseReply_server_routine",
    "type": "CPP"
  },
  {
    "name": "t __Xpush_reply",
    "type": "CPP"
  },
  {
    "name": "t __Xpush_notify_async",
    "type": "CPP"
  },
  {
    "name": "t _firehoseReply_server",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_bug",
    "type": "CPP"
  },
  {
    "name": "T __dispatch_log",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_bug_mach_client",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_bug_kevent_client",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_bug_kevent_vanished",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_bug_deprecated",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_debugv",
    "type": "CPP"
  },
  {
    "name": "T _dispatch_debug",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_attr_to_info.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_data_destructor_free_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_data_destructor_none_block_invoke_2.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_data_destructor_vm_deallocate_block_invoke_3.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_data_destructor_inline_block_invoke_4.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_continuation_get_function_symbol.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_strdup_if_mutable.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_Block_copy.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_notify_port_destroyed.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_notify_no_senders.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_default_async_reply_handler.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_object_debug_attr",
    "type": "CPP"
  },
  {
    "name": "t __os_object_retain_weak.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __os_object_allows_weak_reference.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_release.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_dispose.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_set_target_queue.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_set_target_queue.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_objc_debug",
    "type": "CPP"
  },
  {
    "name": "t -[OS_object init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_object init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_channel init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_source init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_mach init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue_runloop init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_semaphore init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_group init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_workloop init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue_serial init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue_concurrent init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue_main init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue_global init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue_pthread_root init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue_mgr init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_queue_attr init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_mach_msg init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_io init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_operation init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_dispatch_disk init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_voucher init].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_voucher retain].cold.1",
    "type": "CPP"
  },
  {
    "name": "t -[OS_voucher release].cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_create_slow.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_create_slow.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_create_slow.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_create_slow.cold.4",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_create_slow.cold.5",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_create_slow.cold.6",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_dispose_slow.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_dispose_slow.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_dispose_slow.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_signal.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_signal.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_signal.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_wait.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_wait.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_wait.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_timedwait.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_timedwait.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sema4_timedwait.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_thread_event_wait_slow.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_unfair_lock_lock_slow.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_unfair_lock_unlock_slow.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_once_wait.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_gate_broadcast_slow.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dlock_wait.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dlock_wake.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_semaphore_debug",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_group_debug",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_semaphore_dispose.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_group_dispose.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_group_leave.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_group_enter.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_group_enter.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_group_notify.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_group_notify.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_group_notify.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_group_async.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_debug_attr",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_debug",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_channel_debug",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_assert_queue$V2.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_assert_queue_not$V2.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_async_redirect_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_stealer_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_override_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_override_invoke.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_override_invoke.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_block_perform.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_block_invoke_direct.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_block_invoke_direct.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_block_invoke_direct.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_block_sync_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_block_sync_invoke.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_block_sync_invoke.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_block_sync_invoke.cold.4",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_block_sync_invoke.cold.5",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_block_cancel.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_block_cancel.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_block_testcancel.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_block_testcancel.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_block_wait.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_block_wait.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_block_wait.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_block_wait.cold.4",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_block_notify.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_block_notify.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_block_notify.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_barrier_async.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_async.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_queue_set_label_nocopy.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_set_qos_class_floor.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_set_qos_class_floor.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_workloop_set_qos_class_floor.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_set_qos_class.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_set_qos_class.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_set_qos_class_fallback.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_set_qos_class_fallback.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_queue_create_with_accounting_override_voucher.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_class_dispose.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_class_dispose.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_class_dispose.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_xref_dispose.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_xref_dispose.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_suspend.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_queue_set_width.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_queue_set_width.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_set_target_queue.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_set_target_queue.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_set_target_queue.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_set_target_queue.cold.4",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_set_target_queue.cold.5",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_set_target_queue.cold.6",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_set_target_queue.cold.7",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_legacy_set_target_queue.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_lane_legacy_set_target_queue.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_priority_inherit_from_target.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_workloop_set_autorelease_frequency.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_workloop_set_scheduler_priority.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_workloop_set_cpupercent.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_workloop_set_cpupercent.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_set_observer_hooks_4IOHID.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_dispose.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_dispose.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_dispose.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_activate.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_wakeup.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_wakeup.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_invoke.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_invoke.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_invoke.cold.4",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_workloop_barrier_complete.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_channel_xref_dispose.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_channel_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_channel_invoke.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_channel_invoke.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_channel_invoke.cold.4",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_channel_invoke.cold.5",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_channel_invoke.cold.6",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_channel_invoke.cold.7",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_channel_invoke.cold.8",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_channel_foreach_work_item_peek_f.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_channel_drain_f.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_channel_drain_f.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_channel_drain_f.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_channel_create.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_channel_create.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mgr_queue_push.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mgr_queue_wakeup.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_pthread_root_queue_create_with_observer_hooks_4IOHID.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_is_exclusively_owned_by_current_thread_4IOHID.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_runloop_queue_handle_init.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_runloop_queue_handle_dispose.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_runloop_root_queue_perform_4CF.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_runloop_root_queue_perform_4CF.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_runloop_root_queue_perform_4CF.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_runloop_root_queue_perform_4CF.cold.4",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_runloop_root_queue_perform_4CF.cold.5",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_runloop_root_queue_perform_4CF.cold.6",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_runloop_root_queue_wakeup_4CF.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_runloop_root_queue_get_port_4CF.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_main_queue_callback_4CF.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_main_queue_callback_4CF.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_main_queue_callback_4CF.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_main_queue_callback_4CF.cold.4",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_main_queue_callback_4CF.cold.5",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_main_queue_callback_4CF.cold.6",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_main_queue_callback_4CF.cold.7",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_main_queue_callback_4CF.cold.8",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_main.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_queue_cleanup.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_frame_cleanup.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_context_cleanup.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_wlh_cleanup.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_deferred_items_cleanup.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_wait_compute_wlh.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_channel_invoke_cancel_check.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_worker_thread.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_worker_thread.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_root_queue_drain.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_root_queue_drain.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_root_queue_drain.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_root_queue_drain.cold.4",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_root_queues_init_once.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_root_queues_init_once.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_root_queues_init_once.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_worker_thread2.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_debug",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_debug_attr",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_timer_debug_attr",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_source_create.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_xref_dispose.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_source_merge_data.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_will_reenable_kevent_4NW.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_activate.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_source_cancel.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_source_cancel_and_wait.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_source_cancel_and_wait.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_source_cancel_and_wait.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_source_cancel_and_wait.cold.4",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_source_merge_evt.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_after.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_msg_debug",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_debug",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_debug_attr",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_mach_hooks_install_4libxpc.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_mach_hooks_install_4libxpc.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_create.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_mach_request_no_senders.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_mach_set_flags.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_mach_connect.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_arm_no_senders.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_arm_no_senders.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_arm_no_senders.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_merge_msg.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_merge_msg.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_reply_merge_msg.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_send_and_wait_for_reply.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_send_and_wait_for_reply.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_send_and_wait_for_reply.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_send_and_wait_for_reply.cold.4",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_send_and_wait_for_reply.cold.5",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_send_and_wait_for_reply.cold.6",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_mach_handoff_reply_f.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_mach_handoff_reply_f.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_handoff_context.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_handoff_context.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_mach_handoff_reply.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_mach_handoff_reply.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_ipc_handoff_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_install.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_mach_msg_create.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_mach_msg_create.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_msg_dispose.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_mig_server.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_mig_server.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_mach_mig_demux.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_mach_mig_demux.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_mach_mig_demux.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _dispatch_mach_mig_demux_get_context.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_msg_create_reply_disconnected.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_msg_create_reply_disconnected.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_msg_create_reply_disconnected.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_destruct_reply_port.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_drain_timers.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_drain_timers.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_sync_ipc_handoff_begin.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_unote_unregister_direct.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_leave_immediate.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_leave_immediate.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_leave_immediate.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_cancel_waiter.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_cancel_waiter.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_cancel_waiter.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_cancel_waiter.cold.4",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_cancel_waiter.cold.5",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_cancel_waiter.cold.6",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_wake_owner.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_wake_owner.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_wake_owner.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_wait_for_ownership.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_wait_for_ownership.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_wait_for_ownership.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_wait_for_ownership.cold.4",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_end_ownership.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_end_ownership.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_end_ownership.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_event_loop_end_ownership.cold.4",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_msg_sender_is_kernel.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_host_port_init.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_host_port_init.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_host_port_init.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_notify_dead_name.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_notification_event.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_recv_direct_merge_evt.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_reply_merge_evt.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_reply_merge_evt.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kevent_mach_msg_recv.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kevent_mach_msg_recv.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kevent_mach_msg_recv.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kq_init.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_mach_host_notify_update.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kevent_mach_notify_resume.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kevent_mach_notify_resume.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kevent_mach_notify_resume.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __dispatch_kevent_mach_notify_resume.cold.4",
    "type": "CPP"
  },
  {
    "name": "T _voucher_kvoucher_debug",
    "type": "CPP"
  },
  {
    "name": "t _voucher_adopt.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _voucher_copy.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _voucher_retain.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _voucher_release.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __voucher_thread_cleanup.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __voucher_dealloc_mach_voucher.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __voucher_task_mach_voucher_init.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __voucher_task_mach_voucher_init.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _voucher_replace_default_voucher.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __voucher_get_mach_voucher.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __voucher_insert.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __voucher_create_mach_voucher_with_priority.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __voucher_create_with_priority_and_mach_voucher.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __voucher_create_with_priority_and_mach_voucher.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __voucher_find_and_retain.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __voucher_create_without_importance.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __voucher_create_without_importance.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __voucher_create_without_importance.cold.3",
    "type": "CPP"
  },
  {
    "name": "t __voucher_create_with_mach_voucher.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __voucher_create_with_mach_voucher.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __voucher_create_with_mach_voucher.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _voucher_decrement_importance_count4CF.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _voucher_decrement_importance_count4CF.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __voucher_xref_dispose.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __voucher_xref_dispose.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __voucher_dispose.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __voucher_dispose.cold.2",
    "type": "CPP"
  },
  {
    "name": "t __voucher_activity_debug_channel_init.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __voucher_activity_debug_channel_init.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _voucher_copy_with_persona_mach_voucher.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _voucher_copy_with_persona_mach_voucher.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _voucher_copy_with_persona_mach_voucher.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _mach_voucher_persona_self.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _mach_voucher_persona_for_originator.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _voucher_mach_msg_revert.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _voucher_activity_initialize_4libtrace.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _voucher_activity_initialize_4libtrace.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _voucher_activity_create_with_data.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _voucher_activity_create_with_data.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _voucher_activity_create_with_data.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _voucher_activity_flush.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __voucher_debug.cold.1",
    "type": "CPP"
  },
  {
    "name": "t __voucher_debug.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _firehose_buffer_create.cold.1",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libdyld.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "t _tlv_initializer",
    "type": "CPP"
  },
  {
    "name": "T __dyld_register_func_for_add_image",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_register_func_for_add_image(void (*)(mach_header const*, long))",
    "type": "CPP"
  },
  {
    "name": "t dyld3::log_apis(char const*, ...)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::addLoadNotifier(void (*)(mach_header const*, long))",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::addLoadNotifier(void (*)(mach_header const*, long))",
    "type": "CPP"
  },
  {
    "name": "t dyld3::ScopedTimer::startTimer()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::kdebug_trace_dyld_duration_start(unsigned int, dyld3::kt_arg, dyld3::kt_arg, dyld3::kt_arg)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::log_notifications(char const*, ...)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::inDyldCache() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOLoaded::getSlide() const",
    "type": "CPP"
  },
  {
    "name": "t Diagnostics::Diagnostics(bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::forEachLoadCommand(Diagnostics&, void (load_command const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOLoaded::findSectionContent(char const*, char const*, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "t Diagnostics::assertNoError() const",
    "type": "CPP"
  },
  {
    "name": "t Diagnostics::~Diagnostics()",
    "type": "CPP"
  },
  {
    "name": "t _tlv_load_notification",
    "type": "CPP"
  },
  {
    "name": "t dyld3::ScopedTimer::endTimer()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::kdebug_trace_dyld_duration_end(unsigned long long, unsigned int, dyld3::kt_arg, dyld3::kt_arg, dyld3::kt_arg)",
    "type": "CPP"
  },
  {
    "name": "T __dyld_objc_notify_register",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_objc_notify_register(void (*)(unsigned int, char const* const*, mach_header const* const*), void (*)(char const*, mach_header const*), void (*)(char const*, mach_header const*))",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::setObjCNotifiers(void (*)(unsigned int, char const* const*, mach_header const* const*), void (*)(char const*, mach_header const*), void (*)(char const*, mach_header const*))",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::LaunchClosure::selectorHashTable(dyld3::Array<dyld3::closure::Image::ObjCSelectorImage>&, dyld3::closure::ObjCSelectorOpt const*&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ContainerTypedBytes::findAttributePayload(dyld3::closure::TypedBytes::Type, unsigned int*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::LaunchClosure::classAndProtocolHashTables(dyld3::Array<dyld3::closure::Image::ObjCClassImage>&, dyld3::closure::ObjCClassOpt const*&, dyld3::closure::ObjCClassOpt const*&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::findImageNum(unsigned int, dyld3::LoadedImage&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::representsImageNum(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::GrowableArray<std::__1::pair<unsigned long, unsigned long>, 4, 4>::push_back(std::__1::pair<unsigned long, unsigned long> const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::LaunchClosure::duplicateClassesHashTable(dyld3::closure::ObjCClassDuplicatesOpt const*&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Closure::forEachWarning(dyld3::closure::Closure::Warning::Type, void (char const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ContainerTypedBytes::forEachAttribute(void (dyld3::closure::TypedBytes const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ContainerTypedBytes::forEachAttributePayload(dyld3::closure::TypedBytes::Type, void (void const*, unsigned int, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::hasObjC() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::path() const",
    "type": "CPP"
  },
  {
    "name": "T __dyld_get_shared_cache_range",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_get_shared_cache_range(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "t DyldSharedCache::mappedSize() const",
    "type": "CPP"
  },
  {
    "name": "t DyldSharedCache::forEachRegion(void (void const*, unsigned long long, unsigned long long, unsigned int) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "T __dyld_get_objc_selector",
    "type": "CPP"
  },
  {
    "name": "t objc_opt::objc_stringhash_t::getIndex(char const*) const",
    "type": "CPP"
  },
  {
    "name": "t objc_opt::objc_stringhash_t::hash(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T _dyld_get_program_sdk_version",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dyld_get_sdk_version(mach_header const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dyld_get_image_versions(mach_header const*, void (unsigned int, unsigned int, unsigned int) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dyld_get_image_versions_internal(mach_header const*, void (unsigned int, unsigned int, unsigned int) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::forEachSupportedPlatform(void (dyld3::Platform, unsigned int, unsigned int) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOFile::forEachSupportedPlatform(void (dyld3::Platform, unsigned int, unsigned int) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::dyld_get_image_versions_internal(mach_header const*, void (unsigned int, unsigned int, unsigned int) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::dyld_get_min_os_version(mach_header const*)",
    "type": "CPP"
  },
  {
    "name": "T _dyld_get_active_platform",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dyld_get_active_platform()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::platform() const",
    "type": "CPP"
  },
  {
    "name": "T _dyld_shared_cache_some_image_overridden",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dyld_shared_cache_some_image_overridden()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::hasCacheOverrides() const",
    "type": "CPP"
  },
  {
    "name": "T __dyld_for_each_objc_protocol",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_for_each_objc_protocol(char const*, void (void*, bool, bool*) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::forEachObjCProtocol(char const*, void (void*, bool, bool*) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ObjCClassOpt::forEachClass(char const*, dyld3::Array<std::__1::pair<unsigned long, unsigned long> > const&, void (void*, bool, bool*) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ObjCStringTable::getIndex(char const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ObjCStringTable::hash(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "T __dyld_register_for_bulk_image_loads",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_register_for_bulk_image_loads(void (*)(unsigned int, mach_header const**, char const**))",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::addBulkLoadNotifier(void (*)(unsigned int, mach_header const**, char const**))",
    "type": "CPP"
  },
  {
    "name": "T __NSGetExecutablePath",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_NSGetExecutablePath(char*, unsigned int*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::mainExecutableImage() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Closure::images() const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::LaunchClosure::hasInterposings() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Closure::topImage() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageArray::imageForNum(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::imagePath(dyld3::closure::Image const*) const",
    "type": "CPP"
  },
  {
    "name": "T __dyld_is_memory_immutable",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_is_memory_immutable(void const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::immutableMemory(void const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "t DyldSharedCache::inCache(void const*, unsigned long, bool&) const",
    "type": "CPP"
  },
  {
    "name": "T __dyld_image_count",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_image_count()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::count() const",
    "type": "CPP"
  },
  {
    "name": "T __dyld_get_image_name",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_get_image_name(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::imagePathByIndex(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::validBindInfo(Diagnostics&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "T __dyld_get_image_header",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_get_image_header(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::imageLoadAddressByIndex(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::imageLoadAddressByIndex(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "T _dyld_process_is_restricted",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dyld_process_is_restricted()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::isRestricted() const",
    "type": "CPP"
  },
  {
    "name": "T __dyld_get_shared_cache_uuid",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_get_shared_cache_uuid(unsigned char*)",
    "type": "CPP"
  },
  {
    "name": "T _dyld_image_path_containing_address",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dyld_image_path_containing_address(void const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::pathForImageMappedAt(void const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::infoForImageMappedAt(void const*, void (dyld3::LoadedImage const&, unsigned char) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::infoForNonCachedImageMappedAt(void const*, void (dyld3::LoadedImage const&, unsigned char) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::containsAddress(void const*, void const*, unsigned char*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachDiskSegment(void (unsigned int, unsigned int, unsigned int, long long, unsigned long long, unsigned char, bool, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "T __dyld_register_func_for_remove_image",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_register_func_for_remove_image(void (*)(mach_header const*, long))",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::addUnloadNotifier(void (*)(mach_header const*, long))",
    "type": "CPP"
  },
  {
    "name": "t dyld3::GrowableArray<void (*)(mach_header const*, long), 4, 4>::push_back(void (* const&)(mach_header const*, long))",
    "type": "CPP"
  },
  {
    "name": "t dyld3::log_initializers(char const*, ...)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::mainExecutable() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::PathOverrides::setEnvVars(char const**, dyld3::MachOFile const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::PathOverrides::addEnvVar(char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::PathOverrides::setMainExecutable(dyld3::MachOFile const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::isMainExecutable() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::forDyldEnv(void (char const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOFile::findFairPlayEncryptionLoadCommand() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::entry_runInitialzersBottomUp(mach_header const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::runStartupInitialzers()",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::runStartupInitialzers()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachImageToInitBefore(void (unsigned int, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::runInitialzersBottomUp(dyld3::closure::Image const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::findImageNum(unsigned int, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::findImageNum(unsigned int, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::swapImageState(unsigned int, unsigned int&, dyld3::LoadedImage::State, dyld3::LoadedImage::State)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::runStartupInitialzers()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::mayHavePlusLoads() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachInitializer(void const*, void (void const*) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::runAllInitializersInImage(dyld3::closure::Image const*, dyld3::MachOLoaded const*)",
    "type": "CPP"
  },
  {
    "name": "T __dyld_for_each_objc_class",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_for_each_objc_class(char const*, void (void*, bool, bool*) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::forEachObjCClass(char const*, void (void*, bool, bool*) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "T _NSVersionOfLinkTimeLibrary",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSVersionOfLinkTimeLibrary(char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::forEachDependentDylib(void (char const*, bool, bool, bool, unsigned int, unsigned int, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::forEachDOFSection(Diagnostics&, void (unsigned int) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::NSVersionOfLinkTimeLibrary(char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::nameMatch(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T _dyld_has_inserted_or_interposing_libraries",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dyld_has_inserted_or_interposing_libraries()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::hasInsertedOrInterposingLibraries() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::LaunchClosure::hasInsertedLibraries() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::LaunchClosure::getFlags() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::LaunchClosure::hasInterposings() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::LaunchClosure::forEachInterposingTuple(void (dyld3::closure::InterposingTuple const&, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "T _dlopen",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dlopen_internal(char const*, int, void*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::clearErrorString()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dlerror_perThreadKey_once(void*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::dlopen(Diagnostics&, char const*, bool, bool, bool, bool, bool, void const*)",
    "type": "CPP"
  },
  {
    "name": "t DyldSharedCache::hasImagePath(char const*, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOLoaded::trieWalk(Diagnostics&, unsigned char const*, unsigned char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::read_uleb128(Diagnostics&, unsigned char const*&, unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "t Diagnostics::hasError() const",
    "type": "CPP"
  },
  {
    "name": "t DyldSharedCache::getIndexedImageEntry(unsigned int, unsigned long long&, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "T _dlsym",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dlsym_internal(void*, char const*, void*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::infoForImageWithLoadAddress(dyld3::MachOLoaded const*, void (dyld3::LoadedImage const&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::infoForImageWithLoadAddress(dyld3::MachOLoaded const*, void (dyld3::LoadedImage const&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOLoaded::hasExportedSymbol(char const*, dyld3::MachOLoaded const* (dyld3::MachOLoaded const*, unsigned int) block_pointer, void**, bool*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOLoaded::findExportedSymbol(Diagnostics&, char const*, bool, dyld3::MachOLoaded::FoundSymbol&, dyld3::MachOLoaded const* (dyld3::MachOLoaded const*, unsigned int) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOLoaded::getLinkEditPointers(Diagnostics&, dyld3::MachOLoaded::LinkEditInfo&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOLoaded::getLinkEditLoadCommands(Diagnostics&, dyld3::MachOLoaded::LinkEditInfo&) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOLoaded::getLinkEditLoadCommands(Diagnostics&, dyld3::MachOLoaded::LinkEditInfo&) const",
    "type": "CPP"
  },
  {
    "name": "t Diagnostics::noError() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::forEachSegment(void (dyld3::MachOFile::SegmentInfo const&, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::forEachRebase(Diagnostics&, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, unsigned int, unsigned char, unsigned long long, unsigned char, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::forEachSection(void (dyld3::MachOFile::SectionInfo const&, bool, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::forEachInitializerPointerSection(Diagnostics&, void (unsigned int, unsigned int, unsigned char const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::interposeValue(void*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::notifyMonitorMain()",
    "type": "CPP"
  },
  {
    "name": "T _NSVersionOfRunTimeLibrary",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSVersionOfRunTimeLibrary(char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::forEachImage(void (dyld3::LoadedImage const&, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::NSVersionOfRunTimeLibrary(char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::getDylibInstallName(char const**, unsigned int*, unsigned int*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::forEachTerminator(Diagnostics&, bool, void (unsigned int) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachCacheSegment(void (unsigned int, unsigned long long, unsigned long long, unsigned char, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::forEachIndirectPointer(Diagnostics&, void (unsigned long long, bool, int, char const*, bool, bool, bool, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::imageNum() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::currentPlatform()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::ClosureBuilder(unsigned int, dyld3::closure::FileSystem const&, DyldSharedCache const*, bool, dyld3::GradedArchs const&, dyld3::closure::PathOverrides const&, dyld3::closure::ClosureBuilder::AtPath, bool, dyld3::closure::ClosureBuilder::LaunchErrorInfo*, dyld3::Platform, dyld3::closure::ClosureBuilder::CacheDylibsBindingHandlers const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::ClosureBuilder(unsigned int, dyld3::closure::FileSystem const&, DyldSharedCache const*, bool, dyld3::GradedArchs const&, dyld3::closure::PathOverrides const&, dyld3::closure::ClosureBuilder::AtPath, bool, dyld3::closure::ClosureBuilder::LaunchErrorInfo*, dyld3::Platform, dyld3::closure::ClosureBuilder::CacheDylibsBindingHandlers const*)",
    "type": "CPP"
  },
  {
    "name": "t DyldSharedCache::cachedDylibsImageArray() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::makeDlopenClosure(char const*, dyld3::closure::LaunchClosure const*, dyld3::Array<dyld3::LoadedImage> const&, unsigned int, bool, bool, bool, unsigned int*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::inDyldCache() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::dependentsArray() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::neverUnload() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::isOverrideOfDyldCacheImage(unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::hasFileModTimeAndInode(unsigned long long&, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::OverflowSafeArray<dyld3::closure::ClosureBuilder::BuilderLoadedImage, 2048ul>::push_back(dyld3::closure::ClosureBuilder::BuilderLoadedImage const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::OverflowSafeArray<dyld3::closure::ClosureBuilder::BuilderLoadedImage, 2048ul>::growTo(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::findImage(char const*, dyld3::closure::ClosureBuilder::LoadedImageChain const&, dyld3::closure::ClosureBuilder::BuilderLoadedImage*&, dyld3::closure::ClosureBuilder::LinkageType, unsigned int, bool)",
    "type": "CPP"
  },
  {
    "name": "t DyldSharedCache::hasNonOverridablePath(char const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::PathOverrides::forEachPathVariant(char const*, bool, void (char const*, bool, bool&) block_pointer, dyld3::Platform) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::PathOverrides::getFrameworkPartialPath(char const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::PathOverrides::forEachImageSuffix(char const*, bool, bool, bool&, void (char const*, bool, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::Closure::forEachWarning(dyld3::closure::Closure::Warning::Type, void (char const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::forEachResolvedPathVar(char const*, dyld3::closure::ClosureBuilder::LoadedImageChain const&, bool, dyld3::closure::ClosureBuilder::LinkageType, void (char const*, bool&) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::FileSystemPhysical::fileExists(char const*, unsigned long long*, unsigned long long*, bool*, bool*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::FileSystemPhysical::forEachPath(char const*, void (char const*, unsigned int, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::recursiveLoadDependents(dyld3::closure::ClosureBuilder::LoadedImageChain&, bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::loadDanglingUpwardLinks(bool)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::LaunchClosure::forEachInterposingTuple(void (dyld3::closure::InterposingTuple const&, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::~ClosureBuilder()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::~ClosureBuilder()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dlsym_search(char const*, dyld3::LoadedImage const&, bool, dyld3::MachOLoaded const* (dyld3::MachOLoaded const*, unsigned int) block_pointer, bool*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::visitDependentsTopDown(dyld3::LoadedImage const&, void (dyld3::LoadedImage const&, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::visitDependentsTopDown(dyld3::LoadedImage const&, void (dyld3::LoadedImage const&, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_get_objc_selector(char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::getObjCSelector(char const*) const",
    "type": "CPP"
  },
  {
    "name": "T _dyld_image_header_containing_address",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dyld_image_header_containing_address(void const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::infoForImageMappedAt(void const*, dyld3::MachOLoaded const**, unsigned long long*, char const**) const",
    "type": "CPP"
  },
  {
    "name": "t DyldSharedCache::unslidLoadAddress() const",
    "type": "CPP"
  },
  {
    "name": "t DyldSharedCache::forEachImageTextSegment(void (unsigned long long, unsigned long long, unsigned char const*, char const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::infoForNonCachedImageMappedAt(void const*, void (dyld3::LoadedImage const&, unsigned char) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOLoaded::dependentDylibCount() const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOLoaded::dependentDylibCount() const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld_process_info_notify_base::teardown()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::findDependent(dyld3::MachOLoaded const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::dependentImageNum(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "t DyldSharedCache::findDlopenOtherImage(char const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::FileSystemPhysical::getRealPath(char const*, char*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::overridableDylib() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::hasInitializers() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::strdup_temp(char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::PathPool::allocate()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::PathPool::add(char const*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::recursiveLoadDependents(dyld3::closure::ClosureBuilder::LoadedImageChain&, bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::OverflowSafeArray<dyld3::closure::Image::LinkedImage, 65536ul>::push_back(dyld3::closure::Image::LinkedImage const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::findLoadedImage(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::PathPool::deallocate(dyld3::closure::PathPool*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::loadImage(Diagnostics&, unsigned int, dyld3::closure::DlopenClosure const*, bool, bool, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Loader::Loader(dyld3::Array<dyld3::LoadedImage> const&, dyld3::Array<dyld3::LoadedImage>&, void const*, dyld3::Array<dyld3::closure::ImageArray const*> const&, dyld3::closure::ObjCSelectorOpt const*, dyld3::Array<dyld3::closure::Image::ObjCSelectorImage> const&, bool (*)(char const*, ...), bool (*)(char const*, ...), bool (*)(char const*, ...), bool (*)(char const*, ...))",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageArray::findImage(dyld3::Array<dyld3::closure::ImageArray const*>, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Loader::addImage(dyld3::LoadedImage const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Array<dyld3::LoadedImage>::push_back(dyld3::LoadedImage const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Loader::completeAllDependents(Diagnostics&, bool&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageArray::startImageNum() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageArray::forEachImage(void (dyld3::closure::Image const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Loader::completeAllDependents(Diagnostics&, bool&)",
    "type": "CPP"
  },
  {
    "name": "t (anonymous namespace)::ImageNumSet::add(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::OverflowSafeArray<unsigned int, 4294967295ul>::push_back(unsigned int const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachDependentImage(void (unsigned int, dyld3::closure::Image::LinkKind, unsigned int, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Loader::mapAndFixupAllImages(Diagnostics&, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::cacheOffset() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::log_segments(char const*, ...)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::addImages(dyld3::Array<dyld3::LoadedImage> const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::runImageNotifiers(dyld3::Array<dyld3::LoadedImage> const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::mirrorToOldAllImageInfos()",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::mirrorToOldAllImageInfos()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::getUuid(unsigned char*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::log_loads(char const*, ...)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::kdebug_trace_dyld_image(unsigned int, char const*, unsigned char const (*) [16], fsobj_id, fsid, mach_header const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::runImageCallbacks(dyld3::Array<dyld3::LoadedImage> const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::notifyMonitorLoads(dyld3::Array<dyld3::LoadedImage> const&)",
    "type": "CPP"
  },
  {
    "name": "t _tlv_get_addr",
    "type": "CPP"
  },
  {
    "name": "t _tlv_allocate_and_initialize_for_key",
    "type": "CPP"
  },
  {
    "name": "T _dyld_get_program_min_os_version",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dyld_get_min_os_version(mach_header const*)",
    "type": "CPP"
  },
  {
    "name": "T _dyld_program_sdk_at_least",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dyld_sdk_at_least(mach_header const*, dyld_build_version_t)",
    "type": "CPP"
  },
  {
    "name": "T __dyld_get_image_slide",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_get_image_slide(mach_header const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::hasMachOMagic() const",
    "type": "CPP"
  },
  {
    "name": "T __dyld_images_for_addresses",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_images_for_addresses(unsigned int, void const**, dyld_image_uuid_offset*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::getUuid(unsigned char*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::textSize() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::isInvalid() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::load(Diagnostics&, dyld3::closure::FileSystem const&, char const*, dyld3::GradedArchs const&, dyld3::Platform, char*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::FileSystemPhysical::loadFile(char const*, dyld3::closure::LoadedFileInfo&, char*, void (char const*, ...) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::FatFile::isFatFileWithSlice(Diagnostics&, unsigned long long, dyld3::GradedArchs const&, unsigned long long&, unsigned long long&, bool&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::FatFile::forEachSlice(Diagnostics&, unsigned long long, void (unsigned int, unsigned int, void const*, unsigned long long, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::FatFile::isValidSlice(Diagnostics&, unsigned long long, unsigned int, unsigned int, unsigned int, unsigned long long, unsigned long long) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::isMachO(Diagnostics&, unsigned long long) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOFile::isMachO(Diagnostics&, unsigned long long) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::FatFile::isFatFileWithSlice(Diagnostics&, unsigned long long, dyld3::GradedArchs const&, unsigned long long&, unsigned long long&, bool&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::FileSystemPhysical::unloadPartialFile(dyld3::closure::LoadedFileInfo&, unsigned long long, unsigned long long) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::validMachOForArchAndPlatform(Diagnostics&, unsigned long, char const*, dyld3::GradedArchs const&, dyld3::Platform) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::GradedArchs::grade(unsigned int, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::validLoadCommands(Diagnostics&, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::machHeaderSize() const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::validLoadCommands(Diagnostics&, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::supportsPlatform(dyld3::Platform) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::validEmbeddedPaths(Diagnostics&, dyld3::Platform, char const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::validSegments(Diagnostics&, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::is64() const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::validSegments(Diagnostics&, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::remapIfZeroFill(Diagnostics&, dyld3::closure::FileSystem const&, dyld3::closure::LoadedFileInfo&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::analyzeSegmentsLayout(unsigned long long&, bool&) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::analyzeSegmentsLayout(unsigned long long&, bool&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::uses16KPages() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::validLinkedit(Diagnostics&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::validLinkeditLayout(Diagnostics&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::pointerSize() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::(anonymous namespace)::LinkEditContentChunk::compareByFileOffset(void const*, void const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::hasChainedFixups() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::hasLoadCommand(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::validRebaseInfo(Diagnostics&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::forEachRebase(Diagnostics&, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, unsigned int, unsigned char, unsigned long long, unsigned char, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::getAllSegmentsInfos(Diagnostics&, dyld3::MachOFile::SegmentInfo*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOLoaded::getLinkEditContent(dyld3::MachOLoaded::LayoutInfo const&, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::validBindInfo(Diagnostics&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::forEachBind(Diagnostics&, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, bool, unsigned int, int, unsigned int, unsigned char, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool&) block_pointer, void (char const*) block_pointer, void () block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::hasThreadLocalVariables() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::hasObjC() const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::validBindInfo(Diagnostics&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::forEachDOFSection(Diagnostics&, void (unsigned int) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::FileSystemPhysical::unloadFile(dyld3::closure::LoadedFileInfo const&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::FileSystemPhysical::loadFile(char const*, dyld3::closure::LoadedFileInfo&, char*, void (char const*, ...) block_pointer) const::$_0::__invoke(dyld3::closure::LoadedFileInfo const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Loader::mapImage(Diagnostics&, dyld3::LoadedImage&, bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::sliceOffsetInFile() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::vmSizeToMap() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::hasCodeSignature(unsigned int&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Loader::mapAndFixupAllImages(Diagnostics&, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOLoaded::segmentName(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachCDHash(void (unsigned char const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::OverflowSafeArray<dyld3::Loader::mapImage(Diagnostics&, dyld3::LoadedImage&, bool)::CDHashWrapper, 4294967295ul>::push_back(dyld3::Loader::mapImage(Diagnostics&, dyld3::LoadedImage&, bool)::CDHashWrapper const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOLoaded::forEachCDHashOfCodeSignature(void const*, unsigned long, void (unsigned char const*) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOLoaded::forEachCodeDirectoryBlob(void const*, unsigned long, void (void const*) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOLoaded::forEachCDHashOfCodeSignature(void const*, unsigned long, void (unsigned char const*) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Loader::applyFixupsToImage(Diagnostics&, dyld3::LoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::leafName() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachFixup(void (unsigned long long, bool&) block_pointer, void (unsigned long long, dyld3::closure::Image::ResolvedSymbolTarget, bool&) block_pointer, void (unsigned long long, dyld3::Array<dyld3::closure::Image::ResolvedSymbolTarget> const&, bool&) block_pointer, void (unsigned long long) block_pointer, void (unsigned long long, dyld3::closure::Image::ResolvedSymbolTarget, bool&) block_pointer, void (unsigned long long, unsigned int, bool, bool&) block_pointer, void (unsigned long long, bool&) block_pointer, void (unsigned long long, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::hasReadOnlyData() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::incRefCount(mach_header const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::GrowableArray<dyld3::AllImages::DlopenCount, 4, 4>::push_back(dyld3::AllImages::DlopenCount const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::recomputeBounds()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::breadthFirstRecurseDependents(dyld3::Array<unsigned int>&, dyld3::LoadedImage const&, bool&, void (dyld3::LoadedImage const&, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::recursiveLoadDependents(dyld3::closure::ClosureBuilder::LoadedImageChain&, bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Array<unsigned int>::push_back(unsigned int const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::preferredLoadAddress() const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::preferredLoadAddress() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::invalidRebaseState(Diagnostics&, char const*, char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, unsigned int, unsigned char, unsigned long long, unsigned char) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::invalidBindState(Diagnostics&, char const*, char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, bool, unsigned int, int, unsigned int, unsigned char, unsigned long long, unsigned char, char const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::read_sleb128(Diagnostics&, unsigned char const*&, unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::invalidateInitializerRoots()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::buildImage(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setImageNum(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::getFlags()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ContainerTypedBytesWriter::setContainerType(dyld3::closure::TypedBytes::Type)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ContainerTypedBytesWriter::append(dyld3::closure::TypedBytes::Type, void const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::TypedBytes::payload()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::hasWeakDefs() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setHasWeakDefs(bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::isBundle() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setIsBundle(bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::isDylib() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setIsDylib(bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setIs64(bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setIsExecutable(bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setUses16KPages(bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setOverridableDylib(bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setInDyldCache(bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setHasObjC(bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setHasPlusLoads(bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setFileInfo(unsigned long long, unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::mappedSize() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setMappingInfo(unsigned long long, unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::hasCodeSignature(unsigned int&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setCodeSignatureLocation(unsigned int, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::forEachCDHash(void (unsigned char const*) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::addCDHash(unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::isFairPlayEncrypted(unsigned int&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::findFairPlayEncryptionLoadCommand() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::addPath(char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::hashFunction(char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setUUID(unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setDependents(dyld3::Array<dyld3::closure::Image::LinkedImage> const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::addSegments(dyld3::closure::ImageWriter&, dyld3::MachOAnalyzer const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::segmentCount() const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::segmentCount() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setDiskSegments(dyld3::closure::Image::DiskSegment const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::addBindInfo(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::forEachBind(dyld3::closure::ClosureBuilder::BuilderLoadedImage&, void (unsigned long long, dyld3::closure::Image::ResolvedSymbolTarget, dyld3::closure::ClosureBuilder::ResolvedTargetInfo const&, bool&) block_pointer, void (char const*) block_pointer, void () block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::forEachBind(Diagnostics&, void (unsigned long long, int, char const*, bool, bool, unsigned long long, bool&) block_pointer, void (char const*) block_pointer, void () block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::findSymbol(dyld3::closure::ClosureBuilder::BuilderLoadedImage&, int, char const*, bool, bool, unsigned long long, dyld3::closure::Image::ResolvedSymbolTarget&, dyld3::closure::ClosureBuilder::ResolvedTargetInfo&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::findSymbolInImage(dyld3::MachOAnalyzer const*, char const*, unsigned long long, bool, bool, dyld3::closure::Image::ResolvedSymbolTarget&, dyld3::closure::ClosureBuilder::ResolvedTargetInfo&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::addRebaseInfo(dyld3::closure::ImageWriter&, dyld3::MachOAnalyzer const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::findDependent(dyld3::MachOLoaded const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::OverflowSafeArray<dyld3::closure::Image::BindPattern, 4294967295ul>::push_back(dyld3::closure::Image::BindPattern const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::OverflowSafeArray<dyld3::closure::Closure::PatchEntry, 4294967295ul>::push_back(dyld3::closure::Closure::PatchEntry const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setBindInfo(dyld3::Array<dyld3::closure::Image::BindPattern> const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::addRebaseInfo(dyld3::closure::ImageWriter&, dyld3::MachOAnalyzer const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::forEachRebase(Diagnostics&, bool, void (unsigned long long, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::OverflowSafeArray<dyld3::closure::Image::RebasePattern, 4294967295ul>::push_back(dyld3::closure::Image::RebasePattern const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::contentIsRegularStub(unsigned char const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setRebaseInfo(dyld3::Array<dyld3::closure::Image::RebasePattern> const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&, bool, void (unsigned int) block_pointer, void const*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&, bool, void (unsigned int) block_pointer, void const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::OverflowSafeArray<dyld3::SegmentRanges::SegmentRange, 4294967295ul>::push_back(dyld3::SegmentRanges::SegmentRange const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::forEachInitializerPointerSection(Diagnostics&, void (unsigned int, unsigned int, unsigned char const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setInitOffsets(unsigned int const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::forEachTerminator(Diagnostics&, bool, void (unsigned int) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::computeInitOrder(dyld3::closure::ImageWriter&, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::depthFirstRecurseSetInitInfo(unsigned int, dyld3::closure::ClosureBuilder::InitInfo*, unsigned int&, bool&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setInitsOrder(unsigned int const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageArrayWriter::ImageArrayWriter(unsigned int, unsigned int, bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageArrayWriter::ImageArrayWriter(unsigned int, unsigned int, bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::finalize()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ContainerTypedBytesWriter::finalizeContainer()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageArrayWriter::appendImage(dyld3::closure::Image const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::TypedBytes::payload() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ContainerTypedBytesWriter::deallocate()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageArrayWriter::finalize()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::DlopenClosureWriter::DlopenClosureWriter(dyld3::closure::ImageArray const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::DlopenClosureWriter::DlopenClosureWriter(dyld3::closure::ImageArray const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureWriter::setTopImageNum(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureWriter::applyInterposing(dyld3::closure::LaunchClosure const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::DlopenClosureWriter::finalize()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::remapIfZeroFill(Diagnostics&, dyld3::closure::FileSystem const&, dyld3::closure::LoadedFileInfo&) const::$_0::__invoke(dyld3::closure::LoadedFileInfo const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::GrowableArray<dyld3::closure::ImageArray const*, 4, 4>::push_back(dyld3::closure::ImageArray const* const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::log_fixups(char const*, ...)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Loader::resolveTarget(dyld3::closure::Image::ResolvedSymbolTarget)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::applyInterposingToDyldCache(dyld3::closure::Closure const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Closure::forEachPatchEntry(void (dyld3::closure::Closure::PatchEntry const&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::PathOverrides::forEachDylibFallback(dyld3::Platform, void (char const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t Diagnostics::error(char const*, ...)",
    "type": "CPP"
  },
  {
    "name": "t Diagnostics::errorMessage() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::setErrorString(char const*, ...)",
    "type": "CPP"
  },
  {
    "name": "T __dyld_find_unwind_sections",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_find_unwind_sections(void*, dyld_unwind_sections*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOLoaded::findSectionContent(char const*, char const*, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "t _tlv_free",
    "type": "CPP"
  },
  {
    "name": "T _dyld_get_sdk_version",
    "type": "CPP"
  },
  {
    "name": "T _dlclose",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dlclose(void*)",
    "type": "CPP"
  },
  {
    "name": "T __tlv_atexit",
    "type": "CPP"
  },
  {
    "name": "T _dlopen_preflight",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dlopen_preflight_internal(char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::dyldCacheHasPath(char const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::archs() const",
    "type": "CPP"
  },
  {
    "name": "T _dladdr",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dladdr(void const*, dl_info*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOLoaded::findClosestSymbol(unsigned long long, char const**, unsigned long long*) const",
    "type": "CPP"
  },
  {
    "name": "T __dyld_get_image_uuid",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_get_image_uuid(mach_header const*, unsigned char*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::PathOverrides::forEachFrameworkFallback(dyld3::Platform, void (char const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "T __dyld_atfork_prepare",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_atfork_prepare()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::takeLockBeforeFork()",
    "type": "CPP"
  },
  {
    "name": "T __dyld_atfork_parent",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_atfork_parent()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::releaseLockInForkParent()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::OverflowSafeArray<dyld3::closure::Image::LinkedImage, 65536ul>::growTo(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::hasPlusLoadMethod(Diagnostics&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::findLoadedImage(dyld3::MachOAnalyzer const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Loader::findImage(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setNeverUnload(bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setDofOffsets(dyld3::Array<unsigned int> const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::addImmutableRange(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "T __dyld_get_image_vmaddr_slide",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_get_image_vmaddr_slide(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "T __tlv_exit",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::runAllStaticTerminatorsHelper(void*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::runAllStaticTerminators()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::LaunchClosure::initialLoadCount() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Reaper::runTerminators(dyld3::LoadedImage const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::hasTerminators() const",
    "type": "CPP"
  },
  {
    "name": "t DyldSharedCache::objcOpt() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ObjCClassDuplicatesOpt::getClassLocation(char const*, objc_opt::objc_opt_t const*, void*&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ObjCStringTable::getPotentialTarget(char const*) const",
    "type": "CPP"
  },
  {
    "name": "T _dlerror",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dlerror()",
    "type": "CPP"
  },
  {
    "name": "T _dyld_get_base_platform",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dyld_get_base_platform(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::resolveTarget(dyld3::closure::Image::ResolvedSymbolTarget) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setCachedSegments(dyld3::closure::Image::DyldCacheSegment const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::bindFixups() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::chainedTargets() const",
    "type": "CPP"
  },
  {
    "name": "T __dyld_initializer",
    "type": "CPP"
  },
  {
    "name": "t __dyld_get_all_image_infos",
    "type": "CPP"
  },
  {
    "name": "t __dyld_func_lookup",
    "type": "CPP"
  },
  {
    "name": "t LockHelper::LockHelper()",
    "type": "CPP"
  },
  {
    "name": "t names_match(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t LockHelper::~LockHelper()",
    "type": "CPP"
  },
  {
    "name": "T dyld_stub_binder",
    "type": "CPP"
  },
  {
    "name": "t _stack_not_16_byte_aligned_error",
    "type": "CPP"
  },
  {
    "name": "t _dyld_fast_stub_entry(void*, long)",
    "type": "CPP"
  },
  {
    "name": "t hasPerThreadBufferFor_dlerror()",
    "type": "CPP"
  },
  {
    "name": "t dyldGlobalLockAcquire()",
    "type": "CPP"
  },
  {
    "name": "t dyldGlobalLockRelease()",
    "type": "CPP"
  },
  {
    "name": "t getPerThreadBufferFor_dlerror(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t _tlv_finalize",
    "type": "CPP"
  },
  {
    "name": "t _tlv_finalize_list",
    "type": "CPP"
  },
  {
    "name": "t ___dyld_get_active_platform_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __dyld_register_for_image_loads",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_register_for_image_loads(void (*)(mach_header const*, char const*, bool))",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::addLoadNotifier(void (*)(mach_header const*, char const*, bool))",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::findImageNum(unsigned int, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld_process_info_base::addInfoFromRemoteLoadCommands(unsigned int, unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::reportRebasesAndBinds(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachDOF(void const*, void (void const*) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Loader::registerDOFs(dyld3::Array<dyld3::Loader::DOFInfo> const&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOFile::forEachSection(void (dyld3::MachOFile::SectionInfo const&, bool, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::validMain(Diagnostics&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::reportRebasesAndBinds(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::addRebaseInfo(dyld3::closure::ImageWriter&, dyld3::MachOAnalyzer const*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::buildImage(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::OverflowSafeArray<dyld3::Loader::DOFInfo, 4294967295ul>::push_back(dyld3::Loader::DOFInfo const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::log_dofs(char const*, ...)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::expandAtLoaderPath(char const*, bool, dyld3::closure::ClosureBuilder::BuilderLoadedImage const&, char*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::expandAtExecutablePath(char const*, bool, char*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::forEachRPath(void (char const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::infoForImageMappedAt(void const*, void (dyld3::LoadedImage const&, unsigned char) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "T _NSCreateObjectFileImageFromMemory",
    "type": "CPP"
  },
  {
    "name": "T _NSLinkModule",
    "type": "CPP"
  },
  {
    "name": "T _NSGetSectionDataInObjectFileImage",
    "type": "CPP"
  },
  {
    "name": "T _NSLookupSymbolInModule",
    "type": "CPP"
  },
  {
    "name": "T _NSAddressOfSymbol",
    "type": "CPP"
  },
  {
    "name": "T _dyld_get_min_os_version",
    "type": "CPP"
  },
  {
    "name": "t _start",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::isBundle() const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::Image::forEachCDHash(void (unsigned char const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::Image::textSize() const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::Image::textSize() const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::Image::containsAddress(void const*, void const*, unsigned char*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::Image::containsAddress(void const*, void const*, unsigned char*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachTerminator(void const*, void (void const*) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::chainedStartsOffset() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::objcFixups(dyld3::closure::Image::ResolvedSymbolTarget&, unsigned long long&, dyld3::Array<dyld3::closure::Image::ProtocolISAFixup>&, dyld3::Array<dyld3::closure::Image::SelectorReferenceFixup>&, dyld3::Array<dyld3::closure::Image::ClassStableSwiftFixup>&, dyld3::Array<dyld3::closure::Image::MethodListFixup>&) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ImageArray::imageForNum(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::Closure::images() const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::Closure::forEachPatchEntry(void (dyld3::closure::Closure::PatchEntry const&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::LaunchClosure::forEachInterposingTuple(void (dyld3::closure::InterposingTuple const&, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::LaunchClosure::buildClosureCachePath(char const*, char*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::hashBootAndFileInfo(char const*, char*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ObjCStringTable::getString(char const*, dyld3::Array<unsigned long> const&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ObjCSelectorOpt::getStringLocation(unsigned int, dyld3::Array<dyld3::closure::Image::ObjCSelectorImage> const&, unsigned int&, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin_probe",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::FileSystemPhysical::getRealPath(char const*, char*) const",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::FileSystemPhysical::loadFile(char const*, dyld3::closure::LoadedFileInfo&, char*, void (char const*, ...) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32b40r48r",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::FileSystemPhysical::fileExists(char const*, unsigned long long*, unsigned long long*, bool*, bool*) const",
    "type": "CPP"
  },
  {
    "name": "T _NSInstallLinkEditErrorHandlers",
    "type": "CPP"
  },
  {
    "name": "T _NSNameOfModule",
    "type": "CPP"
  },
  {
    "name": "T _NSLibraryNameForModule",
    "type": "CPP"
  },
  {
    "name": "T _NSIsSymbolNameDefined",
    "type": "CPP"
  },
  {
    "name": "T _NSIsSymbolNameDefinedWithHint",
    "type": "CPP"
  },
  {
    "name": "T _NSIsSymbolNameDefinedInImage",
    "type": "CPP"
  },
  {
    "name": "T _NSLookupAndBindSymbol",
    "type": "CPP"
  },
  {
    "name": "T _NSLookupAndBindSymbolWithHint",
    "type": "CPP"
  },
  {
    "name": "T _NSLookupSymbolInImage",
    "type": "CPP"
  },
  {
    "name": "T _NSNameOfSymbol",
    "type": "CPP"
  },
  {
    "name": "T _NSModuleForSymbol",
    "type": "CPP"
  },
  {
    "name": "T _NSAddLibrary",
    "type": "CPP"
  },
  {
    "name": "T _NSAddLibraryWithSearching",
    "type": "CPP"
  },
  {
    "name": "T _NSAddImage",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32r",
    "type": "CPP"
  },
  {
    "name": "T _dyld_is_simulator_platform",
    "type": "CPP"
  },
  {
    "name": "T _dyld_sdk_at_least",
    "type": "CPP"
  },
  {
    "name": "T _dyld_minos_at_least",
    "type": "CPP"
  },
  {
    "name": "T _dyld_program_minos_at_least",
    "type": "CPP"
  },
  {
    "name": "T _dyld_get_image_versions",
    "type": "CPP"
  },
  {
    "name": "T _NSCreateObjectFileImageFromFile",
    "type": "CPP"
  },
  {
    "name": "T _NSDestroyObjectFileImage",
    "type": "CPP"
  },
  {
    "name": "T _NSSymbolDefinitionCountInObjectFileImage",
    "type": "CPP"
  },
  {
    "name": "T _NSSymbolDefinitionNameInObjectFileImage",
    "type": "CPP"
  },
  {
    "name": "T _NSSymbolReferenceCountInObjectFileImage",
    "type": "CPP"
  },
  {
    "name": "T _NSSymbolReferenceNameInObjectFileImage",
    "type": "CPP"
  },
  {
    "name": "T _NSIsSymbolDefinedInObjectFileImage",
    "type": "CPP"
  },
  {
    "name": "T _NSLinkEditError",
    "type": "CPP"
  },
  {
    "name": "T _NSUnLinkModule",
    "type": "CPP"
  },
  {
    "name": "T __dyld_lookup_and_bind",
    "type": "CPP"
  },
  {
    "name": "T __dyld_lookup_and_bind_with_hint",
    "type": "CPP"
  },
  {
    "name": "T __dyld_lookup_and_bind_fully",
    "type": "CPP"
  },
  {
    "name": "T __dyld_bind_fully_image_containing_address",
    "type": "CPP"
  },
  {
    "name": "T __dyld_present",
    "type": "CPP"
  },
  {
    "name": "T __dyld_image_containing_address",
    "type": "CPP"
  },
  {
    "name": "T __dyld_get_image_header_containing_address",
    "type": "CPP"
  },
  {
    "name": "T __dyld_launched_prebound",
    "type": "CPP"
  },
  {
    "name": "T __dyld_all_twolevel_modules_prebound",
    "type": "CPP"
  },
  {
    "name": "T __dyld_shared_cache_optimized",
    "type": "CPP"
  },
  {
    "name": "T __dyld_shared_cache_is_locally_built",
    "type": "CPP"
  },
  {
    "name": "T _dyld_need_closure",
    "type": "CPP"
  },
  {
    "name": "T _dyld_shared_cache_file_path",
    "type": "CPP"
  },
  {
    "name": "T _dyld_dynamic_interpose",
    "type": "CPP"
  },
  {
    "name": "T __dyld_fork_child",
    "type": "CPP"
  },
  {
    "name": "T _dyld_shared_cache_find_iterate_text",
    "type": "CPP"
  },
  {
    "name": "t findCacheInDirAndMap(unsigned char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "T _dyld_shared_cache_iterate_text",
    "type": "CPP"
  },
  {
    "name": "T __dyld_missing_symbol_abort",
    "type": "CPP"
  },
  {
    "name": "T __dyld_register_driverkit_main",
    "type": "CPP"
  },
  {
    "name": "t shared_cache_missing()",
    "type": "CPP"
  },
  {
    "name": "t shared_cache_out_of_date()",
    "type": "CPP"
  },
  {
    "name": "t isLaunchdOwned()",
    "type": "CPP"
  },
  {
    "name": "T __tlv_bootstrap",
    "type": "CPP"
  },
  {
    "name": "t RemoteBuffer::operator=(RemoteBuffer&&)",
    "type": "CPP"
  },
  {
    "name": "t RemoteBuffer::RemoteBuffer()",
    "type": "CPP"
  },
  {
    "name": "t RemoteBuffer::create(unsigned int, unsigned long long, unsigned long, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "t RemoteBuffer::RemoteBuffer(unsigned int, unsigned long long, unsigned long, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "t RemoteBuffer::map(unsigned int, unsigned long long, unsigned long, bool)",
    "type": "CPP"
  },
  {
    "name": "t RemoteBuffer::~RemoteBuffer()",
    "type": "CPP"
  },
  {
    "name": "t RemoteBuffer::~RemoteBuffer()",
    "type": "CPP"
  },
  {
    "name": "t RemoteBuffer::getLocalAddress() const",
    "type": "CPP"
  },
  {
    "name": "t RemoteBuffer::getKernelReturn() const",
    "type": "CPP"
  },
  {
    "name": "t withRemoteBuffer(unsigned int, unsigned long long, unsigned long, bool, bool, int*, void (void*, unsigned long) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t dyld_process_info_base::addString(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t dyld_process_info_base::copyPath(unsigned int, unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld_process_info_base::copyPath(unsigned int, unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "t dyld_process_info_base::addImage(unsigned int, bool, unsigned long long, unsigned long long, char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld_process_info_base::addInfoFromLoadCommands(mach_header const*, unsigned long long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t dyld_process_info_base::addInfoFromRemoteLoadCommands(unsigned int, unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld_process_info_base::addInfoFromRemoteLoadCommands(unsigned int, unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "t dyld_process_info_base::addDyldImage(unsigned int, unsigned long long, unsigned long long, char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld_process_info_base::copySegmentName(char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld_process_info_base::forEachSegment(unsigned long long, void (unsigned long long, unsigned long long, char const*) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "T __dyld_process_info_create",
    "type": "CPP"
  },
  {
    "name": "t ____dyld_process_info_create_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unique_ptr<dyld_process_info_base, dyld_process_info_deleter> dyld_process_info_base::make<dyld_all_image_infos_32, dyld_image_info_32>(unsigned int, dyld_all_image_infos_32 const&, unsigned long long, int*)",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unique_ptr<dyld_process_info_base, dyld_process_info_deleter> dyld_process_info_base::make<dyld_all_image_infos_64, dyld_image_info_64>(unsigned int, dyld_all_image_infos_64 const&, unsigned long long, int*)",
    "type": "CPP"
  },
  {
    "name": "T __dyld_process_info_get_state",
    "type": "CPP"
  },
  {
    "name": "T __dyld_process_info_get_cache",
    "type": "CPP"
  },
  {
    "name": "T __dyld_process_info_retain",
    "type": "CPP"
  },
  {
    "name": "T __dyld_process_info_get_platform",
    "type": "CPP"
  },
  {
    "name": "T __dyld_process_info_release",
    "type": "CPP"
  },
  {
    "name": "T __dyld_process_info_for_each_image",
    "type": "CPP"
  },
  {
    "name": "T __dyld_process_info_for_each_segment",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unique_ptr<dyld_process_info_base, dyld_process_info_deleter> dyld_process_info_base::makeSuspended<dyld_all_image_infos_32>(unsigned int, dyld_all_image_infos_32 const&, int*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in std::__1::unique_ptr<dyld_process_info_base, dyld_process_info_deleter> dyld_process_info_base::make<dyld_all_image_infos_32, dyld_image_info_32>(unsigned int, dyld_all_image_infos_32 const&, unsigned long long, int*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in std::__1::unique_ptr<dyld_process_info_base, dyld_process_info_deleter> dyld_process_info_base::makeSuspended<dyld_all_image_infos_32>(unsigned int, dyld_all_image_infos_32 const&, int*)",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32r40r48r56r64r",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in void withRemoteObject<mach_header_64>(unsigned int, unsigned long long, bool, int*, void (mach_header_64) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32b",
    "type": "CPP"
  },
  {
    "name": "t std::__1::unique_ptr<dyld_process_info_base, dyld_process_info_deleter> dyld_process_info_base::makeSuspended<dyld_all_image_infos_64>(unsigned int, dyld_all_image_infos_64 const&, int*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in std::__1::unique_ptr<dyld_process_info_base, dyld_process_info_deleter> dyld_process_info_base::make<dyld_all_image_infos_64, dyld_image_info_64>(unsigned int, dyld_all_image_infos_64 const&, unsigned long long, int*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in std::__1::unique_ptr<dyld_process_info_base, dyld_process_info_deleter> dyld_process_info_base::makeSuspended<dyld_all_image_infos_64>(unsigned int, dyld_all_image_infos_64 const&, int*)",
    "type": "CPP"
  },
  {
    "name": "t dyld_process_info_notify_base::dyld_process_info_notify_base(dispatch_queue_s*, void (bool, unsigned long long, unsigned long long, unsigned char const*, char const*) block_pointer, void () block_pointer, unsigned int, int*)",
    "type": "CPP"
  },
  {
    "name": "t dyld_process_info_notify_base::teardown()",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld_process_info_notify_base::dyld_process_info_notify_base(dispatch_queue_s*, void (bool, unsigned long long, unsigned long long, unsigned char const*, char const*) block_pointer, void () block_pointer, unsigned int, int*)",
    "type": "CPP"
  },
  {
    "name": "t dyld_process_info_notify_base::handleEvent()",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld_process_info_notify_base::dyld_process_info_notify_base(dispatch_queue_s*, void (bool, unsigned long long, unsigned long long, unsigned char const*, char const*) block_pointer, void () block_pointer, unsigned int, int*)",
    "type": "CPP"
  },
  {
    "name": "t dyld_process_info_notify_base::~dyld_process_info_notify_base()",
    "type": "CPP"
  },
  {
    "name": "t dyld_process_info_notify_base::release()",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld_process_info_notify_base::release()",
    "type": "CPP"
  },
  {
    "name": "t dyld_process_info_notify_base::replyToMonitoredProcess(mach_msg_header_t&)",
    "type": "CPP"
  },
  {
    "name": "T __dyld_process_info_notify",
    "type": "CPP"
  },
  {
    "name": "T __dyld_process_info_notify_main",
    "type": "CPP"
  },
  {
    "name": "T __dyld_process_info_notify_retain",
    "type": "CPP"
  },
  {
    "name": "T __dyld_process_info_notify_release",
    "type": "CPP"
  },
  {
    "name": "t setNotifyMonitoringDyldMain(void (*)())",
    "type": "CPP"
  },
  {
    "name": "t setNotifyMonitoringDyld(void (*)(bool, unsigned int, mach_header const**, char const**))",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::notifyMonitorUnloads(dyld3::Array<dyld3::LoadedImage> const&)",
    "type": "CPP"
  },
  {
    "name": "t Diagnostics::clearError()",
    "type": "CPP"
  },
  {
    "name": "t Diagnostics::error(char const*, __va_list_tag*)",
    "type": "CPP"
  },
  {
    "name": "t DyldSharedCache::getUUID(unsigned char*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in DyldSharedCache::mappedSize() const",
    "type": "CPP"
  },
  {
    "name": "t DyldSharedCache::findClosure(char const*) const",
    "type": "CPP"
  },
  {
    "name": "t DyldSharedCache::otherOSImageArray() const",
    "type": "CPP"
  },
  {
    "name": "t DyldSharedCache::patchableExportCount(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "t DyldSharedCache::forEachPatchableExport(unsigned int, void (unsigned int, char const*) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t DyldSharedCache::forEachPatchableUseOfExport(unsigned int, unsigned int, void (dyld_cache_patchable_location) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in DyldSharedCache::objcOpt() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::init(dyld3::closure::LaunchClosure const*, DyldSharedCache const*, char const*, dyld3::Array<dyld3::LoadedImage> const&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::init(dyld3::closure::LaunchClosure const*, DyldSharedCache const*, char const*, dyld3::Array<dyld3::LoadedImage> const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::setProgramVars(dyld3::AllImages::ProgramVars*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::setRestrictions(bool, bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::setHasCacheOverrides(bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::applyInitialImages()",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::addImages(dyld3::Array<dyld3::LoadedImage> const&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::runImageNotifiers(dyld3::Array<dyld3::LoadedImage> const&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::runImageCallbacks(dyld3::Array<dyld3::LoadedImage> const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::removeImages(dyld3::Array<dyld3::LoadedImage> const&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::removeImages(dyld3::Array<dyld3::LoadedImage> const&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::removeImages(dyld3::Array<dyld3::LoadedImage> const&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::imagePathByIndex(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32r",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::forEachImage(void (dyld3::LoadedImage const&, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32b",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::pathForImageMappedAt(void const*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::pathForImageMappedAt(void const*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::infoForImageMappedAt(void const*, dyld3::MachOLoaded const**, unsigned long long*, char const**) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::infoForImageMappedAt(void const*, dyld3::MachOLoaded const**, unsigned long long*, char const**) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::infoForImageMappedAt(void const*, dyld3::MachOLoaded const**, unsigned long long*, char const**) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::interposeValue(void*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::findDependent(dyld3::MachOLoaded const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::breadthFirstRecurseDependents(dyld3::Array<unsigned int>&, dyld3::LoadedImage const&, bool&, void (dyld3::LoadedImage const&, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::platform() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::decRefCount(mach_header const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::garbageCollectImages()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::addNSObjectFileImage(OFIInfo const&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::addNSObjectFileImage(OFIInfo const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::GrowableArray<OFIInfo, 4, 1>::push_back(OFIInfo const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::forNSObjectFileImage(__NSObjectFileImage*, void (OFIInfo&) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::forNSObjectFileImage(__NSObjectFileImage*, void (OFIInfo&) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::removeNSObjectFileImage(__NSObjectFileImage*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::removeNSObjectFileImage(__NSObjectFileImage*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Reaper::markDirectlyDlopenedImagesAsUsed()",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Reaper::markDependentsOf(dyld3::LoadedImage const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Reaper::markDependentOfInUseImages()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Reaper::garbageCollect()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Reaper::finalizeDeadImages()",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_.56",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_.57",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Reaper::finalizeDeadImages()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::OverflowSafeArray<__cxa_range_t, 4294967295ul>::push_back(__cxa_range_t const&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Reaper::runTerminators(dyld3::LoadedImage const&)",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_.62",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_.63",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::garbageCollectImages()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Array<dyld3::Reaper::ImageAndUse>::push_back(dyld3::Reaper::ImageAndUse const&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::addUnloadNotifier(void (*)(mach_header const*, long))",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::addLoadNotifier(void (*)(mach_header const*, char const*, bool))",
    "type": "CPP"
  },
  {
    "name": "t dyld3::GrowableArray<unsigned long, 4, 4>::push_back(unsigned long const&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::setObjCNotifiers(void (*)(unsigned int, char const* const*, mach_header const* const*), void (*)(char const*, mach_header const*), void (*)(char const*, mach_header const*))",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::applyInterposingToDyldCache(dyld3::closure::Closure const*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::applyInterposingToDyldCache(dyld3::closure::Closure const*)",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_.85",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_.86",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::swapImageState(unsigned int, unsigned int&, dyld3::LoadedImage::State, dyld3::LoadedImage::State)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::runLibSystemInitializer(dyld3::LoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::resetLockInForkChild()",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::dyld_get_sdk_version(mach_header const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dyld_is_simulator_platform(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::dyld_sdk_at_least(mach_header const*, dyld_build_version_t)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dyld_minos_at_least(mach_header const*, dyld_build_version_t)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::dyld_minos_at_least(mach_header const*, dyld_build_version_t)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::dyld_get_image_versions(mach_header const*, void (unsigned int, unsigned int, unsigned int) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::dyld_get_image_versions(mach_header const*, void (unsigned int, unsigned int, unsigned int) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::parseDlHandle(void*, dyld3::MachOLoaded const**, bool*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::dlclose(void*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::dlsym_internal(void*, char const*, void*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::dlsym_internal(void*, char const*, void*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::dlsym_internal(void*, char const*, void*)",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32b40r48r56r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32b40r48r56r",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::dlsym_internal(void*, char const*, void*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::dlsym_internal(void*, char const*, void*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_get_all_image_infos()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_shared_cache_optimized()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_shared_cache_is_locally_built()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dyld_shared_cache_file_path()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dyld_dynamic_interpose(mach_header const*, dyld_interpose_tuple const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dyld_shared_cache_find_iterate_text(unsigned char const*, char const**, void (dyld_shared_cache_dylib_text_info const*) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::findCacheInDirAndMap(unsigned char const*, char const*, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::dyld_shared_cache_find_iterate_text(unsigned char const*, char const**, void (dyld_shared_cache_dylib_text_info const*) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::dyld_shared_cache_find_iterate_text(unsigned char const*, char const**, void (dyld_shared_cache_dylib_text_info const*) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32b40r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32b40r",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dyld_shared_cache_iterate_text(unsigned char const*, void (dyld_shared_cache_dylib_text_info const*) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::dyld_need_closure(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_missing_symbol_abort()",
    "type": "CPP"
  },
  {
    "name": "T dyld3::compatFuncLookup(char const*, void**)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::deriveVersionFromDylibs(mach_header const*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::linkedDylibVersion(mach_header const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::dlsym_search(char const*, dyld3::LoadedImage const&, bool, dyld3::MachOLoaded const* (dyld3::MachOLoaded const*, unsigned int) block_pointer, bool*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::dlsym_search(char const*, dyld3::LoadedImage const&, bool, dyld3::MachOLoaded const* (dyld3::MachOLoaded const*, unsigned int) block_pointer, bool*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSCreateObjectFileImageFromFile(char const*, __NSObjectFileImage**)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSCreateObjectFileImageFromMemory(void const*, unsigned long, __NSObjectFileImage**)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSLinkModule(__NSObjectFileImage*, char const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::NSLinkModule(__NSObjectFileImage*, char const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::NSLinkModule(__NSObjectFileImage*, char const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSUnLinkModule(__NSModule*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::NSUnLinkModule(__NSModule*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSDestroyObjectFileImage(__NSObjectFileImage*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::NSDestroyObjectFileImage(__NSObjectFileImage*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSSymbolDefinitionCountInObjectFileImage(__NSObjectFileImage*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSSymbolDefinitionNameInObjectFileImage(__NSObjectFileImage*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSSymbolReferenceCountInObjectFileImage(__NSObjectFileImage*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSSymbolReferenceNameInObjectFileImage(__NSObjectFileImage*, unsigned int, bool*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSIsSymbolDefinedInObjectFileImage(__NSObjectFileImage*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::NSIsSymbolDefinedInObjectFileImage(__NSObjectFileImage*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSGetSectionDataInObjectFileImage(__NSObjectFileImage*, char const*, char const*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::NSGetSectionDataInObjectFileImage(__NSObjectFileImage*, char const*, char const*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSNameOfModule(__NSModule*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::NSNameOfModule(__NSModule*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSLibraryNameForModule(__NSModule*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::NSLibraryNameForModule(__NSModule*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSIsSymbolNameDefined(char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::flatFindSymbol(char const*, void**, mach_header const**)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSIsSymbolNameDefinedWithHint(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSIsSymbolNameDefinedInImage(mach_header const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSLookupAndBindSymbol(char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSLookupAndBindSymbolWithHint(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSLookupSymbolInModule(__NSModule*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSLookupSymbolInImage(mach_header const*, char const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSNameOfSymbol(__NSSymbol*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSAddressOfSymbol(__NSSymbol*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSModuleForSymbol(__NSSymbol*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::NSModuleForSymbol(__NSSymbol*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSLinkEditError(NSLinkEditErrors*, int*, char const**, char const**)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSAddLibrary(char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSAddImage(char const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::NSInstallLinkEditErrorHandlers(NSLinkEditErrorHandlers const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_image_containing_address(void const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_get_image_header_containing_address(void const*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::flatFindSymbol(char const*, void**, mach_header const**)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::halt(char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::setLoggingFromEnvs(char const**)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::setLoggingFunction(void (*)(char const*, __va_list_tag*))",
    "type": "CPP"
  },
  {
    "name": "t dyld3::setHaltFunction(void (*)(char const*))",
    "type": "CPP"
  },
  {
    "name": "t dyld3::vlog_default(char const*, __va_list_tag*)",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Array<dyld3::Loader::ImageOverride>::push_back(dyld3::Loader::ImageOverride const&)",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_.5",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_.6",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Loader::completeAllDependents(Diagnostics&, bool&)",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32r40r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32r40r",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Loader::mapAndFixupAllImages(Diagnostics&, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Loader::unmapImage(dyld3::LoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_.24",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_.25",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Loader::mapAndFixupAllImages(Diagnostics&, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Loader::mapImage(Diagnostics&, dyld3::LoadedImage&, bool)",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32r40r48r56r64r",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_.49",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_.50",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Loader::mapImage(Diagnostics&, dyld3::LoadedImage&, bool)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Loader::mapImage(Diagnostics&, dyld3::LoadedImage&, bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Loader::dtraceUserProbesEnabled()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Loader::vmAccountingSetSuspended(bool, bool (*)(char const*, ...))",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Loader::applyFixupsToImage(Diagnostics&, dyld3::LoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Loader::applyFixupsToImage(Diagnostics&, dyld3::LoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Loader::applyFixupsToImage(Diagnostics&, dyld3::LoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_.74",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_.75",
    "type": "CPP"
  },
  {
    "name": "t dyld3::OverflowSafeArray<void const*, 4294967295ul>::push_back(void const* const&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Loader::applyFixupsToImage(Diagnostics&, dyld3::LoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Loader::applyFixupsToImage(Diagnostics&, dyld3::LoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Loader::applyFixupsToImage(Diagnostics&, dyld3::LoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Loader::applyFixupsToImage(Diagnostics&, dyld3::LoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Loader::applyFixupsToImage(Diagnostics&, dyld3::LoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Loader::applyFixupsToImage(Diagnostics&, dyld3::LoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Loader::applyFixupsToImage(Diagnostics&, dyld3::LoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::Loader::applyFixupsToImage(Diagnostics&, dyld3::LoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::FatFile::isFatFile(void const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::GradedArchs::forCurrentOS(dyld3::MachOFile const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::isHaswell()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::archName() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::packedVersionToString(unsigned int, char*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::appendNumber(char*&, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOFile::supportsPlatform(dyld3::Platform) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::isDynamicExecutable() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::isStaticExecutable() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::isPIE() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::installName() const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOFile::getDylibInstallName(char const**, unsigned int*, unsigned int*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOFile::getUuid(unsigned char*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOFile::forEachDependentDylib(void (char const*, bool, bool, bool, unsigned int, unsigned int, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOFile::forDyldEnv(void (char const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOFile::enforceCompatVersion() const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOFile::enforceCompatVersion() const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOFile::forEachSegment(void (dyld3::MachOFile::SegmentInfo const&, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOFile::hasLoadCommand(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32r40r48r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32r40r48r",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOLoaded::getLayoutInfo(dyld3::MachOLoaded::LayoutInfo&) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOLoaded::hasExportedSymbol(char const*, dyld3::MachOLoaded const* (dyld3::MachOLoaded const*, unsigned int) block_pointer, void**, bool*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOLoaded::findExportedSymbol(Diagnostics&, char const*, bool, dyld3::MachOLoaded::FoundSymbol&, dyld3::MachOLoaded const* (dyld3::MachOLoaded const*, unsigned int) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOLoaded::forEachGlobalSymbol(Diagnostics&, void (char const*, unsigned long long, unsigned char, unsigned char, unsigned short, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOLoaded::findExportedSymbol(Diagnostics&, char const*, bool, dyld3::MachOLoaded::FoundSymbol&, dyld3::MachOLoaded const* (dyld3::MachOLoaded const*, unsigned int) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOLoaded::findExportedSymbol(Diagnostics&, char const*, bool, dyld3::MachOLoaded::FoundSymbol&, dyld3::MachOLoaded const* (dyld3::MachOLoaded const*, unsigned int) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOLoaded::getSlide() const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOLoaded::segmentName(unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOLoaded::findClosestSymbol(unsigned long long, char const**, unsigned long long*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::hash_rank_watchOS_dylibs(CS_CodeDirectory const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::hash_rank(CS_CodeDirectory const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOLoaded::ChainedFixupPointerOnDisk::Arm64e::unpackTarget() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOLoaded::ChainedFixupPointerOnDisk::isRebase(unsigned short, unsigned long long, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOLoaded::fixupAllChainedFixups(Diagnostics&, dyld_chained_starts_in_image const*, unsigned long, dyld3::Array<void const*>, void (void*, void*) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOLoaded::forEachFixupInAllChains(Diagnostics&, dyld_chained_starts_in_image const*, bool, void (dyld3::MachOLoaded::ChainedFixupPointerOnDisk*, dyld_chained_starts_in_segment const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOLoaded::fixupAllChainedFixups(Diagnostics&, dyld_chained_starts_in_image const*, unsigned long, dyld3::Array<void const*>, void (void*, void*) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOLoaded::walkChain(Diagnostics&, dyld_chained_starts_in_segment const*, unsigned int, unsigned short, bool, void (dyld3::MachOLoaded::ChainedFixupPointerOnDisk*, dyld_chained_starts_in_segment const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::load(Diagnostics&, dyld3::closure::FileSystem const&, char const*, dyld3::GradedArchs const&, dyld3::Platform, char*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::validMain(Diagnostics&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::validChainedFixupsInfo(Diagnostics&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::validChainedFixupsInfoOldArm64e(Diagnostics&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::validLoadCommands(Diagnostics&, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::remapIfZeroFill(Diagnostics&, dyld3::closure::FileSystem const&, dyld3::closure::LoadedFileInfo&) const",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32r40r48r56r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32r40r48r56r",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::enforceFormat(dyld3::MachOAnalyzer::Malformed) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::enforceFormat(dyld3::MachOAnalyzer::Malformed) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::validEmbeddedPaths(Diagnostics&, dyld3::Platform, char const*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::validSegments(Diagnostics&, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::validSegments(Diagnostics&, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::validSegments(Diagnostics&, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::validSegments(Diagnostics&, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::validMain(Diagnostics&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::validMain(Diagnostics&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::entryAddrFromThreadCmd(thread_command const*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::validRebaseInfo(Diagnostics&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::forEachTextRebase(Diagnostics&, void (unsigned long long, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::forEachTextRebase(Diagnostics&, void (unsigned long long, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32b40r48r",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::forEachRebase(Diagnostics&, bool, void (unsigned long long, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::forEachRebase(Diagnostics&, bool, void (unsigned long long, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32b40r48r56r64r72r80r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32b40r48r56r64r72r80r",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::relocBaseAddress(dyld3::MachOFile::SegmentInfo const*, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::uint32Sorter(void const*, void const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::forEachIndirectPointer(Diagnostics&, void (unsigned long long, bool, int, char const*, bool, bool, bool, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::validBindInfo(Diagnostics&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::forEachBind(Diagnostics&, void (unsigned long long, int, char const*, bool, bool, unsigned long long, bool&) block_pointer, void (char const*) block_pointer, void () block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::forEachBind(Diagnostics&, void (unsigned long long, int, char const*, bool, bool, unsigned long long, bool&) block_pointer, void (char const*) block_pointer, void () block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::forEachBind(Diagnostics&, void (unsigned long long, int, char const*, bool, bool, unsigned long long, bool&) block_pointer, void (char const*) block_pointer, void () block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::forEachBind(Diagnostics&, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, bool, unsigned int, int, unsigned int, unsigned char, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool&) block_pointer, void (char const*) block_pointer, void () block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::parseOrgArm64eChainedFixups(Diagnostics&, void (unsigned int, bool&) block_pointer, void (dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, unsigned int, int, unsigned char, char const*, unsigned long long, bool, bool&) block_pointer, void (dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, unsigned char, bool, unsigned long long, unsigned short, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::validChainedFixupsInfoOldArm64e(Diagnostics&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::validChainedFixupsInfoOldArm64e(Diagnostics&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::validChainedFixupsInfoOldArm64e(Diagnostics&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::forEachChainedFixupTarget(Diagnostics&, void (int, char const*, unsigned long long, bool, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::forEachChainedFixupTarget(Diagnostics&, void (int, char const*, unsigned long long, bool, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::hasCodeSignature(unsigned int&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::hasCodeSignature(unsigned int&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&, bool, void (unsigned int) block_pointer, void const*) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::chainedPointerFormat() const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&, bool, void (unsigned int) block_pointer, void const*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&, bool, void (unsigned int) block_pointer, void const*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::forEachTerminator(Diagnostics&, bool, void (unsigned int) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::forEachRPath(void (char const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::hasObjC() const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::hasPlusLoadMethod(Diagnostics&) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::MachOAnalyzer::hasPlusLoadMethod(Diagnostics&) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::withChainStarts(Diagnostics&, unsigned long long, void (dyld_chained_starts_in_image const*) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::chainStartsOffset() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::MachOAnalyzer::chainedFixupsHeader() const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::PathOverrides::setFallbackPathHandling(dyld3::closure::PathOverrides::FallbackPathMode)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::PathOverrides::setMainExecutable(dyld3::MachOFile const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::PathOverrides::forEachInColonList(char const*, char const*, void (char const*, bool&) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::PathOverrides::addString(char const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::PathOverrides::setString(char const*&, char const*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::PathOverrides::forEachDylibFallback(dyld3::Platform, void (char const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::PathOverrides::forEachFrameworkFallback(dyld3::Platform, void (char const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::PathOverrides::addSuffix(char const*, char const*, char*) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::PathOverrides::forEachImageSuffix(char const*, bool, bool, bool&, void (char const*, bool, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::PathOverrides::forEachPathVariant(char const*, bool, void (char const*, bool, bool&) block_pointer, dyld3::Platform) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::PathOverrides::forEachPathVariant(char const*, bool, void (char const*, bool, bool&) block_pointer, dyld3::Platform) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::PathOverrides::forEachPathVariant(char const*, bool, void (char const*, bool, bool&) block_pointer, dyld3::Platform) const",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::PathOverrides::forEachPathVariant(char const*, bool, void (char const*, bool, bool&) block_pointer, dyld3::Platform) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::PathPool::forEachPath(void (char const*) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::findImage(char const*, dyld3::closure::ClosureBuilder::LoadedImageChain const&, dyld3::closure::ClosureBuilder::BuilderLoadedImage*&, dyld3::closure::ClosureBuilder::LinkageType, unsigned int, bool)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::findImage(char const*, dyld3::closure::ClosureBuilder::LoadedImageChain const&, dyld3::closure::ClosureBuilder::BuilderLoadedImage*&, dyld3::closure::ClosureBuilder::LinkageType, unsigned int, bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::addMustBeMissingPath(char const*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::findImage(char const*, dyld3::closure::ClosureBuilder::LoadedImageChain const&, dyld3::closure::ClosureBuilder::BuilderLoadedImage*&, dyld3::closure::ClosureBuilder::LinkageType, unsigned int, bool)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::forEachResolvedPathVar(char const*, dyld3::closure::ClosureBuilder::LoadedImageChain const&, bool, dyld3::closure::ClosureBuilder::LinkageType, void (char const*, bool&) block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::OverflowSafeArray<dyld3::closure::LaunchClosure::SkippedFile, 4294967295ul>::push_back(dyld3::closure::LaunchClosure::SkippedFile const&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::recursiveLoadDependents(dyld3::closure::ClosureBuilder::LoadedImageChain&, bool)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::buildImage(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::addChainedFixupInfo(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::reportRebasesAndBinds(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::buildImage(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::buildImage(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::buildImage(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::buildImage(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::buildImage(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::addSegments(dyld3::closure::ImageWriter&, dyld3::MachOAnalyzer const*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::addSegments(dyld3::closure::ImageWriter&, dyld3::MachOAnalyzer const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Array<dyld3::closure::Closure::PatchEntry>::push_back(dyld3::closure::Closure::PatchEntry const&)",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_.72",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_.73",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_.75",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_.76",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::addRebaseInfo(dyld3::closure::ImageWriter&, dyld3::MachOAnalyzer const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::OverflowSafeArray<dyld3::closure::Image::TextFixupPattern, 4294967295ul>::push_back(dyld3::closure::Image::TextFixupPattern const&)",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_.80",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_.81",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::forEachBind(dyld3::closure::ClosureBuilder::BuilderLoadedImage&, void (unsigned long long, dyld3::closure::Image::ResolvedSymbolTarget, dyld3::closure::ClosureBuilder::ResolvedTargetInfo const&, bool&) block_pointer, void (char const*) block_pointer, void () block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32b40r48r56r64r72r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32b40r48r56r64r72r",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::forEachBind(dyld3::closure::ClosureBuilder::BuilderLoadedImage&, void (unsigned long long, dyld3::closure::Image::ResolvedSymbolTarget, dyld3::closure::ClosureBuilder::ResolvedTargetInfo const&, bool&) block_pointer, void (char const*) block_pointer, void () block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::forEachBind(dyld3::closure::ClosureBuilder::BuilderLoadedImage&, void (unsigned long long, dyld3::closure::Image::ResolvedSymbolTarget, dyld3::closure::ClosureBuilder::ResolvedTargetInfo const&, bool&) block_pointer, void (char const*) block_pointer, void () block_pointer)",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_.89",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_.90",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::addBindInfo(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::addBindInfo(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::addBindInfo(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::addBindInfo(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::reportRebasesAndBinds(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::reportRebasesAndBinds(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_.113",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_.114",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_.115",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_.116",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::addChainedFixupInfo(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::OverflowSafeArray<char const*, 4294967295ul>::push_back(char const* const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::OverflowSafeArray<dyld3::closure::Image::ResolvedSymbolTarget, 4294967295ul>::push_back(dyld3::closure::Image::ResolvedSymbolTarget const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::OverflowSafeArray<dyld3::closure::ClosureBuilder::ResolvedTargetInfo, 4294967295ul>::push_back(dyld3::closure::ClosureBuilder::ResolvedTargetInfo const&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::addChainedFixupInfo(dyld3::closure::ImageWriter&, dyld3::closure::ClosureBuilder::BuilderLoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::findSymbolInImage(dyld3::MachOAnalyzer const*, char const*, unsigned long long, bool, bool, dyld3::closure::Image::ResolvedSymbolTarget&, dyld3::closure::ClosureBuilder::ResolvedTargetInfo&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureBuilder::findMissingSymbolHandler(dyld3::closure::Image::ResolvedSymbolTarget&, dyld3::closure::ClosureBuilder::ResolvedTargetInfo&)",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_.230",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_.231",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::makeDlopenClosure(char const*, dyld3::closure::LaunchClosure const*, dyld3::Array<dyld3::LoadedImage> const&, unsigned int, bool, bool, bool, unsigned int*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::makeDlopenClosure(char const*, dyld3::closure::LaunchClosure const*, dyld3::Array<dyld3::LoadedImage> const&, unsigned int, bool, bool, bool, unsigned int*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureBuilder::makeDlopenClosure(char const*, dyld3::closure::LaunchClosure const*, dyld3::Array<dyld3::LoadedImage> const&, unsigned int, bool, bool, bool, unsigned int*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::currentImage()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setInvalid()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setTermOffsets(unsigned int const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setInitSectRange(unsigned int, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setFairPlayEncryptionRange(unsigned int, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setTextRebaseInfo(dyld3::Array<dyld3::closure::Image::TextFixupPattern> const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setChainedFixups(unsigned long long, dyld3::Array<dyld3::closure::Image::ResolvedSymbolTarget> const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ImageWriter::setAsOverrideOf(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ClosureWriter::addCachePatches(dyld3::Array<dyld3::closure::Closure::PatchEntry> const&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureWriter::applyInterposing(dyld3::closure::LaunchClosure const*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::ClosureWriter::applyInterposing(dyld3::closure::LaunchClosure const*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::entry_setVars(mach_header const*, int, char const**, char const**, char const**)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::entry_setHaltFunction(void (*)(char const*))",
    "type": "CPP"
  },
  {
    "name": "t dyld3::entry_setOldAllImageInfo(dyld_all_image_infos*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::entry_setInitialImageList(dyld3::closure::LaunchClosure const*, DyldSharedCache const*, char const*, dyld3::Array<dyld3::LoadedImage> const&, dyld3::LoadedImage&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::entry_setChildForkFunction(void (*)())",
    "type": "CPP"
  },
  {
    "name": "t dyld3::entry_setLogFunction(void (*)(char const*, __va_list_tag*))",
    "type": "CPP"
  },
  {
    "name": "t dyld3::entry_setRestrictions(bool, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::entry_setNotifyMonitoringDyldMain(void (*)())",
    "type": "CPP"
  },
  {
    "name": "t dyld3::entry_setNotifyMonitoringDyld(void (*)(bool, unsigned int, mach_header const**, char const**))",
    "type": "CPP"
  },
  {
    "name": "t dyld3::entry_setHasCacheOverrides(bool)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::entry_setProgramVars(ProgramVars*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::_dyld_fork_child()",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ContainerTypedBytes::forEachAttribute(void (dyld3::closure::TypedBytes const*, bool&) block_pointer) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ContainerTypedBytes::forEachAttribute(void (dyld3::closure::TypedBytes const*, bool&) block_pointer) const (.cold.2)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ContainerTypedBytes::forEachAttribute(void (dyld3::closure::TypedBytes const*, bool&) block_pointer) const (.cold.3)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ContainerTypedBytes::findAttributePayload(dyld3::closure::TypedBytes::Type, unsigned int*) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ContainerTypedBytes::findAttributePayload(dyld3::closure::TypedBytes::Type, unsigned int*) const (.cold.2)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ContainerTypedBytes::findAttributePayload(dyld3::closure::TypedBytes::Type, unsigned int*) const (.cold.3)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::isOverrideOfDyldCacheImage(unsigned int&) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::path() const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::leafName() const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::hasFileModTimeAndInode(unsigned long long&, unsigned long long&) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::Image::forEachCDHash(void (unsigned char const*, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::getUuid(unsigned char*) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::hasCodeSignature(unsigned int&, unsigned int&) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::dependentsArray() const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachDependentImage(void (unsigned int, dyld3::closure::Image::LinkKind, unsigned int, bool&) block_pointer) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::dependentImageNum(unsigned int) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::dependentImageNum(unsigned int) const (.cold.2)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachDiskSegment(void (unsigned int, unsigned int, unsigned int, long long, unsigned long long, unsigned char, bool, bool&) block_pointer) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachDiskSegment(void (unsigned int, unsigned int, unsigned int, long long, unsigned long long, unsigned char, bool, bool&) block_pointer) const (.cold.2)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::cacheOffset() const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::cacheOffset() const (.cold.2)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachCacheSegment(void (unsigned int, unsigned long long, unsigned long long, unsigned char, bool&) block_pointer) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachCacheSegment(void (unsigned int, unsigned long long, unsigned long long, unsigned char, bool&) block_pointer) const (.cold.2)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::vmSizeToMap() const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::vmSizeToMap() const (.cold.2)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::sliceOffsetInFile() const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::sliceOffsetInFile() const (.cold.2)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachInitializer(void const*, void (void const*) block_pointer) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachTerminator(void const*, void (void const*) block_pointer) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachDOF(void const*, void (void const*) block_pointer) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachFixup(void (unsigned long long, bool&) block_pointer, void (unsigned long long, dyld3::closure::Image::ResolvedSymbolTarget, bool&) block_pointer, void (unsigned long long, dyld3::Array<dyld3::closure::Image::ResolvedSymbolTarget> const&, bool&) block_pointer, void (unsigned long long) block_pointer, void (unsigned long long, dyld3::closure::Image::ResolvedSymbolTarget, bool&) block_pointer, void (unsigned long long, unsigned int, bool, bool&) block_pointer, void (unsigned long long, bool&) block_pointer, void (unsigned long long, bool&) block_pointer) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachFixup(void (unsigned long long, bool&) block_pointer, void (unsigned long long, dyld3::closure::Image::ResolvedSymbolTarget, bool&) block_pointer, void (unsigned long long, dyld3::Array<dyld3::closure::Image::ResolvedSymbolTarget> const&, bool&) block_pointer, void (unsigned long long) block_pointer, void (unsigned long long, dyld3::closure::Image::ResolvedSymbolTarget, bool&) block_pointer, void (unsigned long long, unsigned int, bool, bool&) block_pointer, void (unsigned long long, bool&) block_pointer, void (unsigned long long, bool&) block_pointer) const (.cold.2)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::chainedStartsOffset() const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Image::forEachImageToInitBefore(void (unsigned int, bool&) block_pointer) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Closure::topImage() const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::Closure::topImage() const (.cold.2)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::closure::Closure::forEachPatchEntry(void (dyld3::closure::Closure::PatchEntry const&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::LaunchClosure::getFlags() const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ObjCStringTable::getString(char const*, dyld3::Array<unsigned long> const&) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ObjCStringTable::getPotentialTarget(char const*) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ObjCSelectorOpt::getStringLocation(unsigned int, dyld3::Array<dyld3::closure::Image::ObjCSelectorImage> const&, unsigned int&, unsigned long long&) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ObjCClassOpt::forEachClass(char const*, dyld3::Array<std::__1::pair<unsigned long, unsigned long> > const&, void (void*, bool, bool*) block_pointer) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ObjCClassOpt::forEachClass(char const*, dyld3::Array<std::__1::pair<unsigned long, unsigned long> > const&, void (void*, bool, bool*) block_pointer) const (.cold.2)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ObjCClassOpt::forEachClass(char const*, dyld3::Array<std::__1::pair<unsigned long, unsigned long> > const&, void (void*, bool, bool*) block_pointer) const (.cold.3)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ObjCClassOpt::forEachClass(char const*, dyld3::Array<std::__1::pair<unsigned long, unsigned long> > const&, void (void*, bool, bool*) block_pointer) const (.cold.4)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::closure::ObjCStringTable::getIndex(char const*) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld_process_info_notify_base::dyld_process_info_notify_base(dispatch_queue_s*, void (bool, unsigned long long, unsigned long long, unsigned char const*, char const*) block_pointer, void () block_pointer, unsigned int, int*) (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::notifyMonitorMain() (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::notifyMonitorLoads(dyld3::Array<dyld3::LoadedImage> const&) (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::notifyMonitorUnloads(dyld3::Array<dyld3::LoadedImage> const&) (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t Diagnostics::assertNoError() const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::init(dyld3::closure::LaunchClosure const*, DyldSharedCache const*, char const*, dyld3::Array<dyld3::LoadedImage> const&) (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::init(dyld3::closure::LaunchClosure const*, DyldSharedCache const*, char const*, dyld3::Array<dyld3::LoadedImage> const&) (.cold.2)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::runImageNotifiers(dyld3::Array<dyld3::LoadedImage> const&) (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::runImageNotifiers(dyld3::Array<dyld3::LoadedImage> const&) (.cold.2)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::runImageCallbacks(dyld3::Array<dyld3::LoadedImage> const&) (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::runImageCallbacks(dyld3::Array<dyld3::LoadedImage> const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::removeImages(dyld3::Array<dyld3::LoadedImage> const&) (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::removeImages(dyld3::Array<dyld3::LoadedImage> const&) (.cold.2)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::removeImages(dyld3::Array<dyld3::LoadedImage> const&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::removeImages(dyld3::Array<dyld3::LoadedImage> const&)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::resolveTarget(dyld3::closure::Image::ResolvedSymbolTarget) const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::resolveTarget(dyld3::closure::Image::ResolvedSymbolTarget) const (.cold.2)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::resolveTarget(dyld3::closure::Image::ResolvedSymbolTarget) const (.cold.3)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Array<unsigned int>::push_back(unsigned int const&) (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Array<dyld3::LoadedImage>::push_back(dyld3::LoadedImage const&) (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::visitDependentsTopDown(dyld3::LoadedImage const&, void (dyld3::LoadedImage const&, bool&) block_pointer) const",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::mainExecutable() const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::mainExecutableImage() const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::platform() const (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::decRefCount(mach_header const*) (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::decRefCount(mach_header const*) (.cold.2)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::garbageCollectImages() (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::addNSObjectFileImage(OFIInfo const&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::removeNSObjectFileImage(__NSObjectFileImage*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::removeNSObjectFileImage(__NSObjectFileImage*)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::OverflowSafeArray<__cxa_range_t, 4294967295ul>::push_back(__cxa_range_t const&) (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::runAllStaticTerminators() (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::runAllStaticTerminators() (.cold.2)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::Array<dyld3::Reaper::ImageAndUse>::push_back(dyld3::Reaper::ImageAndUse const&) (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::addBulkLoadNotifier(void (*)(unsigned int, mach_header const**, char const**)) (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::setObjCNotifiers(void (*)(unsigned int, char const* const*, mach_header const* const*), void (*)(char const*, mach_header const*), void (*)(char const*, mach_header const*)) (.cold.1)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::setObjCNotifiers(void (*)(unsigned int, char const* const*, mach_header const* const*), void (*)(char const*, mach_header const*), void (*)(char const*, mach_header const*)) (.cold.2)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::setObjCNotifiers(void (*)(unsigned int, char const* const*, mach_header const* const*), void (*)(char const*, mach_header const*), void (*)(char const*, mach_header const*)) (.cold.3)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::setObjCNotifiers(void (*)(unsigned int, char const* const*, mach_header const* const*), void (*)(char const*, mach_header const*), void (*)(char const*, mach_header const*)) (.cold.4)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::setObjCNotifiers(void (*)(unsigned int, char const* const*, mach_header const* const*), void (*)(char const*, mach_header const*), void (*)(char const*, mach_header const*)) (.cold.5)",
    "type": "CPP"
  },
  {
    "name": "t dyld3::AllImages::setObjCNotifiers(void (*)(unsigned int, char const* const*, mach_header const* const*), void (*)(char const*, mach_header const*), void (*)(char const*, mach_header const*)) (.cold.6)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::applyInterposingToDyldCache(dyld3::closure::Closure const*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::applyInterposingToDyldCache(dyld3::closure::Closure const*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::applyInterposingToDyldCache(dyld3::closure::Closure const*)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::runStartupInitialzers()",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::findImageNum(unsigned int, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::swapImageState(unsigned int, unsigned int&, dyld3::LoadedImage::State, dyld3::LoadedImage::State)",
    "type": "CPP"
  },
  {
    "name": "t invocation function for block in dyld3::AllImages::swapImageState(unsigned int, unsigned int&, dyld3::LoadedImage::State, dyld3::LoadedImage::State)",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libkeymgr.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "/usr/lib/system/liblaunch.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "/usr/lib/system/libmacho.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _getsectiondata",
    "type": "CPP"
  },
  {
    "name": "T _getsegmentdata",
    "type": "CPP"
  },
  {
    "name": "T _getsectbyname",
    "type": "CPP"
  },
  {
    "name": "T _getsectbynamefromheader_64",
    "type": "CPP"
  },
  {
    "name": "T _getsegbyname",
    "type": "CPP"
  },
  {
    "name": "T _NXGetLocalArchInfo",
    "type": "CPP"
  },
  {
    "name": "T _NXGetArchInfoFromCpuType",
    "type": "CPP"
  },
  {
    "name": "T _swap_fat_header",
    "type": "CPP"
  },
  {
    "name": "T _NXFindBestFatArch",
    "type": "CPP"
  },
  {
    "name": "t _internal_NXFindBestFatArch",
    "type": "CPP"
  },
  {
    "name": "T _getsectdatafromFramework",
    "type": "CPP"
  },
  {
    "name": "T _getsectbynamefromheader",
    "type": "CPP"
  },
  {
    "name": "T _getsectdata",
    "type": "CPP"
  },
  {
    "name": "T _NXGetAllArchInfos",
    "type": "CPP"
  },
  {
    "name": "T _NXGetArchInfoFromName",
    "type": "CPP"
  },
  {
    "name": "T _NXFreeArchInfo",
    "type": "CPP"
  },
  {
    "name": "T _NXFindBestFatArch_64",
    "type": "CPP"
  },
  {
    "name": "T _NXCombineCpuSubtypes",
    "type": "CPP"
  },
  {
    "name": "T _get_end",
    "type": "CPP"
  },
  {
    "name": "T _get_etext",
    "type": "CPP"
  },
  {
    "name": "T _get_edata",
    "type": "CPP"
  },
  {
    "name": "T _getsectbynamefromheaderwithswap",
    "type": "CPP"
  },
  {
    "name": "T _getsectbynamefromheaderwithswap_64",
    "type": "CPP"
  },
  {
    "name": "T _getsectdatafromheader",
    "type": "CPP"
  },
  {
    "name": "T _getsectdatafromheader_64",
    "type": "CPP"
  },
  {
    "name": "T _swap_hppa_integer_thread_state",
    "type": "CPP"
  },
  {
    "name": "T _swap_hppa_frame_thread_state",
    "type": "CPP"
  },
  {
    "name": "T _swap_hppa_fp_thread_state",
    "type": "CPP"
  },
  {
    "name": "T _swap_i386_thread_state",
    "type": "CPP"
  },
  {
    "name": "T _swap_x86_thread_state64",
    "type": "CPP"
  },
  {
    "name": "T _swap_x86_state_hdr",
    "type": "CPP"
  },
  {
    "name": "T _swap_x86_float_state64",
    "type": "CPP"
  },
  {
    "name": "T _swap_x86_exception_state64",
    "type": "CPP"
  },
  {
    "name": "T _swap_x86_thread_state",
    "type": "CPP"
  },
  {
    "name": "T _swap_x86_float_state",
    "type": "CPP"
  },
  {
    "name": "T _swap_i386_float_state",
    "type": "CPP"
  },
  {
    "name": "T _swap_x86_exception_state",
    "type": "CPP"
  },
  {
    "name": "T _swap_i386_exception_state",
    "type": "CPP"
  },
  {
    "name": "T _swap_x86_debug_state32",
    "type": "CPP"
  },
  {
    "name": "T _swap_x86_debug_state64",
    "type": "CPP"
  },
  {
    "name": "T _swap_x86_debug_state",
    "type": "CPP"
  },
  {
    "name": "T _swap_i860_thread_state_regs",
    "type": "CPP"
  },
  {
    "name": "T _swap_m68k_thread_state_regs",
    "type": "CPP"
  },
  {
    "name": "T _swap_m68k_thread_state_68882",
    "type": "CPP"
  },
  {
    "name": "T _swap_m68k_thread_state_user_reg",
    "type": "CPP"
  },
  {
    "name": "T _swap_m88k_thread_state_grf_t",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libquarantine.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T ___esp_enabled",
    "type": "CPP"
  },
  {
    "name": "T _responsibility_get_pid_responsible_for_pid",
    "type": "CPP"
  },
  {
    "name": "T ___qtn_syscall_responsibility_get",
    "type": "CPP"
  },
  {
    "name": "T __qtn_file_alloc",
    "type": "CPP"
  },
  {
    "name": "T __qtn_file_set_identifier",
    "type": "CPP"
  },
  {
    "name": "T __qtn_file_set_timestamp",
    "type": "CPP"
  },
  {
    "name": "T __qtn_file_set_metadata",
    "type": "CPP"
  },
  {
    "name": "T __qtn_file_apply_to_path",
    "type": "CPP"
  },
  {
    "name": "t _unparse_label",
    "type": "CPP"
  },
  {
    "name": "t _macsafestring_encode",
    "type": "CPP"
  },
  {
    "name": "T ___qtn_syscall_quarantine_setinfo_path",
    "type": "CPP"
  },
  {
    "name": "T __qtn_file_free",
    "type": "CPP"
  },
  {
    "name": "T __qtn_file_init_with_fd",
    "type": "CPP"
  },
  {
    "name": "T ___qtn_syscall_quarantine_getinfo_fd",
    "type": "CPP"
  },
  {
    "name": "t _parse_label",
    "type": "CPP"
  },
  {
    "name": "t _macsafestring_decode",
    "type": "CPP"
  },
  {
    "name": "T __qtn_file_apply_to_fd",
    "type": "CPP"
  },
  {
    "name": "T ___qtn_syscall_quarantine_setinfo_fd",
    "type": "CPP"
  },
  {
    "name": "T __qtn_file_init_with_path",
    "type": "CPP"
  },
  {
    "name": "T ___qtn_syscall_quarantine_getinfo_path",
    "type": "CPP"
  },
  {
    "name": "T __qtn_proc_alloc",
    "type": "CPP"
  },
  {
    "name": "T __qtn_proc_init_with_self",
    "type": "CPP"
  },
  {
    "name": "T _qtn_proc_init_with_pid",
    "type": "CPP"
  },
  {
    "name": "T ___qtn_syscall_quarantine_getprocinfo",
    "type": "CPP"
  },
  {
    "name": "T __qtn_proc_init",
    "type": "CPP"
  },
  {
    "name": "T __qtn_proc_set_flags",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libremovefile.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _removefile_state_alloc",
    "type": "CPP"
  },
  {
    "name": "T _removefile_state_set",
    "type": "CPP"
  },
  {
    "name": "T _removefile",
    "type": "CPP"
  },
  {
    "name": "T ___removefile_tree_walker",
    "type": "CPP"
  },
  {
    "name": "T _removefile_state_get",
    "type": "CPP"
  },
  {
    "name": "T _removefile_state_free",
    "type": "CPP"
  },
  {
    "name": "T ___removefile_init_random",
    "type": "CPP"
  },
  {
    "name": "T ___removefile_random_char",
    "type": "CPP"
  },
  {
    "name": "T ___removefile_randomize_buffer",
    "type": "CPP"
  },
  {
    "name": "T ___removefile_rename_unlink",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin_probe",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libsystem_asl.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _asl_open",
    "type": "CPP"
  },
  {
    "name": "T _asl_client_open",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_new",
    "type": "CPP"
  },
  {
    "name": "t __asl_msg_make_page",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_set_key_val",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_set_key_val_op",
    "type": "CPP"
  },
  {
    "name": "t __asl_msg_index",
    "type": "CPP"
  },
  {
    "name": "t __asl_msg_std_key",
    "type": "CPP"
  },
  {
    "name": "t __asl_msg_new_key_val_op",
    "type": "CPP"
  },
  {
    "name": "t ____asl_global_init_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __asl_notify_open",
    "type": "CPP"
  },
  {
    "name": "T _asl_remote_notify_name",
    "type": "CPP"
  },
  {
    "name": "T _asl_new",
    "type": "CPP"
  },
  {
    "name": "t ___asl_new_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __asl_object_init",
    "type": "CPP"
  },
  {
    "name": "t _asl_msg_jump_table",
    "type": "CPP"
  },
  {
    "name": "t _asl_msg_list_jump_table",
    "type": "CPP"
  },
  {
    "name": "t _asl_file_jump_table",
    "type": "CPP"
  },
  {
    "name": "t _asl_store_jump_table",
    "type": "CPP"
  },
  {
    "name": "t _asl_client_jump_table",
    "type": "CPP"
  },
  {
    "name": "T _asl_set",
    "type": "CPP"
  },
  {
    "name": "T _asl_object_set_key_val_op",
    "type": "CPP"
  },
  {
    "name": "t __jump_set_key_val_op",
    "type": "CPP"
  },
  {
    "name": "T _asl_send",
    "type": "CPP"
  },
  {
    "name": "T _asl_object_append",
    "type": "CPP"
  },
  {
    "name": "t __jump_append",
    "type": "CPP"
  },
  {
    "name": "T _asl_get_type",
    "type": "CPP"
  },
  {
    "name": "t _asl_client_internal_send",
    "type": "CPP"
  },
  {
    "name": "T __asl_evaluate_send",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_lookup",
    "type": "CPP"
  },
  {
    "name": "t __asl_msg_slot_val",
    "type": "CPP"
  },
  {
    "name": "T _asl_client_get_control",
    "type": "CPP"
  },
  {
    "name": "T _asl_syslog_faciliy_num_to_name",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_get_val_for_key",
    "type": "CPP"
  },
  {
    "name": "t _os_log_with_args_wrapper",
    "type": "CPP"
  },
  {
    "name": "T _asl_free",
    "type": "CPP"
  },
  {
    "name": "T _asl_release",
    "type": "CPP"
  },
  {
    "name": "T _asl_close",
    "type": "CPP"
  },
  {
    "name": "t __jump_dealloc",
    "type": "CPP"
  },
  {
    "name": "t __asl_client_free_internal",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_release",
    "type": "CPP"
  },
  {
    "name": "T _asl_get",
    "type": "CPP"
  },
  {
    "name": "T _asl_object_get_val_op_for_key",
    "type": "CPP"
  },
  {
    "name": "t __jump_get_val_op_for_key",
    "type": "CPP"
  },
  {
    "name": "T _asl_set_filter",
    "type": "CPP"
  },
  {
    "name": "T _asl_client_set_filter",
    "type": "CPP"
  },
  {
    "name": "T _asl_log",
    "type": "CPP"
  },
  {
    "name": "t __asl_lib_vlog",
    "type": "CPP"
  },
  {
    "name": "t __asl_send_message",
    "type": "CPP"
  },
  {
    "name": "T _asl_base_msg",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_merge",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_fetch",
    "type": "CPP"
  },
  {
    "name": "t __asl_msg_slot_key",
    "type": "CPP"
  },
  {
    "name": "t ____asl_send_message_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __asl_mt_shim_send_message",
    "type": "CPP"
  },
  {
    "name": "t _asl_msg_to_string_raw",
    "type": "CPP"
  },
  {
    "name": "T _asl_string_new",
    "type": "CPP"
  },
  {
    "name": "T _asl_string_append_no_encoding_len",
    "type": "CPP"
  },
  {
    "name": "t __asl_string_grow",
    "type": "CPP"
  },
  {
    "name": "T _asl_string_append_char_no_encoding",
    "type": "CPP"
  },
  {
    "name": "T _asl_string_append_asl_key",
    "type": "CPP"
  },
  {
    "name": "t _asl_string_append_internal",
    "type": "CPP"
  },
  {
    "name": "T _asl_string_append",
    "type": "CPP"
  },
  {
    "name": "t __asl_time_string",
    "type": "CPP"
  },
  {
    "name": "T _asl_core_parse_time",
    "type": "CPP"
  },
  {
    "name": "t _asl_core_str_match_absolute_or_relative_time",
    "type": "CPP"
  },
  {
    "name": "T _asl_core_str_match",
    "type": "CPP"
  },
  {
    "name": "T _asl_string_append_no_encoding",
    "type": "CPP"
  },
  {
    "name": "T _asl_string_length",
    "type": "CPP"
  },
  {
    "name": "T _asl_string_allocated_size",
    "type": "CPP"
  },
  {
    "name": "T _asl_string_release_return_bytes",
    "type": "CPP"
  },
  {
    "name": "T __asl_server_message",
    "type": "CPP"
  },
  {
    "name": "t ____asl_open_default_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __asl_log_args_to_xpc",
    "type": "CPP"
  },
  {
    "name": "T _asl_client_kvdict",
    "type": "CPP"
  },
  {
    "name": "t __asl_msg_to_xpc",
    "type": "CPP"
  },
  {
    "name": "t __asl_mt_shim_pipe_copy",
    "type": "CPP"
  },
  {
    "name": "T _syslog$DARWIN_EXTSN",
    "type": "CPP"
  },
  {
    "name": "T _vsyslog",
    "type": "CPP"
  },
  {
    "name": "T _asl_count",
    "type": "CPP"
  },
  {
    "name": "T _asl_object_count",
    "type": "CPP"
  },
  {
    "name": "T _asl_fetch_key_val_op",
    "type": "CPP"
  },
  {
    "name": "T _asl_object_get_key_val_op_at_index",
    "type": "CPP"
  },
  {
    "name": "t __jump_get_key_val_op_at_index",
    "type": "CPP"
  },
  {
    "name": "t __asl_msg_resolve_index",
    "type": "CPP"
  },
  {
    "name": "T _asl_vlog",
    "type": "CPP"
  },
  {
    "name": "T _openlog",
    "type": "CPP"
  },
  {
    "name": "T _syslog",
    "type": "CPP"
  },
  {
    "name": "t ___asl_release_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _asl_core_get_service_port",
    "type": "CPP"
  },
  {
    "name": "T _asl_add_output_file",
    "type": "CPP"
  },
  {
    "name": "T _asl_client_add_output_file",
    "type": "CPP"
  },
  {
    "name": "T _asl_format_message",
    "type": "CPP"
  },
  {
    "name": "t __asl_set_option",
    "type": "CPP"
  },
  {
    "name": "T _asl_get_filter",
    "type": "CPP"
  },
  {
    "name": "T _asl_add_log_file",
    "type": "CPP"
  },
  {
    "name": "T _asl_remove_log_file",
    "type": "CPP"
  },
  {
    "name": "T _asl_remove_output_file",
    "type": "CPP"
  },
  {
    "name": "T _asl_client_remove_output_file",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_from_string",
    "type": "CPP"
  },
  {
    "name": "t __asl_msg_get_next_word",
    "type": "CPP"
  },
  {
    "name": "T _asl_filesystem_path",
    "type": "CPP"
  },
  {
    "name": "t ___asl_filesystem_path_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _asl_store_location",
    "type": "CPP"
  },
  {
    "name": "T __asl_server_query_2",
    "type": "CPP"
  },
  {
    "name": "T _asl_client_send",
    "type": "CPP"
  },
  {
    "name": "T _asl_client_release",
    "type": "CPP"
  },
  {
    "name": "T __asl_mt_shim_fork_child",
    "type": "CPP"
  },
  {
    "name": "T _asl_client_open_from_file",
    "type": "CPP"
  },
  {
    "name": "T _asl_client_retain",
    "type": "CPP"
  },
  {
    "name": "T _asl_client_match",
    "type": "CPP"
  },
  {
    "name": "T _asl_client_search",
    "type": "CPP"
  },
  {
    "name": "T _asl_client_set_control",
    "type": "CPP"
  },
  {
    "name": "T _asl_client_set_output_file_filter",
    "type": "CPP"
  },
  {
    "name": "t __jump_search",
    "type": "CPP"
  },
  {
    "name": "t __jump_match",
    "type": "CPP"
  },
  {
    "name": "T __asl_fork_child",
    "type": "CPP"
  },
  {
    "name": "T _asl_open_from_file",
    "type": "CPP"
  },
  {
    "name": "t __asl_open_default",
    "type": "CPP"
  },
  {
    "name": "T _asl_set_output_file_filter",
    "type": "CPP"
  },
  {
    "name": "T _asl_add_output",
    "type": "CPP"
  },
  {
    "name": "T _asl_remove_output",
    "type": "CPP"
  },
  {
    "name": "t __asl_lib_vlog_text",
    "type": "CPP"
  },
  {
    "name": "t __asl_send_message_text",
    "type": "CPP"
  },
  {
    "name": "T __asl_lib_log",
    "type": "CPP"
  },
  {
    "name": "T _asl_log_message",
    "type": "CPP"
  },
  {
    "name": "T _asl_set_local_control",
    "type": "CPP"
  },
  {
    "name": "T _asl_get_local_control",
    "type": "CPP"
  },
  {
    "name": "T _asl_create_auxiliary_file",
    "type": "CPP"
  },
  {
    "name": "t __asl_auxiliary",
    "type": "CPP"
  },
  {
    "name": "T _asl_log_auxiliary_location",
    "type": "CPP"
  },
  {
    "name": "T _asl_close_auxiliary_file",
    "type": "CPP"
  },
  {
    "name": "T __asl_server_control_query",
    "type": "CPP"
  },
  {
    "name": "T _asl_open_path",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32r",
    "type": "CPP"
  },
  {
    "name": "t __asl_aux_save_context",
    "type": "CPP"
  },
  {
    "name": "t ____asl_auxiliary_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____asl_auxiliary_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "T _asl_core_string_hash",
    "type": "CPP"
  },
  {
    "name": "T _asl_core_error",
    "type": "CPP"
  },
  {
    "name": "T _asl_core_level_to_string",
    "type": "CPP"
  },
  {
    "name": "T _asl_core_check_access",
    "type": "CPP"
  },
  {
    "name": "t _asl_core_check_group_access",
    "type": "CPP"
  },
  {
    "name": "T _asl_core_htonq",
    "type": "CPP"
  },
  {
    "name": "T _asl_core_ntohq",
    "type": "CPP"
  },
  {
    "name": "T _asl_core_new_msg_id",
    "type": "CPP"
  },
  {
    "name": "T _asl_core_encode_buffer",
    "type": "CPP"
  },
  {
    "name": "T _asl_core_decode_buffer",
    "type": "CPP"
  },
  {
    "name": "T _asl_core_str_match_char",
    "type": "CPP"
  },
  {
    "name": "T _asl_core_str_to_uint32",
    "type": "CPP"
  },
  {
    "name": "T _asl_core_str_to_size",
    "type": "CPP"
  },
  {
    "name": "T _asl_core_str_to_time",
    "type": "CPP"
  },
  {
    "name": "T _asl_core_time_to_str",
    "type": "CPP"
  },
  {
    "name": "T _asl_core_str_match_c_time",
    "type": "CPP"
  },
  {
    "name": "T _asl_parse_time",
    "type": "CPP"
  },
  {
    "name": "T _asl_string_retain",
    "type": "CPP"
  },
  {
    "name": "T _asl_string_release",
    "type": "CPP"
  },
  {
    "name": "T _asl_string_bytes",
    "type": "CPP"
  },
  {
    "name": "T _asl_string_append_op",
    "type": "CPP"
  },
  {
    "name": "T _asl_string_append_xml_tag",
    "type": "CPP"
  },
  {
    "name": "t __asl_redirect_fork_child",
    "type": "CPP"
  },
  {
    "name": "T _asl_log_descriptor",
    "type": "CPP"
  },
  {
    "name": "t _asl_log_from_descriptor",
    "type": "CPP"
  },
  {
    "name": "t _asl_descriptor_init",
    "type": "CPP"
  },
  {
    "name": "t ___asl_log_from_descriptor_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _read_from_source",
    "type": "CPP"
  },
  {
    "name": "t _cancel_source",
    "type": "CPP"
  },
  {
    "name": "t _redirect_atexit",
    "type": "CPP"
  },
  {
    "name": "t __read_redirect",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_list_new",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_list_new_count",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_list_retain",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_list_release",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_list_to_string",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_list_to_asl_string",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_list_from_string",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_list_append",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_list_insert",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_list_prepend",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_list_count",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_list_get_index",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_list_remove_index",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_list_next",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_list_prev",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_list_reset_iteration",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_list_search",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_list_match",
    "type": "CPP"
  },
  {
    "name": "t __jump_alloc",
    "type": "CPP"
  },
  {
    "name": "t __jump_dealloc",
    "type": "CPP"
  },
  {
    "name": "t __jump_count",
    "type": "CPP"
  },
  {
    "name": "t __jump_next",
    "type": "CPP"
  },
  {
    "name": "t __jump_prev",
    "type": "CPP"
  },
  {
    "name": "t __jump_get_object_at_index",
    "type": "CPP"
  },
  {
    "name": "t __jump_set_iteration_index",
    "type": "CPP"
  },
  {
    "name": "t __jump_remove_object_at_index",
    "type": "CPP"
  },
  {
    "name": "t __jump_append",
    "type": "CPP"
  },
  {
    "name": "t __jump_prepend",
    "type": "CPP"
  },
  {
    "name": "t __jump_search",
    "type": "CPP"
  },
  {
    "name": "t __jump_match",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_retain",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_release",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_close",
    "type": "CPP"
  },
  {
    "name": "t _asl_file_open_write_fd",
    "type": "CPP"
  },
  {
    "name": "t _asl_file_create",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_open_write",
    "type": "CPP"
  },
  {
    "name": "t _asl_file_read_uint32",
    "type": "CPP"
  },
  {
    "name": "t _asl_file_read_uint64",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_read_set_position",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_compact",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_fetch_next",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_save",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_filter",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_filter_level",
    "type": "CPP"
  },
  {
    "name": "t _asl_file_string_encode",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_open_read",
    "type": "CPP"
  },
  {
    "name": "t _asl_file_read_set_position_last",
    "type": "CPP"
  },
  {
    "name": "t _asl_file_fetch_pos",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_fetch_previous",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_fetch",
    "type": "CPP"
  },
  {
    "name": "t _asl_file_cursor",
    "type": "CPP"
  },
  {
    "name": "t _asl_file_match_start",
    "type": "CPP"
  },
  {
    "name": "t _asl_file_match_next",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_match",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_size",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_ctime",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_list_close",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_list_add",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_list_match_start",
    "type": "CPP"
  },
  {
    "name": "t _asl_file_list_insert",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_list_match_next",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_list_match_end",
    "type": "CPP"
  },
  {
    "name": "T _asl_file_list_match",
    "type": "CPP"
  },
  {
    "name": "t __jump_dealloc",
    "type": "CPP"
  },
  {
    "name": "t __jump_count",
    "type": "CPP"
  },
  {
    "name": "t __jump_next",
    "type": "CPP"
  },
  {
    "name": "t __jump_prev",
    "type": "CPP"
  },
  {
    "name": "t __jump_get_object_at_index",
    "type": "CPP"
  },
  {
    "name": "t __jump_set_iteration_index",
    "type": "CPP"
  },
  {
    "name": "t __jump_append",
    "type": "CPP"
  },
  {
    "name": "t __jump_search",
    "type": "CPP"
  },
  {
    "name": "t __jump_match",
    "type": "CPP"
  },
  {
    "name": "t _file_string_dispose",
    "type": "CPP"
  },
  {
    "name": "t _asl_file_fetch_object",
    "type": "CPP"
  },
  {
    "name": "t _asl_file_fetch_helper_64",
    "type": "CPP"
  },
  {
    "name": "t _asl_file_fetch_helper_32",
    "type": "CPP"
  },
  {
    "name": "t _asl_file_fetch_helper_str",
    "type": "CPP"
  },
  {
    "name": "T _asl_legacy1_open",
    "type": "CPP"
  },
  {
    "name": "T _asl_legacy1_close",
    "type": "CPP"
  },
  {
    "name": "T _asl_legacy1_fetch",
    "type": "CPP"
  },
  {
    "name": "t _slotlist_find",
    "type": "CPP"
  },
  {
    "name": "t _msg_fetch",
    "type": "CPP"
  },
  {
    "name": "T _asl_legacy1_match",
    "type": "CPP"
  },
  {
    "name": "t _slot_comp",
    "type": "CPP"
  },
  {
    "name": "t _asl_legacy1_fetch_helper_64",
    "type": "CPP"
  },
  {
    "name": "t _asl_legacy1_fetch_helper_32",
    "type": "CPP"
  },
  {
    "name": "t _asl_legacy1_fetch_helper_str",
    "type": "CPP"
  },
  {
    "name": "t _string_fetch_sid",
    "type": "CPP"
  },
  {
    "name": "t _next_search_slot",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_retain",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_type",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_count",
    "type": "CPP"
  },
  {
    "name": "T __asl_msg_dump",
    "type": "CPP"
  },
  {
    "name": "t __asl_msg_dump_kv",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_key",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_unset",
    "type": "CPP"
  },
  {
    "name": "t __asl_msg_unset_page_slot",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_unset_index",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_copy",
    "type": "CPP"
  },
  {
    "name": "t __asl_msg_test",
    "type": "CPP"
  },
  {
    "name": "t __asl_msg_test_expression",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_cmp",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_cmp_list",
    "type": "CPP"
  },
  {
    "name": "T _asl_string_append_asl_msg",
    "type": "CPP"
  },
  {
    "name": "T _asl_msg_to_string",
    "type": "CPP"
  },
  {
    "name": "t __jump_alloc",
    "type": "CPP"
  },
  {
    "name": "t __jump_dealloc",
    "type": "CPP"
  },
  {
    "name": "t __jump_unset_key",
    "type": "CPP"
  },
  {
    "name": "t __jump_count",
    "type": "CPP"
  },
  {
    "name": "t __jump_append",
    "type": "CPP"
  },
  {
    "name": "t __jump_prepend",
    "type": "CPP"
  },
  {
    "name": "t __jump_search",
    "type": "CPP"
  },
  {
    "name": "t __jump_match",
    "type": "CPP"
  },
  {
    "name": "t __asl_msg_basic_test",
    "type": "CPP"
  },
  {
    "name": "t __asl_isanumber",
    "type": "CPP"
  },
  {
    "name": "T _asl_store_open_write",
    "type": "CPP"
  },
  {
    "name": "T _asl_store_set_flags",
    "type": "CPP"
  },
  {
    "name": "T _asl_store_statistics",
    "type": "CPP"
  },
  {
    "name": "T _asl_store_open_read",
    "type": "CPP"
  },
  {
    "name": "T _asl_store_max_file_size",
    "type": "CPP"
  },
  {
    "name": "t _asl_store_file_closeall",
    "type": "CPP"
  },
  {
    "name": "T _asl_store_retain",
    "type": "CPP"
  },
  {
    "name": "T _asl_store_release",
    "type": "CPP"
  },
  {
    "name": "T _asl_store_close",
    "type": "CPP"
  },
  {
    "name": "T _asl_store_sweep_file_cache",
    "type": "CPP"
  },
  {
    "name": "t _asl_store_file_cache_lru",
    "type": "CPP"
  },
  {
    "name": "t _asl_store_file_path",
    "type": "CPP"
  },
  {
    "name": "t _asl_store_file_close",
    "type": "CPP"
  },
  {
    "name": "T _asl_store_save",
    "type": "CPP"
  },
  {
    "name": "T _asl_store_open_aux",
    "type": "CPP"
  },
  {
    "name": "t _asl_store_make_ug_path",
    "type": "CPP"
  },
  {
    "name": "T _asl_store_match",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libsystem_blocks.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "/usr/lib/system/libsystem_c.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T mcount",
    "type": "CPP"
  },
  {
    "name": "T _sigaltstack",
    "type": "CPP"
  },
  {
    "name": "T _sigvec",
    "type": "CPP"
  },
  {
    "name": "t _sigvec__",
    "type": "CPP"
  },
  {
    "name": "T __sigvec_nobind",
    "type": "CPP"
  },
  {
    "name": "T _sigsetmask",
    "type": "CPP"
  },
  {
    "name": "T _sigblock",
    "type": "CPP"
  },
  {
    "name": "T _sigpause$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _sighold",
    "type": "CPP"
  },
  {
    "name": "T _sigrelse",
    "type": "CPP"
  },
  {
    "name": "T _sigignore",
    "type": "CPP"
  },
  {
    "name": "T _sigset",
    "type": "CPP"
  },
  {
    "name": "T _clock_gettime_nsec_np",
    "type": "CPP"
  },
  {
    "name": "t __mach_boottime_usec",
    "type": "CPP"
  },
  {
    "name": "T _clock_gettime",
    "type": "CPP"
  },
  {
    "name": "T _clock_getres",
    "type": "CPP"
  },
  {
    "name": "T _clock_settime",
    "type": "CPP"
  },
  {
    "name": "t __boottime_fallback_usec",
    "type": "CPP"
  },
  {
    "name": "T _sbrk",
    "type": "CPP"
  },
  {
    "name": "T _brk",
    "type": "CPP"
  },
  {
    "name": "T _bsd_signal",
    "type": "CPP"
  },
  {
    "name": "T _lchflags",
    "type": "CPP"
  },
  {
    "name": "T _lchmod",
    "type": "CPP"
  },
  {
    "name": "T _lutimes",
    "type": "CPP"
  },
  {
    "name": "T _fstatvfs",
    "type": "CPP"
  },
  {
    "name": "t _cvt_statfs_to_statvfs",
    "type": "CPP"
  },
  {
    "name": "T _statvfs",
    "type": "CPP"
  },
  {
    "name": "T _backtrace",
    "type": "CPP"
  },
  {
    "name": "T _backtrace_from_fp",
    "type": "CPP"
  },
  {
    "name": "T _backtrace_symbols",
    "type": "CPP"
  },
  {
    "name": "t __backtrace_snprintf",
    "type": "CPP"
  },
  {
    "name": "T _backtrace_symbols_fd",
    "type": "CPP"
  },
  {
    "name": "T _backtrace_image_offsets",
    "type": "CPP"
  },
  {
    "name": "t ___confstr_init",
    "type": "CPP"
  },
  {
    "name": "T _confstr",
    "type": "CPP"
  },
  {
    "name": "T _crypt",
    "type": "CPP"
  },
  {
    "name": "t ___crypt_des_setkey",
    "type": "CPP"
  },
  {
    "name": "t _permute",
    "type": "CPP"
  },
  {
    "name": "t ___crypt_des_cipher",
    "type": "CPP"
  },
  {
    "name": "T _setkey",
    "type": "CPP"
  },
  {
    "name": "T _encrypt",
    "type": "CPP"
  },
  {
    "name": "t _init_perm",
    "type": "CPP"
  },
  {
    "name": "T _devname_r",
    "type": "CPP"
  },
  {
    "name": "T _devname",
    "type": "CPP"
  },
  {
    "name": "T _getdiskbyname",
    "type": "CPP"
  },
  {
    "name": "t _gettype",
    "type": "CPP"
  },
  {
    "name": "T _filesec_init",
    "type": "CPP"
  },
  {
    "name": "T _filesec_dup",
    "type": "CPP"
  },
  {
    "name": "T _filesec_free",
    "type": "CPP"
  },
  {
    "name": "t _filesec_discard_aclbuf",
    "type": "CPP"
  },
  {
    "name": "T _filesec_get_property",
    "type": "CPP"
  },
  {
    "name": "T _filesec_set_property",
    "type": "CPP"
  },
  {
    "name": "T _filesec_unset_property",
    "type": "CPP"
  },
  {
    "name": "T _filesec_query_property",
    "type": "CPP"
  },
  {
    "name": "T _fts_open$INODE64",
    "type": "CPP"
  },
  {
    "name": "t ___fts_open",
    "type": "CPP"
  },
  {
    "name": "T _fts_open_b$INODE64",
    "type": "CPP"
  },
  {
    "name": "T _fts_close$INODE64",
    "type": "CPP"
  },
  {
    "name": "T _fts_read$INODE64",
    "type": "CPP"
  },
  {
    "name": "t _fts_safe_changedir",
    "type": "CPP"
  },
  {
    "name": "t _fts_build",
    "type": "CPP"
  },
  {
    "name": "T _fts_set$INODE64",
    "type": "CPP"
  },
  {
    "name": "T _fts_children$INODE64",
    "type": "CPP"
  },
  {
    "name": "t _fts_palloc",
    "type": "CPP"
  },
  {
    "name": "t _fts_alloc",
    "type": "CPP"
  },
  {
    "name": "t _fts_sort",
    "type": "CPP"
  },
  {
    "name": "t _close_directory",
    "type": "CPP"
  },
  {
    "name": "t _fts_stat2",
    "type": "CPP"
  },
  {
    "name": "t _advance_directory",
    "type": "CPP"
  },
  {
    "name": "T _compat_mode",
    "type": "CPP"
  },
  {
    "name": "t _check_env_var",
    "type": "CPP"
  },
  {
    "name": "T _getloadavg",
    "type": "CPP"
  },
  {
    "name": "T _getttynam",
    "type": "CPP"
  },
  {
    "name": "T _setttyent",
    "type": "CPP"
  },
  {
    "name": "T _getttyent",
    "type": "CPP"
  },
  {
    "name": "T _endttyent",
    "type": "CPP"
  },
  {
    "name": "t _skip",
    "type": "CPP"
  },
  {
    "name": "T _getusershell",
    "type": "CPP"
  },
  {
    "name": "t _initshells",
    "type": "CPP"
  },
  {
    "name": "T _endusershell",
    "type": "CPP"
  },
  {
    "name": "T _setusershell",
    "type": "CPP"
  },
  {
    "name": "T _getvfsbyname",
    "type": "CPP"
  },
  {
    "name": "T __atexit_receipt",
    "type": "CPP"
  },
  {
    "name": "T __init_clock_port",
    "type": "CPP"
  },
  {
    "name": "T _nanosleep$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _ftw$INODE64",
    "type": "CPP"
  },
  {
    "name": "t _both_ftw",
    "type": "CPP"
  },
  {
    "name": "T _nftw$INODE64",
    "type": "CPP"
  },
  {
    "name": "T _setlogin",
    "type": "CPP"
  },
  {
    "name": "T _sigemptyset",
    "type": "CPP"
  },
  {
    "name": "T _sigfillset",
    "type": "CPP"
  },
  {
    "name": "T _sigaddset",
    "type": "CPP"
  },
  {
    "name": "T _sigdelset",
    "type": "CPP"
  },
  {
    "name": "T _sigismember",
    "type": "CPP"
  },
  {
    "name": "T _fflagstostr",
    "type": "CPP"
  },
  {
    "name": "T _strtofflags",
    "type": "CPP"
  },
  {
    "name": "t __thread_stack_pcs",
    "type": "CPP"
  },
  {
    "name": "t ___thread_stack_pcs",
    "type": "CPP"
  },
  {
    "name": "T _thread_stack_pcs",
    "type": "CPP"
  },
  {
    "name": "T _uname",
    "type": "CPP"
  },
  {
    "name": "T _getlastlogx",
    "type": "CPP"
  },
  {
    "name": "t __pwuid_r",
    "type": "CPP"
  },
  {
    "name": "T _getlastlogxbyname",
    "type": "CPP"
  },
  {
    "name": "t __utmpx_asl",
    "type": "CPP"
  },
  {
    "name": "t __utmpx_working_copy",
    "type": "CPP"
  },
  {
    "name": "T _endutxent_wtmp",
    "type": "CPP"
  },
  {
    "name": "T _getutxent_wtmp",
    "type": "CPP"
  },
  {
    "name": "T _setutxent_wtmp",
    "type": "CPP"
  },
  {
    "name": "T _wtmpxname",
    "type": "CPP"
  },
  {
    "name": "t _end_asl",
    "type": "CPP"
  },
  {
    "name": "t _end_file",
    "type": "CPP"
  },
  {
    "name": "t _get_asl",
    "type": "CPP"
  },
  {
    "name": "t _set_asl",
    "type": "CPP"
  },
  {
    "name": "t _get_file",
    "type": "CPP"
  },
  {
    "name": "t _set_file",
    "type": "CPP"
  },
  {
    "name": "t __utmpx32_64",
    "type": "CPP"
  },
  {
    "name": "t __utmpx64_32",
    "type": "CPP"
  },
  {
    "name": "T __openutx",
    "type": "CPP"
  },
  {
    "name": "T __closeutx",
    "type": "CPP"
  },
  {
    "name": "t __os_debug_log_write_error",
    "type": "CPP"
  },
  {
    "name": "t __os_debug_log_init",
    "type": "CPP"
  },
  {
    "name": "t __os_debug_log_open_file",
    "type": "CPP"
  },
  {
    "name": "T _moninit",
    "type": "CPP"
  },
  {
    "name": "T _monstartup",
    "type": "CPP"
  },
  {
    "name": "T _monaddition",
    "type": "CPP"
  },
  {
    "name": "T _monreset",
    "type": "CPP"
  },
  {
    "name": "T _monoutput",
    "type": "CPP"
  },
  {
    "name": "T _monitor",
    "type": "CPP"
  },
  {
    "name": "T _moncontrol",
    "type": "CPP"
  },
  {
    "name": "T _moncount",
    "type": "CPP"
  },
  {
    "name": "T _isascii",
    "type": "CPP"
  },
  {
    "name": "T _isalnum",
    "type": "CPP"
  },
  {
    "name": "T _isalpha",
    "type": "CPP"
  },
  {
    "name": "T _isblank",
    "type": "CPP"
  },
  {
    "name": "T _iscntrl",
    "type": "CPP"
  },
  {
    "name": "T _isdigit",
    "type": "CPP"
  },
  {
    "name": "T _isgraph",
    "type": "CPP"
  },
  {
    "name": "T _islower",
    "type": "CPP"
  },
  {
    "name": "T _isprint",
    "type": "CPP"
  },
  {
    "name": "T _ispunct",
    "type": "CPP"
  },
  {
    "name": "T _isspace",
    "type": "CPP"
  },
  {
    "name": "T _isupper",
    "type": "CPP"
  },
  {
    "name": "T _isxdigit",
    "type": "CPP"
  },
  {
    "name": "T _toascii",
    "type": "CPP"
  },
  {
    "name": "T _tolower",
    "type": "CPP"
  },
  {
    "name": "T _toupper",
    "type": "CPP"
  },
  {
    "name": "T _digittoint",
    "type": "CPP"
  },
  {
    "name": "T _ishexnumber",
    "type": "CPP"
  },
  {
    "name": "T _isideogram",
    "type": "CPP"
  },
  {
    "name": "T _isnumber",
    "type": "CPP"
  },
  {
    "name": "T _isphonogram",
    "type": "CPP"
  },
  {
    "name": "T _isrune",
    "type": "CPP"
  },
  {
    "name": "T _isspecial",
    "type": "CPP"
  },
  {
    "name": "T _digittoint_l",
    "type": "CPP"
  },
  {
    "name": "T _isalnum_l",
    "type": "CPP"
  },
  {
    "name": "T _isalpha_l",
    "type": "CPP"
  },
  {
    "name": "T _isblank_l",
    "type": "CPP"
  },
  {
    "name": "T _iscntrl_l",
    "type": "CPP"
  },
  {
    "name": "T _isdigit_l",
    "type": "CPP"
  },
  {
    "name": "T _isgraph_l",
    "type": "CPP"
  },
  {
    "name": "T _ishexnumber_l",
    "type": "CPP"
  },
  {
    "name": "T _isideogram_l",
    "type": "CPP"
  },
  {
    "name": "T _islower_l",
    "type": "CPP"
  },
  {
    "name": "T _isnumber_l",
    "type": "CPP"
  },
  {
    "name": "T _isphonogram_l",
    "type": "CPP"
  },
  {
    "name": "T _isprint_l",
    "type": "CPP"
  },
  {
    "name": "T _ispunct_l",
    "type": "CPP"
  },
  {
    "name": "T _isrune_l",
    "type": "CPP"
  },
  {
    "name": "T _isspace_l",
    "type": "CPP"
  },
  {
    "name": "T _isspecial_l",
    "type": "CPP"
  },
  {
    "name": "T _isupper_l",
    "type": "CPP"
  },
  {
    "name": "T _isxdigit_l",
    "type": "CPP"
  },
  {
    "name": "T _tolower_l",
    "type": "CPP"
  },
  {
    "name": "T _toupper_l",
    "type": "CPP"
  },
  {
    "name": "T _bcopy",
    "type": "CPP"
  },
  {
    "name": "T _iswalnum",
    "type": "CPP"
  },
  {
    "name": "T _iswalpha",
    "type": "CPP"
  },
  {
    "name": "T _iswcntrl",
    "type": "CPP"
  },
  {
    "name": "T _iswctype",
    "type": "CPP"
  },
  {
    "name": "T _iswdigit",
    "type": "CPP"
  },
  {
    "name": "T _iswgraph",
    "type": "CPP"
  },
  {
    "name": "T _iswlower",
    "type": "CPP"
  },
  {
    "name": "T _iswprint",
    "type": "CPP"
  },
  {
    "name": "T _iswpunct",
    "type": "CPP"
  },
  {
    "name": "T _iswspace",
    "type": "CPP"
  },
  {
    "name": "T _iswupper",
    "type": "CPP"
  },
  {
    "name": "T _iswxdigit",
    "type": "CPP"
  },
  {
    "name": "T _towlower",
    "type": "CPP"
  },
  {
    "name": "T _towupper",
    "type": "CPP"
  },
  {
    "name": "T _iswalnum_l",
    "type": "CPP"
  },
  {
    "name": "T _iswalpha_l",
    "type": "CPP"
  },
  {
    "name": "T _iswcntrl_l",
    "type": "CPP"
  },
  {
    "name": "T _iswctype_l",
    "type": "CPP"
  },
  {
    "name": "T _iswdigit_l",
    "type": "CPP"
  },
  {
    "name": "T _iswgraph_l",
    "type": "CPP"
  },
  {
    "name": "T _iswlower_l",
    "type": "CPP"
  },
  {
    "name": "T _iswprint_l",
    "type": "CPP"
  },
  {
    "name": "T _iswpunct_l",
    "type": "CPP"
  },
  {
    "name": "T _iswspace_l",
    "type": "CPP"
  },
  {
    "name": "T _iswupper_l",
    "type": "CPP"
  },
  {
    "name": "T _iswxdigit_l",
    "type": "CPP"
  },
  {
    "name": "T _towlower_l",
    "type": "CPP"
  },
  {
    "name": "T _towupper_l",
    "type": "CPP"
  },
  {
    "name": "T _iswblank",
    "type": "CPP"
  },
  {
    "name": "T _iswascii",
    "type": "CPP"
  },
  {
    "name": "T _iswhexnumber",
    "type": "CPP"
  },
  {
    "name": "T _iswideogram",
    "type": "CPP"
  },
  {
    "name": "T _iswnumber",
    "type": "CPP"
  },
  {
    "name": "T _iswphonogram",
    "type": "CPP"
  },
  {
    "name": "T _iswrune",
    "type": "CPP"
  },
  {
    "name": "T _iswspecial",
    "type": "CPP"
  },
  {
    "name": "T _iswblank_l",
    "type": "CPP"
  },
  {
    "name": "T _iswhexnumber_l",
    "type": "CPP"
  },
  {
    "name": "T _iswideogram_l",
    "type": "CPP"
  },
  {
    "name": "T _iswnumber_l",
    "type": "CPP"
  },
  {
    "name": "T _iswphonogram_l",
    "type": "CPP"
  },
  {
    "name": "T _iswrune_l",
    "type": "CPP"
  },
  {
    "name": "T _iswspecial_l",
    "type": "CPP"
  },
  {
    "name": "T _duplocale",
    "type": "CPP"
  },
  {
    "name": "t __duplocale",
    "type": "CPP"
  },
  {
    "name": "T _freelocale",
    "type": "CPP"
  },
  {
    "name": "T _newlocale",
    "type": "CPP"
  },
  {
    "name": "t ___numeric_ctype",
    "type": "CPP"
  },
  {
    "name": "T _querylocale",
    "type": "CPP"
  },
  {
    "name": "T _uselocale",
    "type": "CPP"
  },
  {
    "name": "T ____mb_cur_max",
    "type": "CPP"
  },
  {
    "name": "T ____mb_cur_max_l",
    "type": "CPP"
  },
  {
    "name": "t ___xlocale_init",
    "type": "CPP"
  },
  {
    "name": "t ___xlocale_release",
    "type": "CPP"
  },
  {
    "name": "t __releaselocale",
    "type": "CPP"
  },
  {
    "name": "T _acl_dup",
    "type": "CPP"
  },
  {
    "name": "T _acl_free",
    "type": "CPP"
  },
  {
    "name": "T _acl_init",
    "type": "CPP"
  },
  {
    "name": "T _acl_valid",
    "type": "CPP"
  },
  {
    "name": "T _acl_valid_fd_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_valid_file_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_valid_link",
    "type": "CPP"
  },
  {
    "name": "T _acl_calc_mask",
    "type": "CPP"
  },
  {
    "name": "T _acl_copy_entry",
    "type": "CPP"
  },
  {
    "name": "T _acl_create_entry_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_create_entry",
    "type": "CPP"
  },
  {
    "name": "T _acl_delete_entry",
    "type": "CPP"
  },
  {
    "name": "T _acl_get_entry",
    "type": "CPP"
  },
  {
    "name": "T _acl_get_qualifier",
    "type": "CPP"
  },
  {
    "name": "T _acl_get_tag_type",
    "type": "CPP"
  },
  {
    "name": "T _acl_set_qualifier",
    "type": "CPP"
  },
  {
    "name": "T _acl_set_tag_type",
    "type": "CPP"
  },
  {
    "name": "T _acl_delete_fd_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_delete_file_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_delete_link_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_get_fd",
    "type": "CPP"
  },
  {
    "name": "T _acl_get_fd_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_get_file",
    "type": "CPP"
  },
  {
    "name": "t _acl_get_file1",
    "type": "CPP"
  },
  {
    "name": "T _acl_get_link_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_set_fd_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_set_fd",
    "type": "CPP"
  },
  {
    "name": "T _acl_set_file",
    "type": "CPP"
  },
  {
    "name": "T _acl_set_link_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_delete_def_file",
    "type": "CPP"
  },
  {
    "name": "T _acl_add_flag_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_clear_flags_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_delete_flag_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_get_flag_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_get_flagset_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_set_flagset_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_add_perm",
    "type": "CPP"
  },
  {
    "name": "T _acl_clear_perms",
    "type": "CPP"
  },
  {
    "name": "T _acl_delete_perm",
    "type": "CPP"
  },
  {
    "name": "T _acl_get_perm_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_get_permset",
    "type": "CPP"
  },
  {
    "name": "T _acl_set_permset",
    "type": "CPP"
  },
  {
    "name": "T _acl_maximal_permset_mask_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_get_permset_mask_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_set_permset_mask_np",
    "type": "CPP"
  },
  {
    "name": "T _acl_copy_ext",
    "type": "CPP"
  },
  {
    "name": "T _acl_size",
    "type": "CPP"
  },
  {
    "name": "T _acl_copy_ext_native",
    "type": "CPP"
  },
  {
    "name": "T _acl_copy_int",
    "type": "CPP"
  },
  {
    "name": "T _acl_copy_int_native",
    "type": "CPP"
  },
  {
    "name": "T _acl_from_text",
    "type": "CPP"
  },
  {
    "name": "T _acl_to_text",
    "type": "CPP"
  },
  {
    "name": "t _raosnprintf",
    "type": "CPP"
  },
  {
    "name": "T _getdate",
    "type": "CPP"
  },
  {
    "name": "t __st_get_timezone",
    "type": "CPP"
  },
  {
    "name": "t __st_set_timezone",
    "type": "CPP"
  },
  {
    "name": "T _asxprintf",
    "type": "CPP"
  },
  {
    "name": "T _dxprintf",
    "type": "CPP"
  },
  {
    "name": "T _fxprintf",
    "type": "CPP"
  },
  {
    "name": "T _sxprintf",
    "type": "CPP"
  },
  {
    "name": "T _xprintf",
    "type": "CPP"
  },
  {
    "name": "T _vasxprintf",
    "type": "CPP"
  },
  {
    "name": "T _vdxprintf",
    "type": "CPP"
  },
  {
    "name": "T _vfxprintf",
    "type": "CPP"
  },
  {
    "name": "T _vsxprintf",
    "type": "CPP"
  },
  {
    "name": "T _vxprintf",
    "type": "CPP"
  },
  {
    "name": "T _free_printf_comp",
    "type": "CPP"
  },
  {
    "name": "T _new_printf_comp",
    "type": "CPP"
  },
  {
    "name": "t ___xprintf_domain_init",
    "type": "CPP"
  },
  {
    "name": "T _copy_printf_domain",
    "type": "CPP"
  },
  {
    "name": "T _free_printf_domain",
    "type": "CPP"
  },
  {
    "name": "T _new_printf_domain",
    "type": "CPP"
  },
  {
    "name": "T _register_printf_domain_function",
    "type": "CPP"
  },
  {
    "name": "t _register_printf_domain_render",
    "type": "CPP"
  },
  {
    "name": "T _register_printf_domain_render_std",
    "type": "CPP"
  },
  {
    "name": "T _asxprintf_exec",
    "type": "CPP"
  },
  {
    "name": "T _dxprintf_exec",
    "type": "CPP"
  },
  {
    "name": "T _fxprintf_exec",
    "type": "CPP"
  },
  {
    "name": "T _sxprintf_exec",
    "type": "CPP"
  },
  {
    "name": "T _xprintf_exec",
    "type": "CPP"
  },
  {
    "name": "T _vasxprintf_exec",
    "type": "CPP"
  },
  {
    "name": "T _vdxprintf_exec",
    "type": "CPP"
  },
  {
    "name": "T _vfxprintf_exec",
    "type": "CPP"
  },
  {
    "name": "T _vsxprintf_exec",
    "type": "CPP"
  },
  {
    "name": "T _vxprintf_exec",
    "type": "CPP"
  },
  {
    "name": "T _fparseln",
    "type": "CPP"
  },
  {
    "name": "T _login_tty",
    "type": "CPP"
  },
  {
    "name": "T _logwtmp",
    "type": "CPP"
  },
  {
    "name": "T __mkpath_np",
    "type": "CPP"
  },
  {
    "name": "t __mkpath",
    "type": "CPP"
  },
  {
    "name": "T _mkpath_np",
    "type": "CPP"
  },
  {
    "name": "T _mkpathat_np",
    "type": "CPP"
  },
  {
    "name": "T _raise",
    "type": "CPP"
  },
  {
    "name": "T _opendev",
    "type": "CPP"
  },
  {
    "name": "t _opendev_namebuf_init",
    "type": "CPP"
  },
  {
    "name": "T _openpty",
    "type": "CPP"
  },
  {
    "name": "T _forkpty",
    "type": "CPP"
  },
  {
    "name": "T _uuid_clear",
    "type": "CPP"
  },
  {
    "name": "T _uuid_compare",
    "type": "CPP"
  },
  {
    "name": "T _uuid_copy",
    "type": "CPP"
  },
  {
    "name": "T _uuid_generate_time",
    "type": "CPP"
  },
  {
    "name": "T _uuid_generate_random",
    "type": "CPP"
  },
  {
    "name": "T _uuid_generate",
    "type": "CPP"
  },
  {
    "name": "T _uuid_is_null",
    "type": "CPP"
  },
  {
    "name": "T _uuid_pack",
    "type": "CPP"
  },
  {
    "name": "T _uuid_parse",
    "type": "CPP"
  },
  {
    "name": "T _uuid_unpack",
    "type": "CPP"
  },
  {
    "name": "T _uuid_unparse_lower",
    "type": "CPP"
  },
  {
    "name": "T _uuid_unparse_upper",
    "type": "CPP"
  },
  {
    "name": "T _uuid_unparse",
    "type": "CPP"
  },
  {
    "name": "T _tcgetsid",
    "type": "CPP"
  },
  {
    "name": "T __libc_initializer",
    "type": "CPP"
  },
  {
    "name": "T ___libc_init",
    "type": "CPP"
  },
  {
    "name": "T __libc_fork_child",
    "type": "CPP"
  },
  {
    "name": "T _chmodx_np",
    "type": "CPP"
  },
  {
    "name": "t _chmodx1",
    "type": "CPP"
  },
  {
    "name": "t _chmodx_syscall",
    "type": "CPP"
  },
  {
    "name": "T _fchmodx_np",
    "type": "CPP"
  },
  {
    "name": "t _fchmodx_syscall",
    "type": "CPP"
  },
  {
    "name": "T __NSGetArgv",
    "type": "CPP"
  },
  {
    "name": "T __NSGetArgc",
    "type": "CPP"
  },
  {
    "name": "T __NSGetEnviron",
    "type": "CPP"
  },
  {
    "name": "T __NSGetProgname",
    "type": "CPP"
  },
  {
    "name": "T __NSGetMachExecuteHeader",
    "type": "CPP"
  },
  {
    "name": "t __program_vars_init",
    "type": "CPP"
  },
  {
    "name": "t __libc_fork_init",
    "type": "CPP"
  },
  {
    "name": "T _fork",
    "type": "CPP"
  },
  {
    "name": "T _gettimeofday",
    "type": "CPP"
  },
  {
    "name": "T _openx_np",
    "type": "CPP"
  },
  {
    "name": "t __mkfilex_np",
    "type": "CPP"
  },
  {
    "name": "T _mkfifox_np",
    "type": "CPP"
  },
  {
    "name": "T _mkdirx_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnp",
    "type": "CPP"
  },
  {
    "name": "T _settimeofday",
    "type": "CPP"
  },
  {
    "name": "T _sigaction",
    "type": "CPP"
  },
  {
    "name": "T __sigaction_nobind",
    "type": "CPP"
  },
  {
    "name": "T _statx_np$INODE64",
    "type": "CPP"
  },
  {
    "name": "t _statx1",
    "type": "CPP"
  },
  {
    "name": "t _statx_syscall",
    "type": "CPP"
  },
  {
    "name": "T _fstatx_np$INODE64",
    "type": "CPP"
  },
  {
    "name": "t _fstatx_syscall",
    "type": "CPP"
  },
  {
    "name": "T _lstatx_np$INODE64",
    "type": "CPP"
  },
  {
    "name": "t _lstatx_syscall",
    "type": "CPP"
  },
  {
    "name": "T _statx64_np",
    "type": "CPP"
  },
  {
    "name": "T _fstatx64_np",
    "type": "CPP"
  },
  {
    "name": "T _lstatx64_np",
    "type": "CPP"
  },
  {
    "name": "T _umaskx_np",
    "type": "CPP"
  },
  {
    "name": "T _fgetrune",
    "type": "CPP"
  },
  {
    "name": "T _fungetrune",
    "type": "CPP"
  },
  {
    "name": "T _fputrune",
    "type": "CPP"
  },
  {
    "name": "T _mbrune",
    "type": "CPP"
  },
  {
    "name": "T _mbrrune",
    "type": "CPP"
  },
  {
    "name": "T _mbmb",
    "type": "CPP"
  },
  {
    "name": "t ___sgetrune",
    "type": "CPP"
  },
  {
    "name": "t ___sputrune",
    "type": "CPP"
  },
  {
    "name": "t _sgetrune",
    "type": "CPP"
  },
  {
    "name": "t _sputrune",
    "type": "CPP"
  },
  {
    "name": "T _setinvalidrune",
    "type": "CPP"
  },
  {
    "name": "T _login",
    "type": "CPP"
  },
  {
    "name": "T _logout",
    "type": "CPP"
  },
  {
    "name": "T _stpcpy",
    "type": "CPP"
  },
  {
    "name": "T _stpncpy",
    "type": "CPP"
  },
  {
    "name": "T _strcat",
    "type": "CPP"
  },
  {
    "name": "T _strncat",
    "type": "CPP"
  },
  {
    "name": "T _sync_volume_np",
    "type": "CPP"
  },
  {
    "name": "T _fsync_volume_np",
    "type": "CPP"
  },
  {
    "name": "T _dirfd",
    "type": "CPP"
  },
  {
    "name": "T __os_crash_fmt",
    "type": "CPP"
  },
  {
    "name": "T __os_avoid_tail_call",
    "type": "CPP"
  },
  {
    "name": "t __os_log_redirect",
    "type": "CPP"
  },
  {
    "name": "t __os_abort_on_assumes",
    "type": "CPP"
  },
  {
    "name": "T _creat$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _gethostid",
    "type": "CPP"
  },
  {
    "name": "T _getwd",
    "type": "CPP"
  },
  {
    "name": "T _killpg",
    "type": "CPP"
  },
  {
    "name": "T _sethostid",
    "type": "CPP"
  },
  {
    "name": "T _setpgrp",
    "type": "CPP"
  },
  {
    "name": "T _setrgid",
    "type": "CPP"
  },
  {
    "name": "T _setruid",
    "type": "CPP"
  },
  {
    "name": "T ___bt_close",
    "type": "CPP"
  },
  {
    "name": "T ___bt_sync",
    "type": "CPP"
  },
  {
    "name": "T ___bt_pgin",
    "type": "CPP"
  },
  {
    "name": "t _mswap",
    "type": "CPP"
  },
  {
    "name": "T ___bt_pgout",
    "type": "CPP"
  },
  {
    "name": "T ___bt_delete",
    "type": "CPP"
  },
  {
    "name": "T ___bt_dleaf",
    "type": "CPP"
  },
  {
    "name": "t ___bt_pdelete",
    "type": "CPP"
  },
  {
    "name": "t ___bt_relink",
    "type": "CPP"
  },
  {
    "name": "T ___bt_get",
    "type": "CPP"
  },
  {
    "name": "T ___bt_open",
    "type": "CPP"
  },
  {
    "name": "T ___bt_fd",
    "type": "CPP"
  },
  {
    "name": "T ___ovfl_get",
    "type": "CPP"
  },
  {
    "name": "T ___ovfl_put",
    "type": "CPP"
  },
  {
    "name": "T ___ovfl_delete",
    "type": "CPP"
  },
  {
    "name": "T ___bt_free",
    "type": "CPP"
  },
  {
    "name": "T ___bt_new",
    "type": "CPP"
  },
  {
    "name": "T ___bt_put",
    "type": "CPP"
  },
  {
    "name": "T ___bt_search",
    "type": "CPP"
  },
  {
    "name": "T ___bt_seq",
    "type": "CPP"
  },
  {
    "name": "T ___bt_setcur",
    "type": "CPP"
  },
  {
    "name": "t ___bt_first",
    "type": "CPP"
  },
  {
    "name": "T ___bt_split",
    "type": "CPP"
  },
  {
    "name": "t _bt_root",
    "type": "CPP"
  },
  {
    "name": "t _bt_page",
    "type": "CPP"
  },
  {
    "name": "t _bt_rroot",
    "type": "CPP"
  },
  {
    "name": "t _bt_broot",
    "type": "CPP"
  },
  {
    "name": "t _bt_preserve",
    "type": "CPP"
  },
  {
    "name": "t _bt_psplit",
    "type": "CPP"
  },
  {
    "name": "T ___bt_ret",
    "type": "CPP"
  },
  {
    "name": "T ___bt_cmp",
    "type": "CPP"
  },
  {
    "name": "T ___bt_defcmp",
    "type": "CPP"
  },
  {
    "name": "T ___bt_defpfx",
    "type": "CPP"
  },
  {
    "name": "T _dbopen",
    "type": "CPP"
  },
  {
    "name": "T ___dbpanic",
    "type": "CPP"
  },
  {
    "name": "t ___dberr",
    "type": "CPP"
  },
  {
    "name": "T ___hash_open",
    "type": "CPP"
  },
  {
    "name": "t _alloc_segs",
    "type": "CPP"
  },
  {
    "name": "t _hdestroy",
    "type": "CPP"
  },
  {
    "name": "t _hash_close",
    "type": "CPP"
  },
  {
    "name": "t _hash_delete",
    "type": "CPP"
  },
  {
    "name": "t _hash_fd",
    "type": "CPP"
  },
  {
    "name": "t _hash_get",
    "type": "CPP"
  },
  {
    "name": "t _hash_put",
    "type": "CPP"
  },
  {
    "name": "t _hash_seq",
    "type": "CPP"
  },
  {
    "name": "t _hash_sync",
    "type": "CPP"
  },
  {
    "name": "T ___expand_table",
    "type": "CPP"
  },
  {
    "name": "T ___call_hash",
    "type": "CPP"
  },
  {
    "name": "t _flush_meta",
    "type": "CPP"
  },
  {
    "name": "t _hash_access",
    "type": "CPP"
  },
  {
    "name": "T ___big_insert",
    "type": "CPP"
  },
  {
    "name": "T ___big_delete",
    "type": "CPP"
  },
  {
    "name": "T ___find_bigpair",
    "type": "CPP"
  },
  {
    "name": "T ___find_last_page",
    "type": "CPP"
  },
  {
    "name": "T ___big_return",
    "type": "CPP"
  },
  {
    "name": "t _collect_data",
    "type": "CPP"
  },
  {
    "name": "T ___big_keydata",
    "type": "CPP"
  },
  {
    "name": "t _collect_key",
    "type": "CPP"
  },
  {
    "name": "T ___big_split",
    "type": "CPP"
  },
  {
    "name": "T ___get_buf",
    "type": "CPP"
  },
  {
    "name": "t ___buf_init",
    "type": "CPP"
  },
  {
    "name": "T ___buf_free",
    "type": "CPP"
  },
  {
    "name": "T ___reclaim_buf",
    "type": "CPP"
  },
  {
    "name": "t _hash4",
    "type": "CPP"
  },
  {
    "name": "T ___log2",
    "type": "CPP"
  },
  {
    "name": "T ___delpair",
    "type": "CPP"
  },
  {
    "name": "T ___split_page",
    "type": "CPP"
  },
  {
    "name": "t _putpair",
    "type": "CPP"
  },
  {
    "name": "T ___addel",
    "type": "CPP"
  },
  {
    "name": "T ___add_ovflpage",
    "type": "CPP"
  },
  {
    "name": "T ___get_page",
    "type": "CPP"
  },
  {
    "name": "T ___put_page",
    "type": "CPP"
  },
  {
    "name": "T ___ibitmap",
    "type": "CPP"
  },
  {
    "name": "T ___free_ovflpage",
    "type": "CPP"
  },
  {
    "name": "t _fetch_bitmap",
    "type": "CPP"
  },
  {
    "name": "T _dbm_open",
    "type": "CPP"
  },
  {
    "name": "T _dbm_close",
    "type": "CPP"
  },
  {
    "name": "T _dbm_fetch",
    "type": "CPP"
  },
  {
    "name": "T _dbm_firstkey",
    "type": "CPP"
  },
  {
    "name": "T _dbm_nextkey",
    "type": "CPP"
  },
  {
    "name": "T _dbm_delete",
    "type": "CPP"
  },
  {
    "name": "T _dbm_store",
    "type": "CPP"
  },
  {
    "name": "T _dbm_error",
    "type": "CPP"
  },
  {
    "name": "T _dbm_clearerr",
    "type": "CPP"
  },
  {
    "name": "T _dbm_dirfno",
    "type": "CPP"
  },
  {
    "name": "T _mpool_open",
    "type": "CPP"
  },
  {
    "name": "T _mpool_filter",
    "type": "CPP"
  },
  {
    "name": "T _mpool_new",
    "type": "CPP"
  },
  {
    "name": "t _mpool_bkt",
    "type": "CPP"
  },
  {
    "name": "T _mpool_get",
    "type": "CPP"
  },
  {
    "name": "T _mpool_put",
    "type": "CPP"
  },
  {
    "name": "T _mpool_close",
    "type": "CPP"
  },
  {
    "name": "T _mpool_sync",
    "type": "CPP"
  },
  {
    "name": "t _mpool_write",
    "type": "CPP"
  },
  {
    "name": "T ___rec_close",
    "type": "CPP"
  },
  {
    "name": "T ___rec_sync",
    "type": "CPP"
  },
  {
    "name": "T ___rec_delete",
    "type": "CPP"
  },
  {
    "name": "t _rec_rdelete",
    "type": "CPP"
  },
  {
    "name": "T ___rec_dleaf",
    "type": "CPP"
  },
  {
    "name": "T ___rec_get",
    "type": "CPP"
  },
  {
    "name": "T ___rec_fpipe",
    "type": "CPP"
  },
  {
    "name": "T ___rec_vpipe",
    "type": "CPP"
  },
  {
    "name": "T ___rec_fmap",
    "type": "CPP"
  },
  {
    "name": "T ___rec_vmap",
    "type": "CPP"
  },
  {
    "name": "T ___rec_open",
    "type": "CPP"
  },
  {
    "name": "T ___rec_fd",
    "type": "CPP"
  },
  {
    "name": "T ___rec_put",
    "type": "CPP"
  },
  {
    "name": "T ___rec_iput",
    "type": "CPP"
  },
  {
    "name": "T ___rec_search",
    "type": "CPP"
  },
  {
    "name": "T ___rec_seq",
    "type": "CPP"
  },
  {
    "name": "T ___rec_ret",
    "type": "CPP"
  },
  {
    "name": "T _timingsafe_bcmp",
    "type": "CPP"
  },
  {
    "name": "T ___hdtoa",
    "type": "CPP"
  },
  {
    "name": "t _dorounding",
    "type": "CPP"
  },
  {
    "name": "T ___hldtoa",
    "type": "CPP"
  },
  {
    "name": "T ___rv_alloc_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___nrv_alloc_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___freedtoa",
    "type": "CPP"
  },
  {
    "name": "T ___quorem_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___dtoa",
    "type": "CPP"
  },
  {
    "name": "T ___gdtoa",
    "type": "CPP"
  },
  {
    "name": "T ___gethex_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___rshift_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___trailz_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___hexdig_init_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___hexnan_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___Balloc_D2A",
    "type": "CPP"
  },
  {
    "name": "t _gdtoa_freelist_free",
    "type": "CPP"
  },
  {
    "name": "T ___Bfree_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___lo0bits_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___multadd_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___hi0bits_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___i2b_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___mult_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___pow5mult_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___lshift_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___cmp_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___diff_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___b2d_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___d2b_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___strcp_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___s2b_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___ratio_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___match_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___copybits_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___any_on_D2A",
    "type": "CPP"
  },
  {
    "name": "T _strtod_l",
    "type": "CPP"
  },
  {
    "name": "T _strtod",
    "type": "CPP"
  },
  {
    "name": "T ___increment_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___decrement_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___set_ones_D2A",
    "type": "CPP"
  },
  {
    "name": "t ___rvOK_D2A",
    "type": "CPP"
  },
  {
    "name": "t ___mantbits_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___strtodg",
    "type": "CPP"
  },
  {
    "name": "T _strtof_l",
    "type": "CPP"
  },
  {
    "name": "T _strtof",
    "type": "CPP"
  },
  {
    "name": "T ___strtopdd",
    "type": "CPP"
  },
  {
    "name": "T ___strtopx",
    "type": "CPP"
  },
  {
    "name": "T ___ULtod_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___sum_D2A",
    "type": "CPP"
  },
  {
    "name": "T ___ulp_D2A",
    "type": "CPP"
  },
  {
    "name": "T _alarm",
    "type": "CPP"
  },
  {
    "name": "T _arc4random_addrandom",
    "type": "CPP"
  },
  {
    "name": "T _arc4random",
    "type": "CPP"
  },
  {
    "name": "T _arc4random_buf",
    "type": "CPP"
  },
  {
    "name": "t _arc4_init",
    "type": "CPP"
  },
  {
    "name": "T _arc4random_stir",
    "type": "CPP"
  },
  {
    "name": "T _arc4random_uniform",
    "type": "CPP"
  },
  {
    "name": "t __arc4_fork_child",
    "type": "CPP"
  },
  {
    "name": "T _basename_r",
    "type": "CPP"
  },
  {
    "name": "T _basename",
    "type": "CPP"
  },
  {
    "name": "T _clock",
    "type": "CPP"
  },
  {
    "name": "T _closedir",
    "type": "CPP"
  },
  {
    "name": "T _ctermid",
    "type": "CPP"
  },
  {
    "name": "T _ctermid_r",
    "type": "CPP"
  },
  {
    "name": "T _daemon$1050",
    "type": "CPP"
  },
  {
    "name": "T _dirname_r",
    "type": "CPP"
  },
  {
    "name": "T _dirname",
    "type": "CPP"
  },
  {
    "name": "T _drand48",
    "type": "CPP"
  },
  {
    "name": "T _erand48",
    "type": "CPP"
  },
  {
    "name": "t __e_visprintf",
    "type": "CPP"
  },
  {
    "name": "T _err_set_file",
    "type": "CPP"
  },
  {
    "name": "T _err_set_exit",
    "type": "CPP"
  },
  {
    "name": "T _err_set_exit_b",
    "type": "CPP"
  },
  {
    "name": "T _execl",
    "type": "CPP"
  },
  {
    "name": "T _execle",
    "type": "CPP"
  },
  {
    "name": "T _execlp",
    "type": "CPP"
  },
  {
    "name": "T _execvp",
    "type": "CPP"
  },
  {
    "name": "T _execv",
    "type": "CPP"
  },
  {
    "name": "T _execvP",
    "type": "CPP"
  },
  {
    "name": "t _execvPe",
    "type": "CPP"
  },
  {
    "name": "T _fmtcheck",
    "type": "CPP"
  },
  {
    "name": "t _get_next_format",
    "type": "CPP"
  },
  {
    "name": "t _get_next_format_from_width",
    "type": "CPP"
  },
  {
    "name": "t _get_next_format_from_precision",
    "type": "CPP"
  },
  {
    "name": "T _fmtmsg",
    "type": "CPP"
  },
  {
    "name": "t _printfmt",
    "type": "CPP"
  },
  {
    "name": "t _nextcomp",
    "type": "CPP"
  },
  {
    "name": "T _fnmatch",
    "type": "CPP"
  },
  {
    "name": "t _fnmatch1",
    "type": "CPP"
  },
  {
    "name": "t _rangematch",
    "type": "CPP"
  },
  {
    "name": "T _ftok",
    "type": "CPP"
  },
  {
    "name": "T _getbsize",
    "type": "CPP"
  },
  {
    "name": "T _cgetset",
    "type": "CPP"
  },
  {
    "name": "T _cgetcap",
    "type": "CPP"
  },
  {
    "name": "T _cgetent",
    "type": "CPP"
  },
  {
    "name": "t _getent",
    "type": "CPP"
  },
  {
    "name": "T _cgetmatch",
    "type": "CPP"
  },
  {
    "name": "T _cgetfirst",
    "type": "CPP"
  },
  {
    "name": "T _cgetclose",
    "type": "CPP"
  },
  {
    "name": "T _cgetnext",
    "type": "CPP"
  },
  {
    "name": "T _cgetstr",
    "type": "CPP"
  },
  {
    "name": "T _cgetustr",
    "type": "CPP"
  },
  {
    "name": "T _cgetnum",
    "type": "CPP"
  },
  {
    "name": "t ___private_getcwd",
    "type": "CPP"
  },
  {
    "name": "t ___getcwd",
    "type": "CPP"
  },
  {
    "name": "T _getcwd",
    "type": "CPP"
  },
  {
    "name": "T _gethostname",
    "type": "CPP"
  },
  {
    "name": "T _getlogin",
    "type": "CPP"
  },
  {
    "name": "t _getlogin_basic",
    "type": "CPP"
  },
  {
    "name": "T _getlogin_r",
    "type": "CPP"
  },
  {
    "name": "T _getmntinfo$INODE64",
    "type": "CPP"
  },
  {
    "name": "t _getmntinfo_internal",
    "type": "CPP"
  },
  {
    "name": "T _getmntinfo_r_np$INODE64",
    "type": "CPP"
  },
  {
    "name": "T _getpagesize",
    "type": "CPP"
  },
  {
    "name": "T _getpeereid",
    "type": "CPP"
  },
  {
    "name": "T _getprogname",
    "type": "CPP"
  },
  {
    "name": "T _glob$INODE64",
    "type": "CPP"
  },
  {
    "name": "t ___glob",
    "type": "CPP"
  },
  {
    "name": "T _glob_b$INODE64",
    "type": "CPP"
  },
  {
    "name": "t ___gl_globtilde",
    "type": "CPP"
  },
  {
    "name": "t ___gl_g_Ctoc",
    "type": "CPP"
  },
  {
    "name": "t ___gl_compare",
    "type": "CPP"
  },
  {
    "name": "t ___gl_globextend",
    "type": "CPP"
  },
  {
    "name": "t ___gl_match",
    "type": "CPP"
  },
  {
    "name": "T _globfree",
    "type": "CPP"
  },
  {
    "name": "t ___gl_g_strchr",
    "type": "CPP"
  },
  {
    "name": "t _glob0",
    "type": "CPP"
  },
  {
    "name": "t _globexp1",
    "type": "CPP"
  },
  {
    "name": "t _globfinal",
    "type": "CPP"
  },
  {
    "name": "t _glob2",
    "type": "CPP"
  },
  {
    "name": "t _err_aborted",
    "type": "CPP"
  },
  {
    "name": "T _isatty",
    "type": "CPP"
  },
  {
    "name": "T _jrand48",
    "type": "CPP"
  },
  {
    "name": "T _lcong48",
    "type": "CPP"
  },
  {
    "name": "T _lockf$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _lrand48",
    "type": "CPP"
  },
  {
    "name": "T _mrand48",
    "type": "CPP"
  },
  {
    "name": "T _nice",
    "type": "CPP"
  },
  {
    "name": "T _nrand48",
    "type": "CPP"
  },
  {
    "name": "T _opendir$INODE64",
    "type": "CPP"
  },
  {
    "name": "T ___opendir2$INODE64",
    "type": "CPP"
  },
  {
    "name": "T _fdopendir$INODE64",
    "type": "CPP"
  },
  {
    "name": "t ___opendir_common",
    "type": "CPP"
  },
  {
    "name": "t __filldir$INODE64",
    "type": "CPP"
  },
  {
    "name": "t _opendir_compar",
    "type": "CPP"
  },
  {
    "name": "T _pause$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _popen",
    "type": "CPP"
  },
  {
    "name": "T _pclose",
    "type": "CPP"
  },
  {
    "name": "T _psignal",
    "type": "CPP"
  },
  {
    "name": "T __readdir_unlocked$INODE64",
    "type": "CPP"
  },
  {
    "name": "T _readdir$INODE64",
    "type": "CPP"
  },
  {
    "name": "T _readdir_r$INODE64",
    "type": "CPP"
  },
  {
    "name": "T _readpassphrase",
    "type": "CPP"
  },
  {
    "name": "t _handler",
    "type": "CPP"
  },
  {
    "name": "T _getpass",
    "type": "CPP"
  },
  {
    "name": "T _rewinddir$INODE64",
    "type": "CPP"
  },
  {
    "name": "T _scandir$INODE64",
    "type": "CPP"
  },
  {
    "name": "T _alphasort$INODE64",
    "type": "CPP"
  },
  {
    "name": "T _seed48",
    "type": "CPP"
  },
  {
    "name": "T _seekdir$INODE64",
    "type": "CPP"
  },
  {
    "name": "T _sethostname",
    "type": "CPP"
  },
  {
    "name": "T _getmode",
    "type": "CPP"
  },
  {
    "name": "T _setmode",
    "type": "CPP"
  },
  {
    "name": "t _addcmd",
    "type": "CPP"
  },
  {
    "name": "t __sm_compress_mode",
    "type": "CPP"
  },
  {
    "name": "T _setprogname",
    "type": "CPP"
  },
  {
    "name": "T _siginterrupt",
    "type": "CPP"
  },
  {
    "name": "T _signal",
    "type": "CPP"
  },
  {
    "name": "t _signal__",
    "type": "CPP"
  },
  {
    "name": "T __signal_nobind",
    "type": "CPP"
  },
  {
    "name": "T _sleep$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _srand48",
    "type": "CPP"
  },
  {
    "name": "T _sl_init",
    "type": "CPP"
  },
  {
    "name": "T _sl_add",
    "type": "CPP"
  },
  {
    "name": "T _sl_free",
    "type": "CPP"
  },
  {
    "name": "T _sl_find",
    "type": "CPP"
  },
  {
    "name": "T _sysconf",
    "type": "CPP"
  },
  {
    "name": "T _sysctl",
    "type": "CPP"
  },
  {
    "name": "T _sysctlbyname",
    "type": "CPP"
  },
  {
    "name": "T _sysctlnametomib",
    "type": "CPP"
  },
  {
    "name": "T _telldir$INODE64",
    "type": "CPP"
  },
  {
    "name": "T __seekdir$INODE64",
    "type": "CPP"
  },
  {
    "name": "t __fixtelldir$INODE64",
    "type": "CPP"
  },
  {
    "name": "T __reclaim_telldir",
    "type": "CPP"
  },
  {
    "name": "T _tcgetattr",
    "type": "CPP"
  },
  {
    "name": "T _tcsetattr",
    "type": "CPP"
  },
  {
    "name": "T _tcsetpgrp",
    "type": "CPP"
  },
  {
    "name": "T _tcgetpgrp",
    "type": "CPP"
  },
  {
    "name": "T _cfgetospeed",
    "type": "CPP"
  },
  {
    "name": "T _cfgetispeed",
    "type": "CPP"
  },
  {
    "name": "T _cfsetospeed",
    "type": "CPP"
  },
  {
    "name": "T _cfsetispeed",
    "type": "CPP"
  },
  {
    "name": "T _cfsetspeed",
    "type": "CPP"
  },
  {
    "name": "T _cfmakeraw",
    "type": "CPP"
  },
  {
    "name": "T _tcsendbreak",
    "type": "CPP"
  },
  {
    "name": "T _tcdrain$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _tcflush",
    "type": "CPP"
  },
  {
    "name": "T _tcflow",
    "type": "CPP"
  },
  {
    "name": "T _time",
    "type": "CPP"
  },
  {
    "name": "T _times",
    "type": "CPP"
  },
  {
    "name": "T _ttyname",
    "type": "CPP"
  },
  {
    "name": "T _ttyname_r",
    "type": "CPP"
  },
  {
    "name": "T _ttyslot",
    "type": "CPP"
  },
  {
    "name": "T _ualarm",
    "type": "CPP"
  },
  {
    "name": "T _ulimit",
    "type": "CPP"
  },
  {
    "name": "T _unvis",
    "type": "CPP"
  },
  {
    "name": "T _strnunvisx",
    "type": "CPP"
  },
  {
    "name": "T _strunvisx",
    "type": "CPP"
  },
  {
    "name": "T _strunvis",
    "type": "CPP"
  },
  {
    "name": "T _strnunvis",
    "type": "CPP"
  },
  {
    "name": "T _usleep$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _utime",
    "type": "CPP"
  },
  {
    "name": "T _svis",
    "type": "CPP"
  },
  {
    "name": "t _istrsenvisx",
    "type": "CPP"
  },
  {
    "name": "T _snvis",
    "type": "CPP"
  },
  {
    "name": "T _strsvis",
    "type": "CPP"
  },
  {
    "name": "t _istrsenvisxl",
    "type": "CPP"
  },
  {
    "name": "T _strsnvis",
    "type": "CPP"
  },
  {
    "name": "T _strsvisx",
    "type": "CPP"
  },
  {
    "name": "T _strsnvisx",
    "type": "CPP"
  },
  {
    "name": "T _strsenvisx",
    "type": "CPP"
  },
  {
    "name": "T _vis",
    "type": "CPP"
  },
  {
    "name": "T _nvis",
    "type": "CPP"
  },
  {
    "name": "T _strvis",
    "type": "CPP"
  },
  {
    "name": "T _strnvis",
    "type": "CPP"
  },
  {
    "name": "T _strvisx",
    "type": "CPP"
  },
  {
    "name": "T _strnvisx",
    "type": "CPP"
  },
  {
    "name": "T _strenvisx",
    "type": "CPP"
  },
  {
    "name": "t _do_hvis",
    "type": "CPP"
  },
  {
    "name": "t _do_mvis",
    "type": "CPP"
  },
  {
    "name": "t _do_svis",
    "type": "CPP"
  },
  {
    "name": "T _wait$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _wait3",
    "type": "CPP"
  },
  {
    "name": "T _waitpid$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "t __ascii_init",
    "type": "CPP"
  },
  {
    "name": "t __ascii_mbrtowc",
    "type": "CPP"
  },
  {
    "name": "t __ascii_mbsinit",
    "type": "CPP"
  },
  {
    "name": "t __ascii_mbsnrtowcs",
    "type": "CPP"
  },
  {
    "name": "t __ascii_wcrtomb",
    "type": "CPP"
  },
  {
    "name": "t __ascii_wcsnrtombs",
    "type": "CPP"
  },
  {
    "name": "t __BIG5_init",
    "type": "CPP"
  },
  {
    "name": "t __BIG5_mbrtowc",
    "type": "CPP"
  },
  {
    "name": "t __BIG5_wcrtomb",
    "type": "CPP"
  },
  {
    "name": "t __BIG5_mbsinit",
    "type": "CPP"
  },
  {
    "name": "T _btowc_l",
    "type": "CPP"
  },
  {
    "name": "T _btowc",
    "type": "CPP"
  },
  {
    "name": "t ___collate_load_tables",
    "type": "CPP"
  },
  {
    "name": "t ___collate_substitute",
    "type": "CPP"
  },
  {
    "name": "t ___collate_wcsdup",
    "type": "CPP"
  },
  {
    "name": "t ___collate_err",
    "type": "CPP"
  },
  {
    "name": "t ___collate_lookup_l",
    "type": "CPP"
  },
  {
    "name": "t _chainsearch",
    "type": "CPP"
  },
  {
    "name": "t _largesearch",
    "type": "CPP"
  },
  {
    "name": "T ___collate_lookup",
    "type": "CPP"
  },
  {
    "name": "t ___collate_mbstowcs",
    "type": "CPP"
  },
  {
    "name": "t ___collate_lookup_which",
    "type": "CPP"
  },
  {
    "name": "t ___collate_xfrm",
    "type": "CPP"
  },
  {
    "name": "t ___collate_collating_symbol",
    "type": "CPP"
  },
  {
    "name": "t ___collate_equiv_class",
    "type": "CPP"
  },
  {
    "name": "T ___collate_equiv_match",
    "type": "CPP"
  },
  {
    "name": "t ___collate_equiv_value",
    "type": "CPP"
  },
  {
    "name": "t ___collate_range_cmp",
    "type": "CPP"
  },
  {
    "name": "t __EUC_init",
    "type": "CPP"
  },
  {
    "name": "t __EUC_mbrtowc",
    "type": "CPP"
  },
  {
    "name": "t __EUC_wcrtomb",
    "type": "CPP"
  },
  {
    "name": "t __EUC_mbsinit",
    "type": "CPP"
  },
  {
    "name": "t __EUC_free_extra",
    "type": "CPP"
  },
  {
    "name": "T ___fix_locale_grouping_str",
    "type": "CPP"
  },
  {
    "name": "t ___fix_nogrouping",
    "type": "CPP"
  },
  {
    "name": "t __GB18030_init",
    "type": "CPP"
  },
  {
    "name": "t __GB18030_mbrtowc",
    "type": "CPP"
  },
  {
    "name": "t __GB18030_wcrtomb",
    "type": "CPP"
  },
  {
    "name": "t __GB18030_mbsinit",
    "type": "CPP"
  },
  {
    "name": "t __GB2312_init",
    "type": "CPP"
  },
  {
    "name": "t __GB2312_mbrtowc",
    "type": "CPP"
  },
  {
    "name": "t __GB2312_wcrtomb",
    "type": "CPP"
  },
  {
    "name": "t __GB2312_mbsinit",
    "type": "CPP"
  },
  {
    "name": "t __GBK_init",
    "type": "CPP"
  },
  {
    "name": "t __GBK_mbrtowc",
    "type": "CPP"
  },
  {
    "name": "t __GBK_wcrtomb",
    "type": "CPP"
  },
  {
    "name": "t __GBK_mbsinit",
    "type": "CPP"
  },
  {
    "name": "t ___part_load_locale",
    "type": "CPP"
  },
  {
    "name": "t ___ldpart_free_extra",
    "type": "CPP"
  },
  {
    "name": "t ___messages_load_locale",
    "type": "CPP"
  },
  {
    "name": "t ___get_current_messages_locale",
    "type": "CPP"
  },
  {
    "name": "t ___monetary_load_locale",
    "type": "CPP"
  },
  {
    "name": "t ___get_current_monetary_locale",
    "type": "CPP"
  },
  {
    "name": "t ___numeric_load_locale",
    "type": "CPP"
  },
  {
    "name": "t ___get_current_numeric_locale",
    "type": "CPP"
  },
  {
    "name": "T ___getonlyClocaleconv",
    "type": "CPP"
  },
  {
    "name": "T ___setonlyClocaleconv",
    "type": "CPP"
  },
  {
    "name": "T _localeconv_l",
    "type": "CPP"
  },
  {
    "name": "T _localeconv",
    "type": "CPP"
  },
  {
    "name": "T _mblen_l",
    "type": "CPP"
  },
  {
    "name": "T _mblen",
    "type": "CPP"
  },
  {
    "name": "T _mbrlen_l",
    "type": "CPP"
  },
  {
    "name": "T _mbrlen",
    "type": "CPP"
  },
  {
    "name": "T _mbrtowc_l",
    "type": "CPP"
  },
  {
    "name": "T _mbrtowc",
    "type": "CPP"
  },
  {
    "name": "T _mbsinit_l",
    "type": "CPP"
  },
  {
    "name": "T _mbsinit",
    "type": "CPP"
  },
  {
    "name": "T _mbsnrtowcs_l",
    "type": "CPP"
  },
  {
    "name": "T _mbsnrtowcs",
    "type": "CPP"
  },
  {
    "name": "t ___mbsnrtowcs_std",
    "type": "CPP"
  },
  {
    "name": "T _mbsrtowcs_l",
    "type": "CPP"
  },
  {
    "name": "T _mbsrtowcs",
    "type": "CPP"
  },
  {
    "name": "T _mbstowcs_l",
    "type": "CPP"
  },
  {
    "name": "T _mbstowcs",
    "type": "CPP"
  },
  {
    "name": "T _mbtowc_l",
    "type": "CPP"
  },
  {
    "name": "T _mbtowc",
    "type": "CPP"
  },
  {
    "name": "t __MSKanji_init",
    "type": "CPP"
  },
  {
    "name": "t __MSKanji_mbrtowc",
    "type": "CPP"
  },
  {
    "name": "t __MSKanji_wcrtomb",
    "type": "CPP"
  },
  {
    "name": "t __MSKanji_mbsinit",
    "type": "CPP"
  },
  {
    "name": "T _nextwctype_l",
    "type": "CPP"
  },
  {
    "name": "T _nextwctype",
    "type": "CPP"
  },
  {
    "name": "T _nl_langinfo_l",
    "type": "CPP"
  },
  {
    "name": "T _nl_langinfo",
    "type": "CPP"
  },
  {
    "name": "T ___maskrune",
    "type": "CPP"
  },
  {
    "name": "T ___istype",
    "type": "CPP"
  },
  {
    "name": "T ___isctype",
    "type": "CPP"
  },
  {
    "name": "T ___toupper",
    "type": "CPP"
  },
  {
    "name": "T ___tolower",
    "type": "CPP"
  },
  {
    "name": "T ___wcwidth",
    "type": "CPP"
  },
  {
    "name": "T ___maskrune_l",
    "type": "CPP"
  },
  {
    "name": "T ___istype_l",
    "type": "CPP"
  },
  {
    "name": "T ___toupper_l",
    "type": "CPP"
  },
  {
    "name": "T ___tolower_l",
    "type": "CPP"
  },
  {
    "name": "T ___wcwidth_l",
    "type": "CPP"
  },
  {
    "name": "t __none_init",
    "type": "CPP"
  },
  {
    "name": "t __none_mbrtowc",
    "type": "CPP"
  },
  {
    "name": "t __none_mbsinit",
    "type": "CPP"
  },
  {
    "name": "t __none_mbsnrtowcs",
    "type": "CPP"
  },
  {
    "name": "t __none_wcrtomb",
    "type": "CPP"
  },
  {
    "name": "t __none_wcsnrtombs",
    "type": "CPP"
  },
  {
    "name": "T ____runetype_l",
    "type": "CPP"
  },
  {
    "name": "T ____runetype",
    "type": "CPP"
  },
  {
    "name": "T _setlocale",
    "type": "CPP"
  },
  {
    "name": "t _currentlocale",
    "type": "CPP"
  },
  {
    "name": "t ___get_locale_env",
    "type": "CPP"
  },
  {
    "name": "t _loadlocale",
    "type": "CPP"
  },
  {
    "name": "t ___detect_path_locale",
    "type": "CPP"
  },
  {
    "name": "t ___open_path_locale",
    "type": "CPP"
  },
  {
    "name": "t ___setrunelocale",
    "type": "CPP"
  },
  {
    "name": "T _setrunelocale",
    "type": "CPP"
  },
  {
    "name": "t ___wrap_setrunelocale",
    "type": "CPP"
  },
  {
    "name": "T ____tolower_l",
    "type": "CPP"
  },
  {
    "name": "T ____tolower",
    "type": "CPP"
  },
  {
    "name": "T ____toupper_l",
    "type": "CPP"
  },
  {
    "name": "T ____toupper",
    "type": "CPP"
  },
  {
    "name": "t __UTF8_init",
    "type": "CPP"
  },
  {
    "name": "t __UTF8_mbrtowc",
    "type": "CPP"
  },
  {
    "name": "t __UTF8_wcrtomb",
    "type": "CPP"
  },
  {
    "name": "t __UTF8_mbsinit",
    "type": "CPP"
  },
  {
    "name": "t __UTF8_mbsnrtowcs",
    "type": "CPP"
  },
  {
    "name": "t __UTF8_wcsnrtombs",
    "type": "CPP"
  },
  {
    "name": "T _wcrtomb_l",
    "type": "CPP"
  },
  {
    "name": "T _wcrtomb",
    "type": "CPP"
  },
  {
    "name": "T _wcsftime_l",
    "type": "CPP"
  },
  {
    "name": "T _wcsftime",
    "type": "CPP"
  },
  {
    "name": "T _wcsnrtombs_l",
    "type": "CPP"
  },
  {
    "name": "T _wcsnrtombs",
    "type": "CPP"
  },
  {
    "name": "t ___wcsnrtombs_std",
    "type": "CPP"
  },
  {
    "name": "T _wcsrtombs_l",
    "type": "CPP"
  },
  {
    "name": "T _wcsrtombs",
    "type": "CPP"
  },
  {
    "name": "t ___wcs_end_offset",
    "type": "CPP"
  },
  {
    "name": "T _wcstod_l",
    "type": "CPP"
  },
  {
    "name": "T _wcstod",
    "type": "CPP"
  },
  {
    "name": "T _wcstof_l",
    "type": "CPP"
  },
  {
    "name": "T _wcstof",
    "type": "CPP"
  },
  {
    "name": "T _wcstoimax_l",
    "type": "CPP"
  },
  {
    "name": "T _wcstoimax",
    "type": "CPP"
  },
  {
    "name": "T _wcstol_l",
    "type": "CPP"
  },
  {
    "name": "T _wcstol",
    "type": "CPP"
  },
  {
    "name": "T _wcstold_l",
    "type": "CPP"
  },
  {
    "name": "T _wcstold",
    "type": "CPP"
  },
  {
    "name": "T _wcstoll_l",
    "type": "CPP"
  },
  {
    "name": "T _wcstoll",
    "type": "CPP"
  },
  {
    "name": "T _wcstombs_l",
    "type": "CPP"
  },
  {
    "name": "T _wcstombs",
    "type": "CPP"
  },
  {
    "name": "T _wcstoul_l",
    "type": "CPP"
  },
  {
    "name": "T _wcstoul",
    "type": "CPP"
  },
  {
    "name": "T _wcstoull_l",
    "type": "CPP"
  },
  {
    "name": "T _wcstoull",
    "type": "CPP"
  },
  {
    "name": "T _wcstoumax_l",
    "type": "CPP"
  },
  {
    "name": "T _wcstoumax",
    "type": "CPP"
  },
  {
    "name": "T _wctob_l",
    "type": "CPP"
  },
  {
    "name": "T _wctob",
    "type": "CPP"
  },
  {
    "name": "T _wctomb_l",
    "type": "CPP"
  },
  {
    "name": "T _wctomb",
    "type": "CPP"
  },
  {
    "name": "T _towctrans_l",
    "type": "CPP"
  },
  {
    "name": "T _towctrans",
    "type": "CPP"
  },
  {
    "name": "T _wctrans",
    "type": "CPP"
  },
  {
    "name": "T _wctrans_l",
    "type": "CPP"
  },
  {
    "name": "T _wctype_l",
    "type": "CPP"
  },
  {
    "name": "T _wctype",
    "type": "CPP"
  },
  {
    "name": "T _wcwidth",
    "type": "CPP"
  },
  {
    "name": "T _wcwidth_l",
    "type": "CPP"
  },
  {
    "name": "T _addr2ascii",
    "type": "CPP"
  },
  {
    "name": "T _ascii2addr",
    "type": "CPP"
  },
  {
    "name": "T _inet_addr",
    "type": "CPP"
  },
  {
    "name": "T _inet_aton",
    "type": "CPP"
  },
  {
    "name": "T __inet_aton_check",
    "type": "CPP"
  },
  {
    "name": "T _open_memstream",
    "type": "CPP"
  },
  {
    "name": "t _memstream_update",
    "type": "CPP"
  },
  {
    "name": "t _memstream_write",
    "type": "CPP"
  },
  {
    "name": "t _memstream_seek",
    "type": "CPP"
  },
  {
    "name": "t _memstream_close",
    "type": "CPP"
  },
  {
    "name": "T _inet_lnaof",
    "type": "CPP"
  },
  {
    "name": "T _inet_makeaddr",
    "type": "CPP"
  },
  {
    "name": "T _inet_net_ntop",
    "type": "CPP"
  },
  {
    "name": "T _inet_net_pton",
    "type": "CPP"
  },
  {
    "name": "t _getbits",
    "type": "CPP"
  },
  {
    "name": "T _inet_neta",
    "type": "CPP"
  },
  {
    "name": "T _inet_netof",
    "type": "CPP"
  },
  {
    "name": "T _inet_network",
    "type": "CPP"
  },
  {
    "name": "T _inet_ntoa",
    "type": "CPP"
  },
  {
    "name": "T _link_addr",
    "type": "CPP"
  },
  {
    "name": "T _link_ntoa",
    "type": "CPP"
  },
  {
    "name": "T _inet_nsap_addr",
    "type": "CPP"
  },
  {
    "name": "T _inet_nsap_ntoa",
    "type": "CPP"
  },
  {
    "name": "T _recv$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _send$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _sockatmark",
    "type": "CPP"
  },
  {
    "name": "T _setipv4sourcefilter",
    "type": "CPP"
  },
  {
    "name": "t ___inaddr_to_index",
    "type": "CPP"
  },
  {
    "name": "T _setsourcefilter",
    "type": "CPP"
  },
  {
    "name": "T _getipv4sourcefilter",
    "type": "CPP"
  },
  {
    "name": "T _getsourcefilter",
    "type": "CPP"
  },
  {
    "name": "T _catopen",
    "type": "CPP"
  },
  {
    "name": "t _loadCat",
    "type": "CPP"
  },
  {
    "name": "T _catgets",
    "type": "CPP"
  },
  {
    "name": "T _catclose",
    "type": "CPP"
  },
  {
    "name": "t ___nls_free_resources",
    "type": "CPP"
  },
  {
    "name": "T _flockfile",
    "type": "CPP"
  },
  {
    "name": "T __flockfile_debug_stub",
    "type": "CPP"
  },
  {
    "name": "T _ftrylockfile",
    "type": "CPP"
  },
  {
    "name": "T _funlockfile",
    "type": "CPP"
  },
  {
    "name": "T _asprintf",
    "type": "CPP"
  },
  {
    "name": "T _asprintf_l",
    "type": "CPP"
  },
  {
    "name": "T _clearerr",
    "type": "CPP"
  },
  {
    "name": "T _clearerr_unlocked",
    "type": "CPP"
  },
  {
    "name": "T _dprintf",
    "type": "CPP"
  },
  {
    "name": "T _dprintf_l",
    "type": "CPP"
  },
  {
    "name": "T _fclose",
    "type": "CPP"
  },
  {
    "name": "T _fdopen",
    "type": "CPP"
  },
  {
    "name": "T _feof",
    "type": "CPP"
  },
  {
    "name": "T _feof_unlocked",
    "type": "CPP"
  },
  {
    "name": "T _ferror",
    "type": "CPP"
  },
  {
    "name": "T _ferror_unlocked",
    "type": "CPP"
  },
  {
    "name": "T _fflush",
    "type": "CPP"
  },
  {
    "name": "t _sflush_locked",
    "type": "CPP"
  },
  {
    "name": "T ___sflush",
    "type": "CPP"
  },
  {
    "name": "T ___fflush",
    "type": "CPP"
  },
  {
    "name": "T _fgetc",
    "type": "CPP"
  },
  {
    "name": "T ___slbexpand",
    "type": "CPP"
  },
  {
    "name": "T _fgetln",
    "type": "CPP"
  },
  {
    "name": "T _fgetpos",
    "type": "CPP"
  },
  {
    "name": "T _fgets",
    "type": "CPP"
  },
  {
    "name": "T _fgetwc",
    "type": "CPP"
  },
  {
    "name": "T ___fgetwc",
    "type": "CPP"
  },
  {
    "name": "T _fgetwc_l",
    "type": "CPP"
  },
  {
    "name": "T _fgetwln_l",
    "type": "CPP"
  },
  {
    "name": "T _fgetwln",
    "type": "CPP"
  },
  {
    "name": "T _fgetws_l",
    "type": "CPP"
  },
  {
    "name": "T _fgetws",
    "type": "CPP"
  },
  {
    "name": "T _fileno",
    "type": "CPP"
  },
  {
    "name": "T _fileno_unlocked",
    "type": "CPP"
  },
  {
    "name": "T ___sfp",
    "type": "CPP"
  },
  {
    "name": "T ___sinit",
    "type": "CPP"
  },
  {
    "name": "t _moreglue",
    "type": "CPP"
  },
  {
    "name": "t ___sfprelease",
    "type": "CPP"
  },
  {
    "name": "T _f_prealloc",
    "type": "CPP"
  },
  {
    "name": "T __cleanup",
    "type": "CPP"
  },
  {
    "name": "T ___sflags",
    "type": "CPP"
  },
  {
    "name": "T _fopen",
    "type": "CPP"
  },
  {
    "name": "T _fprintf",
    "type": "CPP"
  },
  {
    "name": "T _fprintf_l",
    "type": "CPP"
  },
  {
    "name": "T _fpurge",
    "type": "CPP"
  },
  {
    "name": "T _fputc",
    "type": "CPP"
  },
  {
    "name": "T _fputs",
    "type": "CPP"
  },
  {
    "name": "t ___fputwc",
    "type": "CPP"
  },
  {
    "name": "T _fputwc",
    "type": "CPP"
  },
  {
    "name": "T _fputwc_l",
    "type": "CPP"
  },
  {
    "name": "T _fputws_l",
    "type": "CPP"
  },
  {
    "name": "T _fputws",
    "type": "CPP"
  },
  {
    "name": "T _fread",
    "type": "CPP"
  },
  {
    "name": "T ___fread",
    "type": "CPP"
  },
  {
    "name": "T _freopen",
    "type": "CPP"
  },
  {
    "name": "T _fscanf",
    "type": "CPP"
  },
  {
    "name": "T _fscanf_l",
    "type": "CPP"
  },
  {
    "name": "T _fseek",
    "type": "CPP"
  },
  {
    "name": "T __fseeko",
    "type": "CPP"
  },
  {
    "name": "T _fseeko",
    "type": "CPP"
  },
  {
    "name": "T _fsetpos",
    "type": "CPP"
  },
  {
    "name": "T _ftell",
    "type": "CPP"
  },
  {
    "name": "T _ftello",
    "type": "CPP"
  },
  {
    "name": "T __ftello",
    "type": "CPP"
  },
  {
    "name": "T _funopen",
    "type": "CPP"
  },
  {
    "name": "T ___sfvwrite",
    "type": "CPP"
  },
  {
    "name": "T __fwalk",
    "type": "CPP"
  },
  {
    "name": "T _fwide",
    "type": "CPP"
  },
  {
    "name": "T _fwprintf",
    "type": "CPP"
  },
  {
    "name": "T _fwprintf_l",
    "type": "CPP"
  },
  {
    "name": "T _fwrite",
    "type": "CPP"
  },
  {
    "name": "T _fwscanf",
    "type": "CPP"
  },
  {
    "name": "T _fwscanf_l",
    "type": "CPP"
  },
  {
    "name": "T _getc",
    "type": "CPP"
  },
  {
    "name": "T _getc_unlocked",
    "type": "CPP"
  },
  {
    "name": "T _getchar",
    "type": "CPP"
  },
  {
    "name": "T _getchar_unlocked",
    "type": "CPP"
  },
  {
    "name": "T _getdelim",
    "type": "CPP"
  },
  {
    "name": "t _sappend",
    "type": "CPP"
  },
  {
    "name": "T _getline",
    "type": "CPP"
  },
  {
    "name": "T _gets",
    "type": "CPP"
  },
  {
    "name": "T _getw",
    "type": "CPP"
  },
  {
    "name": "T _getwc",
    "type": "CPP"
  },
  {
    "name": "T _getwc_l",
    "type": "CPP"
  },
  {
    "name": "T _getwchar",
    "type": "CPP"
  },
  {
    "name": "T _getwchar_l",
    "type": "CPP"
  },
  {
    "name": "T ___smakebuf",
    "type": "CPP"
  },
  {
    "name": "T ___swhatbuf",
    "type": "CPP"
  },
  {
    "name": "t ___evpinit",
    "type": "CPP"
  },
  {
    "name": "t ___loadevp",
    "type": "CPP"
  },
  {
    "name": "T _mkostemps",
    "type": "CPP"
  },
  {
    "name": "t _find_temp_path",
    "type": "CPP"
  },
  {
    "name": "t __mkostemps_action",
    "type": "CPP"
  },
  {
    "name": "T _mkostempsat_np",
    "type": "CPP"
  },
  {
    "name": "T _mkstemps",
    "type": "CPP"
  },
  {
    "name": "T _mkstempsat_np",
    "type": "CPP"
  },
  {
    "name": "T _mkostemp",
    "type": "CPP"
  },
  {
    "name": "T _mkstemp",
    "type": "CPP"
  },
  {
    "name": "T _mkdtemp",
    "type": "CPP"
  },
  {
    "name": "t __mkdtemp_action",
    "type": "CPP"
  },
  {
    "name": "T _mkdtempat_np",
    "type": "CPP"
  },
  {
    "name": "T __mktemp",
    "type": "CPP"
  },
  {
    "name": "t __mktemp_action",
    "type": "CPP"
  },
  {
    "name": "T _mktemp",
    "type": "CPP"
  },
  {
    "name": "T _mkstemp_dprotected_np",
    "type": "CPP"
  },
  {
    "name": "t __mkstemp_dprotected_np_action",
    "type": "CPP"
  },
  {
    "name": "T _rpmatch",
    "type": "CPP"
  },
  {
    "name": "t ___find_arguments",
    "type": "CPP"
  },
  {
    "name": "t _build_arg_table",
    "type": "CPP"
  },
  {
    "name": "t ___find_warguments",
    "type": "CPP"
  },
  {
    "name": "T _printf",
    "type": "CPP"
  },
  {
    "name": "T _printf_l",
    "type": "CPP"
  },
  {
    "name": "T _putc",
    "type": "CPP"
  },
  {
    "name": "T _putc_unlocked",
    "type": "CPP"
  },
  {
    "name": "T _putchar",
    "type": "CPP"
  },
  {
    "name": "T _putchar_unlocked",
    "type": "CPP"
  },
  {
    "name": "T _puts",
    "type": "CPP"
  },
  {
    "name": "T _putw",
    "type": "CPP"
  },
  {
    "name": "T _putwc",
    "type": "CPP"
  },
  {
    "name": "T _putwc_l",
    "type": "CPP"
  },
  {
    "name": "T _putwchar",
    "type": "CPP"
  },
  {
    "name": "T _putwchar_l",
    "type": "CPP"
  },
  {
    "name": "t ___srefill0",
    "type": "CPP"
  },
  {
    "name": "t _lflush",
    "type": "CPP"
  },
  {
    "name": "t ___srefill1",
    "type": "CPP"
  },
  {
    "name": "T ___srefill",
    "type": "CPP"
  },
  {
    "name": "T _remove",
    "type": "CPP"
  },
  {
    "name": "T _rewind",
    "type": "CPP"
  },
  {
    "name": "T ___srget",
    "type": "CPP"
  },
  {
    "name": "T _scanf",
    "type": "CPP"
  },
  {
    "name": "T _scanf_l",
    "type": "CPP"
  },
  {
    "name": "T _setbuf",
    "type": "CPP"
  },
  {
    "name": "T _setbuffer",
    "type": "CPP"
  },
  {
    "name": "T _setlinebuf",
    "type": "CPP"
  },
  {
    "name": "T _setvbuf",
    "type": "CPP"
  },
  {
    "name": "T _snprintf",
    "type": "CPP"
  },
  {
    "name": "T _snprintf_l",
    "type": "CPP"
  },
  {
    "name": "T _sprintf",
    "type": "CPP"
  },
  {
    "name": "T _sprintf_l",
    "type": "CPP"
  },
  {
    "name": "T _sscanf",
    "type": "CPP"
  },
  {
    "name": "T _sscanf_l",
    "type": "CPP"
  },
  {
    "name": "T ___sread",
    "type": "CPP"
  },
  {
    "name": "T ___swrite",
    "type": "CPP"
  },
  {
    "name": "T ___sseek",
    "type": "CPP"
  },
  {
    "name": "T ___sclose",
    "type": "CPP"
  },
  {
    "name": "T __sread",
    "type": "CPP"
  },
  {
    "name": "T __swrite",
    "type": "CPP"
  },
  {
    "name": "T __sseek",
    "type": "CPP"
  },
  {
    "name": "T _swprintf",
    "type": "CPP"
  },
  {
    "name": "T _swprintf_l",
    "type": "CPP"
  },
  {
    "name": "T _swscanf",
    "type": "CPP"
  },
  {
    "name": "T _swscanf_l",
    "type": "CPP"
  },
  {
    "name": "T _tempnam",
    "type": "CPP"
  },
  {
    "name": "T _tmpfile",
    "type": "CPP"
  },
  {
    "name": "T _tmpnam",
    "type": "CPP"
  },
  {
    "name": "t _tmpnam_buf_allocate",
    "type": "CPP"
  },
  {
    "name": "T _ungetc",
    "type": "CPP"
  },
  {
    "name": "T ___ungetc",
    "type": "CPP"
  },
  {
    "name": "T ___ungetwc",
    "type": "CPP"
  },
  {
    "name": "T _ungetwc",
    "type": "CPP"
  },
  {
    "name": "T _ungetwc_l",
    "type": "CPP"
  },
  {
    "name": "t __vasprintf",
    "type": "CPP"
  },
  {
    "name": "T _vasprintf_l",
    "type": "CPP"
  },
  {
    "name": "T _vasprintf",
    "type": "CPP"
  },
  {
    "name": "t __vdprintf",
    "type": "CPP"
  },
  {
    "name": "T _vdprintf_l",
    "type": "CPP"
  },
  {
    "name": "T _vdprintf",
    "type": "CPP"
  },
  {
    "name": "T _vfprintf_l",
    "type": "CPP"
  },
  {
    "name": "T _vfprintf",
    "type": "CPP"
  },
  {
    "name": "t ___printf_is_memory_read_only",
    "type": "CPP"
  },
  {
    "name": "t ___vfprintf",
    "type": "CPP"
  },
  {
    "name": "t _grouping_init",
    "type": "CPP"
  },
  {
    "name": "t ___ultoa",
    "type": "CPP"
  },
  {
    "name": "t _grouping_print",
    "type": "CPP"
  },
  {
    "name": "T _vfscanf",
    "type": "CPP"
  },
  {
    "name": "t ___svfscanf_l",
    "type": "CPP"
  },
  {
    "name": "T _vfscanf_l",
    "type": "CPP"
  },
  {
    "name": "T ___svfscanf",
    "type": "CPP"
  },
  {
    "name": "t ___parsefloat_buf",
    "type": "CPP"
  },
  {
    "name": "T _vfwprintf_l",
    "type": "CPP"
  },
  {
    "name": "t ___vfwprintf",
    "type": "CPP"
  },
  {
    "name": "T _vfwprintf",
    "type": "CPP"
  },
  {
    "name": "t ___mbsconv",
    "type": "CPP"
  },
  {
    "name": "t _grouping_init",
    "type": "CPP"
  },
  {
    "name": "t ___ultoa",
    "type": "CPP"
  },
  {
    "name": "t _grouping_print",
    "type": "CPP"
  },
  {
    "name": "t ___sprint",
    "type": "CPP"
  },
  {
    "name": "T _vfwscanf",
    "type": "CPP"
  },
  {
    "name": "t ___vfwscanf",
    "type": "CPP"
  },
  {
    "name": "T _vfwscanf_l",
    "type": "CPP"
  },
  {
    "name": "T _vprintf",
    "type": "CPP"
  },
  {
    "name": "T _vprintf_l",
    "type": "CPP"
  },
  {
    "name": "T _vscanf",
    "type": "CPP"
  },
  {
    "name": "T _vscanf_l",
    "type": "CPP"
  },
  {
    "name": "t __vsnprintf",
    "type": "CPP"
  },
  {
    "name": "T _vsnprintf_l",
    "type": "CPP"
  },
  {
    "name": "T _vsnprintf",
    "type": "CPP"
  },
  {
    "name": "T _vsprintf_l",
    "type": "CPP"
  },
  {
    "name": "T _vsprintf",
    "type": "CPP"
  },
  {
    "name": "T _vsscanf_l",
    "type": "CPP"
  },
  {
    "name": "t _eofread",
    "type": "CPP"
  },
  {
    "name": "T _vsscanf",
    "type": "CPP"
  },
  {
    "name": "T _vswprintf_l",
    "type": "CPP"
  },
  {
    "name": "T _vswprintf",
    "type": "CPP"
  },
  {
    "name": "T _vswscanf_l",
    "type": "CPP"
  },
  {
    "name": "t _eofread",
    "type": "CPP"
  },
  {
    "name": "T _vswscanf",
    "type": "CPP"
  },
  {
    "name": "T _vwprintf",
    "type": "CPP"
  },
  {
    "name": "T _vwprintf_l",
    "type": "CPP"
  },
  {
    "name": "T _vwscanf",
    "type": "CPP"
  },
  {
    "name": "T _vwscanf_l",
    "type": "CPP"
  },
  {
    "name": "T ___swbuf",
    "type": "CPP"
  },
  {
    "name": "T _wprintf",
    "type": "CPP"
  },
  {
    "name": "T _wprintf_l",
    "type": "CPP"
  },
  {
    "name": "T _wscanf",
    "type": "CPP"
  },
  {
    "name": "T _wscanf_l",
    "type": "CPP"
  },
  {
    "name": "T ___swsetup",
    "type": "CPP"
  },
  {
    "name": "T _open_wmemstream",
    "type": "CPP"
  },
  {
    "name": "t _wmemstream_update",
    "type": "CPP"
  },
  {
    "name": "t _wmemstream_write",
    "type": "CPP"
  },
  {
    "name": "t _wmemstream_seek",
    "type": "CPP"
  },
  {
    "name": "t _wmemstream_close",
    "type": "CPP"
  },
  {
    "name": "T _asctime_r",
    "type": "CPP"
  },
  {
    "name": "T _asctime",
    "type": "CPP"
  },
  {
    "name": "T _difftime",
    "type": "CPP"
  },
  {
    "name": "T _ftime",
    "type": "CPP"
  },
  {
    "name": "T _tzsetwall",
    "type": "CPP"
  },
  {
    "name": "t _tzsetwall_basic",
    "type": "CPP"
  },
  {
    "name": "t __st_tzset_basic",
    "type": "CPP"
  },
  {
    "name": "t _notify_check_tz",
    "type": "CPP"
  },
  {
    "name": "t _settzname",
    "type": "CPP"
  },
  {
    "name": "t _notify_register_tz",
    "type": "CPP"
  },
  {
    "name": "t _tzload",
    "type": "CPP"
  },
  {
    "name": "t _tzparse",
    "type": "CPP"
  },
  {
    "name": "t _gmtload",
    "type": "CPP"
  },
  {
    "name": "T _tzset",
    "type": "CPP"
  },
  {
    "name": "t __st_localsub",
    "type": "CPP"
  },
  {
    "name": "t _gmtsub",
    "type": "CPP"
  },
  {
    "name": "t _timesub",
    "type": "CPP"
  },
  {
    "name": "T _localtime",
    "type": "CPP"
  },
  {
    "name": "t _localtime_key_init",
    "type": "CPP"
  },
  {
    "name": "T _localtime_r",
    "type": "CPP"
  },
  {
    "name": "T _gmtime",
    "type": "CPP"
  },
  {
    "name": "t _gmtime_key_init",
    "type": "CPP"
  },
  {
    "name": "T _gmtime_r",
    "type": "CPP"
  },
  {
    "name": "T _offtime",
    "type": "CPP"
  },
  {
    "name": "T _ctime",
    "type": "CPP"
  },
  {
    "name": "T _ctime_r",
    "type": "CPP"
  },
  {
    "name": "t __st_time1",
    "type": "CPP"
  },
  {
    "name": "t _time2",
    "type": "CPP"
  },
  {
    "name": "T _mktime",
    "type": "CPP"
  },
  {
    "name": "T _timelocal",
    "type": "CPP"
  },
  {
    "name": "T _timegm",
    "type": "CPP"
  },
  {
    "name": "T _timeoff",
    "type": "CPP"
  },
  {
    "name": "T _time2posix",
    "type": "CPP"
  },
  {
    "name": "T _posix2time",
    "type": "CPP"
  },
  {
    "name": "t _typesequiv",
    "type": "CPP"
  },
  {
    "name": "t _getzname",
    "type": "CPP"
  },
  {
    "name": "t _getoffset",
    "type": "CPP"
  },
  {
    "name": "t _getrule",
    "type": "CPP"
  },
  {
    "name": "t _transtime",
    "type": "CPP"
  },
  {
    "name": "t _getsecs",
    "type": "CPP"
  },
  {
    "name": "t _gmt_init",
    "type": "CPP"
  },
  {
    "name": "t _time2sub",
    "type": "CPP"
  },
  {
    "name": "T _strftime_l",
    "type": "CPP"
  },
  {
    "name": "t __st_fmt",
    "type": "CPP"
  },
  {
    "name": "T _strftime",
    "type": "CPP"
  },
  {
    "name": "t __yconv",
    "type": "CPP"
  },
  {
    "name": "T _strptime",
    "type": "CPP"
  },
  {
    "name": "T _strptime_l",
    "type": "CPP"
  },
  {
    "name": "t __strptime0",
    "type": "CPP"
  },
  {
    "name": "t _first_wday_of",
    "type": "CPP"
  },
  {
    "name": "T __time32_to_time",
    "type": "CPP"
  },
  {
    "name": "T __time_to_time32",
    "type": "CPP"
  },
  {
    "name": "T __time64_to_time",
    "type": "CPP"
  },
  {
    "name": "T __time_to_time64",
    "type": "CPP"
  },
  {
    "name": "T __time_to_long",
    "type": "CPP"
  },
  {
    "name": "T __long_to_time",
    "type": "CPP"
  },
  {
    "name": "T __time_to_int",
    "type": "CPP"
  },
  {
    "name": "T __int_to_time",
    "type": "CPP"
  },
  {
    "name": "t ___get_current_time_locale",
    "type": "CPP"
  },
  {
    "name": "t ___time_load_locale",
    "type": "CPP"
  },
  {
    "name": "T _memmem",
    "type": "CPP"
  },
  {
    "name": "T _rindex",
    "type": "CPP"
  },
  {
    "name": "T _strcasecmp_l",
    "type": "CPP"
  },
  {
    "name": "T _strcasecmp",
    "type": "CPP"
  },
  {
    "name": "T _strncasecmp_l",
    "type": "CPP"
  },
  {
    "name": "T _strncasecmp",
    "type": "CPP"
  },
  {
    "name": "T _strcasestr_l",
    "type": "CPP"
  },
  {
    "name": "T _strcasestr",
    "type": "CPP"
  },
  {
    "name": "T _strcoll_l",
    "type": "CPP"
  },
  {
    "name": "T _strcoll",
    "type": "CPP"
  },
  {
    "name": "T _strcspn",
    "type": "CPP"
  },
  {
    "name": "T _strdup",
    "type": "CPP"
  },
  {
    "name": "t ___errstr",
    "type": "CPP"
  },
  {
    "name": "T _strerror_r",
    "type": "CPP"
  },
  {
    "name": "T _strerror",
    "type": "CPP"
  },
  {
    "name": "T _strmode",
    "type": "CPP"
  },
  {
    "name": "T _strndup",
    "type": "CPP"
  },
  {
    "name": "T _strnstr",
    "type": "CPP"
  },
  {
    "name": "T _strpbrk",
    "type": "CPP"
  },
  {
    "name": "T _strrchr",
    "type": "CPP"
  },
  {
    "name": "T _strsep",
    "type": "CPP"
  },
  {
    "name": "T _strsignal",
    "type": "CPP"
  },
  {
    "name": "t _sig_keycreate",
    "type": "CPP"
  },
  {
    "name": "T _strspn",
    "type": "CPP"
  },
  {
    "name": "T _strtok_r",
    "type": "CPP"
  },
  {
    "name": "T _strtok",
    "type": "CPP"
  },
  {
    "name": "T _strxfrm_l",
    "type": "CPP"
  },
  {
    "name": "T _strxfrm",
    "type": "CPP"
  },
  {
    "name": "T _swab",
    "type": "CPP"
  },
  {
    "name": "T _wcpcpy",
    "type": "CPP"
  },
  {
    "name": "T _wcpncpy",
    "type": "CPP"
  },
  {
    "name": "T _wcscasecmp_l",
    "type": "CPP"
  },
  {
    "name": "T _wcscasecmp",
    "type": "CPP"
  },
  {
    "name": "T _wcscat",
    "type": "CPP"
  },
  {
    "name": "T _wcschr",
    "type": "CPP"
  },
  {
    "name": "T _wcscmp",
    "type": "CPP"
  },
  {
    "name": "T _wcscoll_l",
    "type": "CPP"
  },
  {
    "name": "T _wcscoll",
    "type": "CPP"
  },
  {
    "name": "T _wcscpy",
    "type": "CPP"
  },
  {
    "name": "T _wordexp",
    "type": "CPP"
  },
  {
    "name": "T _wordfree",
    "type": "CPP"
  },
  {
    "name": "t _we_read_fully",
    "type": "CPP"
  },
  {
    "name": "T _wcscspn",
    "type": "CPP"
  },
  {
    "name": "T _wcsdup",
    "type": "CPP"
  },
  {
    "name": "T _wcslcat",
    "type": "CPP"
  },
  {
    "name": "T _wcslcpy",
    "type": "CPP"
  },
  {
    "name": "T _wcslen",
    "type": "CPP"
  },
  {
    "name": "T _wcsncasecmp_l",
    "type": "CPP"
  },
  {
    "name": "T _wcsncasecmp",
    "type": "CPP"
  },
  {
    "name": "T _wcsncat",
    "type": "CPP"
  },
  {
    "name": "T _wcsncmp",
    "type": "CPP"
  },
  {
    "name": "T _wcsncpy",
    "type": "CPP"
  },
  {
    "name": "T _wcsnlen",
    "type": "CPP"
  },
  {
    "name": "T _wcspbrk",
    "type": "CPP"
  },
  {
    "name": "T _wcsrchr",
    "type": "CPP"
  },
  {
    "name": "T _wcsspn",
    "type": "CPP"
  },
  {
    "name": "T _fmemopen",
    "type": "CPP"
  },
  {
    "name": "t _fmemopen_read",
    "type": "CPP"
  },
  {
    "name": "t _fmemopen_write",
    "type": "CPP"
  },
  {
    "name": "t _fmemopen_seek",
    "type": "CPP"
  },
  {
    "name": "t _fmemopen_close",
    "type": "CPP"
  },
  {
    "name": "T _wcsstr",
    "type": "CPP"
  },
  {
    "name": "T _wcstok",
    "type": "CPP"
  },
  {
    "name": "T _wcswidth_l",
    "type": "CPP"
  },
  {
    "name": "T _wcswidth",
    "type": "CPP"
  },
  {
    "name": "T _wcsxfrm_l",
    "type": "CPP"
  },
  {
    "name": "T _wcsxfrm",
    "type": "CPP"
  },
  {
    "name": "T _wmemchr",
    "type": "CPP"
  },
  {
    "name": "T _wmemcmp",
    "type": "CPP"
  },
  {
    "name": "T _wmemcpy",
    "type": "CPP"
  },
  {
    "name": "T _wmemmove",
    "type": "CPP"
  },
  {
    "name": "T _wmemset",
    "type": "CPP"
  },
  {
    "name": "t __UTF2_init",
    "type": "CPP"
  },
  {
    "name": "t __UTF2_mbrtowc",
    "type": "CPP"
  },
  {
    "name": "t __UTF2_wcrtomb",
    "type": "CPP"
  },
  {
    "name": "t __UTF2_mbsinit",
    "type": "CPP"
  },
  {
    "name": "t __UTF2_mbsnrtowcs",
    "type": "CPP"
  },
  {
    "name": "t __UTF2_wcsnrtombs",
    "type": "CPP"
  },
  {
    "name": "t ___guard_setup",
    "type": "CPP"
  },
  {
    "name": "T ___stack_chk_fail",
    "type": "CPP"
  },
  {
    "name": "T _a64l",
    "type": "CPP"
  },
  {
    "name": "T __Exit",
    "type": "CPP"
  },
  {
    "name": "T _abs",
    "type": "CPP"
  },
  {
    "name": "t ___atexit_init",
    "type": "CPP"
  },
  {
    "name": "T _atexit",
    "type": "CPP"
  },
  {
    "name": "t _atexit_register",
    "type": "CPP"
  },
  {
    "name": "T _atexit_b",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_atexit",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_finalize_ranges",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_finalize",
    "type": "CPP"
  },
  {
    "name": "T ___cxa_thread_atexit",
    "type": "CPP"
  },
  {
    "name": "T _atof",
    "type": "CPP"
  },
  {
    "name": "T _atof_l",
    "type": "CPP"
  },
  {
    "name": "T _atoi",
    "type": "CPP"
  },
  {
    "name": "T _atoi_l",
    "type": "CPP"
  },
  {
    "name": "T _atol",
    "type": "CPP"
  },
  {
    "name": "T _atol_l",
    "type": "CPP"
  },
  {
    "name": "T _atoll",
    "type": "CPP"
  },
  {
    "name": "T _atoll_l",
    "type": "CPP"
  },
  {
    "name": "T _bsearch",
    "type": "CPP"
  },
  {
    "name": "T _bsearch_b",
    "type": "CPP"
  },
  {
    "name": "T _div",
    "type": "CPP"
  },
  {
    "name": "T _exit",
    "type": "CPP"
  },
  {
    "name": "t ___findenv_locked",
    "type": "CPP"
  },
  {
    "name": "t ___environ_lock",
    "type": "CPP"
  },
  {
    "name": "t ___environ_unlock",
    "type": "CPP"
  },
  {
    "name": "t ___environ_lock_fork_child",
    "type": "CPP"
  },
  {
    "name": "T __getenvp",
    "type": "CPP"
  },
  {
    "name": "T _getenv",
    "type": "CPP"
  },
  {
    "name": "T _getopt",
    "type": "CPP"
  },
  {
    "name": "T _getopt_long",
    "type": "CPP"
  },
  {
    "name": "t _getopt_internal",
    "type": "CPP"
  },
  {
    "name": "T _getopt_long_only",
    "type": "CPP"
  },
  {
    "name": "t _permute_args",
    "type": "CPP"
  },
  {
    "name": "t _parse_long_options",
    "type": "CPP"
  },
  {
    "name": "T _getsubopt",
    "type": "CPP"
  },
  {
    "name": "T _hcreate",
    "type": "CPP"
  },
  {
    "name": "T _hdestroy",
    "type": "CPP"
  },
  {
    "name": "T _hsearch",
    "type": "CPP"
  },
  {
    "name": "T _heapsort",
    "type": "CPP"
  },
  {
    "name": "T _imaxabs",
    "type": "CPP"
  },
  {
    "name": "T _imaxdiv",
    "type": "CPP"
  },
  {
    "name": "T _insque",
    "type": "CPP"
  },
  {
    "name": "T _labs",
    "type": "CPP"
  },
  {
    "name": "T _ldiv",
    "type": "CPP"
  },
  {
    "name": "T _llabs",
    "type": "CPP"
  },
  {
    "name": "T _lldiv",
    "type": "CPP"
  },
  {
    "name": "T _lsearch",
    "type": "CPP"
  },
  {
    "name": "T _lfind",
    "type": "CPP"
  },
  {
    "name": "T _mergesort",
    "type": "CPP"
  },
  {
    "name": "t _insertionsort",
    "type": "CPP"
  },
  {
    "name": "T __putenvp",
    "type": "CPP"
  },
  {
    "name": "T _putenv",
    "type": "CPP"
  },
  {
    "name": "T _qsort",
    "type": "CPP"
  },
  {
    "name": "t __qsort",
    "type": "CPP"
  },
  {
    "name": "t __isort",
    "type": "CPP"
  },
  {
    "name": "T _qsort_r",
    "type": "CPP"
  },
  {
    "name": "t __qsort",
    "type": "CPP"
  },
  {
    "name": "t __isort",
    "type": "CPP"
  },
  {
    "name": "T _radixsort",
    "type": "CPP"
  },
  {
    "name": "t _r_sort_a",
    "type": "CPP"
  },
  {
    "name": "T _sradixsort",
    "type": "CPP"
  },
  {
    "name": "t _r_sort_b",
    "type": "CPP"
  },
  {
    "name": "t _r_sort_count_allocate",
    "type": "CPP"
  },
  {
    "name": "T _rand_r",
    "type": "CPP"
  },
  {
    "name": "T _rand",
    "type": "CPP"
  },
  {
    "name": "T _srand",
    "type": "CPP"
  },
  {
    "name": "T _sranddev",
    "type": "CPP"
  },
  {
    "name": "T _srandom",
    "type": "CPP"
  },
  {
    "name": "T _random",
    "type": "CPP"
  },
  {
    "name": "T _srandomdev",
    "type": "CPP"
  },
  {
    "name": "T _initstate",
    "type": "CPP"
  },
  {
    "name": "T _setstate",
    "type": "CPP"
  },
  {
    "name": "T _reallocf",
    "type": "CPP"
  },
  {
    "name": "T _realpath",
    "type": "CPP"
  },
  {
    "name": "T _remque",
    "type": "CPP"
  },
  {
    "name": "t __legacy_crt1_environ",
    "type": "CPP"
  },
  {
    "name": "t __owned_ptr_add",
    "type": "CPP"
  },
  {
    "name": "t __owned_ptr_search",
    "type": "CPP"
  },
  {
    "name": "t __owned_ptr_alloc",
    "type": "CPP"
  },
  {
    "name": "t ___init__env_owned_locked",
    "type": "CPP"
  },
  {
    "name": "t ___setenv_locked",
    "type": "CPP"
  },
  {
    "name": "t ___unsetenv_locked",
    "type": "CPP"
  },
  {
    "name": "T __allocenvstate",
    "type": "CPP"
  },
  {
    "name": "T __copyenv",
    "type": "CPP"
  },
  {
    "name": "T __deallocenvstate",
    "type": "CPP"
  },
  {
    "name": "T __setenvp",
    "type": "CPP"
  },
  {
    "name": "T __unsetenvp",
    "type": "CPP"
  },
  {
    "name": "T _setenv",
    "type": "CPP"
  },
  {
    "name": "T _unsetenv",
    "type": "CPP"
  },
  {
    "name": "T _hash_create",
    "type": "CPP"
  },
  {
    "name": "T _hash_destroy",
    "type": "CPP"
  },
  {
    "name": "T _hash_search",
    "type": "CPP"
  },
  {
    "name": "T _hash_traverse",
    "type": "CPP"
  },
  {
    "name": "T _hash_purge",
    "type": "CPP"
  },
  {
    "name": "T _hash_stats",
    "type": "CPP"
  },
  {
    "name": "T _strtoimax_l",
    "type": "CPP"
  },
  {
    "name": "T _strtoimax",
    "type": "CPP"
  },
  {
    "name": "T _strtol_l",
    "type": "CPP"
  },
  {
    "name": "T _strtol",
    "type": "CPP"
  },
  {
    "name": "T _strtoll_l",
    "type": "CPP"
  },
  {
    "name": "T _strtoll",
    "type": "CPP"
  },
  {
    "name": "T _strtoq",
    "type": "CPP"
  },
  {
    "name": "T _strtoq_l",
    "type": "CPP"
  },
  {
    "name": "T _strtoul_l",
    "type": "CPP"
  },
  {
    "name": "T _strtoul",
    "type": "CPP"
  },
  {
    "name": "T _strtoull_l",
    "type": "CPP"
  },
  {
    "name": "T _strtoull",
    "type": "CPP"
  },
  {
    "name": "T _strtoumax_l",
    "type": "CPP"
  },
  {
    "name": "T _strtoumax",
    "type": "CPP"
  },
  {
    "name": "T _strtouq",
    "type": "CPP"
  },
  {
    "name": "T _strtouq_l",
    "type": "CPP"
  },
  {
    "name": "T _system$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _tdelete",
    "type": "CPP"
  },
  {
    "name": "T _tfind",
    "type": "CPP"
  },
  {
    "name": "T _tsearch",
    "type": "CPP"
  },
  {
    "name": "T _twalk",
    "type": "CPP"
  },
  {
    "name": "t _trecurse",
    "type": "CPP"
  },
  {
    "name": "T _posix_openpt",
    "type": "CPP"
  },
  {
    "name": "T _grantpt",
    "type": "CPP"
  },
  {
    "name": "T _ptsname",
    "type": "CPP"
  },
  {
    "name": "t _ptsname_once_init",
    "type": "CPP"
  },
  {
    "name": "T _ptsname_r",
    "type": "CPP"
  },
  {
    "name": "T _unlockpt",
    "type": "CPP"
  },
  {
    "name": "T _l64a",
    "type": "CPP"
  },
  {
    "name": "T _ecvt",
    "type": "CPP"
  },
  {
    "name": "t ___cvt",
    "type": "CPP"
  },
  {
    "name": "T _fcvt",
    "type": "CPP"
  },
  {
    "name": "T _gcvt",
    "type": "CPP"
  },
  {
    "name": "T _qsort_b",
    "type": "CPP"
  },
  {
    "name": "T _heapsort_b",
    "type": "CPP"
  },
  {
    "name": "t ___heapsort_r",
    "type": "CPP"
  },
  {
    "name": "T ___ldtoa",
    "type": "CPP"
  },
  {
    "name": "T _timespec_get",
    "type": "CPP"
  },
  {
    "name": "T _strtold",
    "type": "CPP"
  },
  {
    "name": "T _strtold_l",
    "type": "CPP"
  },
  {
    "name": "T __Read_RuneMagi",
    "type": "CPP"
  },
  {
    "name": "T _mergesort_b",
    "type": "CPP"
  },
  {
    "name": "t _insertionsort",
    "type": "CPP"
  },
  {
    "name": "T _psort",
    "type": "CPP"
  },
  {
    "name": "t _getargs",
    "type": "CPP"
  },
  {
    "name": "t __psort_parallel",
    "type": "CPP"
  },
  {
    "name": "t __psort",
    "type": "CPP"
  },
  {
    "name": "T _psort_b",
    "type": "CPP"
  },
  {
    "name": "t _getargs",
    "type": "CPP"
  },
  {
    "name": "t __psort_parallel",
    "type": "CPP"
  },
  {
    "name": "t __psort",
    "type": "CPP"
  },
  {
    "name": "T _psort_r",
    "type": "CPP"
  },
  {
    "name": "t _getargs",
    "type": "CPP"
  },
  {
    "name": "t __psort_parallel",
    "type": "CPP"
  },
  {
    "name": "t __psort",
    "type": "CPP"
  },
  {
    "name": "T _scandir_b$INODE64",
    "type": "CPP"
  },
  {
    "name": "T _getmntinfo64",
    "type": "CPP"
  },
  {
    "name": "T _inet_ntop",
    "type": "CPP"
  },
  {
    "name": "T _inet_ntop6",
    "type": "CPP"
  },
  {
    "name": "T _inet_ntop4",
    "type": "CPP"
  },
  {
    "name": "T _inet_pton",
    "type": "CPP"
  },
  {
    "name": "t _inet_pton4",
    "type": "CPP"
  },
  {
    "name": "t ___printf_arginfo_errno",
    "type": "CPP"
  },
  {
    "name": "t ___printf_render_errno",
    "type": "CPP"
  },
  {
    "name": "t ___printf_arginfo_float",
    "type": "CPP"
  },
  {
    "name": "t ___printf_render_float",
    "type": "CPP"
  },
  {
    "name": "t ___printf_arginfo_hexdump",
    "type": "CPP"
  },
  {
    "name": "t ___printf_render_hexdump",
    "type": "CPP"
  },
  {
    "name": "t ___printf_arginfo_int",
    "type": "CPP"
  },
  {
    "name": "t ___printf_render_int",
    "type": "CPP"
  },
  {
    "name": "t ___printf_arginfo_ptr",
    "type": "CPP"
  },
  {
    "name": "t ___printf_render_ptr",
    "type": "CPP"
  },
  {
    "name": "t ___printf_arginfo_quote",
    "type": "CPP"
  },
  {
    "name": "t ___printf_render_quote",
    "type": "CPP"
  },
  {
    "name": "t ___printf_arginfo_str",
    "type": "CPP"
  },
  {
    "name": "t ___printf_render_str",
    "type": "CPP"
  },
  {
    "name": "t ___printf_arginfo_chr",
    "type": "CPP"
  },
  {
    "name": "t ___printf_render_chr",
    "type": "CPP"
  },
  {
    "name": "t ___printf_arginfo_time",
    "type": "CPP"
  },
  {
    "name": "t ___printf_render_time",
    "type": "CPP"
  },
  {
    "name": "t ___printf_arginfo_vis",
    "type": "CPP"
  },
  {
    "name": "t ___printf_render_vis",
    "type": "CPP"
  },
  {
    "name": "t ___printf_flush",
    "type": "CPP"
  },
  {
    "name": "t ___printf_puts",
    "type": "CPP"
  },
  {
    "name": "t ___printf_pad",
    "type": "CPP"
  },
  {
    "name": "t ___printf_out",
    "type": "CPP"
  },
  {
    "name": "t ___printf_arginfo_pct",
    "type": "CPP"
  },
  {
    "name": "t ___printf_render_pct",
    "type": "CPP"
  },
  {
    "name": "t ___printf_arginfo_n",
    "type": "CPP"
  },
  {
    "name": "t ___printf_render_n",
    "type": "CPP"
  },
  {
    "name": "t _arrayfree",
    "type": "CPP"
  },
  {
    "name": "t _xprintf_calloc",
    "type": "CPP"
  },
  {
    "name": "t _flush_queues",
    "type": "CPP"
  },
  {
    "name": "t _xprintf_malloc",
    "type": "CPP"
  },
  {
    "name": "t ___printf_comp",
    "type": "CPP"
  },
  {
    "name": "t _arrayget",
    "type": "CPP"
  },
  {
    "name": "t ___printf_exec",
    "type": "CPP"
  },
  {
    "name": "t ___v2printf",
    "type": "CPP"
  },
  {
    "name": "t ___xvprintf",
    "type": "CPP"
  },
  {
    "name": "t ___xprintf_vector",
    "type": "CPP"
  },
  {
    "name": "T ___default_utx",
    "type": "CPP"
  },
  {
    "name": "t ___default_utx_init",
    "type": "CPP"
  },
  {
    "name": "t ___setutxent",
    "type": "CPP"
  },
  {
    "name": "T __setutxent",
    "type": "CPP"
  },
  {
    "name": "T _setutxent",
    "type": "CPP"
  },
  {
    "name": "t ___endutxent",
    "type": "CPP"
  },
  {
    "name": "T __endutxent",
    "type": "CPP"
  },
  {
    "name": "T _endutxent",
    "type": "CPP"
  },
  {
    "name": "t ___getutxent",
    "type": "CPP"
  },
  {
    "name": "T __getutxent",
    "type": "CPP"
  },
  {
    "name": "T _getutxent",
    "type": "CPP"
  },
  {
    "name": "T __getutxid",
    "type": "CPP"
  },
  {
    "name": "t ___getutxid",
    "type": "CPP"
  },
  {
    "name": "T _getutxid",
    "type": "CPP"
  },
  {
    "name": "T __getutxline",
    "type": "CPP"
  },
  {
    "name": "T _getutxline",
    "type": "CPP"
  },
  {
    "name": "T __pututxline",
    "type": "CPP"
  },
  {
    "name": "t ___pututxline",
    "type": "CPP"
  },
  {
    "name": "T _pututxline",
    "type": "CPP"
  },
  {
    "name": "t ___utmpxname",
    "type": "CPP"
  },
  {
    "name": "T __utmpxname",
    "type": "CPP"
  },
  {
    "name": "T _utmpxname",
    "type": "CPP"
  },
  {
    "name": "T _getutmp",
    "type": "CPP"
  },
  {
    "name": "T _getutmpx",
    "type": "CPP"
  },
  {
    "name": "T _strfmon",
    "type": "CPP"
  },
  {
    "name": "t __strfmon",
    "type": "CPP"
  },
  {
    "name": "T _strfmon_l",
    "type": "CPP"
  },
  {
    "name": "t ___calc_left_pad",
    "type": "CPP"
  },
  {
    "name": "t ___setup_vars",
    "type": "CPP"
  },
  {
    "name": "T _memset_s",
    "type": "CPP"
  },
  {
    "name": "T _rb_tree_init",
    "type": "CPP"
  },
  {
    "name": "T _rb_tree_find_node",
    "type": "CPP"
  },
  {
    "name": "T _rb_tree_find_node_geq",
    "type": "CPP"
  },
  {
    "name": "T _rb_tree_find_node_leq",
    "type": "CPP"
  },
  {
    "name": "T _rb_tree_insert_node",
    "type": "CPP"
  },
  {
    "name": "T _rb_tree_remove_node",
    "type": "CPP"
  },
  {
    "name": "T _rb_tree_iterate",
    "type": "CPP"
  },
  {
    "name": "T _rb_tree_count",
    "type": "CPP"
  },
  {
    "name": "t _rb_tree_reparent_nodes",
    "type": "CPP"
  },
  {
    "name": "t _rb_tree_removal_rebalance",
    "type": "CPP"
  },
  {
    "name": "T _regncomp_l",
    "type": "CPP"
  },
  {
    "name": "T _regncomp",
    "type": "CPP"
  },
  {
    "name": "T _regcomp_l",
    "type": "CPP"
  },
  {
    "name": "T _regcomp",
    "type": "CPP"
  },
  {
    "name": "T _regwncomp_l",
    "type": "CPP"
  },
  {
    "name": "T _regwncomp",
    "type": "CPP"
  },
  {
    "name": "T _regwcomp_l",
    "type": "CPP"
  },
  {
    "name": "T _regwcomp",
    "type": "CPP"
  },
  {
    "name": "T _regfree",
    "type": "CPP"
  },
  {
    "name": "T _tre_fill_pmatch",
    "type": "CPP"
  },
  {
    "name": "t _tre_reset_last_matched_branches",
    "type": "CPP"
  },
  {
    "name": "T _regnexec",
    "type": "CPP"
  },
  {
    "name": "t _tre_match",
    "type": "CPP"
  },
  {
    "name": "T _regexec",
    "type": "CPP"
  },
  {
    "name": "T _regwnexec",
    "type": "CPP"
  },
  {
    "name": "T _regwexec",
    "type": "CPP"
  },
  {
    "name": "T _tre_ast_new_node",
    "type": "CPP"
  },
  {
    "name": "T _tre_ast_new_literal",
    "type": "CPP"
  },
  {
    "name": "T _tre_ast_new_iter",
    "type": "CPP"
  },
  {
    "name": "T _tre_ast_new_union",
    "type": "CPP"
  },
  {
    "name": "T _tre_ast_new_catenation",
    "type": "CPP"
  },
  {
    "name": "T _tre_compile",
    "type": "CPP"
  },
  {
    "name": "t _tre_add_tags",
    "type": "CPP"
  },
  {
    "name": "t _tre_ast_to_tnfa",
    "type": "CPP"
  },
  {
    "name": "T _tre_free",
    "type": "CPP"
  },
  {
    "name": "t _tre_merge_branches",
    "type": "CPP"
  },
  {
    "name": "t _tre_add_tag_right",
    "type": "CPP"
  },
  {
    "name": "t _tre_add_tag_left",
    "type": "CPP"
  },
  {
    "name": "t _tre_copy_ast",
    "type": "CPP"
  },
  {
    "name": "t _tre_set_union",
    "type": "CPP"
  },
  {
    "name": "t _tre_match_empty",
    "type": "CPP"
  },
  {
    "name": "t _tre_make_trans",
    "type": "CPP"
  },
  {
    "name": "T _tre_tnfa_run_backtrack",
    "type": "CPP"
  },
  {
    "name": "T _tre_tnfa_run_parallel",
    "type": "CPP"
  },
  {
    "name": "T _tre_mem_new_impl",
    "type": "CPP"
  },
  {
    "name": "T _tre_mem_destroy",
    "type": "CPP"
  },
  {
    "name": "T _tre_mem_alloc_impl",
    "type": "CPP"
  },
  {
    "name": "T _tre_parse",
    "type": "CPP"
  },
  {
    "name": "t _tre_parse_bound",
    "type": "CPP"
  },
  {
    "name": "t _tre_search_cnames",
    "type": "CPP"
  },
  {
    "name": "t _tre_new_item",
    "type": "CPP"
  },
  {
    "name": "T _tre_stack_new",
    "type": "CPP"
  },
  {
    "name": "T _tre_stack_destroy",
    "type": "CPP"
  },
  {
    "name": "T _tre_stack_num_objects",
    "type": "CPP"
  },
  {
    "name": "t _tre_stack_push_int",
    "type": "CPP"
  },
  {
    "name": "t _tre_stack_push",
    "type": "CPP"
  },
  {
    "name": "t _tre_stack_push_voidptr",
    "type": "CPP"
  },
  {
    "name": "t _tre_stack_pop_int",
    "type": "CPP"
  },
  {
    "name": "t _tre_stack_pop_voidptr",
    "type": "CPP"
  },
  {
    "name": "T _creat",
    "type": "CPP"
  },
  {
    "name": "T _sigpause",
    "type": "CPP"
  },
  {
    "name": "T _lockf",
    "type": "CPP"
  },
  {
    "name": "T _pause",
    "type": "CPP"
  },
  {
    "name": "T _sleep",
    "type": "CPP"
  },
  {
    "name": "T _tcdrain",
    "type": "CPP"
  },
  {
    "name": "T _usleep",
    "type": "CPP"
  },
  {
    "name": "T _wait",
    "type": "CPP"
  },
  {
    "name": "T _waitpid",
    "type": "CPP"
  },
  {
    "name": "T _nanosleep",
    "type": "CPP"
  },
  {
    "name": "T _recv",
    "type": "CPP"
  },
  {
    "name": "T _send",
    "type": "CPP"
  },
  {
    "name": "T _system",
    "type": "CPP"
  },
  {
    "name": "T _popen$DARWIN_EXTSN",
    "type": "CPP"
  },
  {
    "name": "T _fdopen$DARWIN_EXTSN",
    "type": "CPP"
  },
  {
    "name": "T _fopen$DARWIN_EXTSN",
    "type": "CPP"
  },
  {
    "name": "T _realpath$DARWIN_EXTSN",
    "type": "CPP"
  },
  {
    "name": "T _getgroups$DARWIN_EXTSN",
    "type": "CPP"
  },
  {
    "name": "T _daemon",
    "type": "CPP"
  },
  {
    "name": "T _getmntinfo",
    "type": "CPP"
  },
  {
    "name": "t _getmntinfo_internal",
    "type": "CPP"
  },
  {
    "name": "T _getmntinfo_r_np",
    "type": "CPP"
  },
  {
    "name": "T _glob",
    "type": "CPP"
  },
  {
    "name": "t ___glob",
    "type": "CPP"
  },
  {
    "name": "T _glob_b",
    "type": "CPP"
  },
  {
    "name": "t _glob0",
    "type": "CPP"
  },
  {
    "name": "t _globexp1",
    "type": "CPP"
  },
  {
    "name": "t _globfinal",
    "type": "CPP"
  },
  {
    "name": "t _glob2",
    "type": "CPP"
  },
  {
    "name": "t _err_aborted",
    "type": "CPP"
  },
  {
    "name": "T _opendir",
    "type": "CPP"
  },
  {
    "name": "T ___opendir2",
    "type": "CPP"
  },
  {
    "name": "T _fdopendir",
    "type": "CPP"
  },
  {
    "name": "t ___opendir_common",
    "type": "CPP"
  },
  {
    "name": "t __filldir",
    "type": "CPP"
  },
  {
    "name": "t _opendir_compar",
    "type": "CPP"
  },
  {
    "name": "T __readdir_unlocked",
    "type": "CPP"
  },
  {
    "name": "T _readdir",
    "type": "CPP"
  },
  {
    "name": "T _readdir_r",
    "type": "CPP"
  },
  {
    "name": "T _rewinddir",
    "type": "CPP"
  },
  {
    "name": "T _scandir",
    "type": "CPP"
  },
  {
    "name": "T _alphasort",
    "type": "CPP"
  },
  {
    "name": "T _seekdir",
    "type": "CPP"
  },
  {
    "name": "T _telldir",
    "type": "CPP"
  },
  {
    "name": "T __seekdir",
    "type": "CPP"
  },
  {
    "name": "t __fixtelldir",
    "type": "CPP"
  },
  {
    "name": "T _fts_open",
    "type": "CPP"
  },
  {
    "name": "t ___fts_open",
    "type": "CPP"
  },
  {
    "name": "T _fts_open_b",
    "type": "CPP"
  },
  {
    "name": "T _fts_close",
    "type": "CPP"
  },
  {
    "name": "T _fts_read",
    "type": "CPP"
  },
  {
    "name": "t _fts_safe_changedir",
    "type": "CPP"
  },
  {
    "name": "t _fts_build",
    "type": "CPP"
  },
  {
    "name": "T _fts_set",
    "type": "CPP"
  },
  {
    "name": "T _fts_children",
    "type": "CPP"
  },
  {
    "name": "t _fts_palloc",
    "type": "CPP"
  },
  {
    "name": "t _fts_alloc",
    "type": "CPP"
  },
  {
    "name": "t _fts_sort",
    "type": "CPP"
  },
  {
    "name": "t _close_directory",
    "type": "CPP"
  },
  {
    "name": "t _fts_stat2",
    "type": "CPP"
  },
  {
    "name": "t _advance_directory",
    "type": "CPP"
  },
  {
    "name": "T _ftw",
    "type": "CPP"
  },
  {
    "name": "t _both_ftw",
    "type": "CPP"
  },
  {
    "name": "T _nftw",
    "type": "CPP"
  },
  {
    "name": "T _statx_np",
    "type": "CPP"
  },
  {
    "name": "t _statx1",
    "type": "CPP"
  },
  {
    "name": "t _statx_syscall",
    "type": "CPP"
  },
  {
    "name": "T _fstatx_np",
    "type": "CPP"
  },
  {
    "name": "t _fstatx_syscall",
    "type": "CPP"
  },
  {
    "name": "T _lstatx_np",
    "type": "CPP"
  },
  {
    "name": "t _lstatx_syscall",
    "type": "CPP"
  },
  {
    "name": "T _scandir_b",
    "type": "CPP"
  },
  {
    "name": "T ___strlcat_chk",
    "type": "CPP"
  },
  {
    "name": "t ___chk_init",
    "type": "CPP"
  },
  {
    "name": "t ___chk_fail_overflow",
    "type": "CPP"
  },
  {
    "name": "t ___chk_fail_overlap",
    "type": "CPP"
  },
  {
    "name": "t ___chk_overlap",
    "type": "CPP"
  },
  {
    "name": "T ___memset_chk",
    "type": "CPP"
  },
  {
    "name": "T ___strlcpy_chk",
    "type": "CPP"
  },
  {
    "name": "T ___strncat_chk",
    "type": "CPP"
  },
  {
    "name": "T ___strncpy_chk",
    "type": "CPP"
  },
  {
    "name": "T ___memmove_chk",
    "type": "CPP"
  },
  {
    "name": "T ___strcpy_chk",
    "type": "CPP"
  },
  {
    "name": "T ___memccpy_chk",
    "type": "CPP"
  },
  {
    "name": "T ___snprintf_chk",
    "type": "CPP"
  },
  {
    "name": "T ___snprintf_object_size_chk",
    "type": "CPP"
  },
  {
    "name": "T ___strcat_chk",
    "type": "CPP"
  },
  {
    "name": "T ___vsprintf_chk",
    "type": "CPP"
  },
  {
    "name": "T ___stpcpy_chk",
    "type": "CPP"
  },
  {
    "name": "T ___sprintf_chk",
    "type": "CPP"
  },
  {
    "name": "T ___sprintf_object_size_chk",
    "type": "CPP"
  },
  {
    "name": "T ___memcpy_chk",
    "type": "CPP"
  },
  {
    "name": "T ___stpncpy_chk",
    "type": "CPP"
  },
  {
    "name": "T ___vsnprintf_chk",
    "type": "CPP"
  },
  {
    "name": "t _fts_build.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _fts_build.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _fts_build.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _fts_build.cold.4",
    "type": "CPP"
  },
  {
    "name": "t _fts_build.cold.5",
    "type": "CPP"
  },
  {
    "name": "t _fts_build.cold.6",
    "type": "CPP"
  },
  {
    "name": "t _advance_directory.cold.1",
    "type": "CPP"
  },
  {
    "name": "T __os_debug_log_error_str",
    "type": "CPP"
  },
  {
    "name": "T __os_debug_log",
    "type": "CPP"
  },
  {
    "name": "t ___xprintf_domain_init.cold.1",
    "type": "CPP"
  },
  {
    "name": "T __os_crash",
    "type": "CPP"
  },
  {
    "name": "T __os_assumes_log",
    "type": "CPP"
  },
  {
    "name": "T __os_assert_log",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libsystem_configuration.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _dns_configuration_copy",
    "type": "CPP"
  },
  {
    "name": "t _libSC_info_available",
    "type": "CPP"
  },
  {
    "name": "t _____dns_configuration_queue_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___dns_configuration_copy_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___dns_configuration_copy_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t _libSC_info_client_create",
    "type": "CPP"
  },
  {
    "name": "t _libSC_send_message_with_reply_sync",
    "type": "CPP"
  },
  {
    "name": "T _dns_configuration_free",
    "type": "CPP"
  },
  {
    "name": "t ___dns_configuration_free_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _libSC_info_client_release",
    "type": "CPP"
  },
  {
    "name": "t _libSC_info_client_dealloc",
    "type": "CPP"
  },
  {
    "name": "T _is_config_agent_type_proxy",
    "type": "CPP"
  },
  {
    "name": "T _is_config_agent_type_dns",
    "type": "CPP"
  },
  {
    "name": "T _config_agent_copy_dns_information",
    "type": "CPP"
  },
  {
    "name": "T _config_agent_get_dns_nameservers",
    "type": "CPP"
  },
  {
    "name": "T _config_agent_get_dns_searchdomains",
    "type": "CPP"
  },
  {
    "name": "T _config_agent_free_dns_information",
    "type": "CPP"
  },
  {
    "name": "T __libSC_info_fork_prepare",
    "type": "CPP"
  },
  {
    "name": "T __libSC_info_fork_parent",
    "type": "CPP"
  },
  {
    "name": "T _nwi_state_copy",
    "type": "CPP"
  },
  {
    "name": "t __nwi_state_initialize",
    "type": "CPP"
  },
  {
    "name": "T _nwi_state_release",
    "type": "CPP"
  },
  {
    "name": "T _dns_configuration_notify_key",
    "type": "CPP"
  },
  {
    "name": "T __dns_configuration_ack",
    "type": "CPP"
  },
  {
    "name": "t ____dns_configuration_ack_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _nwi_state_get_notify_key",
    "type": "CPP"
  },
  {
    "name": "T __nwi_state_force_refresh",
    "type": "CPP"
  },
  {
    "name": "T __nwi_config_agent_copy_data",
    "type": "CPP"
  },
  {
    "name": "T __nwi_state_ack",
    "type": "CPP"
  },
  {
    "name": "t ____nwi_state_ack_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _nwi_state_get_generation",
    "type": "CPP"
  },
  {
    "name": "T _nwi_ifstate_get_generation",
    "type": "CPP"
  },
  {
    "name": "T _nwi_ifstate_get_ifname",
    "type": "CPP"
  },
  {
    "name": "T _nwi_ifstate_get_flags",
    "type": "CPP"
  },
  {
    "name": "T _nwi_state_get_first_ifstate",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libsystem_coreservices.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T __dirhelper",
    "type": "CPP"
  },
  {
    "name": "t __dirhelper_init",
    "type": "CPP"
  },
  {
    "name": "T ___user_local_dirname",
    "type": "CPP"
  },
  {
    "name": "t ___makeDirectory",
    "type": "CPP"
  },
  {
    "name": "T _sysdir_start_search_path_enumeration",
    "type": "CPP"
  },
  {
    "name": "t _NSStartSearchPathEnumerationStatic",
    "type": "CPP"
  },
  {
    "name": "T _sysdir_get_next_search_path_enumeration",
    "type": "CPP"
  },
  {
    "name": "t _NSGetNextSearchPathEnumerationStatic",
    "type": "CPP"
  },
  {
    "name": "T ___user_relative_dirname",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libsystem_darwin.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _os_variant_allows_internal_security_policies",
    "type": "CPP"
  },
  {
    "name": "t __initialize_status",
    "type": "CPP"
  },
  {
    "name": "t __check_can_has_debugger",
    "type": "CPP"
  },
  {
    "name": "T ___libdarwin_init",
    "type": "CPP"
  },
  {
    "name": "T _os_simple_hash",
    "type": "CPP"
  },
  {
    "name": "T _os_simple_hash_with_seed",
    "type": "CPP"
  },
  {
    "name": "T _os_variant_has_internal_diagnostics",
    "type": "CPP"
  },
  {
    "name": "t __check_internal_content",
    "type": "CPP"
  },
  {
    "name": "T _os_variant_has_internal_content",
    "type": "CPP"
  },
  {
    "name": "T _os_variant_has_internal_ui",
    "type": "CPP"
  },
  {
    "name": "T _dirstat_np",
    "type": "CPP"
  },
  {
    "name": "T _dirstatat_np",
    "type": "CPP"
  },
  {
    "name": "t _fdirstat_fallback",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin",
    "type": "CPP"
  },
  {
    "name": "t __dirstat_fileid_set_create",
    "type": "CPP"
  },
  {
    "name": "t __dirstat_fileid_set_destroy",
    "type": "CPP"
  },
  {
    "name": "T _os_variant_is_recovery",
    "type": "CPP"
  },
  {
    "name": "t __check_base_system_content",
    "type": "CPP"
  },
  {
    "name": "T _os_mach_msg_get_trailer",
    "type": "CPP"
  },
  {
    "name": "T _os_mach_msg_get_audit_trailer",
    "type": "CPP"
  },
  {
    "name": "T _os_mach_msg_get_context_trailer",
    "type": "CPP"
  },
  {
    "name": "t ___os_log_helper_1_2_5_8_32_8_32_8_32_8_32_8_32",
    "type": "CPP"
  },
  {
    "name": "t ___os_log_helper_1_2_4_8_32_8_32_8_32_8_32",
    "type": "CPP"
  },
  {
    "name": "T _os_assert_mach_port_status",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin_probe",
    "type": "CPP"
  },
  {
    "name": "t __check_internal_diags_profile",
    "type": "CPP"
  },
  {
    "name": "T _os_variant_has_factory_content",
    "type": "CPP"
  },
  {
    "name": "t __check_factory_content",
    "type": "CPP"
  },
  {
    "name": "T _os_variant_is_darwinos",
    "type": "CPP"
  },
  {
    "name": "T _os_variant_uses_ephemeral_storage",
    "type": "CPP"
  },
  {
    "name": "T _os_variant_check",
    "type": "CPP"
  },
  {
    "name": "t __parse_disabled_status",
    "type": "CPP"
  },
  {
    "name": "t __read_file",
    "type": "CPP"
  },
  {
    "name": "t ___os_log_helper_1_2_3_8_32_8_0_8_32",
    "type": "CPP"
  },
  {
    "name": "T _os_localtime_file",
    "type": "CPP"
  },
  {
    "name": "T _os_simple_hash_string_with_seed",
    "type": "CPP"
  },
  {
    "name": "T _os_simple_hash_string",
    "type": "CPP"
  },
  {
    "name": "T _realpath_np",
    "type": "CPP"
  },
  {
    "name": "T _memdup_np",
    "type": "CPP"
  },
  {
    "name": "T _memdup2_np",
    "type": "CPP"
  },
  {
    "name": "T _os_subcommand_main",
    "type": "CPP"
  },
  {
    "name": "T _os_subcommand_fprintf",
    "type": "CPP"
  },
  {
    "name": "t __os_subcommand_find",
    "type": "CPP"
  },
  {
    "name": "t __os_subcommand_print_usage",
    "type": "CPP"
  },
  {
    "name": "T _os_subcommand_vfprintf",
    "type": "CPP"
  },
  {
    "name": "t __main_invoke",
    "type": "CPP"
  },
  {
    "name": "t __help_invoke",
    "type": "CPP"
  },
  {
    "name": "t __print_header",
    "type": "CPP"
  },
  {
    "name": "t __os_subcommand_print_help_line",
    "type": "CPP"
  },
  {
    "name": "t __os_subcommand_copy_usage_line",
    "type": "CPP"
  },
  {
    "name": "t __os_subcommand_print_option_usage",
    "type": "CPP"
  },
  {
    "name": "t __os_subcommand_copy_option_spec_long",
    "type": "CPP"
  },
  {
    "name": "t __os_subcommand_copy_option_spec",
    "type": "CPP"
  },
  {
    "name": "T _fcheck_np",
    "type": "CPP"
  },
  {
    "name": "T _dup_np",
    "type": "CPP"
  },
  {
    "name": "T _claimfd_np",
    "type": "CPP"
  },
  {
    "name": "T _xferfd_np",
    "type": "CPP"
  },
  {
    "name": "T _close_drop_np",
    "type": "CPP"
  },
  {
    "name": "T _close_drop_optional_np",
    "type": "CPP"
  },
  {
    "name": "T _zsnprintf_np",
    "type": "CPP"
  },
  {
    "name": "T _crfprintf_np",
    "type": "CPP"
  },
  {
    "name": "T _vcrfprintf_np",
    "type": "CPP"
  },
  {
    "name": "T _wfprintf_np",
    "type": "CPP"
  },
  {
    "name": "T _vwfprintf_np",
    "type": "CPP"
  },
  {
    "name": "T _os_crash_set_reporter_port",
    "type": "CPP"
  },
  {
    "name": "T _os_crash_get_reporter_port_array",
    "type": "CPP"
  },
  {
    "name": "T _os_crash_port_array_deallocate",
    "type": "CPP"
  },
  {
    "name": "T _os_crash_spawnattr_set_reporter_port",
    "type": "CPP"
  },
  {
    "name": "T ___os_temporary_resource_shortage",
    "type": "CPP"
  },
  {
    "name": "t __print_preamble",
    "type": "CPP"
  },
  {
    "name": "T _sysctl_get_data_np",
    "type": "CPP"
  },
  {
    "name": "T _sysctlbyname_get_data_np",
    "type": "CPP"
  },
  {
    "name": "T _os_parse_boot_arg_int",
    "type": "CPP"
  },
  {
    "name": "t __get_boot_arg_value",
    "type": "CPP"
  },
  {
    "name": "T _os_parse_boot_arg_string",
    "type": "CPP"
  },
  {
    "name": "t __dirstat_fileid_set_add",
    "type": "CPP"
  },
  {
    "name": "T _sysexit_np",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libsystem_dnssd.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _DNSServiceCreateConnection",
    "type": "CPP"
  },
  {
    "name": "t _ConnectToServer",
    "type": "CPP"
  },
  {
    "name": "t _create_hdr",
    "type": "CPP"
  },
  {
    "name": "t _deliver_request",
    "type": "CPP"
  },
  {
    "name": "t _write_all",
    "type": "CPP"
  },
  {
    "name": "t _read_all",
    "type": "CPP"
  },
  {
    "name": "T _DNSServiceGetAddrInfo",
    "type": "CPP"
  },
  {
    "name": "T _DNSServiceSetDispatchQueue",
    "type": "CPP"
  },
  {
    "name": "T _DNSServiceRefSockFD",
    "type": "CPP"
  },
  {
    "name": "t ___DNSServiceSetDispatchQueue_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _DNSServiceProcessResult",
    "type": "CPP"
  },
  {
    "name": "t _ConnectionResponse",
    "type": "CPP"
  },
  {
    "name": "t _handle_addrinfo_response",
    "type": "CPP"
  },
  {
    "name": "T _DNSServiceRefDeallocate",
    "type": "CPP"
  },
  {
    "name": "t _FreeDNSServiceOp",
    "type": "CPP"
  },
  {
    "name": "t ___DNSServiceSetDispatchQueue_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "T _DNSServiceCreateDelegateConnection",
    "type": "CPP"
  },
  {
    "name": "T _DNSServiceRegisterRecord",
    "type": "CPP"
  },
  {
    "name": "T _DNSServiceBrowse",
    "type": "CPP"
  },
  {
    "name": "t _handle_browse_response",
    "type": "CPP"
  },
  {
    "name": "T _DNSServiceConstructFullName",
    "type": "CPP"
  },
  {
    "name": "t _DomainEndsInDot",
    "type": "CPP"
  },
  {
    "name": "T _DNSServiceQueryRecord",
    "type": "CPP"
  },
  {
    "name": "t _handle_query_response",
    "type": "CPP"
  },
  {
    "name": "T _TXTRecordCreate",
    "type": "CPP"
  },
  {
    "name": "T _TXTRecordDeallocate",
    "type": "CPP"
  },
  {
    "name": "T _TXTRecordSetValue",
    "type": "CPP"
  },
  {
    "name": "T _TXTRecordRemoveValue",
    "type": "CPP"
  },
  {
    "name": "t _InternalTXTRecordSearch",
    "type": "CPP"
  },
  {
    "name": "T _TXTRecordGetLength",
    "type": "CPP"
  },
  {
    "name": "T _TXTRecordGetBytesPtr",
    "type": "CPP"
  },
  {
    "name": "T _TXTRecordContainsKey",
    "type": "CPP"
  },
  {
    "name": "T _TXTRecordGetValuePtr",
    "type": "CPP"
  },
  {
    "name": "T _TXTRecordGetCount",
    "type": "CPP"
  },
  {
    "name": "T _TXTRecordGetItemAtIndex",
    "type": "CPP"
  },
  {
    "name": "T _DNSServiceBrowserCreate",
    "type": "CPP"
  },
  {
    "name": "T _DNSServiceResolverResolve",
    "type": "CPP"
  },
  {
    "name": "T _DNSServiceDiscovery_handleReply",
    "type": "CPP"
  },
  {
    "name": "T _DNSServiceDiscoveryMachPort",
    "type": "CPP"
  },
  {
    "name": "T _DNSServiceDiscoveryDeallocate",
    "type": "CPP"
  },
  {
    "name": "t _CallbackWithError",
    "type": "CPP"
  },
  {
    "name": "T _DNSServiceGetProperty",
    "type": "CPP"
  },
  {
    "name": "T _DNSServiceGetPID",
    "type": "CPP"
  },
  {
    "name": "T _DNSServiceResolve",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libsystem_featureflags.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "/usr/lib/system/libsystem_info.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _mbr_uid_to_uuid",
    "type": "CPP"
  },
  {
    "name": "T _mbr_identifier_to_uuid",
    "type": "CPP"
  },
  {
    "name": "T _mbr_identifier_translate",
    "type": "CPP"
  },
  {
    "name": "t __mbr_od_available",
    "type": "CPP"
  },
  {
    "name": "t __mbr_xpc_pipe",
    "type": "CPP"
  },
  {
    "name": "t ____mbr_xpc_pipe_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __od_rpc_call",
    "type": "CPP"
  },
  {
    "name": "t __valid_token",
    "type": "CPP"
  },
  {
    "name": "t __mbr_auto_os_release",
    "type": "CPP"
  },
  {
    "name": "T _si_set_nat64_v4_requires_synthesis",
    "type": "CPP"
  },
  {
    "name": "T _si_set_nat64_v4_synthesize",
    "type": "CPP"
  },
  {
    "name": "T _getpwuid",
    "type": "CPP"
  },
  {
    "name": "T _si_search",
    "type": "CPP"
  },
  {
    "name": "T _si_module_with_name",
    "type": "CPP"
  },
  {
    "name": "t _si_module_static_search",
    "type": "CPP"
  },
  {
    "name": "t ___si_module_static_search_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _si_module_config_modules_for_category",
    "type": "CPP"
  },
  {
    "name": "t _si_module_static_cache",
    "type": "CPP"
  },
  {
    "name": "t ___si_module_static_cache_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _si_module_static_ds",
    "type": "CPP"
  },
  {
    "name": "t ___si_module_static_ds_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _si_module_static_mdns",
    "type": "CPP"
  },
  {
    "name": "t ___si_module_static_mdns_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __mdns_init",
    "type": "CPP"
  },
  {
    "name": "t _si_module_static_file",
    "type": "CPP"
  },
  {
    "name": "t ___si_module_static_file_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _si_user_byuid",
    "type": "CPP"
  },
  {
    "name": "t _search_user_byuid",
    "type": "CPP"
  },
  {
    "name": "t _search_item_bynumber",
    "type": "CPP"
  },
  {
    "name": "t _search_get_module",
    "type": "CPP"
  },
  {
    "name": "t _cache_user_byuid",
    "type": "CPP"
  },
  {
    "name": "t _cache_fetch_item",
    "type": "CPP"
  },
  {
    "name": "t _cache_validate_item",
    "type": "CPP"
  },
  {
    "name": "T _si_item_release",
    "type": "CPP"
  },
  {
    "name": "t _ds_user_byuid",
    "type": "CPP"
  },
  {
    "name": "t __od_running",
    "type": "CPP"
  },
  {
    "name": "t __od_xpc_pipe",
    "type": "CPP"
  },
  {
    "name": "t ____od_xpc_pipe_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __xpc_query_key_id",
    "type": "CPP"
  },
  {
    "name": "t __ds_item",
    "type": "CPP"
  },
  {
    "name": "t __ds_get_validation",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt32",
    "type": "CPP"
  },
  {
    "name": "t __extract_user",
    "type": "CPP"
  },
  {
    "name": "t __extract_user_dict",
    "type": "CPP"
  },
  {
    "name": "t ____extract_user_dict_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __extract_string_from_xpc_object",
    "type": "CPP"
  },
  {
    "name": "t __extract_uint32_from_xpc_object",
    "type": "CPP"
  },
  {
    "name": "T _LI_ils_create",
    "type": "CPP"
  },
  {
    "name": "t _padsize",
    "type": "CPP"
  },
  {
    "name": "t __li_auto_os_release",
    "type": "CPP"
  },
  {
    "name": "t _search_cat_cache",
    "type": "CPP"
  },
  {
    "name": "t _si_cache_add_item",
    "type": "CPP"
  },
  {
    "name": "T _si_item_retain",
    "type": "CPP"
  },
  {
    "name": "T _LI_set_thread_item",
    "type": "CPP"
  },
  {
    "name": "t _LI_get_thread_info",
    "type": "CPP"
  },
  {
    "name": "t __LI_data_get",
    "type": "CPP"
  },
  {
    "name": "t __LI_data_init",
    "type": "CPP"
  },
  {
    "name": "T _si_item_is_valid",
    "type": "CPP"
  },
  {
    "name": "t __ds_is_valid",
    "type": "CPP"
  },
  {
    "name": "T _si_item_match",
    "type": "CPP"
  },
  {
    "name": "T _getgrgid",
    "type": "CPP"
  },
  {
    "name": "T _si_group_bygid",
    "type": "CPP"
  },
  {
    "name": "t _search_group_bygid",
    "type": "CPP"
  },
  {
    "name": "t _cache_group_bygid",
    "type": "CPP"
  },
  {
    "name": "t _ds_group_bygid",
    "type": "CPP"
  },
  {
    "name": "t __extract_group",
    "type": "CPP"
  },
  {
    "name": "t __extract_group_dict",
    "type": "CPP"
  },
  {
    "name": "t ____extract_group_dict_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __extract_string_list_from_xpc_array",
    "type": "CPP"
  },
  {
    "name": "t ____extract_string_list_from_xpc_array_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _getpwuid_r",
    "type": "CPP"
  },
  {
    "name": "t _copy_user_r",
    "type": "CPP"
  },
  {
    "name": "T _getaddrinfo",
    "type": "CPP"
  },
  {
    "name": "t __getaddrinfo_internal",
    "type": "CPP"
  },
  {
    "name": "T _si_addrinfo",
    "type": "CPP"
  },
  {
    "name": "t __gai_numericserv",
    "type": "CPP"
  },
  {
    "name": "t __gai_nat64_synthesis",
    "type": "CPP"
  },
  {
    "name": "t __gai_numerichost",
    "type": "CPP"
  },
  {
    "name": "T _si_list_release",
    "type": "CPP"
  },
  {
    "name": "t __LI_data_free",
    "type": "CPP"
  },
  {
    "name": "t __LI_thread_info_free",
    "type": "CPP"
  },
  {
    "name": "T _si_addrinfo_list",
    "type": "CPP"
  },
  {
    "name": "T _si_addrinfo_v6",
    "type": "CPP"
  },
  {
    "name": "T _si_list_add",
    "type": "CPP"
  },
  {
    "name": "T _si_list_concat",
    "type": "CPP"
  },
  {
    "name": "t __gai_sort_list",
    "type": "CPP"
  },
  {
    "name": "t _si_list_to_addrinfo",
    "type": "CPP"
  },
  {
    "name": "t _si_item_to_addrinfo",
    "type": "CPP"
  },
  {
    "name": "T _freeaddrinfo",
    "type": "CPP"
  },
  {
    "name": "T _si_addrinfo_v4",
    "type": "CPP"
  },
  {
    "name": "T _getifaddrs",
    "type": "CPP"
  },
  {
    "name": "T _freeifaddrs",
    "type": "CPP"
  },
  {
    "name": "T _xdr_bool",
    "type": "CPP"
  },
  {
    "name": "T _xdr_opaque",
    "type": "CPP"
  },
  {
    "name": "T _xdr_u_int32_t",
    "type": "CPP"
  },
  {
    "name": "T _xdr_u_int",
    "type": "CPP"
  },
  {
    "name": "T _xdr_int32_t",
    "type": "CPP"
  },
  {
    "name": "T _getpwnam",
    "type": "CPP"
  },
  {
    "name": "T _si_user_byname",
    "type": "CPP"
  },
  {
    "name": "t _search_user_byname",
    "type": "CPP"
  },
  {
    "name": "t _search_item_byname",
    "type": "CPP"
  },
  {
    "name": "t _cache_user_byname",
    "type": "CPP"
  },
  {
    "name": "T _getservbyname",
    "type": "CPP"
  },
  {
    "name": "T _si_service_byname",
    "type": "CPP"
  },
  {
    "name": "t _search_service_byname",
    "type": "CPP"
  },
  {
    "name": "t _cache_service_byname",
    "type": "CPP"
  },
  {
    "name": "t _ds_service_byname",
    "type": "CPP"
  },
  {
    "name": "t _file_service_byname",
    "type": "CPP"
  },
  {
    "name": "t __fsi_get_service",
    "type": "CPP"
  },
  {
    "name": "t __fsi_get_validation",
    "type": "CPP"
  },
  {
    "name": "t __fsi_get_line",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin",
    "type": "CPP"
  },
  {
    "name": "t __fsi_copy_string",
    "type": "CPP"
  },
  {
    "name": "t __fsi_parse_service",
    "type": "CPP"
  },
  {
    "name": "t __fsi_tokenize",
    "type": "CPP"
  },
  {
    "name": "t __fsi_append_string",
    "type": "CPP"
  },
  {
    "name": "t _file_is_valid",
    "type": "CPP"
  },
  {
    "name": "t __fsi_validate",
    "type": "CPP"
  },
  {
    "name": "T _getnameinfo",
    "type": "CPP"
  },
  {
    "name": "t __getnameinfo_interface_internal",
    "type": "CPP"
  },
  {
    "name": "T _si_nameinfo",
    "type": "CPP"
  },
  {
    "name": "t _si_search_file",
    "type": "CPP"
  },
  {
    "name": "t _file_user_byuid",
    "type": "CPP"
  },
  {
    "name": "t __fsi_get_user",
    "type": "CPP"
  },
  {
    "name": "t __fsi_parse_user",
    "type": "CPP"
  },
  {
    "name": "t _ds_user_byname",
    "type": "CPP"
  },
  {
    "name": "t __xpc_query_key_string",
    "type": "CPP"
  },
  {
    "name": "T _if_indextoname",
    "type": "CPP"
  },
  {
    "name": "T _if_nametoindex",
    "type": "CPP"
  },
  {
    "name": "T _hstrerror",
    "type": "CPP"
  },
  {
    "name": "T _endpwent",
    "type": "CPP"
  },
  {
    "name": "T _LI_set_thread_list",
    "type": "CPP"
  },
  {
    "name": "T _si_list_reset",
    "type": "CPP"
  },
  {
    "name": "T _getgrnam",
    "type": "CPP"
  },
  {
    "name": "T _si_group_byname",
    "type": "CPP"
  },
  {
    "name": "t _search_group_byname",
    "type": "CPP"
  },
  {
    "name": "t _cache_group_byname",
    "type": "CPP"
  },
  {
    "name": "t _ds_group_byname",
    "type": "CPP"
  },
  {
    "name": "T _endgrent",
    "type": "CPP"
  },
  {
    "name": "T _mbr_group_name_to_uuid",
    "type": "CPP"
  },
  {
    "name": "T _mbr_check_membership",
    "type": "CPP"
  },
  {
    "name": "T _mbr_check_membership_ext",
    "type": "CPP"
  },
  {
    "name": "t __mbr_fork_prepare",
    "type": "CPP"
  },
  {
    "name": "t __od_fork_prepare",
    "type": "CPP"
  },
  {
    "name": "t __mdns_atfork_prepare",
    "type": "CPP"
  },
  {
    "name": "t __mdns_atfork_parent",
    "type": "CPP"
  },
  {
    "name": "t __od_fork_parent",
    "type": "CPP"
  },
  {
    "name": "t __mbr_fork_parent",
    "type": "CPP"
  },
  {
    "name": "t _file_user_byname",
    "type": "CPP"
  },
  {
    "name": "T _mbr_user_name_to_uuid",
    "type": "CPP"
  },
  {
    "name": "T _mbr_check_membership_by_id",
    "type": "CPP"
  },
  {
    "name": "T _getpwuuid",
    "type": "CPP"
  },
  {
    "name": "T _si_user_byuuid",
    "type": "CPP"
  },
  {
    "name": "t _search_user_byuuid",
    "type": "CPP"
  },
  {
    "name": "t _search_item_byuuid",
    "type": "CPP"
  },
  {
    "name": "t _ds_user_byuuid",
    "type": "CPP"
  },
  {
    "name": "t __xpc_query_key_uuid",
    "type": "CPP"
  },
  {
    "name": "T _si_async_call",
    "type": "CPP"
  },
  {
    "name": "t _si_async_workunit_create",
    "type": "CPP"
  },
  {
    "name": "t _si_async_worklist_add_unit",
    "type": "CPP"
  },
  {
    "name": "t ___si_async_call_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _si_async_launchpad",
    "type": "CPP"
  },
  {
    "name": "T _si_item_call",
    "type": "CPP"
  },
  {
    "name": "t _mdns_item_call",
    "type": "CPP"
  },
  {
    "name": "t __mdns_debug_message",
    "type": "CPP"
  },
  {
    "name": "t __mdns_search",
    "type": "CPP"
  },
  {
    "name": "t __mdns_search_ex",
    "type": "CPP"
  },
  {
    "name": "t _si_inet_config",
    "type": "CPP"
  },
  {
    "name": "t __mdns_deadline",
    "type": "CPP"
  },
  {
    "name": "t __mdns_now",
    "type": "CPP"
  },
  {
    "name": "t __mdns_add_time",
    "type": "CPP"
  },
  {
    "name": "t __mdns_query_start",
    "type": "CPP"
  },
  {
    "name": "t __mdns_make_query",
    "type": "CPP"
  },
  {
    "name": "t __mdns_pack_domain_name",
    "type": "CPP"
  },
  {
    "name": "t __mdns_ipv6_extract_scope_id",
    "type": "CPP"
  },
  {
    "name": "t __is_rev_link_local",
    "type": "CPP"
  },
  {
    "name": "t __mdns_query_callback",
    "type": "CPP"
  },
  {
    "name": "t __mdns_query_is_complete",
    "type": "CPP"
  },
  {
    "name": "t __mdns_query_clear",
    "type": "CPP"
  },
  {
    "name": "t __mdns_hostent_clear",
    "type": "CPP"
  },
  {
    "name": "t __mdns_reply_clear",
    "type": "CPP"
  },
  {
    "name": "t _si_async_workunit_release",
    "type": "CPP"
  },
  {
    "name": "T _getaddrinfo_async_handle_reply",
    "type": "CPP"
  },
  {
    "name": "T _si_async_handle_reply",
    "type": "CPP"
  },
  {
    "name": "t _si_async_worklist_find_unit",
    "type": "CPP"
  },
  {
    "name": "T _si_module_release",
    "type": "CPP"
  },
  {
    "name": "t _si_async_worklist_remove_unit",
    "type": "CPP"
  },
  {
    "name": "T _getipnodebyname",
    "type": "CPP"
  },
  {
    "name": "T _si_ipnode_byname",
    "type": "CPP"
  },
  {
    "name": "T _si_host_byname",
    "type": "CPP"
  },
  {
    "name": "t _search_host_byname",
    "type": "CPP"
  },
  {
    "name": "t _cache_host_byname",
    "type": "CPP"
  },
  {
    "name": "t _mdns_hostbyname",
    "type": "CPP"
  },
  {
    "name": "t __mdns_hostent_append_alias",
    "type": "CPP"
  },
  {
    "name": "t __mdns_canonicalize",
    "type": "CPP"
  },
  {
    "name": "t __mdns_hostent_append_addr",
    "type": "CPP"
  },
  {
    "name": "t _lower_case",
    "type": "CPP"
  },
  {
    "name": "t _append_addr",
    "type": "CPP"
  },
  {
    "name": "T _freehostent",
    "type": "CPP"
  },
  {
    "name": "t _search_wants_addrinfo",
    "type": "CPP"
  },
  {
    "name": "t _search_addrinfo",
    "type": "CPP"
  },
  {
    "name": "t _mdns_addrinfo",
    "type": "CPP"
  },
  {
    "name": "T __gai_serv_to_port",
    "type": "CPP"
  },
  {
    "name": "T _si_addrinfo_list_from_hostent",
    "type": "CPP"
  },
  {
    "name": "t __gai_addr_sort",
    "type": "CPP"
  },
  {
    "name": "T _si_search_module_set_flags",
    "type": "CPP"
  },
  {
    "name": "t _search_set_flags",
    "type": "CPP"
  },
  {
    "name": "T _user_from_uid",
    "type": "CPP"
  },
  {
    "name": "T _initgroups",
    "type": "CPP"
  },
  {
    "name": "t _getgrouplist_internal",
    "type": "CPP"
  },
  {
    "name": "T _si_grouplist",
    "type": "CPP"
  },
  {
    "name": "t _search_groupist",
    "type": "CPP"
  },
  {
    "name": "t _ds_grouplist",
    "type": "CPP"
  },
  {
    "name": "t _file_grouplist",
    "type": "CPP"
  },
  {
    "name": "T _si_host_byaddr",
    "type": "CPP"
  },
  {
    "name": "t _search_host_byaddr",
    "type": "CPP"
  },
  {
    "name": "t _cache_host_byaddr",
    "type": "CPP"
  },
  {
    "name": "t _mdns_hostbyaddr",
    "type": "CPP"
  },
  {
    "name": "t __mdns_parse_domain_name",
    "type": "CPP"
  },
  {
    "name": "t _file_host_byaddr",
    "type": "CPP"
  },
  {
    "name": "t __fsi_get_host",
    "type": "CPP"
  },
  {
    "name": "T _getnameinfo_async_start",
    "type": "CPP"
  },
  {
    "name": "T __getnameinfo_interface_async_call",
    "type": "CPP"
  },
  {
    "name": "t _mdns_is_valid",
    "type": "CPP"
  },
  {
    "name": "T _si_service_byport",
    "type": "CPP"
  },
  {
    "name": "t _search_service_byport",
    "type": "CPP"
  },
  {
    "name": "t _cache_service_byport",
    "type": "CPP"
  },
  {
    "name": "t _ds_service_byport",
    "type": "CPP"
  },
  {
    "name": "t _file_service_byport",
    "type": "CPP"
  },
  {
    "name": "t _si_libinfo_nameinfo_callback",
    "type": "CPP"
  },
  {
    "name": "T _setfsent",
    "type": "CPP"
  },
  {
    "name": "T _getfsent",
    "type": "CPP"
  },
  {
    "name": "T _LI_get_thread_list",
    "type": "CPP"
  },
  {
    "name": "T _si_fs_all",
    "type": "CPP"
  },
  {
    "name": "t _search_fs_all",
    "type": "CPP"
  },
  {
    "name": "t _search_list",
    "type": "CPP"
  },
  {
    "name": "t _cache_fs_all",
    "type": "CPP"
  },
  {
    "name": "t _cache_fetch_list",
    "type": "CPP"
  },
  {
    "name": "t _ds_fs_all",
    "type": "CPP"
  },
  {
    "name": "t __ds_list",
    "type": "CPP"
  },
  {
    "name": "t ____ds_list_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __extract_fstab",
    "type": "CPP"
  },
  {
    "name": "t ____extract_fstab_dict_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _file_fs_all",
    "type": "CPP"
  },
  {
    "name": "t __fsi_get_fs",
    "type": "CPP"
  },
  {
    "name": "t ____fsi_fs_root_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _si_list_next",
    "type": "CPP"
  },
  {
    "name": "T _endfsent",
    "type": "CPP"
  },
  {
    "name": "t _file_addrinfo",
    "type": "CPP"
  },
  {
    "name": "T __gai_simple",
    "type": "CPP"
  },
  {
    "name": "t _file_host_byname",
    "type": "CPP"
  },
  {
    "name": "t _file_group_byname",
    "type": "CPP"
  },
  {
    "name": "t __fsi_get_group",
    "type": "CPP"
  },
  {
    "name": "T _herror",
    "type": "CPP"
  },
  {
    "name": "T _dn_expand",
    "type": "CPP"
  },
  {
    "name": "T ___dn_skipname",
    "type": "CPP"
  },
  {
    "name": "T __getshort",
    "type": "CPP"
  },
  {
    "name": "T __getlong",
    "type": "CPP"
  },
  {
    "name": "T _res_init",
    "type": "CPP"
  },
  {
    "name": "T _res_query",
    "type": "CPP"
  },
  {
    "name": "t __mdns_query",
    "type": "CPP"
  },
  {
    "name": "T _res_search",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt16",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt16",
    "type": "CPP"
  },
  {
    "name": "T _if_nameindex",
    "type": "CPP"
  },
  {
    "name": "T _if_freenameindex",
    "type": "CPP"
  },
  {
    "name": "T _inet6_option_space",
    "type": "CPP"
  },
  {
    "name": "T _inet6_option_init",
    "type": "CPP"
  },
  {
    "name": "T _inet6_option_append",
    "type": "CPP"
  },
  {
    "name": "t _inet6_insert_padopt",
    "type": "CPP"
  },
  {
    "name": "T _inet6_option_alloc",
    "type": "CPP"
  },
  {
    "name": "T _inet6_option_next",
    "type": "CPP"
  },
  {
    "name": "t _ip6optlen",
    "type": "CPP"
  },
  {
    "name": "T _inet6_option_find",
    "type": "CPP"
  },
  {
    "name": "T _inet6_opt_init",
    "type": "CPP"
  },
  {
    "name": "T _inet6_opt_append",
    "type": "CPP"
  },
  {
    "name": "T _inet6_opt_finish",
    "type": "CPP"
  },
  {
    "name": "T _inet6_opt_set_val",
    "type": "CPP"
  },
  {
    "name": "T _inet6_opt_next",
    "type": "CPP"
  },
  {
    "name": "T _inet6_opt_find",
    "type": "CPP"
  },
  {
    "name": "T _inet6_opt_get_val",
    "type": "CPP"
  },
  {
    "name": "T _inet6_rthdr_space",
    "type": "CPP"
  },
  {
    "name": "T _inet6_rthdr_init",
    "type": "CPP"
  },
  {
    "name": "T _inet6_rthdr_add",
    "type": "CPP"
  },
  {
    "name": "T _inet6_rthdr_lasthop",
    "type": "CPP"
  },
  {
    "name": "T _inet6_rthdr_segments",
    "type": "CPP"
  },
  {
    "name": "T _inet6_rthdr_getaddr",
    "type": "CPP"
  },
  {
    "name": "T _inet6_rthdr_getflags",
    "type": "CPP"
  },
  {
    "name": "T _inet6_rth_space",
    "type": "CPP"
  },
  {
    "name": "T _inet6_rth_init",
    "type": "CPP"
  },
  {
    "name": "T _inet6_rth_add",
    "type": "CPP"
  },
  {
    "name": "T _inet6_rth_reverse",
    "type": "CPP"
  },
  {
    "name": "T _inet6_rth_segments",
    "type": "CPP"
  },
  {
    "name": "T _inet6_rth_getaddr",
    "type": "CPP"
  },
  {
    "name": "t _cache_close",
    "type": "CPP"
  },
  {
    "name": "t _cache_user_all",
    "type": "CPP"
  },
  {
    "name": "t _cache_group_all",
    "type": "CPP"
  },
  {
    "name": "t _cache_grouplist",
    "type": "CPP"
  },
  {
    "name": "t _cache_alias_byname",
    "type": "CPP"
  },
  {
    "name": "t _cache_alias_all",
    "type": "CPP"
  },
  {
    "name": "t _cache_host_all",
    "type": "CPP"
  },
  {
    "name": "t _cache_network_byname",
    "type": "CPP"
  },
  {
    "name": "t _cache_network_byaddr",
    "type": "CPP"
  },
  {
    "name": "t _cache_network_all",
    "type": "CPP"
  },
  {
    "name": "t _cache_service_all",
    "type": "CPP"
  },
  {
    "name": "t _cache_protocol_byname",
    "type": "CPP"
  },
  {
    "name": "t _cache_protocol_bynumber",
    "type": "CPP"
  },
  {
    "name": "t _cache_protocol_all",
    "type": "CPP"
  },
  {
    "name": "t _cache_rpc_byname",
    "type": "CPP"
  },
  {
    "name": "t _cache_rpc_bynumber",
    "type": "CPP"
  },
  {
    "name": "t _cache_rpc_all",
    "type": "CPP"
  },
  {
    "name": "t _cache_fs_byspec",
    "type": "CPP"
  },
  {
    "name": "t _cache_fs_byfile",
    "type": "CPP"
  },
  {
    "name": "t _cache_mac_byname",
    "type": "CPP"
  },
  {
    "name": "t _cache_mac_bymac",
    "type": "CPP"
  },
  {
    "name": "t _cache_mac_all",
    "type": "CPP"
  },
  {
    "name": "t _cache_nameinfo",
    "type": "CPP"
  },
  {
    "name": "t _si_cache_add_list",
    "type": "CPP"
  },
  {
    "name": "t _cache_validate_list",
    "type": "CPP"
  },
  {
    "name": "T __si_disable_opendirectory",
    "type": "CPP"
  },
  {
    "name": "T __ds_running",
    "type": "CPP"
  },
  {
    "name": "t __ds_child",
    "type": "CPP"
  },
  {
    "name": "t _ds_user_all",
    "type": "CPP"
  },
  {
    "name": "t _ds_group_byuuid",
    "type": "CPP"
  },
  {
    "name": "t _ds_group_all",
    "type": "CPP"
  },
  {
    "name": "t _ds_netgroup_byname",
    "type": "CPP"
  },
  {
    "name": "t _ds_in_netgroup",
    "type": "CPP"
  },
  {
    "name": "t _ds_alias_byname",
    "type": "CPP"
  },
  {
    "name": "t _ds_alias_all",
    "type": "CPP"
  },
  {
    "name": "t _ds_network_byname",
    "type": "CPP"
  },
  {
    "name": "t _ds_network_byaddr",
    "type": "CPP"
  },
  {
    "name": "t _ds_network_all",
    "type": "CPP"
  },
  {
    "name": "t _ds_service_all",
    "type": "CPP"
  },
  {
    "name": "t _ds_protocol_byname",
    "type": "CPP"
  },
  {
    "name": "t _ds_protocol_bynumber",
    "type": "CPP"
  },
  {
    "name": "t _ds_protocol_all",
    "type": "CPP"
  },
  {
    "name": "t _ds_rpc_byname",
    "type": "CPP"
  },
  {
    "name": "t _ds_rpc_bynumber",
    "type": "CPP"
  },
  {
    "name": "t _ds_rpc_all",
    "type": "CPP"
  },
  {
    "name": "t _ds_fs_byspec",
    "type": "CPP"
  },
  {
    "name": "t _ds_fs_byfile",
    "type": "CPP"
  },
  {
    "name": "t _ds_mac_byname",
    "type": "CPP"
  },
  {
    "name": "t _ds_mac_bymac",
    "type": "CPP"
  },
  {
    "name": "t __ds_serv_cache_free",
    "type": "CPP"
  },
  {
    "name": "t __od_fork_child",
    "type": "CPP"
  },
  {
    "name": "t __extract_user_array",
    "type": "CPP"
  },
  {
    "name": "t __extract_string_from_xpc_array_index",
    "type": "CPP"
  },
  {
    "name": "t __extract_uint32_from_xpc_array_index",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32r40r48r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32r40r48r",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32r",
    "type": "CPP"
  },
  {
    "name": "t __extract_group_array",
    "type": "CPP"
  },
  {
    "name": "t __extract_string_list_from_xpc_array_index",
    "type": "CPP"
  },
  {
    "name": "t ____extract_string_list_from_xpc_array_index_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___os_log_helper_16_0_1_4_0",
    "type": "CPP"
  },
  {
    "name": "t __extract_uint32_from_xpc_dict",
    "type": "CPP"
  },
  {
    "name": "t __extract_netgroup",
    "type": "CPP"
  },
  {
    "name": "t __extract_netgroup_array",
    "type": "CPP"
  },
  {
    "name": "t __extract_netgroup_dict",
    "type": "CPP"
  },
  {
    "name": "t ____extract_netgroup_dict_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32r40r48r56r64r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32r40r48r56r64r",
    "type": "CPP"
  },
  {
    "name": "t __extract_alias",
    "type": "CPP"
  },
  {
    "name": "t __extract_alias_array",
    "type": "CPP"
  },
  {
    "name": "t __extract_alias_dict",
    "type": "CPP"
  },
  {
    "name": "t ____extract_alias_dict_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __extract_network",
    "type": "CPP"
  },
  {
    "name": "t __extract_network_array",
    "type": "CPP"
  },
  {
    "name": "t __extract_network_dict",
    "type": "CPP"
  },
  {
    "name": "t ____extract_network_dict_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __extract_service",
    "type": "CPP"
  },
  {
    "name": "t __extract_service_array",
    "type": "CPP"
  },
  {
    "name": "t __extract_service_dict",
    "type": "CPP"
  },
  {
    "name": "t ____extract_service_dict_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt16",
    "type": "CPP"
  },
  {
    "name": "t __extract_protocol",
    "type": "CPP"
  },
  {
    "name": "t __extract_protocol_array",
    "type": "CPP"
  },
  {
    "name": "t __extract_protocol_dict",
    "type": "CPP"
  },
  {
    "name": "t ____extract_protocol_dict_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __xpc_query_key_int",
    "type": "CPP"
  },
  {
    "name": "t __extract_rpc",
    "type": "CPP"
  },
  {
    "name": "t __extract_rpc_array",
    "type": "CPP"
  },
  {
    "name": "t __extract_rpc_dict",
    "type": "CPP"
  },
  {
    "name": "t ____extract_rpc_dict_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __extract_fstab_array",
    "type": "CPP"
  },
  {
    "name": "t __extract_fstab_dict",
    "type": "CPP"
  },
  {
    "name": "t __extract_mac_mac",
    "type": "CPP"
  },
  {
    "name": "t __extract_string_from_xpc_dict",
    "type": "CPP"
  },
  {
    "name": "t __extract_mac_name",
    "type": "CPP"
  },
  {
    "name": "t __fsi_free_file_netgroup",
    "type": "CPP"
  },
  {
    "name": "t _file_user_all",
    "type": "CPP"
  },
  {
    "name": "t _file_group_bygid",
    "type": "CPP"
  },
  {
    "name": "t _file_group_all",
    "type": "CPP"
  },
  {
    "name": "t _file_netgroup_byname",
    "type": "CPP"
  },
  {
    "name": "t _file_in_netgroup",
    "type": "CPP"
  },
  {
    "name": "t _file_alias_byname",
    "type": "CPP"
  },
  {
    "name": "t _file_alias_all",
    "type": "CPP"
  },
  {
    "name": "t _file_host_all",
    "type": "CPP"
  },
  {
    "name": "t _file_network_byname",
    "type": "CPP"
  },
  {
    "name": "t _file_network_byaddr",
    "type": "CPP"
  },
  {
    "name": "t _file_network_all",
    "type": "CPP"
  },
  {
    "name": "t _file_service_all",
    "type": "CPP"
  },
  {
    "name": "t _file_protocol_byname",
    "type": "CPP"
  },
  {
    "name": "t _file_protocol_bynumber",
    "type": "CPP"
  },
  {
    "name": "t _file_protocol_all",
    "type": "CPP"
  },
  {
    "name": "t _file_rpc_byname",
    "type": "CPP"
  },
  {
    "name": "t _file_rpc_bynumber",
    "type": "CPP"
  },
  {
    "name": "t _file_rpc_all",
    "type": "CPP"
  },
  {
    "name": "t _file_fs_byspec",
    "type": "CPP"
  },
  {
    "name": "t _file_fs_byfile",
    "type": "CPP"
  },
  {
    "name": "t _file_mac_byname",
    "type": "CPP"
  },
  {
    "name": "t _file_mac_bymac",
    "type": "CPP"
  },
  {
    "name": "t _file_mac_all",
    "type": "CPP"
  },
  {
    "name": "t __fsi_validation_path",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt32",
    "type": "CPP"
  },
  {
    "name": "t __fsi_parse_group",
    "type": "CPP"
  },
  {
    "name": "t __fsi_get_grouplist",
    "type": "CPP"
  },
  {
    "name": "t __fsi_check_netgroup_cache",
    "type": "CPP"
  },
  {
    "name": "t __fsi_find_netgroup",
    "type": "CPP"
  },
  {
    "name": "t __fsi_read_netgroup_line",
    "type": "CPP"
  },
  {
    "name": "t __fsi_process_netgroup_line",
    "type": "CPP"
  },
  {
    "name": "t __fsi_flatten_netgroup",
    "type": "CPP"
  },
  {
    "name": "t __fsi_append_char_to_line",
    "type": "CPP"
  },
  {
    "name": "t __fsi_add_netgroup_member",
    "type": "CPP"
  },
  {
    "name": "t __fsi_add_netgroup_group",
    "type": "CPP"
  },
  {
    "name": "t __fsi_get_alias",
    "type": "CPP"
  },
  {
    "name": "t __fsi_parse_alias",
    "type": "CPP"
  },
  {
    "name": "t __fsi_parse_host",
    "type": "CPP"
  },
  {
    "name": "t __fsi_get_name_number_aliases",
    "type": "CPP"
  },
  {
    "name": "t __fsi_parse_name_num_aliases",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt16",
    "type": "CPP"
  },
  {
    "name": "t __fsi_fs_root",
    "type": "CPP"
  },
  {
    "name": "t __fsi_parse_fs",
    "type": "CPP"
  },
  {
    "name": "t __fsi_get_device_path",
    "type": "CPP"
  },
  {
    "name": "t __fsi_get_ether",
    "type": "CPP"
  },
  {
    "name": "t __fsi_parse_ether",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin_probe",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_query",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_new",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_add_dict",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_add_key",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_add_val",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_query_key_val",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt32",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_query_key_int",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_query_key_uint",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_new_zone",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_init_zone",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_init",
    "type": "CPP"
  },
  {
    "name": "t _kvbuf_grow",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_add_val_len",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_get_len",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_make_purgeable",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_make_nonpurgeable",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_free",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_append_kvbuf",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_reset",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_next_dict",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_next_key",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_next_val",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_next_val_len",
    "type": "CPP"
  },
  {
    "name": "T _kvbuf_decode",
    "type": "CPP"
  },
  {
    "name": "T _kvarray_free",
    "type": "CPP"
  },
  {
    "name": "t _si_libinfo_general_callback",
    "type": "CPP"
  },
  {
    "name": "T _setpwent",
    "type": "CPP"
  },
  {
    "name": "T _getpwent",
    "type": "CPP"
  },
  {
    "name": "T _setpassent",
    "type": "CPP"
  },
  {
    "name": "T _getgruuid",
    "type": "CPP"
  },
  {
    "name": "T _setgrent",
    "type": "CPP"
  },
  {
    "name": "T _getgrent",
    "type": "CPP"
  },
  {
    "name": "T _setgroupent",
    "type": "CPP"
  },
  {
    "name": "T _innetgr",
    "type": "CPP"
  },
  {
    "name": "T _setnetgrent",
    "type": "CPP"
  },
  {
    "name": "T _getnetgrent",
    "type": "CPP"
  },
  {
    "name": "T _endnetgrent",
    "type": "CPP"
  },
  {
    "name": "T _getgrouplist",
    "type": "CPP"
  },
  {
    "name": "t __check_groups",
    "type": "CPP"
  },
  {
    "name": "T _getgrouplist_2",
    "type": "CPP"
  },
  {
    "name": "t __getgrouplist_2_internal",
    "type": "CPP"
  },
  {
    "name": "T _getgroupcount",
    "type": "CPP"
  },
  {
    "name": "T _alias_getbyname",
    "type": "CPP"
  },
  {
    "name": "T _alias_setent",
    "type": "CPP"
  },
  {
    "name": "T _alias_getent",
    "type": "CPP"
  },
  {
    "name": "T _alias_endent",
    "type": "CPP"
  },
  {
    "name": "T _gethostbyname",
    "type": "CPP"
  },
  {
    "name": "t _gethostbyname_async_call",
    "type": "CPP"
  },
  {
    "name": "T _gethostbyname_async_start",
    "type": "CPP"
  },
  {
    "name": "T _gethostbyname_async_cancel",
    "type": "CPP"
  },
  {
    "name": "T _gethostbyname_async_handleReply",
    "type": "CPP"
  },
  {
    "name": "T _gethostbyname2",
    "type": "CPP"
  },
  {
    "name": "T _gethostbyaddr",
    "type": "CPP"
  },
  {
    "name": "t _gethostbyaddr_async_call",
    "type": "CPP"
  },
  {
    "name": "T _gethostbyaddr_async_start",
    "type": "CPP"
  },
  {
    "name": "T _gethostbyaddr_async_cancel",
    "type": "CPP"
  },
  {
    "name": "T _gethostbyaddr_async_handleReply",
    "type": "CPP"
  },
  {
    "name": "T _getipnodebyaddr",
    "type": "CPP"
  },
  {
    "name": "t _is_a4_mapped",
    "type": "CPP"
  },
  {
    "name": "t _is_a4_compat",
    "type": "CPP"
  },
  {
    "name": "T _sethostent",
    "type": "CPP"
  },
  {
    "name": "T _gethostent",
    "type": "CPP"
  },
  {
    "name": "T _endhostent",
    "type": "CPP"
  },
  {
    "name": "T _ether_hostton",
    "type": "CPP"
  },
  {
    "name": "T _ether_ntohost",
    "type": "CPP"
  },
  {
    "name": "T _getnetbyname",
    "type": "CPP"
  },
  {
    "name": "T _getnetbyaddr",
    "type": "CPP"
  },
  {
    "name": "T _setnetent",
    "type": "CPP"
  },
  {
    "name": "T _getnetent",
    "type": "CPP"
  },
  {
    "name": "T _endnetent",
    "type": "CPP"
  },
  {
    "name": "T _getservbyport",
    "type": "CPP"
  },
  {
    "name": "T _setservent",
    "type": "CPP"
  },
  {
    "name": "T _getservent",
    "type": "CPP"
  },
  {
    "name": "T _endservent",
    "type": "CPP"
  },
  {
    "name": "T _getprotobyname",
    "type": "CPP"
  },
  {
    "name": "T _getprotobynumber",
    "type": "CPP"
  },
  {
    "name": "T _setprotoent",
    "type": "CPP"
  },
  {
    "name": "T _getprotoent",
    "type": "CPP"
  },
  {
    "name": "T _endprotoent",
    "type": "CPP"
  },
  {
    "name": "T _getrpcbyname",
    "type": "CPP"
  },
  {
    "name": "T _getrpcbynumber",
    "type": "CPP"
  },
  {
    "name": "T _setrpcent",
    "type": "CPP"
  },
  {
    "name": "T _getrpcent",
    "type": "CPP"
  },
  {
    "name": "T _endrpcent",
    "type": "CPP"
  },
  {
    "name": "T _getfsspec",
    "type": "CPP"
  },
  {
    "name": "T _getfsfile",
    "type": "CPP"
  },
  {
    "name": "T __getaddrinfo_interface_async_call",
    "type": "CPP"
  },
  {
    "name": "t _si_libinfo_addrinfo_callback",
    "type": "CPP"
  },
  {
    "name": "t _getaddrinfo_async_call",
    "type": "CPP"
  },
  {
    "name": "T _getaddrinfo_async_start",
    "type": "CPP"
  },
  {
    "name": "T _getaddrinfo_async_send",
    "type": "CPP"
  },
  {
    "name": "T _getaddrinfo_async_receive",
    "type": "CPP"
  },
  {
    "name": "T _getaddrinfo_async_cancel",
    "type": "CPP"
  },
  {
    "name": "t _getnameinfo_async_call",
    "type": "CPP"
  },
  {
    "name": "T _getnameinfo_async_send",
    "type": "CPP"
  },
  {
    "name": "T _getnameinfo_async_cancel",
    "type": "CPP"
  },
  {
    "name": "T _getnameinfo_async_handle_reply",
    "type": "CPP"
  },
  {
    "name": "T _getgrnam_r",
    "type": "CPP"
  },
  {
    "name": "t _copy_group_r",
    "type": "CPP"
  },
  {
    "name": "T _getgrgid_r",
    "type": "CPP"
  },
  {
    "name": "T _getgruuid_r",
    "type": "CPP"
  },
  {
    "name": "T _getpwnam_r",
    "type": "CPP"
  },
  {
    "name": "T _getpwuuid_r",
    "type": "CPP"
  },
  {
    "name": "T _group_from_gid",
    "type": "CPP"
  },
  {
    "name": "T _prdb_getbyname",
    "type": "CPP"
  },
  {
    "name": "T _prdb_get",
    "type": "CPP"
  },
  {
    "name": "T _prdb_set",
    "type": "CPP"
  },
  {
    "name": "T _prdb_end",
    "type": "CPP"
  },
  {
    "name": "T _bootparams_getbyname",
    "type": "CPP"
  },
  {
    "name": "T _bootparams_getent",
    "type": "CPP"
  },
  {
    "name": "T _bootparams_setent",
    "type": "CPP"
  },
  {
    "name": "T _bootparams_endent",
    "type": "CPP"
  },
  {
    "name": "t ____check_groups_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _merge_gid",
    "type": "CPP"
  },
  {
    "name": "t _mdns_close",
    "type": "CPP"
  },
  {
    "name": "t _mdns_srv_byname",
    "type": "CPP"
  },
  {
    "name": "t ___os_log_helper_16_2_1_8_32",
    "type": "CPP"
  },
  {
    "name": "t __mdns_sub_time",
    "type": "CPP"
  },
  {
    "name": "t __mdns_timeout",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt16",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt32",
    "type": "CPP"
  },
  {
    "name": "t __is_v4addr_ifaddr",
    "type": "CPP"
  },
  {
    "name": "t __mdns_reverse_ipv4",
    "type": "CPP"
  },
  {
    "name": "t __is_v6addr_ifaddr",
    "type": "CPP"
  },
  {
    "name": "t __mdns_reverse_ipv6",
    "type": "CPP"
  },
  {
    "name": "t __mdns_atfork_child",
    "type": "CPP"
  },
  {
    "name": "t _search_close",
    "type": "CPP"
  },
  {
    "name": "t _search_is_valid",
    "type": "CPP"
  },
  {
    "name": "t _search_user_all",
    "type": "CPP"
  },
  {
    "name": "t _search_group_byuuid",
    "type": "CPP"
  },
  {
    "name": "t _search_group_all",
    "type": "CPP"
  },
  {
    "name": "t _search_netgroup_byname",
    "type": "CPP"
  },
  {
    "name": "t _search_in_netgroup",
    "type": "CPP"
  },
  {
    "name": "t _search_alias_byname",
    "type": "CPP"
  },
  {
    "name": "t _search_alias_all",
    "type": "CPP"
  },
  {
    "name": "t _search_host_all",
    "type": "CPP"
  },
  {
    "name": "t _search_network_byname",
    "type": "CPP"
  },
  {
    "name": "t _search_network_byaddr",
    "type": "CPP"
  },
  {
    "name": "t _search_network_all",
    "type": "CPP"
  },
  {
    "name": "t _search_service_all",
    "type": "CPP"
  },
  {
    "name": "t _search_protocol_byname",
    "type": "CPP"
  },
  {
    "name": "t _search_protocol_bynumber",
    "type": "CPP"
  },
  {
    "name": "t _search_protocol_all",
    "type": "CPP"
  },
  {
    "name": "t _search_rpc_byname",
    "type": "CPP"
  },
  {
    "name": "t _search_rpc_bynumber",
    "type": "CPP"
  },
  {
    "name": "t _search_rpc_all",
    "type": "CPP"
  },
  {
    "name": "t _search_fs_byspec",
    "type": "CPP"
  },
  {
    "name": "t _search_fs_byfile",
    "type": "CPP"
  },
  {
    "name": "t _search_mac_byname",
    "type": "CPP"
  },
  {
    "name": "t _search_mac_bymac",
    "type": "CPP"
  },
  {
    "name": "t _search_mac_all",
    "type": "CPP"
  },
  {
    "name": "t _search_nameinfo",
    "type": "CPP"
  },
  {
    "name": "t _search_srv_byname",
    "type": "CPP"
  },
  {
    "name": "t _si_module_config_parse_line",
    "type": "CPP"
  },
  {
    "name": "T _si_list_retain",
    "type": "CPP"
  },
  {
    "name": "T _gai_strerror",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt16",
    "type": "CPP"
  },
  {
    "name": "T _si_addrinfo_v4_mapped",
    "type": "CPP"
  },
  {
    "name": "T _si_srv_byname",
    "type": "CPP"
  },
  {
    "name": "T _si_wants_addrinfo",
    "type": "CPP"
  },
  {
    "name": "t _gai_log",
    "type": "CPP"
  },
  {
    "name": "t ___os_log_helper_16_0_0",
    "type": "CPP"
  },
  {
    "name": "T __gai_nat64_can_v4_address_be_synthesized",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt32",
    "type": "CPP"
  },
  {
    "name": "t __gai_srv",
    "type": "CPP"
  },
  {
    "name": "t __gai_nat64_second_pass",
    "type": "CPP"
  },
  {
    "name": "t _make_hostent",
    "type": "CPP"
  },
  {
    "name": "t _make_hostent6",
    "type": "CPP"
  },
  {
    "name": "t _merge_alias",
    "type": "CPP"
  },
  {
    "name": "t _free_build_hostent",
    "type": "CPP"
  },
  {
    "name": "t _gai_log_init",
    "type": "CPP"
  },
  {
    "name": "t _gai_child_has_forked",
    "type": "CPP"
  },
  {
    "name": "t __gai_nat64_v4_synthesize",
    "type": "CPP"
  },
  {
    "name": "t __gai_load_libnetwork",
    "type": "CPP"
  },
  {
    "name": "t ___os_log_helper_16_0_3_4_0_4_0_4_0",
    "type": "CPP"
  },
  {
    "name": "t __gai_load_libnetwork_once",
    "type": "CPP"
  },
  {
    "name": "t ___os_log_helper_16_2_1_8_34",
    "type": "CPP"
  },
  {
    "name": "t __gai_nat64_v4_address_requires_synthesis",
    "type": "CPP"
  },
  {
    "name": "t ___os_log_helper_16_0_2_4_0_4_0",
    "type": "CPP"
  },
  {
    "name": "t _si_module_with_path",
    "type": "CPP"
  },
  {
    "name": "t _si_mod_dlsym",
    "type": "CPP"
  },
  {
    "name": "T _si_module_retain",
    "type": "CPP"
  },
  {
    "name": "T _si_module_name",
    "type": "CPP"
  },
  {
    "name": "T _si_module_vers",
    "type": "CPP"
  },
  {
    "name": "T _si_user_all",
    "type": "CPP"
  },
  {
    "name": "T _si_group_byuuid",
    "type": "CPP"
  },
  {
    "name": "T _si_group_all",
    "type": "CPP"
  },
  {
    "name": "T _si_netgroup_byname",
    "type": "CPP"
  },
  {
    "name": "T _si_in_netgroup",
    "type": "CPP"
  },
  {
    "name": "T _si_alias_byname",
    "type": "CPP"
  },
  {
    "name": "T _si_alias_all",
    "type": "CPP"
  },
  {
    "name": "T _si_host_all",
    "type": "CPP"
  },
  {
    "name": "T _si_mac_byname",
    "type": "CPP"
  },
  {
    "name": "T _si_mac_bymac",
    "type": "CPP"
  },
  {
    "name": "T _si_mac_all",
    "type": "CPP"
  },
  {
    "name": "T _si_network_byname",
    "type": "CPP"
  },
  {
    "name": "T _si_network_byaddr",
    "type": "CPP"
  },
  {
    "name": "T _si_network_all",
    "type": "CPP"
  },
  {
    "name": "T _si_service_all",
    "type": "CPP"
  },
  {
    "name": "T _si_protocol_byname",
    "type": "CPP"
  },
  {
    "name": "T _si_protocol_bynumber",
    "type": "CPP"
  },
  {
    "name": "T _si_protocol_all",
    "type": "CPP"
  },
  {
    "name": "T _si_rpc_byname",
    "type": "CPP"
  },
  {
    "name": "T _si_rpc_bynumber",
    "type": "CPP"
  },
  {
    "name": "T _si_rpc_all",
    "type": "CPP"
  },
  {
    "name": "T _si_fs_byspec",
    "type": "CPP"
  },
  {
    "name": "T _si_fs_byfile",
    "type": "CPP"
  },
  {
    "name": "T _si_list_call",
    "type": "CPP"
  },
  {
    "name": "T _si_async_cancel",
    "type": "CPP"
  },
  {
    "name": "T _si_standardize_mac_address",
    "type": "CPP"
  },
  {
    "name": "T _LI_get_thread_item",
    "type": "CPP"
  },
  {
    "name": "t _parse_compatibility_uuid",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt32",
    "type": "CPP"
  },
  {
    "name": "T _mbr_gid_to_uuid",
    "type": "CPP"
  },
  {
    "name": "T _mbr_uuid_to_id",
    "type": "CPP"
  },
  {
    "name": "T _mbr_sid_to_uuid",
    "type": "CPP"
  },
  {
    "name": "T _mbr_uuid_to_sid_type",
    "type": "CPP"
  },
  {
    "name": "T _mbr_uuid_to_sid",
    "type": "CPP"
  },
  {
    "name": "T _mbr_check_membership_refresh",
    "type": "CPP"
  },
  {
    "name": "T _mbr_reset_cache",
    "type": "CPP"
  },
  {
    "name": "T _mbr_check_service_membership",
    "type": "CPP"
  },
  {
    "name": "T _mbr_sid_to_string",
    "type": "CPP"
  },
  {
    "name": "t _ConvertBytesToDecimal",
    "type": "CPP"
  },
  {
    "name": "T _mbr_string_to_sid",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt64",
    "type": "CPP"
  },
  {
    "name": "T _mbr_uuid_to_string",
    "type": "CPP"
  },
  {
    "name": "T _mbr_string_to_uuid",
    "type": "CPP"
  },
  {
    "name": "T _mbr_set_identifier_ttl",
    "type": "CPP"
  },
  {
    "name": "t __mbr_fork_child",
    "type": "CPP"
  },
  {
    "name": "T _getdomainname",
    "type": "CPP"
  },
  {
    "name": "T _setdomainname",
    "type": "CPP"
  },
  {
    "name": "T _xdr_domainname",
    "type": "CPP"
  },
  {
    "name": "T _xdr_keydat",
    "type": "CPP"
  },
  {
    "name": "T _xdr_mapname",
    "type": "CPP"
  },
  {
    "name": "T _xdr_peername",
    "type": "CPP"
  },
  {
    "name": "T _xdr_valdat",
    "type": "CPP"
  },
  {
    "name": "T _xdr_ypbind_binding",
    "type": "CPP"
  },
  {
    "name": "T _xdr_ypbind_resp",
    "type": "CPP"
  },
  {
    "name": "T _xdr_ypbind_resptype",
    "type": "CPP"
  },
  {
    "name": "T _xdr_ypbind_setdom",
    "type": "CPP"
  },
  {
    "name": "T _xdr_ypmaplist",
    "type": "CPP"
  },
  {
    "name": "T _xdr_ypreq_key",
    "type": "CPP"
  },
  {
    "name": "T _xdr_ypreq_nokey",
    "type": "CPP"
  },
  {
    "name": "T _xdr_ypresp_all",
    "type": "CPP"
  },
  {
    "name": "T _xdr_ypresp_key_val",
    "type": "CPP"
  },
  {
    "name": "T _xdr_ypresp_maplist",
    "type": "CPP"
  },
  {
    "name": "T _xdr_ypresp_master",
    "type": "CPP"
  },
  {
    "name": "T _xdr_ypresp_order",
    "type": "CPP"
  },
  {
    "name": "T _xdr_ypresp_val",
    "type": "CPP"
  },
  {
    "name": "T _xdr_ypstat",
    "type": "CPP"
  },
  {
    "name": "T _xdr_ypresp_all_seq",
    "type": "CPP"
  },
  {
    "name": "T _yp_all",
    "type": "CPP"
  },
  {
    "name": "T __yp_dobind",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt16",
    "type": "CPP"
  },
  {
    "name": "t __yp_unbind",
    "type": "CPP"
  },
  {
    "name": "T _yp_bind",
    "type": "CPP"
  },
  {
    "name": "T _yp_unbind",
    "type": "CPP"
  },
  {
    "name": "T _yp_first",
    "type": "CPP"
  },
  {
    "name": "T _yp_get_default_domain",
    "type": "CPP"
  },
  {
    "name": "T _yp_maplist",
    "type": "CPP"
  },
  {
    "name": "T _yp_master",
    "type": "CPP"
  },
  {
    "name": "T _yp_order",
    "type": "CPP"
  },
  {
    "name": "T _yperr_string",
    "type": "CPP"
  },
  {
    "name": "T _yp_match",
    "type": "CPP"
  },
  {
    "name": "T _yp_next",
    "type": "CPP"
  },
  {
    "name": "T _xdr_x_passwd",
    "type": "CPP"
  },
  {
    "name": "T _xdr_yppasswd",
    "type": "CPP"
  },
  {
    "name": "T _ypprot_err",
    "type": "CPP"
  },
  {
    "name": "T _authnone_create",
    "type": "CPP"
  },
  {
    "name": "t _authnone_verf",
    "type": "CPP"
  },
  {
    "name": "t _authnone_marshal",
    "type": "CPP"
  },
  {
    "name": "t _authnone_validate",
    "type": "CPP"
  },
  {
    "name": "t _authnone_refresh",
    "type": "CPP"
  },
  {
    "name": "t _authnone_destroy",
    "type": "CPP"
  },
  {
    "name": "T _authunix_create",
    "type": "CPP"
  },
  {
    "name": "T _authunix_create_default",
    "type": "CPP"
  },
  {
    "name": "t _authunix_nextverf",
    "type": "CPP"
  },
  {
    "name": "t _authunix_marshal",
    "type": "CPP"
  },
  {
    "name": "t _authunix_validate",
    "type": "CPP"
  },
  {
    "name": "t _authunix_refresh",
    "type": "CPP"
  },
  {
    "name": "t _authunix_destroy",
    "type": "CPP"
  },
  {
    "name": "t _marshal_new_auth",
    "type": "CPP"
  },
  {
    "name": "T _xdr_authunix_parms",
    "type": "CPP"
  },
  {
    "name": "T _bindresvport_sa",
    "type": "CPP"
  },
  {
    "name": "T _bindresvport",
    "type": "CPP"
  },
  {
    "name": "T _clnt_create",
    "type": "CPP"
  },
  {
    "name": "T _clnt_sperror",
    "type": "CPP"
  },
  {
    "name": "T _clnt_sperrno",
    "type": "CPP"
  },
  {
    "name": "T _clnt_perror",
    "type": "CPP"
  },
  {
    "name": "T _clnt_perrno",
    "type": "CPP"
  },
  {
    "name": "T _clnt_spcreateerror",
    "type": "CPP"
  },
  {
    "name": "T _clnt_pcreateerror",
    "type": "CPP"
  },
  {
    "name": "t __buf",
    "type": "CPP"
  },
  {
    "name": "t _auth_errmsg",
    "type": "CPP"
  },
  {
    "name": "T _clntraw_create",
    "type": "CPP"
  },
  {
    "name": "t _clntraw_call",
    "type": "CPP"
  },
  {
    "name": "t _clntraw_abort",
    "type": "CPP"
  },
  {
    "name": "t _clntraw_geterr",
    "type": "CPP"
  },
  {
    "name": "t _clntraw_freeres",
    "type": "CPP"
  },
  {
    "name": "t _clntraw_destroy",
    "type": "CPP"
  },
  {
    "name": "t _clntraw_control",
    "type": "CPP"
  },
  {
    "name": "t _clnttcp_create_timeout",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt16",
    "type": "CPP"
  },
  {
    "name": "T _clnttcp_create",
    "type": "CPP"
  },
  {
    "name": "t _clnttcp_call",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt32",
    "type": "CPP"
  },
  {
    "name": "t _clnttcp_abort",
    "type": "CPP"
  },
  {
    "name": "t _clnttcp_geterr",
    "type": "CPP"
  },
  {
    "name": "t _clnttcp_freeres",
    "type": "CPP"
  },
  {
    "name": "t _clnttcp_destroy",
    "type": "CPP"
  },
  {
    "name": "t _clnttcp_control",
    "type": "CPP"
  },
  {
    "name": "t _readtcp",
    "type": "CPP"
  },
  {
    "name": "t _writetcp",
    "type": "CPP"
  },
  {
    "name": "t _clntudp_bufcreate_timeout",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt16",
    "type": "CPP"
  },
  {
    "name": "T _clntudp_bufcreate",
    "type": "CPP"
  },
  {
    "name": "T _clntudp_create",
    "type": "CPP"
  },
  {
    "name": "t _clntudp_call",
    "type": "CPP"
  },
  {
    "name": "t _clntudp_abort",
    "type": "CPP"
  },
  {
    "name": "t _clntudp_geterr",
    "type": "CPP"
  },
  {
    "name": "t _clntudp_freeres",
    "type": "CPP"
  },
  {
    "name": "t _clntudp_destroy",
    "type": "CPP"
  },
  {
    "name": "t _clntudp_control",
    "type": "CPP"
  },
  {
    "name": "t _si_destination_create_control_socket",
    "type": "CPP"
  },
  {
    "name": "t ___os_log_helper_16_2_1_0_96",
    "type": "CPP"
  },
  {
    "name": "t ___os_log_helper_16_2_2_4_0_0_96",
    "type": "CPP"
  },
  {
    "name": "t ___os_log_helper_16_2_3_4_0_4_0_0_96",
    "type": "CPP"
  },
  {
    "name": "t _set_loopback_ifindex",
    "type": "CPP"
  },
  {
    "name": "T _si_destination_compare",
    "type": "CPP"
  },
  {
    "name": "t _si_destination_compare_init",
    "type": "CPP"
  },
  {
    "name": "t _si_destination_compare_internal",
    "type": "CPP"
  },
  {
    "name": "t ___os_log_helper_16_2_7_4_16_8_48_4_0_4_0_4_16_8_48_4_0",
    "type": "CPP"
  },
  {
    "name": "T _si_destination_compare_no_dependencies",
    "type": "CPP"
  },
  {
    "name": "t _rfc6724_precedence",
    "type": "CPP"
  },
  {
    "name": "t _rfc6724_scope_sa",
    "type": "CPP"
  },
  {
    "name": "t _si_destination_compare_init_once",
    "type": "CPP"
  },
  {
    "name": "t _si_destination_compare_child_has_forked",
    "type": "CPP"
  },
  {
    "name": "t _si_destination_lookup",
    "type": "CPP"
  },
  {
    "name": "t _si_destination_compare_statistics",
    "type": "CPP"
  },
  {
    "name": "t _si_destination_compare_rfc6724",
    "type": "CPP"
  },
  {
    "name": "t _si_destination_cache_find",
    "type": "CPP"
  },
  {
    "name": "t _si_destination_cache_create",
    "type": "CPP"
  },
  {
    "name": "t _sa_equal",
    "type": "CPP"
  },
  {
    "name": "t ___os_log_helper_16_2_2_8_0_0_96",
    "type": "CPP"
  },
  {
    "name": "t _si_destination_fill_netsrc",
    "type": "CPP"
  },
  {
    "name": "t ___os_log_helper_16_0_4_8_0_8_0_4_0_4_0",
    "type": "CPP"
  },
  {
    "name": "t ___os_log_helper_16_0_1_8_0",
    "type": "CPP"
  },
  {
    "name": "t _rfc6724_scope",
    "type": "CPP"
  },
  {
    "name": "t _rfc6724_native",
    "type": "CPP"
  },
  {
    "name": "t _common_prefix_length",
    "type": "CPP"
  },
  {
    "name": "t _rfc6724_scope_ip6",
    "type": "CPP"
  },
  {
    "name": "t _rfc6724_scope_ip",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt32",
    "type": "CPP"
  },
  {
    "name": "T _getrpcport",
    "type": "CPP"
  },
  {
    "name": "T _pmap_set",
    "type": "CPP"
  },
  {
    "name": "T _pmap_unset",
    "type": "CPP"
  },
  {
    "name": "T _pmap_getmaps",
    "type": "CPP"
  },
  {
    "name": "t _pmap_getport_timeout",
    "type": "CPP"
  },
  {
    "name": "T _pmap_getport",
    "type": "CPP"
  },
  {
    "name": "T _xdr_pmap",
    "type": "CPP"
  },
  {
    "name": "T _xdr_pmaplist",
    "type": "CPP"
  },
  {
    "name": "T _pmap_rmtcall",
    "type": "CPP"
  },
  {
    "name": "T _xdr_rmtcall_args",
    "type": "CPP"
  },
  {
    "name": "T _xdr_rmtcallres",
    "type": "CPP"
  },
  {
    "name": "T _clnt_broadcast",
    "type": "CPP"
  },
  {
    "name": "t _getbroadcastnets",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt16",
    "type": "CPP"
  },
  {
    "name": "t _pmap_wakeup",
    "type": "CPP"
  },
  {
    "name": "T _xdr_callmsg",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt32",
    "type": "CPP"
  },
  {
    "name": "t _xdr_opaque_auth",
    "type": "CPP"
  },
  {
    "name": "T _xdr_des_block",
    "type": "CPP"
  },
  {
    "name": "t _xdr_accepted_reply",
    "type": "CPP"
  },
  {
    "name": "t _xdr_rejected_reply",
    "type": "CPP"
  },
  {
    "name": "T _xdr_replymsg",
    "type": "CPP"
  },
  {
    "name": "T _xdr_callhdr",
    "type": "CPP"
  },
  {
    "name": "T __seterr_reply",
    "type": "CPP"
  },
  {
    "name": "t _accepted",
    "type": "CPP"
  },
  {
    "name": "t _rejected",
    "type": "CPP"
  },
  {
    "name": "T _xprt_register",
    "type": "CPP"
  },
  {
    "name": "T _xprt_unregister",
    "type": "CPP"
  },
  {
    "name": "T _svc_register",
    "type": "CPP"
  },
  {
    "name": "T _svc_unregister",
    "type": "CPP"
  },
  {
    "name": "T _svc_sendreply",
    "type": "CPP"
  },
  {
    "name": "T _svcerr_noproc",
    "type": "CPP"
  },
  {
    "name": "T _svcerr_decode",
    "type": "CPP"
  },
  {
    "name": "T _svcerr_systemerr",
    "type": "CPP"
  },
  {
    "name": "T _svcerr_auth",
    "type": "CPP"
  },
  {
    "name": "T _svcerr_weakauth",
    "type": "CPP"
  },
  {
    "name": "T _svcerr_noprog",
    "type": "CPP"
  },
  {
    "name": "T _svcerr_progvers",
    "type": "CPP"
  },
  {
    "name": "T _svc_getreq",
    "type": "CPP"
  },
  {
    "name": "T _svc_getreqset",
    "type": "CPP"
  },
  {
    "name": "t _svc_find",
    "type": "CPP"
  },
  {
    "name": "T __authenticate",
    "type": "CPP"
  },
  {
    "name": "t __svcauth_null",
    "type": "CPP"
  },
  {
    "name": "t __svcauth_unix",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt32",
    "type": "CPP"
  },
  {
    "name": "t __svcauth_short",
    "type": "CPP"
  },
  {
    "name": "T _svcraw_create",
    "type": "CPP"
  },
  {
    "name": "t _svcraw_recv",
    "type": "CPP"
  },
  {
    "name": "t _svcraw_stat",
    "type": "CPP"
  },
  {
    "name": "t _svcraw_getargs",
    "type": "CPP"
  },
  {
    "name": "t _svcraw_reply",
    "type": "CPP"
  },
  {
    "name": "t _svcraw_freeargs",
    "type": "CPP"
  },
  {
    "name": "t _svcraw_destroy",
    "type": "CPP"
  },
  {
    "name": "T _svc_run",
    "type": "CPP"
  },
  {
    "name": "T _svctcp_create",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt16",
    "type": "CPP"
  },
  {
    "name": "T _svcfd_create",
    "type": "CPP"
  },
  {
    "name": "t _rendezvous_request",
    "type": "CPP"
  },
  {
    "name": "t _rendezvous_stat",
    "type": "CPP"
  },
  {
    "name": "t _rendezvous_abort",
    "type": "CPP"
  },
  {
    "name": "t _svctcp_destroy",
    "type": "CPP"
  },
  {
    "name": "t _makefd_xprt",
    "type": "CPP"
  },
  {
    "name": "t _readtcp",
    "type": "CPP"
  },
  {
    "name": "t _writetcp",
    "type": "CPP"
  },
  {
    "name": "t _svctcp_recv",
    "type": "CPP"
  },
  {
    "name": "t _svctcp_stat",
    "type": "CPP"
  },
  {
    "name": "t _svctcp_getargs",
    "type": "CPP"
  },
  {
    "name": "t _svctcp_reply",
    "type": "CPP"
  },
  {
    "name": "t _svctcp_freeargs",
    "type": "CPP"
  },
  {
    "name": "T _svcudp_bufcreate",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt16",
    "type": "CPP"
  },
  {
    "name": "T _svcudp_create",
    "type": "CPP"
  },
  {
    "name": "t _svcudp_recv",
    "type": "CPP"
  },
  {
    "name": "t _cache_get",
    "type": "CPP"
  },
  {
    "name": "t _svcudp_stat",
    "type": "CPP"
  },
  {
    "name": "t _svcudp_getargs",
    "type": "CPP"
  },
  {
    "name": "t _svcudp_reply",
    "type": "CPP"
  },
  {
    "name": "t _cache_set",
    "type": "CPP"
  },
  {
    "name": "t _svcudp_freeargs",
    "type": "CPP"
  },
  {
    "name": "t _svcudp_destroy",
    "type": "CPP"
  },
  {
    "name": "T _xdr_free",
    "type": "CPP"
  },
  {
    "name": "T _xdr_void",
    "type": "CPP"
  },
  {
    "name": "T _xdr_int",
    "type": "CPP"
  },
  {
    "name": "T _xdr_long",
    "type": "CPP"
  },
  {
    "name": "T _xdr_u_long",
    "type": "CPP"
  },
  {
    "name": "T _xdr_short",
    "type": "CPP"
  },
  {
    "name": "T _xdr_u_short",
    "type": "CPP"
  },
  {
    "name": "T _xdr_int16_t",
    "type": "CPP"
  },
  {
    "name": "T _xdr_u_int16_t",
    "type": "CPP"
  },
  {
    "name": "T _xdr_char",
    "type": "CPP"
  },
  {
    "name": "T _xdr_u_char",
    "type": "CPP"
  },
  {
    "name": "T _xdr_enum",
    "type": "CPP"
  },
  {
    "name": "T _xdr_bytes",
    "type": "CPP"
  },
  {
    "name": "T _xdr_netobj",
    "type": "CPP"
  },
  {
    "name": "T _xdr_union",
    "type": "CPP"
  },
  {
    "name": "T _xdr_string",
    "type": "CPP"
  },
  {
    "name": "T _xdr_wrapstring",
    "type": "CPP"
  },
  {
    "name": "T _xdr_int64_t",
    "type": "CPP"
  },
  {
    "name": "T _xdr_u_int64_t",
    "type": "CPP"
  },
  {
    "name": "T _xdr_hyper",
    "type": "CPP"
  },
  {
    "name": "T _xdr_u_hyper",
    "type": "CPP"
  },
  {
    "name": "T _xdr_longlong_t",
    "type": "CPP"
  },
  {
    "name": "T _xdr_u_longlong_t",
    "type": "CPP"
  },
  {
    "name": "T _xdr_array",
    "type": "CPP"
  },
  {
    "name": "T _xdr_vector",
    "type": "CPP"
  },
  {
    "name": "T _xdr_float",
    "type": "CPP"
  },
  {
    "name": "t _xdr_putint32",
    "type": "CPP"
  },
  {
    "name": "t _xdr_getint32",
    "type": "CPP"
  },
  {
    "name": "T _xdr_double",
    "type": "CPP"
  },
  {
    "name": "T _xdrmem_create",
    "type": "CPP"
  },
  {
    "name": "t _xdrmem_getlong_unaligned",
    "type": "CPP"
  },
  {
    "name": "t _xdrmem_putlong_unaligned",
    "type": "CPP"
  },
  {
    "name": "t _xdrmem_getbytes",
    "type": "CPP"
  },
  {
    "name": "t _xdrmem_putbytes",
    "type": "CPP"
  },
  {
    "name": "t _xdrmem_getpos",
    "type": "CPP"
  },
  {
    "name": "t _xdrmem_setpos",
    "type": "CPP"
  },
  {
    "name": "t _xdrmem_inline_unaligned",
    "type": "CPP"
  },
  {
    "name": "t _xdrmem_destroy",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt32",
    "type": "CPP"
  },
  {
    "name": "t _xdrmem_getlong_aligned",
    "type": "CPP"
  },
  {
    "name": "t _xdrmem_putlong_aligned",
    "type": "CPP"
  },
  {
    "name": "t _xdrmem_inline_aligned",
    "type": "CPP"
  },
  {
    "name": "T _xdrrec_create",
    "type": "CPP"
  },
  {
    "name": "t _fix_buf_size",
    "type": "CPP"
  },
  {
    "name": "T _xdrrec_skiprecord",
    "type": "CPP"
  },
  {
    "name": "t ___xdrrec_getrec",
    "type": "CPP"
  },
  {
    "name": "t _skip_input_bytes",
    "type": "CPP"
  },
  {
    "name": "t _set_input_fragment",
    "type": "CPP"
  },
  {
    "name": "T _xdrrec_eof",
    "type": "CPP"
  },
  {
    "name": "T _xdrrec_endofrecord",
    "type": "CPP"
  },
  {
    "name": "t _flush_out",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt32",
    "type": "CPP"
  },
  {
    "name": "t _realloc_stream",
    "type": "CPP"
  },
  {
    "name": "t _xdrrec_getlong",
    "type": "CPP"
  },
  {
    "name": "t _xdrrec_putlong",
    "type": "CPP"
  },
  {
    "name": "t _xdrrec_getbytes",
    "type": "CPP"
  },
  {
    "name": "t _xdrrec_putbytes",
    "type": "CPP"
  },
  {
    "name": "t _xdrrec_getpos",
    "type": "CPP"
  },
  {
    "name": "t _xdrrec_setpos",
    "type": "CPP"
  },
  {
    "name": "t _xdrrec_inline",
    "type": "CPP"
  },
  {
    "name": "t _xdrrec_destroy",
    "type": "CPP"
  },
  {
    "name": "t _get_input_bytes",
    "type": "CPP"
  },
  {
    "name": "t _fill_input_buf",
    "type": "CPP"
  },
  {
    "name": "T _xdr_reference",
    "type": "CPP"
  },
  {
    "name": "T _xdr_pointer",
    "type": "CPP"
  },
  {
    "name": "T _xdrstdio_create",
    "type": "CPP"
  },
  {
    "name": "t _xdrstdio_getlong",
    "type": "CPP"
  },
  {
    "name": "t _xdrstdio_putlong",
    "type": "CPP"
  },
  {
    "name": "t _xdrstdio_getbytes",
    "type": "CPP"
  },
  {
    "name": "t _xdrstdio_putbytes",
    "type": "CPP"
  },
  {
    "name": "t _xdrstdio_getpos",
    "type": "CPP"
  },
  {
    "name": "t _xdrstdio_setpos",
    "type": "CPP"
  },
  {
    "name": "t _xdrstdio_inline",
    "type": "CPP"
  },
  {
    "name": "t _xdrstdio_destroy",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt32",
    "type": "CPP"
  },
  {
    "name": "T _ntohl",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt32",
    "type": "CPP"
  },
  {
    "name": "T _htonl",
    "type": "CPP"
  },
  {
    "name": "T _ntohs",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt16",
    "type": "CPP"
  },
  {
    "name": "T _htons",
    "type": "CPP"
  },
  {
    "name": "T _rcmd_af",
    "type": "CPP"
  },
  {
    "name": "t __OSSwapInt16",
    "type": "CPP"
  },
  {
    "name": "T _rresvport_af",
    "type": "CPP"
  },
  {
    "name": "T _rcmd",
    "type": "CPP"
  },
  {
    "name": "T _rresvport",
    "type": "CPP"
  },
  {
    "name": "T _iruserok_sa",
    "type": "CPP"
  },
  {
    "name": "t ___ivaliduser_sa",
    "type": "CPP"
  },
  {
    "name": "T _ruserok",
    "type": "CPP"
  },
  {
    "name": "T _iruserok",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libsystem_m.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _fmod$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _fegetenv",
    "type": "CPP"
  },
  {
    "name": "T _fesetenv",
    "type": "CPP"
  },
  {
    "name": "T _exp2$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _sin$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _log$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _scalbn$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _exp$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _atan2f$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _round$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _fma$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T ___sincos_stret",
    "type": "CPP"
  },
  {
    "name": "T _nan",
    "type": "CPP"
  },
  {
    "name": "T _cabsf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _hypotf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _roundf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cos$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _tan$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _powf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _log2$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _log2f$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cosf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _isnan",
    "type": "CPP"
  },
  {
    "name": "T _isinf",
    "type": "CPP"
  },
  {
    "name": "T _atan2$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _modf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _log10$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T ___exp10",
    "type": "CPP"
  },
  {
    "name": "T _pow$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T ___isnanf",
    "type": "CPP"
  },
  {
    "name": "T ___isinff",
    "type": "CPP"
  },
  {
    "name": "T _remainder$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _hypot$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _frexpf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _frexp$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _frexpl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _rinttol",
    "type": "CPP"
  },
  {
    "name": "T _lrintf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _lroundf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _roundtol",
    "type": "CPP"
  },
  {
    "name": "T _nextafterd",
    "type": "CPP"
  },
  {
    "name": "T ___sincosf_stret",
    "type": "CPP"
  },
  {
    "name": "T _logf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _log1pf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _expf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T ___fpclassifyd",
    "type": "CPP"
  },
  {
    "name": "T _modff$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _tanh$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _sinf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _exp2f$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _floor$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _ceilf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _ceil$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _trunc$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _floorf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T ___exp10f",
    "type": "CPP"
  },
  {
    "name": "T _log10f$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _atan$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _sinl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _ilogbf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _ilogb$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _ilogbl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _logbf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _logb$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _logbl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _fmax$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _fmin$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _truncf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _fmaxf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _fminf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _fdimf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _fminl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _fmaxl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _fdiml$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _rint$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _finite",
    "type": "CPP"
  },
  {
    "name": "T _remquol$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _acos$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _scalblnf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _scalbnf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cabs$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _tanf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _floorl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _ceill$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _rintf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _fegetround",
    "type": "CPP"
  },
  {
    "name": "T _fesetround",
    "type": "CPP"
  },
  {
    "name": "T _asin$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _fmodf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _feclearexcept",
    "type": "CPP"
  },
  {
    "name": "T _fegetexceptflag",
    "type": "CPP"
  },
  {
    "name": "T _feholdexcept",
    "type": "CPP"
  },
  {
    "name": "T _feraiseexcept",
    "type": "CPP"
  },
  {
    "name": "T _fesetexceptflag",
    "type": "CPP"
  },
  {
    "name": "T _fetestexcept",
    "type": "CPP"
  },
  {
    "name": "T _feupdateenv",
    "type": "CPP"
  },
  {
    "name": "T _cosh$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _nanl",
    "type": "CPP"
  },
  {
    "name": "T _sinh$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _acoshf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _atanhf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cbrtf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _atanf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _acosf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _asinf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _asinhf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cacoshl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cacosl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cargl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _casinhl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _casinl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _catanhl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _catanl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _ccoshl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _ccosl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cexpl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cimagl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _clogl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _conjl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cpowl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cprojl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _creall$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _csinhl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _csinl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _csqrtl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _ctanhl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _ctanl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _acosl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _copysignf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _copysign$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _copysignl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _fabsf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _fabs$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _fabsl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _coshf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _acosh$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _acoshl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _asinl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T __simd_acos_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_asin_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_atan_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_atan2_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_cos_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_sin_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_tan_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_cospi_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_sinpi_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_tanpi_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_acosh_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_asinh_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_atanh_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_cosh_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_sinh_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_tanh_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_exp_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_exp2_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_exp10_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_expm1_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_log_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_log2_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_log10_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_log1p_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_cbrt_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_pow_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_hypot_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_erf_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_erfc_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_tgamma_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_fmod_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_remainder_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_round_d8",
    "type": "CPP"
  },
  {
    "name": "T __simd_nextafter_d8",
    "type": "CPP"
  },
  {
    "name": "T _atan2l$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _atanh$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _atanhl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T ___tanpif",
    "type": "CPP"
  },
  {
    "name": "T _cbrtl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _asinh$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _asinhl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _atanl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T ___sinpi",
    "type": "CPP"
  },
  {
    "name": "T ___cospi",
    "type": "CPP"
  },
  {
    "name": "T ___sincospi_stret",
    "type": "CPP"
  },
  {
    "name": "T _coshl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _exp2l$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _expm1l$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _fmodl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _logl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _log10l$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _remainderl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _sinhl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _sqrtl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _expl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _expm1$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _hypotl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _log2l$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _lrintl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _lroundl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _modfl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _nextafterf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _nexttowardl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _nearbyintl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _rintl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cosl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _log1pl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _tanl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _tanhl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _sinhf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _tanhf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T __simd_acos_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_asin_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_atan_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_atan2_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_cos_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_sin_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_tan_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_cospi_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_sinpi_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_tanpi_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_acosh_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_asinh_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_atanh_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_cosh_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_sinh_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_tanh_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_exp_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_exp2_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_exp10_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_expm1_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_log_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_log2_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_log10_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_log1p_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_cbrt_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_pow_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_hypot_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_erf_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_erfc_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_tgamma_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_fmod_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_remainder_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_round_f16",
    "type": "CPP"
  },
  {
    "name": "T __simd_nextafter_f16",
    "type": "CPP"
  },
  {
    "name": "T _truncl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _erfl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _erfcl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _lgammal$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _lgammal_r$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _tgammal$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _fmal$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _powl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _sqrt$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T ___cospif",
    "type": "CPP"
  },
  {
    "name": "T _fmaf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _log1p$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T ___sinpif",
    "type": "CPP"
  },
  {
    "name": "T ___sincospif_stret",
    "type": "CPP"
  },
  {
    "name": "T _scalblnl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _scalbnl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T ___fpclassifyl",
    "type": "CPP"
  },
  {
    "name": "T ___isfinitel",
    "type": "CPP"
  },
  {
    "name": "T ___isinfl",
    "type": "CPP"
  },
  {
    "name": "T ___isnanl",
    "type": "CPP"
  },
  {
    "name": "T ___isnormall",
    "type": "CPP"
  },
  {
    "name": "T ___signbitl",
    "type": "CPP"
  },
  {
    "name": "T __simd_acos_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_asin_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_atan_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_atan2_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_cos_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_sin_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_tan_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_cospi_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_sinpi_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_tanpi_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_acosh_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_asinh_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_atanh_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_cosh_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_sinh_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_tanh_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_exp_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_exp2_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_exp10_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_expm1_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_log_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_log2_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_log10_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_log1p_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_cbrt_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_pow_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_hypot_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_erf_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_erfc_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_tgamma_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_fmod_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_remainder_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_round_d4",
    "type": "CPP"
  },
  {
    "name": "T __simd_nextafter_d4",
    "type": "CPP"
  },
  {
    "name": "T _roundl$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T ___infl",
    "type": "CPP"
  },
  {
    "name": "T ___tanpi",
    "type": "CPP"
  },
  {
    "name": "T _nearbyintf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _nearbyint$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T __simd_acos_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_asin_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_atan_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_atan2_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_cos_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_sin_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_tan_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_cospi_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_sinpi_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_tanpi_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_acosh_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_asinh_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_atanh_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_cosh_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_sinh_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_tanh_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_exp_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_exp2_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_exp10_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_expm1_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_log_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_log2_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_log10_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_log1p_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_cbrt_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_pow_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_hypot_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_erf_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_erfc_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_tgamma_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_fmod_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_remainder_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_round_f8",
    "type": "CPP"
  },
  {
    "name": "T __simd_nextafter_f8",
    "type": "CPP"
  },
  {
    "name": "T _sqrtf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _expm1f$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _carg$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cargf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _casin$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _casinf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _casinh$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _casinhf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _catan$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _catanf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _catanh$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _catanhf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _ccos$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _ccosf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T __simd_orient_vd2",
    "type": "CPP"
  },
  {
    "name": "T __simd_orient_pd2",
    "type": "CPP"
  },
  {
    "name": "T __simd_orient_vd3",
    "type": "CPP"
  },
  {
    "name": "T __simd_orient_pd3",
    "type": "CPP"
  },
  {
    "name": "T __simd_incircle_pd2",
    "type": "CPP"
  },
  {
    "name": "T __simd_insphere_pd3",
    "type": "CPP"
  },
  {
    "name": "T _ccosh$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _ccoshf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cexp$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cexpf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cimag$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cimagf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _clog$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _clogf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _conj$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _conjf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cpow$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cpowf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cproj$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cprojf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _creal$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _crealf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _csin$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _csinf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _csinh$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _csinhf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _csqrt$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _csqrtf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _ctan$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _ctanf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _ctanh$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _ctanhf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cacos$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cacosf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cacosh$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _cacoshf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T __simd_orient_vf2",
    "type": "CPP"
  },
  {
    "name": "T __simd_orient_pf2",
    "type": "CPP"
  },
  {
    "name": "T __simd_orient_vf3",
    "type": "CPP"
  },
  {
    "name": "T __simd_orient_pf3",
    "type": "CPP"
  },
  {
    "name": "T __simd_incircle_pf2",
    "type": "CPP"
  },
  {
    "name": "T __simd_insphere_pf3",
    "type": "CPP"
  },
  {
    "name": "T _erf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _erfc$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "T _erfcf$fenv_access_off",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libsystem_malloc.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _malloc",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_malloc",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_malloc",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_malloc",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_allocate",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_find_block_and_allocate",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_allocate_from_block",
    "type": "CPP"
  },
  {
    "name": "T _free",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_size",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_pointer_size",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_free_definite_size",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_free_definite_size",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_free_to_block",
    "type": "CPP"
  },
  {
    "name": "t _szone_malloc",
    "type": "CPP"
  },
  {
    "name": "t _szone_malloc_should_clear",
    "type": "CPP"
  },
  {
    "name": "t _small_malloc_should_clear",
    "type": "CPP"
  },
  {
    "name": "t _small_malloc_from_free_list",
    "type": "CPP"
  },
  {
    "name": "t _rack_region_insert",
    "type": "CPP"
  },
  {
    "name": "T _realloc",
    "type": "CPP"
  },
  {
    "name": "T _calloc",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_calloc",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_calloc",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_calloc",
    "type": "CPP"
  },
  {
    "name": "T _malloc_default_zone",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_from_ptr",
    "type": "CPP"
  },
  {
    "name": "t _tiny_malloc_should_clear",
    "type": "CPP"
  },
  {
    "name": "t _tiny_malloc_from_free_list",
    "type": "CPP"
  },
  {
    "name": "t _set_tiny_meta_header_in_use",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_realloc",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_realloc",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_realloc",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_free",
    "type": "CPP"
  },
  {
    "name": "t _szone_size",
    "type": "CPP"
  },
  {
    "name": "t _tiny_size",
    "type": "CPP"
  },
  {
    "name": "t _small_size",
    "type": "CPP"
  },
  {
    "name": "t _szone_free_definite_size",
    "type": "CPP"
  },
  {
    "name": "t _free_small",
    "type": "CPP"
  },
  {
    "name": "t _szone_realloc",
    "type": "CPP"
  },
  {
    "name": "t _szone_good_size",
    "type": "CPP"
  },
  {
    "name": "t _tiny_try_realloc_in_place",
    "type": "CPP"
  },
  {
    "name": "t _szone_free",
    "type": "CPP"
  },
  {
    "name": "t _free_tiny",
    "type": "CPP"
  },
  {
    "name": "t _tiny_free_no_lock",
    "type": "CPP"
  },
  {
    "name": "t _tiny_free_list_add_ptr",
    "type": "CPP"
  },
  {
    "name": "t _tiny_free_list_remove_ptr",
    "type": "CPP"
  },
  {
    "name": "t _small_free_list_add_ptr",
    "type": "CPP"
  },
  {
    "name": "t _small_try_realloc_in_place",
    "type": "CPP"
  },
  {
    "name": "t _small_free_list_find_by_ptr",
    "type": "CPP"
  },
  {
    "name": "t _small_free_list_remove_ptr",
    "type": "CPP"
  },
  {
    "name": "t _small_free_list_remove_ptr_no_clear",
    "type": "CPP"
  },
  {
    "name": "t _szone_calloc",
    "type": "CPP"
  },
  {
    "name": "T ___stack_logging_early_finished",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_free",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_free",
    "type": "CPP"
  },
  {
    "name": "T _malloc_good_size",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_good_size",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_good_size",
    "type": "CPP"
  },
  {
    "name": "T _malloc_size",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_memalign",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_memalign",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_memalign",
    "type": "CPP"
  },
  {
    "name": "t _szone_memalign",
    "type": "CPP"
  },
  {
    "name": "t _small_memalign",
    "type": "CPP"
  },
  {
    "name": "T _malloc_engaged_nano",
    "type": "CPP"
  },
  {
    "name": "t _medium_malloc_should_clear",
    "type": "CPP"
  },
  {
    "name": "t _medium_malloc_from_free_list",
    "type": "CPP"
  },
  {
    "name": "t _medium_size",
    "type": "CPP"
  },
  {
    "name": "t _free_medium",
    "type": "CPP"
  },
  {
    "name": "t _medium_free_list_add_ptr",
    "type": "CPP"
  },
  {
    "name": "T _valloc",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_valloc",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_valloc",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_valloc",
    "type": "CPP"
  },
  {
    "name": "t _szone_valloc",
    "type": "CPP"
  },
  {
    "name": "T _posix_memalign",
    "type": "CPP"
  },
  {
    "name": "t _tiny_memalign",
    "type": "CPP"
  },
  {
    "name": "t _medium_free_list_find_by_ptr",
    "type": "CPP"
  },
  {
    "name": "t _medium_free_list_remove_ptr",
    "type": "CPP"
  },
  {
    "name": "t _medium_free_list_remove_ptr_no_clear",
    "type": "CPP"
  },
  {
    "name": "t _tiny_try_shrink_in_place",
    "type": "CPP"
  },
  {
    "name": "t _small_try_shrink_in_place",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_register",
    "type": "CPP"
  },
  {
    "name": "t _malloc_zone_register_while_locked",
    "type": "CPP"
  },
  {
    "name": "t _medium_try_realloc_in_place",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_madvise_block",
    "type": "CPP"
  },
  {
    "name": "t _mvm_madvise_free",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_batch_malloc",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_batch_malloc",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_batch_malloc",
    "type": "CPP"
  },
  {
    "name": "T _malloc_create_zone",
    "type": "CPP"
  },
  {
    "name": "t _create_scalable_zone",
    "type": "CPP"
  },
  {
    "name": "t _create_scalable_szone",
    "type": "CPP"
  },
  {
    "name": "t _mvm_allocate_pages",
    "type": "CPP"
  },
  {
    "name": "t _rack_init",
    "type": "CPP"
  },
  {
    "name": "t _mvm_protect",
    "type": "CPP"
  },
  {
    "name": "T _malloc_set_zone_name",
    "type": "CPP"
  },
  {
    "name": "t _szone_size_try_large",
    "type": "CPP"
  },
  {
    "name": "t _large_entry_for_pointer_no_lock",
    "type": "CPP"
  },
  {
    "name": "t _large_malloc",
    "type": "CPP"
  },
  {
    "name": "t _large_entries_grow_no_lock",
    "type": "CPP"
  },
  {
    "name": "t _free_large",
    "type": "CPP"
  },
  {
    "name": "t _large_entry_free_no_lock",
    "type": "CPP"
  },
  {
    "name": "T _malloc_default_purgeable_zone",
    "type": "CPP"
  },
  {
    "name": "t _create_purgeable_zone",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_malloc",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_calloc",
    "type": "CPP"
  },
  {
    "name": "T _malloc_make_purgeable",
    "type": "CPP"
  },
  {
    "name": "t _find_registered_purgeable_zone",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_allocate_new_region",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_allocate_region",
    "type": "CPP"
  },
  {
    "name": "t _nano_common_allocate_vm_space",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_size",
    "type": "CPP"
  },
  {
    "name": "T _malloc_make_nonpurgeable",
    "type": "CPP"
  },
  {
    "name": "t _tiny_finalize_region",
    "type": "CPP"
  },
  {
    "name": "t _tiny_free_detach_region",
    "type": "CPP"
  },
  {
    "name": "t _tiny_free_reattach_region",
    "type": "CPP"
  },
  {
    "name": "t _tiny_free_scan_madvise_free",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin",
    "type": "CPP"
  },
  {
    "name": "t _tiny_free_try_depot_unmap_no_lock",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_free",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_claimed_address",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_malloc_claimed_address",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_claimed_address",
    "type": "CPP"
  },
  {
    "name": "t _szone_claimed_address",
    "type": "CPP"
  },
  {
    "name": "t _tiny_claimed_address",
    "type": "CPP"
  },
  {
    "name": "t _small_claimed_address",
    "type": "CPP"
  },
  {
    "name": "t _medium_claimed_address",
    "type": "CPP"
  },
  {
    "name": "t _large_claimed_address",
    "type": "CPP"
  },
  {
    "name": "t _mvm_deallocate_pages",
    "type": "CPP"
  },
  {
    "name": "t _large_try_realloc_in_place",
    "type": "CPP"
  },
  {
    "name": "t _small_finalize_region",
    "type": "CPP"
  },
  {
    "name": "t _small_free_detach_region",
    "type": "CPP"
  },
  {
    "name": "t _small_free_reattach_region",
    "type": "CPP"
  },
  {
    "name": "t _small_free_scan_madvise_free",
    "type": "CPP"
  },
  {
    "name": "t _small_free_try_depot_unmap_no_lock",
    "type": "CPP"
  },
  {
    "name": "T _malloc_memory_event_handler",
    "type": "CPP"
  },
  {
    "name": "T _malloc_register_stack_logger",
    "type": "CPP"
  },
  {
    "name": "t _register_msl_dylib",
    "type": "CPP"
  },
  {
    "name": "t _set_msl_lite_hooks",
    "type": "CPP"
  },
  {
    "name": "T _malloc_printf",
    "type": "CPP"
  },
  {
    "name": "t _malloc_vreport",
    "type": "CPP"
  },
  {
    "name": "t _has_default_zone0",
    "type": "CPP"
  },
  {
    "name": "t _create_and_insert_msl_lite_zone",
    "type": "CPP"
  },
  {
    "name": "t _szone_helper_zone",
    "type": "CPP"
  },
  {
    "name": "t __calloc_get_size",
    "type": "CPP"
  },
  {
    "name": "t _medium_memalign",
    "type": "CPP"
  },
  {
    "name": "t _szone_batch_malloc",
    "type": "CPP"
  },
  {
    "name": "t _tiny_batch_malloc",
    "type": "CPP"
  },
  {
    "name": "T ___malloc_init",
    "type": "CPP"
  },
  {
    "name": "t _nano_common_init",
    "type": "CPP"
  },
  {
    "name": "t _malloc_common_value_for_key",
    "type": "CPP"
  },
  {
    "name": "t _malloc_common_value_for_key_copy",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_init",
    "type": "CPP"
  },
  {
    "name": "t _mvm_aslr_init",
    "type": "CPP"
  },
  {
    "name": "t __malloc_initialize",
    "type": "CPP"
  },
  {
    "name": "t _malloc_print_configure",
    "type": "CPP"
  },
  {
    "name": "t _nano_common_configure",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_configure",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_configure_once",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_create_zone",
    "type": "CPP"
  },
  {
    "name": "t _nano_common_allocate_based_pages",
    "type": "CPP"
  },
  {
    "name": "T __malloc_fork_prepare",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_force_lock",
    "type": "CPP"
  },
  {
    "name": "t _szone_force_lock",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_force_lock",
    "type": "CPP"
  },
  {
    "name": "T __malloc_fork_parent",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_force_unlock",
    "type": "CPP"
  },
  {
    "name": "t _szone_force_unlock",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_force_unlock",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_statistics",
    "type": "CPP"
  },
  {
    "name": "t _szone_statistics",
    "type": "CPP"
  },
  {
    "name": "t _szone_statistics_task",
    "type": "CPP"
  },
  {
    "name": "T _malloc_destroy_zone",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_unregister",
    "type": "CPP"
  },
  {
    "name": "t _szone_destroy",
    "type": "CPP"
  },
  {
    "name": "t _large_entries_free_no_lock",
    "type": "CPP"
  },
  {
    "name": "t _rack_destroy_regions",
    "type": "CPP"
  },
  {
    "name": "t _rack_destroy",
    "type": "CPP"
  },
  {
    "name": "T _reallocarray$DARWIN_EXTSN",
    "type": "CPP"
  },
  {
    "name": "t _malloc_report",
    "type": "CPP"
  },
  {
    "name": "T _turn_on_stack_logging",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_valloc",
    "type": "CPP"
  },
  {
    "name": "t _nano_malloc",
    "type": "CPP"
  },
  {
    "name": "t __nano_malloc_check_clear",
    "type": "CPP"
  },
  {
    "name": "t _nano_size",
    "type": "CPP"
  },
  {
    "name": "t _nano_free_definite_size",
    "type": "CPP"
  },
  {
    "name": "t _nano_calloc",
    "type": "CPP"
  },
  {
    "name": "t _nano_free",
    "type": "CPP"
  },
  {
    "name": "t _nano_realloc",
    "type": "CPP"
  },
  {
    "name": "t __nano_malloc_check_scribble",
    "type": "CPP"
  },
  {
    "name": "t _nano_memalign",
    "type": "CPP"
  },
  {
    "name": "t _nano_good_size",
    "type": "CPP"
  },
  {
    "name": "t _nano_valloc",
    "type": "CPP"
  },
  {
    "name": "t _nano_batch_malloc",
    "type": "CPP"
  },
  {
    "name": "t _bitarray_size",
    "type": "CPP"
  },
  {
    "name": "t _bitarray_create",
    "type": "CPP"
  },
  {
    "name": "t _bitarray_get",
    "type": "CPP"
  },
  {
    "name": "t _bitarray_set",
    "type": "CPP"
  },
  {
    "name": "t _bitarray_zap",
    "type": "CPP"
  },
  {
    "name": "t _bitarray_first_set",
    "type": "CPP"
  },
  {
    "name": "t _bitarray_zap_first_set",
    "type": "CPP"
  },
  {
    "name": "t _bitarray_zap_first_set_multiple",
    "type": "CPP"
  },
  {
    "name": "t _FFS_and_zap_word",
    "type": "CPP"
  },
  {
    "name": "t _malloc_common_strstr",
    "type": "CPP"
  },
  {
    "name": "t _malloc_common_convert_to_long",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_realloc",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_destroy",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_batch_malloc",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_batch_free",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_memalign",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_free_definite_size",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_pressure_relief",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_claimed_address",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_ptr_in_use_enumerator",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_good_size",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_check",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_print_self",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_log",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_statistics",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_locked",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_reinit_lock",
    "type": "CPP"
  },
  {
    "name": "t _purgeable_print_task",
    "type": "CPP"
  },
  {
    "name": "t __malloc_default_reader",
    "type": "CPP"
  },
  {
    "name": "t _large_debug_print",
    "type": "CPP"
  },
  {
    "name": "t _large_in_use_enumerator",
    "type": "CPP"
  },
  {
    "name": "t _large_try_shrink_in_place",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin_probe",
    "type": "CPP"
  },
  {
    "name": "t _szone_batch_free",
    "type": "CPP"
  },
  {
    "name": "T _scalable_zone_info",
    "type": "CPP"
  },
  {
    "name": "t __malloc_default_reader",
    "type": "CPP"
  },
  {
    "name": "t _szone_pressure_relief",
    "type": "CPP"
  },
  {
    "name": "T _scalable_zone_statistics",
    "type": "CPP"
  },
  {
    "name": "t _szone_ptr_in_use_enumerator",
    "type": "CPP"
  },
  {
    "name": "t _szone_check",
    "type": "CPP"
  },
  {
    "name": "t _szone_print_self",
    "type": "CPP"
  },
  {
    "name": "t _szone_log",
    "type": "CPP"
  },
  {
    "name": "t _szone_locked",
    "type": "CPP"
  },
  {
    "name": "t _szone_reinit_lock",
    "type": "CPP"
  },
  {
    "name": "t _szone_print_task",
    "type": "CPP"
  },
  {
    "name": "t _szone_check_all",
    "type": "CPP"
  },
  {
    "name": "t _szone_print",
    "type": "CPP"
  },
  {
    "name": "t _small_madvise_pressure_relief",
    "type": "CPP"
  },
  {
    "name": "t _small_check_region",
    "type": "CPP"
  },
  {
    "name": "t _small_free_list_get_ptr",
    "type": "CPP"
  },
  {
    "name": "t _small_in_use_enumerator",
    "type": "CPP"
  },
  {
    "name": "t _free_small_botch",
    "type": "CPP"
  },
  {
    "name": "t _print_small_free_list",
    "type": "CPP"
  },
  {
    "name": "t _print_small_region",
    "type": "CPP"
  },
  {
    "name": "t _small_free_list_check",
    "type": "CPP"
  },
  {
    "name": "t _free_list_checksum_botch",
    "type": "CPP"
  },
  {
    "name": "t _create_legacy_scalable_zone",
    "type": "CPP"
  },
  {
    "name": "t _legacy_valloc",
    "type": "CPP"
  },
  {
    "name": "t _szone_basic_zone",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_batch_free",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_pressure_relief",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_destroy",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_forked_malloc",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_forked_free",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_forked_free_definite_size",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_forked_realloc",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_forked_batch_free",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_forked_zone",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_forked_calloc",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_forked_batch_malloc",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_forked_claimed_address",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_ptr_in_use_enumerator",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_check",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_print_self",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_log",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_statistics_self",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_locked",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_reinit_lock",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_print_task",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_statistics_task",
    "type": "CPP"
  },
  {
    "name": "t __malloc_default_reader",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_statistics",
    "type": "CPP"
  },
  {
    "name": "t _nanov2_null_printer",
    "type": "CPP"
  },
  {
    "name": "t _nano_common_cpu_number_override_set",
    "type": "CPP"
  },
  {
    "name": "t _nano_common_deallocate_pages",
    "type": "CPP"
  },
  {
    "name": "t _nano_common_default_reader",
    "type": "CPP"
  },
  {
    "name": "t _malloc_error_break",
    "type": "CPP"
  },
  {
    "name": "t _malloc_gdb_po_unsafe",
    "type": "CPP"
  },
  {
    "name": "T _zeroify_scalable_zone",
    "type": "CPP"
  },
  {
    "name": "t _legacy_zeroing_large_malloc",
    "type": "CPP"
  },
  {
    "name": "t _legacy_zeroing_large_valloc",
    "type": "CPP"
  },
  {
    "name": "T _malloc_create_legacy_default_zone",
    "type": "CPP"
  },
  {
    "name": "t _malloc_zone_check_fail",
    "type": "CPP"
  },
  {
    "name": "t _internal_check",
    "type": "CPP"
  },
  {
    "name": "T _malloc_get_zone_name",
    "type": "CPP"
  },
  {
    "name": "T _aligned_alloc",
    "type": "CPP"
  },
  {
    "name": "T _vfree",
    "type": "CPP"
  },
  {
    "name": "T _malloc_claimed_address",
    "type": "CPP"
  },
  {
    "name": "T _reallocarrayf$DARWIN_EXTSN",
    "type": "CPP"
  },
  {
    "name": "T _malloc_enter_process_memory_limit_warn_mode",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_pressure_relief",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_batch_free",
    "type": "CPP"
  },
  {
    "name": "T _malloc_get_all_zones",
    "type": "CPP"
  },
  {
    "name": "t __malloc_default_reader",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_print_ptr_info",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_check",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_print",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_log",
    "type": "CPP"
  },
  {
    "name": "T _mag_set_thread_index",
    "type": "CPP"
  },
  {
    "name": "T _malloc_error",
    "type": "CPP"
  },
  {
    "name": "T __malloc_fork_child",
    "type": "CPP"
  },
  {
    "name": "T _mstats",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_enable_discharge_checking",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_disable_discharge_checking",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_discharge",
    "type": "CPP"
  },
  {
    "name": "T _malloc_zone_enumerate_discharged_pointers",
    "type": "CPP"
  },
  {
    "name": "T _set_malloc_singlethreaded",
    "type": "CPP"
  },
  {
    "name": "T _malloc_singlethreaded",
    "type": "CPP"
  },
  {
    "name": "T _malloc_debug",
    "type": "CPP"
  },
  {
    "name": "T _turn_off_stack_logging",
    "type": "CPP"
  },
  {
    "name": "T ___mach_stack_logging_start_reading",
    "type": "CPP"
  },
  {
    "name": "T ___mach_stack_logging_stop_reading",
    "type": "CPP"
  },
  {
    "name": "T ___mach_stack_logging_get_frames",
    "type": "CPP"
  },
  {
    "name": "T ___mach_stack_logging_stackid_for_vm_region",
    "type": "CPP"
  },
  {
    "name": "T ___mach_stack_logging_frames_for_uniqued_stack",
    "type": "CPP"
  },
  {
    "name": "T ___mach_stack_logging_get_frames_for_stackid",
    "type": "CPP"
  },
  {
    "name": "T ___mach_stack_logging_uniquing_table_read_stack",
    "type": "CPP"
  },
  {
    "name": "T ___mach_stack_logging_enumerate_records",
    "type": "CPP"
  },
  {
    "name": "T ___mach_stack_logging_copy_uniquing_table",
    "type": "CPP"
  },
  {
    "name": "T ___mach_stack_logging_uniquing_table_copy_from_serialized",
    "type": "CPP"
  },
  {
    "name": "T ___mach_stack_logging_uniquing_table_release",
    "type": "CPP"
  },
  {
    "name": "T ___mach_stack_logging_uniquing_table_retain",
    "type": "CPP"
  },
  {
    "name": "T ___mach_stack_logging_uniquing_table_sizeof",
    "type": "CPP"
  },
  {
    "name": "T ___mach_stack_logging_uniquing_table_serialize",
    "type": "CPP"
  },
  {
    "name": "T ___mach_stack_logging_set_file_path",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_size",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_destroy",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_batch_free",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_pressure_relief",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_ptr_in_use_enumerator",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_check",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_print",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_log",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_force_lock",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_force_unlock",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_statistics",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_locked",
    "type": "CPP"
  },
  {
    "name": "t _default_zone_reinit_lock",
    "type": "CPP"
  },
  {
    "name": "t _medium_finalize_region",
    "type": "CPP"
  },
  {
    "name": "t _medium_free_detach_region",
    "type": "CPP"
  },
  {
    "name": "t _medium_free_reattach_region",
    "type": "CPP"
  },
  {
    "name": "t _medium_free_scan_madvise_free",
    "type": "CPP"
  },
  {
    "name": "t _medium_madvise_pressure_relief",
    "type": "CPP"
  },
  {
    "name": "t _medium_try_shrink_in_place",
    "type": "CPP"
  },
  {
    "name": "t _medium_check_region",
    "type": "CPP"
  },
  {
    "name": "t _medium_free_list_get_ptr",
    "type": "CPP"
  },
  {
    "name": "t _medium_in_use_enumerator",
    "type": "CPP"
  },
  {
    "name": "t _free_medium_botch",
    "type": "CPP"
  },
  {
    "name": "t _print_medium_free_list",
    "type": "CPP"
  },
  {
    "name": "t _print_medium_region",
    "type": "CPP"
  },
  {
    "name": "t _print_medium_region_vis",
    "type": "CPP"
  },
  {
    "name": "t _medium_free_list_check",
    "type": "CPP"
  },
  {
    "name": "t _free_list_checksum_botch",
    "type": "CPP"
  },
  {
    "name": "t _medium_free_try_depot_unmap_no_lock",
    "type": "CPP"
  },
  {
    "name": "T _malloc_freezedry",
    "type": "CPP"
  },
  {
    "name": "T _malloc_jumpstart",
    "type": "CPP"
  },
  {
    "name": "t _frozen_malloc",
    "type": "CPP"
  },
  {
    "name": "t _frozen_calloc",
    "type": "CPP"
  },
  {
    "name": "t _frozen_valloc",
    "type": "CPP"
  },
  {
    "name": "t _frozen_free",
    "type": "CPP"
  },
  {
    "name": "t _frozen_realloc",
    "type": "CPP"
  },
  {
    "name": "t _frozen_destroy",
    "type": "CPP"
  },
  {
    "name": "t _nano_forked_zone",
    "type": "CPP"
  },
  {
    "name": "t _nano_forked_malloc",
    "type": "CPP"
  },
  {
    "name": "t _nano_forked_calloc",
    "type": "CPP"
  },
  {
    "name": "t _nano_forked_free",
    "type": "CPP"
  },
  {
    "name": "t _nano_forked_realloc",
    "type": "CPP"
  },
  {
    "name": "t _nano_destroy",
    "type": "CPP"
  },
  {
    "name": "t _nano_forked_batch_malloc",
    "type": "CPP"
  },
  {
    "name": "t _nano_forked_batch_free",
    "type": "CPP"
  },
  {
    "name": "t _nano_forked_free_definite_size",
    "type": "CPP"
  },
  {
    "name": "t _nano_forked_claimed_address",
    "type": "CPP"
  },
  {
    "name": "t _nano_create_zone",
    "type": "CPP"
  },
  {
    "name": "t _nano_malloc_scribble",
    "type": "CPP"
  },
  {
    "name": "t _nano_free_scribble",
    "type": "CPP"
  },
  {
    "name": "t _nano_batch_free",
    "type": "CPP"
  },
  {
    "name": "t _nano_free_definite_size_scribble",
    "type": "CPP"
  },
  {
    "name": "t _nano_pressure_relief",
    "type": "CPP"
  },
  {
    "name": "t _nano_claimed_address",
    "type": "CPP"
  },
  {
    "name": "t _nano_init",
    "type": "CPP"
  },
  {
    "name": "t _nano_configure",
    "type": "CPP"
  },
  {
    "name": "t __nano_vet_and_size_of_live",
    "type": "CPP"
  },
  {
    "name": "t _nano_ptr_in_use_enumerator",
    "type": "CPP"
  },
  {
    "name": "t _nanozone_check",
    "type": "CPP"
  },
  {
    "name": "t _nano_print",
    "type": "CPP"
  },
  {
    "name": "t _nano_log",
    "type": "CPP"
  },
  {
    "name": "t _nano_force_lock",
    "type": "CPP"
  },
  {
    "name": "t _nano_force_unlock",
    "type": "CPP"
  },
  {
    "name": "t _nano_statistics",
    "type": "CPP"
  },
  {
    "name": "t _nano_locked",
    "type": "CPP"
  },
  {
    "name": "t _nano_reinit_lock",
    "type": "CPP"
  },
  {
    "name": "t _count_free",
    "type": "CPP"
  },
  {
    "name": "T _tiny_print_region_free_list",
    "type": "CPP"
  },
  {
    "name": "t _tiny_madvise_pressure_relief",
    "type": "CPP"
  },
  {
    "name": "t _tiny_check_region",
    "type": "CPP"
  },
  {
    "name": "t _tiny_in_use_enumerator",
    "type": "CPP"
  },
  {
    "name": "t _free_tiny_botch",
    "type": "CPP"
  },
  {
    "name": "t _tiny_batch_free",
    "type": "CPP"
  },
  {
    "name": "t _print_tiny_free_list",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libsystem_networkextension.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _ne_session_agent_get_advisory",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_app_vpn_configs_present",
    "type": "CPP"
  },
  {
    "name": "t _get_current_config_state",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_get_config_id_from_network_agent",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_set_socket_attributes",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperCacheCopyAppUUIDMappingExtended",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperCacheCopyAppUUIDMappingForUIDExtended",
    "type": "CPP"
  },
  {
    "name": "T _ne_copy_cached_uuids_for_bundle_identifier",
    "type": "CPP"
  },
  {
    "name": "T _ne_copy_uuid_cache_locked",
    "type": "CPP"
  },
  {
    "name": "T _ne_log_obj",
    "type": "CPP"
  },
  {
    "name": "t ___ne_log_obj_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperCopyResponse",
    "type": "CPP"
  },
  {
    "name": "T _nehelper_copy_connection",
    "type": "CPP"
  },
  {
    "name": "t ___globals_init_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_use_as_system_vpn",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_copy_policy_match",
    "type": "CPP"
  },
  {
    "name": "T _nelog_is_info_logging_enabled",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_policy_match_is_drop",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_policy_match_get_flow_divert_unit",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_always_on_vpn_configs_present",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_on_demand_configs_present",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_policy_match_get_scoped_interface_index",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_manager_is_running",
    "type": "CPP"
  },
  {
    "name": "t _get_current_notify_pid",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_manager_get_pid",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_manager_has_active_sessions",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_should_disable_nexus",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_disable_restrictions",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_use_ikev2provider",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_fallback_advisory",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_fallback_default",
    "type": "CPP"
  },
  {
    "name": "T _ne_get_configuration_generation",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_always_on_vpn_configs_present_at_boot",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_content_filter_configs_present",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_dns_proxy_configs_present",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_path_controller_configs_present",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_create",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_create_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_retain",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32r",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_release",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_release_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_set_event_handler",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_set_event_handler_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_clear_event_handler",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32b",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32b",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_cancel",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_cancel_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_get_status",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_get_status_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _fetch_status",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_get_status_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_get_status_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_get_status_block_invoke.15",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_info_type_to_string",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_get_info",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_get_info_with_parameters",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_get_info2",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_send_barrier",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_send_barrier_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _get_connection",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_send_barrier_block_invoke.24",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_start_on_behalf_of",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_start_on_behalf_of_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_start_with_options",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_start",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_stop",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_get_configuration_id",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_establish_ipc",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_establish_ipc_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_establish_ipc_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_establish_ipc_block_invoke.35",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_establish_ipc_block_invoke_2.38",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_add_necp_drop_dest_from_path",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_parse_necp_drop_dest_array",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_initialize_necp_drop_dest",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_initialize_necp_drop_all",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_is_safeboot",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_policy_match_get_service_type",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_policy_match_get_service",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_policy_match_is_flow_divert",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_policy_match_get_filter_unit",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_policy_match_get_service_action",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_policy_match_service_is_registered",
    "type": "CPP"
  },
  {
    "name": "T _nehelper_queue",
    "type": "CPP"
  },
  {
    "name": "t ___nehelper_copy_connection_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_address_matches_subnets",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_service_matches_address_for_interface",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_init_cached_values_unlocked",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_get_session_dict_from_cache",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_get_domain_dict_from_session_dict",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_service_matches_address",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_service_get_dns_service_id_for_interface",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_service_get_dns_service_id",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_copy_socket_attributes",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_status_to_string",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_type_to_string",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_copy_security_session_info",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_copy_security_session_info_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_stop_all_with_plugin_type",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_policy_copy_flow_divert_token",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_validate_flow_properties",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_policy_copy_flow_divert_token_with_key",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_policy_copy_flow_divert_token_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _ne_tlv_add",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_copy_app_data_from_flow_divert_socket",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_copy_app_data_from_flow_divert_token",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_agent_get_advisory_interface_index",
    "type": "CPP"
  },
  {
    "name": "T _ne_session_stop_reason_to_string",
    "type": "CPP"
  },
  {
    "name": "T _ne_copy_signing_identifier_for_pid",
    "type": "CPP"
  },
  {
    "name": "T _ne_copy_signature_info_for_pid",
    "type": "CPP"
  },
  {
    "name": "T _ne_force_reset_uuid_cache",
    "type": "CPP"
  },
  {
    "name": "T _ne_copy_uuid_cache",
    "type": "CPP"
  },
  {
    "name": "t _ne_copy_cached_synthesized_uuids_for_bundle_identifier_locked",
    "type": "CPP"
  },
  {
    "name": "t ___ne_copy_cached_uuids_for_bundle_identifier_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _ne_copy_cached_bundle_identifier_for_uuid",
    "type": "CPP"
  },
  {
    "name": "t _ne_copy_cached_bundle_identifier_for_synthesized_uuid_locked",
    "type": "CPP"
  },
  {
    "name": "t ___ne_copy_cached_bundle_identifier_for_uuid_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___ne_copy_cached_bundle_identifier_for_uuid_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "T _ne_copy_cached_preferred_bundle_for_bundle_identifier",
    "type": "CPP"
  },
  {
    "name": "t ___get_current_notify_pid_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_clear_event_handler_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___fetch_status_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_get_info_with_parameters_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_get_info_with_parameters_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_get_info_with_parameters_block_invoke.143",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_get_info_with_parameters_block_invoke.145",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_get_info_with_parameters_block_invoke.148",
    "type": "CPP"
  },
  {
    "name": "t ___get_connection_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _notify_status_changed",
    "type": "CPP"
  },
  {
    "name": "t ___notify_client_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_",
    "type": "CPP"
  },
  {
    "name": "t ___notify_client_block_invoke.158",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_stop_with_reason_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_parse_necp_drop_dest_array_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___ne_parse_necp_drop_dest_dictionary_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32r40r48r56r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32r40r48r56r",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_init_cached_values_unlocked_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_init_cached_values_unlocked_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_update_cached_values",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_init_cached_values_unlocked_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_init_cached_values_unlocked_block_invoke_4",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_update_cached_values_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___get_flow_divert_token_from_session_manager_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___get_flow_divert_token_from_session_manager_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___get_flow_divert_token_from_session_manager_block_invoke.187",
    "type": "CPP"
  },
  {
    "name": "t ___get_flow_divert_token_from_session_manager_block_invoke_2.188",
    "type": "CPP"
  },
  {
    "name": "t ___get_flow_divert_token_from_session_manager_block_invoke.195",
    "type": "CPP"
  },
  {
    "name": "t ___ne_copy_cached_bundle_identifier_for_synthesized_uuid_locked_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperSendRequest",
    "type": "CPP"
  },
  {
    "name": "t ___NEHelperSendRequest_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___NEHelperSendRequest_block_invoke.1",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperGetPFKeySocket",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperGetIKESocket",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperGetIKESocketWithResult",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperCopyAppInfo",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperGetKernelControlSocket",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperGetKernelControlSocketExtended",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperGetNECPSessionFD",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperInterfaceSetAddress",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperInterfaceRemoveAddress",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperInterfaceSetMTU",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperInterfaceSetOption",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperSettingsSetBool",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperSettingsSetNumber",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperSettingsSetArray",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperCacheSetRoutes",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperCacheSetDomainDictionaries",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperCacheAddRedirectedAddress",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperCacheClearRedirectedAddresses",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperCacheCopyAppUUIDMapping",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperCacheCopySigningIdentifierMapping",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperCacheClearUUIDs",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperCopyAggregatePathRules",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperCopyPerAppDomains",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperCopyPreferredBundleID",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperHandleConfigurationsChangedBySC",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperVPNSetEnabled",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperVPNConfigurationExists",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperInit",
    "type": "CPP"
  },
  {
    "name": "T _NEHelperCopyCurrentNetworkInfo",
    "type": "CPP"
  },
  {
    "name": "T _ne_log_large_obj",
    "type": "CPP"
  },
  {
    "name": "t ___ne_log_large_obj_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _nelog_is_extra_vpn_logging_enabled",
    "type": "CPP"
  },
  {
    "name": "T _nelog_is_debug_logging_enabled",
    "type": "CPP"
  },
  {
    "name": "T _ne_print_backtrace",
    "type": "CPP"
  },
  {
    "name": "t _ne_get_configuration_generation.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _ne_get_configuration_generation.cold.2",
    "type": "CPP"
  },
  {
    "name": "t ___ne_session_establish_ipc_block_invoke_2.38.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_add_necp_drop_dest_from_path.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_add_necp_drop_dest_from_path.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_add_necp_drop_dest_from_path.cold.3",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_add_necp_drop_dest_from_path.cold.4",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_parse_necp_drop_dest_array.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_initialize_necp_drop_dest.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_initialize_necp_drop_dest.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _nehelper_copy_connection.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___nehelper_copy_connection_block_invoke.cold.1",
    "type": "CPP"
  },
  {
    "name": "t ___nehelper_copy_connection_block_invoke.cold.2",
    "type": "CPP"
  },
  {
    "name": "t ___nehelper_copy_connection_block_invoke.cold.3",
    "type": "CPP"
  },
  {
    "name": "t ___nehelper_copy_connection_block_invoke.cold.4",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_copy_security_session_info.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_policy_copy_flow_divert_token.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _ne_tlv_add.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_copy_app_data_from_flow_divert_socket.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_copy_app_data_from_flow_divert_socket.cold.2",
    "type": "CPP"
  },
  {
    "name": "t _ne_session_copy_app_data_from_flow_divert_socket.cold.3",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libsystem_notify.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _notify_register_check",
    "type": "CPP"
  },
  {
    "name": "T _notify_check",
    "type": "CPP"
  },
  {
    "name": "T _notify_register_dispatch",
    "type": "CPP"
  },
  {
    "name": "T _notify_set_options",
    "type": "CPP"
  },
  {
    "name": "T _notify_register_mach_port",
    "type": "CPP"
  },
  {
    "name": "T _notify_cancel",
    "type": "CPP"
  },
  {
    "name": "T _notify_peek",
    "type": "CPP"
  },
  {
    "name": "T _notify_get_state",
    "type": "CPP"
  },
  {
    "name": "T _notify_is_valid_token",
    "type": "CPP"
  },
  {
    "name": "T _notify_register_plain",
    "type": "CPP"
  },
  {
    "name": "T _notify_post",
    "type": "CPP"
  },
  {
    "name": "T _notify_set_state",
    "type": "CPP"
  },
  {
    "name": "T _notify_monitor_file",
    "type": "CPP"
  },
  {
    "name": "T _notify_register_signal",
    "type": "CPP"
  },
  {
    "name": "T __notify_fork_child",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libsystem_sandbox.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _rootless_check_trusted_fd",
    "type": "CPP"
  },
  {
    "name": "t _rootless_check_trusted_internal",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_container_path_for_pid",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_requests_integrity_protection_for_preference_domain",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_check",
    "type": "CPP"
  },
  {
    "name": "t _sandbox_check_common",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_check_by_audit_token",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_container_path_for_audit_token",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_extension_issue_file",
    "type": "CPP"
  },
  {
    "name": "t __sandbox_extension_issue",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_extension_release",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_extension_consume",
    "type": "CPP"
  },
  {
    "name": "T _gpu_bundle_find_trusted",
    "type": "CPP"
  },
  {
    "name": "T _rootless_check_trusted_class",
    "type": "CPP"
  },
  {
    "name": "T _gpu_bundle_is_path_trusted",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_consume_fs_extension",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_release_fs_extension",
    "type": "CPP"
  },
  {
    "name": "T __amkrtemp",
    "type": "CPP"
  },
  {
    "name": "T _rootless_check_datavault_flag",
    "type": "CPP"
  },
  {
    "name": "t _rootless_check_protected_flag",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_init",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_init_with_parameters",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_extension_issue_file_to_self",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_note",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_extension_issue_file_to_process",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_extension_release_file",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_consume_extension",
    "type": "CPP"
  },
  {
    "name": "T _rootless_check_trusted",
    "type": "CPP"
  },
  {
    "name": "T _rootless_check_restricted_flag",
    "type": "CPP"
  },
  {
    "name": "T _rootless_mkdir_nounlink",
    "type": "CPP"
  },
  {
    "name": "t _rootless_mkdir_protected",
    "type": "CPP"
  },
  {
    "name": "T _rootless_restricted_environment",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_reference_retain_by_audit_token",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_issue_mach_extension",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_extension_issue_mach",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_consume_mach_extension",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_passthrough_access",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_unsuspend",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_free_error",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_init_from_pid",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_check_by_uniqueid",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_query_approval_policy_for_path",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_query_user_intent_for_process_with_audit_token",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_check_bulk",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_reference_release",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_check_by_reference",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_set_container_path_for_signing_id",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_set_container_path_for_signing_id_with_persona",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_set_container_path_for_application_group",
    "type": "CPP"
  },
  {
    "name": "T _sandbox_set_container_path_for_application_group_with_persona",
    "type": "CPP"
  },
  {
    "name": "T __sandbox_in_a_container",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libsystem_secinit.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T __libsecinit_initializer",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libsystem_kernel.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _kdebug_is_enabled",
    "type": "CPP"
  },
  {
    "name": "T _kdebug_typefilter",
    "type": "CPP"
  },
  {
    "name": "T _kdebug_trace",
    "type": "CPP"
  },
  {
    "name": "T _issetugid",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_map",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_vm_allocate_trap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_vm_purgable_control_trap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_vm_deallocate_trap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_vm_protect_trap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_vm_map_trap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_allocate_trap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_destroy_trap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_deallocate_trap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_mod_refs_trap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_move_member_trap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_insert_right_trap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_insert_member_trap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_extract_member_trap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_construct_trap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_destruct_trap",
    "type": "CPP"
  },
  {
    "name": "T _mach_reply_port",
    "type": "CPP"
  },
  {
    "name": "T _thread_self_trap",
    "type": "CPP"
  },
  {
    "name": "T _task_self_trap",
    "type": "CPP"
  },
  {
    "name": "T _host_self_trap",
    "type": "CPP"
  },
  {
    "name": "T _mach_msg_trap",
    "type": "CPP"
  },
  {
    "name": "T _mach_msg_overwrite_trap",
    "type": "CPP"
  },
  {
    "name": "T _semaphore_signal_trap",
    "type": "CPP"
  },
  {
    "name": "T _semaphore_signal_all_trap",
    "type": "CPP"
  },
  {
    "name": "T _semaphore_signal_thread_trap",
    "type": "CPP"
  },
  {
    "name": "T _semaphore_wait_trap",
    "type": "CPP"
  },
  {
    "name": "T _semaphore_wait_signal_trap",
    "type": "CPP"
  },
  {
    "name": "T _semaphore_timedwait_trap",
    "type": "CPP"
  },
  {
    "name": "T _semaphore_timedwait_signal_trap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_get_attributes_trap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_guard_trap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_unguard_trap",
    "type": "CPP"
  },
  {
    "name": "T _mach_generate_activity_id",
    "type": "CPP"
  },
  {
    "name": "T _task_name_for_pid",
    "type": "CPP"
  },
  {
    "name": "T _task_for_pid",
    "type": "CPP"
  },
  {
    "name": "T _pid_for_task",
    "type": "CPP"
  },
  {
    "name": "T _macx_swapon",
    "type": "CPP"
  },
  {
    "name": "T _macx_swapoff",
    "type": "CPP"
  },
  {
    "name": "T _thread_get_special_reply_port",
    "type": "CPP"
  },
  {
    "name": "T _macx_triggers",
    "type": "CPP"
  },
  {
    "name": "T _macx_backing_store_suspend",
    "type": "CPP"
  },
  {
    "name": "T _macx_backing_store_recovery",
    "type": "CPP"
  },
  {
    "name": "T _swtch_pri",
    "type": "CPP"
  },
  {
    "name": "T _swtch",
    "type": "CPP"
  },
  {
    "name": "T _syscall_thread_switch",
    "type": "CPP"
  },
  {
    "name": "T _clock_sleep_trap",
    "type": "CPP"
  },
  {
    "name": "T _host_create_mach_voucher_trap",
    "type": "CPP"
  },
  {
    "name": "T _mach_voucher_extract_attr_recipe_trap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_type_trap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_request_notification_trap",
    "type": "CPP"
  },
  {
    "name": "T _mach_timebase_info_trap",
    "type": "CPP"
  },
  {
    "name": "T _mach_wait_until",
    "type": "CPP"
  },
  {
    "name": "T _mk_timer_create",
    "type": "CPP"
  },
  {
    "name": "T _mk_timer_destroy",
    "type": "CPP"
  },
  {
    "name": "T _mk_timer_arm",
    "type": "CPP"
  },
  {
    "name": "T _mk_timer_cancel",
    "type": "CPP"
  },
  {
    "name": "T _mk_timer_arm_leeway",
    "type": "CPP"
  },
  {
    "name": "T _debug_control_port_for_pid",
    "type": "CPP"
  },
  {
    "name": "T _task_restartable_ranges_register",
    "type": "CPP"
  },
  {
    "name": "t _memcpy",
    "type": "CPP"
  },
  {
    "name": "T _mig_get_reply_port",
    "type": "CPP"
  },
  {
    "name": "T _mach_msg",
    "type": "CPP"
  },
  {
    "name": "T _mach_timebase_info",
    "type": "CPP"
  },
  {
    "name": "T _mach_continuous_time",
    "type": "CPP"
  },
  {
    "name": "T _mach_absolute_time",
    "type": "CPP"
  },
  {
    "name": "T _getentropy",
    "type": "CPP"
  },
  {
    "name": "T ___libkernel_voucher_init",
    "type": "CPP"
  },
  {
    "name": "T _getpid",
    "type": "CPP"
  },
  {
    "name": "T _task_get_special_port",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_mod_refs",
    "type": "CPP"
  },
  {
    "name": "T _task_info",
    "type": "CPP"
  },
  {
    "name": "T _csops_audittoken",
    "type": "CPP"
  },
  {
    "name": "T _cerror_nocancel",
    "type": "CPP"
  },
  {
    "name": "T ___error",
    "type": "CPP"
  },
  {
    "name": "T _getattrlist",
    "type": "CPP"
  },
  {
    "name": "T _access",
    "type": "CPP"
  },
  {
    "name": "T _open",
    "type": "CPP"
  },
  {
    "name": "T _fstat64",
    "type": "CPP"
  },
  {
    "name": "T _csr_check",
    "type": "CPP"
  },
  {
    "name": "T ___csrctl",
    "type": "CPP"
  },
  {
    "name": "T _fcntl",
    "type": "CPP"
  },
  {
    "name": "T ___fcntl",
    "type": "CPP"
  },
  {
    "name": "T _close",
    "type": "CPP"
  },
  {
    "name": "T _read",
    "type": "CPP"
  },
  {
    "name": "T _open$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _mmap",
    "type": "CPP"
  },
  {
    "name": "T ___mmap",
    "type": "CPP"
  },
  {
    "name": "T _voucher_mach_msg_set",
    "type": "CPP"
  },
  {
    "name": "T _mach_host_self",
    "type": "CPP"
  },
  {
    "name": "T _host_get_special_port",
    "type": "CPP"
  },
  {
    "name": "T _mach_msg_destroy",
    "type": "CPP"
  },
  {
    "name": "t _mach_msg_destroy_port",
    "type": "CPP"
  },
  {
    "name": "T _host_create_mach_voucher",
    "type": "CPP"
  },
  {
    "name": "T _voucher_mach_msg_clear",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_construct",
    "type": "CPP"
  },
  {
    "name": "T _task_set_special_port",
    "type": "CPP"
  },
  {
    "name": "T _geteuid",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_deallocate",
    "type": "CPP"
  },
  {
    "name": "T _proc_pidinfo",
    "type": "CPP"
  },
  {
    "name": "T ___proc_info",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_vm_map",
    "type": "CPP"
  },
  {
    "name": "T _mach_make_memory_entry_64",
    "type": "CPP"
  },
  {
    "name": "T ___sysctl",
    "type": "CPP"
  },
  {
    "name": "T _mach_approximate_time",
    "type": "CPP"
  },
  {
    "name": "T _mig_get_special_reply_port",
    "type": "CPP"
  },
  {
    "name": "T _mig_strncpy_zerofill",
    "type": "CPP"
  },
  {
    "name": "T _shm_open",
    "type": "CPP"
  },
  {
    "name": "T _close$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _openat",
    "type": "CPP"
  },
  {
    "name": "T _cerror",
    "type": "CPP"
  },
  {
    "name": "t __pthread_exit_if_canceled",
    "type": "CPP"
  },
  {
    "name": "T _lseek",
    "type": "CPP"
  },
  {
    "name": "T _pread",
    "type": "CPP"
  },
  {
    "name": "T _mach_voucher_deallocate",
    "type": "CPP"
  },
  {
    "name": "T ___sysctlbyname",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_destruct",
    "type": "CPP"
  },
  {
    "name": "T ___sandbox_ms",
    "type": "CPP"
  },
  {
    "name": "T _chdir",
    "type": "CPP"
  },
  {
    "name": "T _stat64",
    "type": "CPP"
  },
  {
    "name": "T _mkdir",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_deallocate",
    "type": "CPP"
  },
  {
    "name": "T _getuid",
    "type": "CPP"
  },
  {
    "name": "T _pthread_getugid_np",
    "type": "CPP"
  },
  {
    "name": "T _getegid",
    "type": "CPP"
  },
  {
    "name": "T _csops",
    "type": "CPP"
  },
  {
    "name": "T _proc_pidpath",
    "type": "CPP"
  },
  {
    "name": "t _strlen",
    "type": "CPP"
  },
  {
    "name": "T _fstatfs64",
    "type": "CPP"
  },
  {
    "name": "T ___getdirentries64",
    "type": "CPP"
  },
  {
    "name": "T ___workq_kernreturn",
    "type": "CPP"
  },
  {
    "name": "T ___workq_open",
    "type": "CPP"
  },
  {
    "name": "T _kevent_qos",
    "type": "CPP"
  },
  {
    "name": "T _kevent_id",
    "type": "CPP"
  },
  {
    "name": "T ___bsdthread_ctl",
    "type": "CPP"
  },
  {
    "name": "T ___thread_selfid",
    "type": "CPP"
  },
  {
    "name": "T ___ulock_wait",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_request_notification",
    "type": "CPP"
  },
  {
    "name": "T ___ulock_wake",
    "type": "CPP"
  },
  {
    "name": "T ___commpage_gettimeofday",
    "type": "CPP"
  },
  {
    "name": "t ___commpage_gettimeofday_internal",
    "type": "CPP"
  },
  {
    "name": "T _read$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _mach_get_times",
    "type": "CPP"
  },
  {
    "name": "t __mach_continuous_time_base",
    "type": "CPP"
  },
  {
    "name": "T _host_request_notification",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_allocate",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_insert_member",
    "type": "CPP"
  },
  {
    "name": "T _vm_allocate",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_allocate",
    "type": "CPP"
  },
  {
    "name": "T _vm_deallocate",
    "type": "CPP"
  },
  {
    "name": "T _getrlimit",
    "type": "CPP"
  },
  {
    "name": "T ___getrlimit",
    "type": "CPP"
  },
  {
    "name": "T _getaudit_addr",
    "type": "CPP"
  },
  {
    "name": "T _syscall",
    "type": "CPP"
  },
  {
    "name": "T _readlink",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_insert_right",
    "type": "CPP"
  },
  {
    "name": "T _proc_setpcontrol",
    "type": "CPP"
  },
  {
    "name": "T _vm_remap",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_vm_remap",
    "type": "CPP"
  },
  {
    "name": "T _task_policy_set",
    "type": "CPP"
  },
  {
    "name": "T _mach_voucher_extract_attr_recipe",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_get_attributes",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_set_attributes",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_set_attributes",
    "type": "CPP"
  },
  {
    "name": "T _kdebug_trace_string",
    "type": "CPP"
  },
  {
    "name": "T ___kdebug_trace64",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_type",
    "type": "CPP"
  },
  {
    "name": "T _posix_madvise",
    "type": "CPP"
  },
  {
    "name": "T ___psynch_mutexwait",
    "type": "CPP"
  },
  {
    "name": "T _setrlimit",
    "type": "CPP"
  },
  {
    "name": "T ___setrlimit",
    "type": "CPP"
  },
  {
    "name": "T _task_restartable_ranges_synchronize",
    "type": "CPP"
  },
  {
    "name": "T ___disable_threadsignal",
    "type": "CPP"
  },
  {
    "name": "T ___bsdthread_terminate",
    "type": "CPP"
  },
  {
    "name": "T ___psynch_mutexdrop",
    "type": "CPP"
  },
  {
    "name": "T _getfsstat64",
    "type": "CPP"
  },
  {
    "name": "T _statfs64",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_guard",
    "type": "CPP"
  },
  {
    "name": "T _semaphore_create",
    "type": "CPP"
  },
  {
    "name": "T _semaphore_wait",
    "type": "CPP"
  },
  {
    "name": "T _semaphore_signal",
    "type": "CPP"
  },
  {
    "name": "T _vm_copy",
    "type": "CPP"
  },
  {
    "name": "T _getxattr",
    "type": "CPP"
  },
  {
    "name": "T _thread_destruct_special_reply_port",
    "type": "CPP"
  },
  {
    "name": "T _mig_dealloc_reply_port",
    "type": "CPP"
  },
  {
    "name": "T _semaphore_destroy",
    "type": "CPP"
  },
  {
    "name": "T _proc_track_dirty",
    "type": "CPP"
  },
  {
    "name": "T _proc_set_dirty",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_get_refs",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_get_refs",
    "type": "CPP"
  },
  {
    "name": "T ___semwait_signal",
    "type": "CPP"
  },
  {
    "name": "T _voucher_mach_msg_revert",
    "type": "CPP"
  },
  {
    "name": "T _voucher_mach_msg_adopt",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_extract_member",
    "type": "CPP"
  },
  {
    "name": "T _sigprocmask",
    "type": "CPP"
  },
  {
    "name": "T ___sigaltstack",
    "type": "CPP"
  },
  {
    "name": "T _pwrite",
    "type": "CPP"
  },
  {
    "name": "T _ftruncate",
    "type": "CPP"
  },
  {
    "name": "T _setattrlist",
    "type": "CPP"
  },
  {
    "name": "T _getattrlistbulk",
    "type": "CPP"
  },
  {
    "name": "T _listxattr",
    "type": "CPP"
  },
  {
    "name": "T ___psynch_cvwait",
    "type": "CPP"
  },
  {
    "name": "T ___psynch_cvbroad",
    "type": "CPP"
  },
  {
    "name": "T _guarded_open_np",
    "type": "CPP"
  },
  {
    "name": "T ___guarded_open_np",
    "type": "CPP"
  },
  {
    "name": "T _guarded_pwrite_np",
    "type": "CPP"
  },
  {
    "name": "T _vm_purgable_control",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_purgable_control",
    "type": "CPP"
  },
  {
    "name": "T _fsctl",
    "type": "CPP"
  },
  {
    "name": "T _fgetattrlist",
    "type": "CPP"
  },
  {
    "name": "T _munmap",
    "type": "CPP"
  },
  {
    "name": "T ___munmap",
    "type": "CPP"
  },
  {
    "name": "T _fsgetpath",
    "type": "CPP"
  },
  {
    "name": "T _setxattr",
    "type": "CPP"
  },
  {
    "name": "T _mkdirat",
    "type": "CPP"
  },
  {
    "name": "T _fstatat64",
    "type": "CPP"
  },
  {
    "name": "T _guarded_close_np",
    "type": "CPP"
  },
  {
    "name": "T _fsync",
    "type": "CPP"
  },
  {
    "name": "T _host_get_io_master",
    "type": "CPP"
  },
  {
    "name": "T _write",
    "type": "CPP"
  },
  {
    "name": "T _rename",
    "type": "CPP"
  },
  {
    "name": "T ___rename",
    "type": "CPP"
  },
  {
    "name": "T ___inc_remove_counter",
    "type": "CPP"
  },
  {
    "name": "T _rmdir",
    "type": "CPP"
  },
  {
    "name": "T ___rmdir",
    "type": "CPP"
  },
  {
    "name": "T _chmod",
    "type": "CPP"
  },
  {
    "name": "T ___chmod",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_protect",
    "type": "CPP"
  },
  {
    "name": "T ___bsdthread_create",
    "type": "CPP"
  },
  {
    "name": "T _mprotect",
    "type": "CPP"
  },
  {
    "name": "t ___gettimeofday_with_mach",
    "type": "CPP"
  },
  {
    "name": "T ___gettimeofday",
    "type": "CPP"
  },
  {
    "name": "T _writev",
    "type": "CPP"
  },
  {
    "name": "T ___psynch_cvclrprepost",
    "type": "CPP"
  },
  {
    "name": "T _write$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _kpersona_info",
    "type": "CPP"
  },
  {
    "name": "T ___persona",
    "type": "CPP"
  },
  {
    "name": "T _unlink",
    "type": "CPP"
  },
  {
    "name": "T ___unlink",
    "type": "CPP"
  },
  {
    "name": "T _flock",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_request_notification",
    "type": "CPP"
  },
  {
    "name": "T _necp_open",
    "type": "CPP"
  },
  {
    "name": "T _change_fdguard_np",
    "type": "CPP"
  },
  {
    "name": "T _necp_client_action",
    "type": "CPP"
  },
  {
    "name": "T _kpersona_get",
    "type": "CPP"
  },
  {
    "name": "T _getgid",
    "type": "CPP"
  },
  {
    "name": "T _audit_session_self",
    "type": "CPP"
  },
  {
    "name": "T _socket",
    "type": "CPP"
  },
  {
    "name": "T _fcntl$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T ___fcntl_nocancel",
    "type": "CPP"
  },
  {
    "name": "T _setsockopt",
    "type": "CPP"
  },
  {
    "name": "T _connect$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _sendto$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _select$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _select$DARWIN_EXTSN$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _recvfrom$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _socketpair",
    "type": "CPP"
  },
  {
    "name": "T _sendmsg$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _ioctl",
    "type": "CPP"
  },
  {
    "name": "T ___ioctl",
    "type": "CPP"
  },
  {
    "name": "T _connect",
    "type": "CPP"
  },
  {
    "name": "T _sendto",
    "type": "CPP"
  },
  {
    "name": "T _recvfrom",
    "type": "CPP"
  },
  {
    "name": "T _connectx",
    "type": "CPP"
  },
  {
    "name": "T _getsockopt",
    "type": "CPP"
  },
  {
    "name": "T _shutdown",
    "type": "CPP"
  },
  {
    "name": "T _fgetxattr",
    "type": "CPP"
  },
  {
    "name": "T _dup",
    "type": "CPP"
  },
  {
    "name": "T _select",
    "type": "CPP"
  },
  {
    "name": "T _getpeername",
    "type": "CPP"
  },
  {
    "name": "T _fchmod",
    "type": "CPP"
  },
  {
    "name": "T ___fchmod",
    "type": "CPP"
  },
  {
    "name": "T _getiopolicy_np",
    "type": "CPP"
  },
  {
    "name": "T ___iopolicysys",
    "type": "CPP"
  },
  {
    "name": "T _mach_msg_send",
    "type": "CPP"
  },
  {
    "name": "T _link",
    "type": "CPP"
  },
  {
    "name": "T _mach_right_send_release",
    "type": "CPP"
  },
  {
    "name": "T _vm_protect",
    "type": "CPP"
  },
  {
    "name": "T _recvmsg",
    "type": "CPP"
  },
  {
    "name": "T _mig_reply_setup",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_region",
    "type": "CPP"
  },
  {
    "name": "T _semaphore_timedwait",
    "type": "CPP"
  },
  {
    "name": "T ___psynch_cvsignal",
    "type": "CPP"
  },
  {
    "name": "T _mach_voucher_attr_command",
    "type": "CPP"
  },
  {
    "name": "T _removexattr",
    "type": "CPP"
  },
  {
    "name": "T _clonefileat",
    "type": "CPP"
  },
  {
    "name": "T _host_info",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_move_member",
    "type": "CPP"
  },
  {
    "name": "T _thread_policy",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_thread_policy",
    "type": "CPP"
  },
  {
    "name": "t __pthread_clear_qos_tsd",
    "type": "CPP"
  },
  {
    "name": "T _mig_put_reply_port",
    "type": "CPP"
  },
  {
    "name": "T _select$1050",
    "type": "CPP"
  },
  {
    "name": "T _mig_strncpy",
    "type": "CPP"
  },
  {
    "name": "T ___psynch_rw_wrlock",
    "type": "CPP"
  },
  {
    "name": "T ___psynch_rw_unlock",
    "type": "CPP"
  },
  {
    "name": "T ___psynch_rw_rdlock",
    "type": "CPP"
  },
  {
    "name": "T _fsetxattr",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_get_context",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_get_context",
    "type": "CPP"
  },
  {
    "name": "T _fchflags",
    "type": "CPP"
  },
  {
    "name": "T _futimes",
    "type": "CPP"
  },
  {
    "name": "T _umask",
    "type": "CPP"
  },
  {
    "name": "T _utimes",
    "type": "CPP"
  },
  {
    "name": "T _thread_switch",
    "type": "CPP"
  },
  {
    "name": "T _clock_get_time",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_destroy",
    "type": "CPP"
  },
  {
    "name": "T _gethostuuid",
    "type": "CPP"
  },
  {
    "name": "T ___gethostuuid",
    "type": "CPP"
  },
  {
    "name": "T ___stat64_extended",
    "type": "CPP"
  },
  {
    "name": "T ___chmod_extended",
    "type": "CPP"
  },
  {
    "name": "T ___lstat64_extended",
    "type": "CPP"
  },
  {
    "name": "T _open_dprotected_np",
    "type": "CPP"
  },
  {
    "name": "T ___open_dprotected_np",
    "type": "CPP"
  },
  {
    "name": "T ___fstat64_extended",
    "type": "CPP"
  },
  {
    "name": "T ___fchmod_extended",
    "type": "CPP"
  },
  {
    "name": "T _fsetattrlist",
    "type": "CPP"
  },
  {
    "name": "T _fchown",
    "type": "CPP"
  },
  {
    "name": "T _getgroups",
    "type": "CPP"
  },
  {
    "name": "T _lchown",
    "type": "CPP"
  },
  {
    "name": "T _symlink",
    "type": "CPP"
  },
  {
    "name": "T _openat$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _sendmsg",
    "type": "CPP"
  },
  {
    "name": "T _mig_deallocate",
    "type": "CPP"
  },
  {
    "name": "T ___kdebug_typefilter",
    "type": "CPP"
  },
  {
    "name": "T ___libkernel_init",
    "type": "CPP"
  },
  {
    "name": "T _mach_init",
    "type": "CPP"
  },
  {
    "name": "t _mach_init_doit",
    "type": "CPP"
  },
  {
    "name": "T __init_cpu_capabilities",
    "type": "CPP"
  },
  {
    "name": "T __get_cpu_capabilities",
    "type": "CPP"
  },
  {
    "name": "t __pthread_set_self",
    "type": "CPP"
  },
  {
    "name": "t _strcmp",
    "type": "CPP"
  },
  {
    "name": "t __libkernel_strcmp",
    "type": "CPP"
  },
  {
    "name": "T ___libkernel_platform_init",
    "type": "CPP"
  },
  {
    "name": "T _mach_thread_self",
    "type": "CPP"
  },
  {
    "name": "T ___bsdthread_register",
    "type": "CPP"
  },
  {
    "name": "T _host_get_clock_service",
    "type": "CPP"
  },
  {
    "name": "T _proc_name",
    "type": "CPP"
  },
  {
    "name": "t _bcopy",
    "type": "CPP"
  },
  {
    "name": "T _kqueue",
    "type": "CPP"
  },
  {
    "name": "T _kevent",
    "type": "CPP"
  },
  {
    "name": "T _pselect$DARWIN_EXTSN",
    "type": "CPP"
  },
  {
    "name": "T ___pselect",
    "type": "CPP"
  },
  {
    "name": "T _quotactl",
    "type": "CPP"
  },
  {
    "name": "T _fileport_makefd",
    "type": "CPP"
  },
  {
    "name": "T _thread_policy_set",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_thread_policy_set",
    "type": "CPP"
  },
  {
    "name": "T _msync",
    "type": "CPP"
  },
  {
    "name": "T _pipe",
    "type": "CPP"
  },
  {
    "name": "T _fileport_makeport",
    "type": "CPP"
  },
  {
    "name": "T ___kqueue_workloop_ctl",
    "type": "CPP"
  },
  {
    "name": "T ___sigaction",
    "type": "CPP"
  },
  {
    "name": "T _getppid",
    "type": "CPP"
  },
  {
    "name": "T _thread_set_exception_ports",
    "type": "CPP"
  },
  {
    "name": "T _mach_error_string",
    "type": "CPP"
  },
  {
    "name": "t _mach_error_string_int",
    "type": "CPP"
  },
  {
    "name": "t _do_compat",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawn_file_actions_init",
    "type": "CPP"
  },
  {
    "name": "t _malloc",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawn_file_actions_adddup2",
    "type": "CPP"
  },
  {
    "name": "t __posix_spawn_file_actions_grow",
    "type": "CPP"
  },
  {
    "name": "t _realloc",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_init",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_setsigmask",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_setsigdefault",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_setflags",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_getmacpolicyinfo_np",
    "type": "CPP"
  },
  {
    "name": "t _posix_spawnattr_macpolicyinfo_lookup",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_setmacpolicyinfo_np",
    "type": "CPP"
  },
  {
    "name": "t _strlcpy",
    "type": "CPP"
  },
  {
    "name": "T ___pthread_fchdir",
    "type": "CPP"
  },
  {
    "name": "T ___pthread_chdir",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawn",
    "type": "CPP"
  },
  {
    "name": "T ___posix_spawn",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_destroy",
    "type": "CPP"
  },
  {
    "name": "t _free",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawn_file_actions_destroy",
    "type": "CPP"
  },
  {
    "name": "T ___wait4",
    "type": "CPP"
  },
  {
    "name": "T _mach_continuous_approximate_time",
    "type": "CPP"
  },
  {
    "name": "T ___pthread_sigmask",
    "type": "CPP"
  },
  {
    "name": "T ___semwait_signal_nocancel",
    "type": "CPP"
  },
  {
    "name": "T _sigsuspend$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T ___sigsuspend_nocancel",
    "type": "CPP"
  },
  {
    "name": "T __exit",
    "type": "CPP"
  },
  {
    "name": "T _thread_info",
    "type": "CPP"
  },
  {
    "name": "T _proc_pidoriginatorinfo",
    "type": "CPP"
  },
  {
    "name": "T _getrusage",
    "type": "CPP"
  },
  {
    "name": "T _mach_ports_register",
    "type": "CPP"
  },
  {
    "name": "T ___fork",
    "type": "CPP"
  },
  {
    "name": "T _setiopolicy_np",
    "type": "CPP"
  },
  {
    "name": "T _ffsctl",
    "type": "CPP"
  },
  {
    "name": "T _getsockname",
    "type": "CPP"
  },
  {
    "name": "T _proc_set_cpumon_params",
    "type": "CPP"
  },
  {
    "name": "T ___process_policy",
    "type": "CPP"
  },
  {
    "name": "T _proc_set_cpumon_defaults",
    "type": "CPP"
  },
  {
    "name": "T _proc_pid_rusage",
    "type": "CPP"
  },
  {
    "name": "T _chown",
    "type": "CPP"
  },
  {
    "name": "T _bind",
    "type": "CPP"
  },
  {
    "name": "T _pselect$1050",
    "type": "CPP"
  },
  {
    "name": "T _guarded_write_np",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_copy",
    "type": "CPP"
  },
  {
    "name": "T _mach_msg_server",
    "type": "CPP"
  },
  {
    "name": "T _kill",
    "type": "CPP"
  },
  {
    "name": "T ___kill",
    "type": "CPP"
  },
  {
    "name": "T _chflags",
    "type": "CPP"
  },
  {
    "name": "T _pathconf",
    "type": "CPP"
  },
  {
    "name": "T _setpriority",
    "type": "CPP"
  },
  {
    "name": "T ___setpriority",
    "type": "CPP"
  },
  {
    "name": "T _vm_region_64",
    "type": "CPP"
  },
  {
    "name": "T _vm_region_recurse_64",
    "type": "CPP"
  },
  {
    "name": "T _getpriority",
    "type": "CPP"
  },
  {
    "name": "T _proc_rlimit_control",
    "type": "CPP"
  },
  {
    "name": "T ___pthread_kill",
    "type": "CPP"
  },
  {
    "name": "T _setitimer",
    "type": "CPP"
  },
  {
    "name": "T ___sandbox_msp",
    "type": "CPP"
  },
  {
    "name": "T _fs_snapshot_list",
    "type": "CPP"
  },
  {
    "name": "T _listen",
    "type": "CPP"
  },
  {
    "name": "T _accept",
    "type": "CPP"
  },
  {
    "name": "T _poll",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_setjetsam_ext",
    "type": "CPP"
  },
  {
    "name": "T _getpgrp",
    "type": "CPP"
  },
  {
    "name": "T _execve",
    "type": "CPP"
  },
  {
    "name": "T _setsid",
    "type": "CPP"
  },
  {
    "name": "T _dup2",
    "type": "CPP"
  },
  {
    "name": "T _mach_msg_overwrite",
    "type": "CPP"
  },
  {
    "name": "T _csr_get_active_config",
    "type": "CPP"
  },
  {
    "name": "T _ptrace",
    "type": "CPP"
  },
  {
    "name": "t _mach_msg_server_consume_unsent_message",
    "type": "CPP"
  },
  {
    "name": "T _getdtablesize",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_create",
    "type": "CPP"
  },
  {
    "name": "T ___work_interval_ctl",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_instance_alloc",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_instance_get_id",
    "type": "CPP"
  },
  {
    "name": "T _memorystatus_control",
    "type": "CPP"
  },
  {
    "name": "T _lstat64",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_type",
    "type": "CPP"
  },
  {
    "name": "T _task_threads",
    "type": "CPP"
  },
  {
    "name": "T _thread_get_state",
    "type": "CPP"
  },
  {
    "name": "T _setgid",
    "type": "CPP"
  },
  {
    "name": "T _setuid",
    "type": "CPP"
  },
  {
    "name": "T _thread_policy_get",
    "type": "CPP"
  },
  {
    "name": "T ___get_remove_counter",
    "type": "CPP"
  },
  {
    "name": "T _pthread_setugid_np",
    "type": "CPP"
  },
  {
    "name": "T _seteuid",
    "type": "CPP"
  },
  {
    "name": "T _setegid",
    "type": "CPP"
  },
  {
    "name": "T _vm_read",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_vm_read",
    "type": "CPP"
  },
  {
    "name": "T _sem_open",
    "type": "CPP"
  },
  {
    "name": "T _sem_close",
    "type": "CPP"
  },
  {
    "name": "T _auditon",
    "type": "CPP"
  },
  {
    "name": "T _sfi_set_class_offtime",
    "type": "CPP"
  },
  {
    "name": "T ___sfi_ctl",
    "type": "CPP"
  },
  {
    "name": "T _system_set_sfi_window",
    "type": "CPP"
  },
  {
    "name": "T _thread_get_exception_ports",
    "type": "CPP"
  },
  {
    "name": "T _unlinkat",
    "type": "CPP"
  },
  {
    "name": "T ___unlinkat",
    "type": "CPP"
  },
  {
    "name": "T _proc_get_cpumon_params",
    "type": "CPP"
  },
  {
    "name": "T _proc_disable_wakemon",
    "type": "CPP"
  },
  {
    "name": "T _mlock",
    "type": "CPP"
  },
  {
    "name": "T _munlock",
    "type": "CPP"
  },
  {
    "name": "T _proc_set_wakemon_defaults",
    "type": "CPP"
  },
  {
    "name": "T _host_statistics64",
    "type": "CPP"
  },
  {
    "name": "T _proc_listpids",
    "type": "CPP"
  },
  {
    "name": "T _clonefile",
    "type": "CPP"
  },
  {
    "name": "T _proc_denap_assertion_begin_with_msg",
    "type": "CPP"
  },
  {
    "name": "T _proc_importance_assertion_begin_with_msg",
    "type": "CPP"
  },
  {
    "name": "T _proc_denap_assertion_complete",
    "type": "CPP"
  },
  {
    "name": "T _proc_importance_assertion_complete",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_extract_right",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_extract_right",
    "type": "CPP"
  },
  {
    "name": "T _task_set_exception_ports",
    "type": "CPP"
  },
  {
    "name": "T _getpgid",
    "type": "CPP"
  },
  {
    "name": "T _kdebug_signpost_start",
    "type": "CPP"
  },
  {
    "name": "t _kdebug_signpost_internal",
    "type": "CPP"
  },
  {
    "name": "T _kdebug_signpost_end",
    "type": "CPP"
  },
  {
    "name": "T _host_statistics",
    "type": "CPP"
  },
  {
    "name": "T _terminate_with_reason",
    "type": "CPP"
  },
  {
    "name": "T ___terminate_with_payload",
    "type": "CPP"
  },
  {
    "name": "T _task_set_info",
    "type": "CPP"
  },
  {
    "name": "T _mach_voucher_extract_attr_content",
    "type": "CPP"
  },
  {
    "name": "T _guarded_kqueue_np",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_get_attributes",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_region_recurse",
    "type": "CPP"
  },
  {
    "name": "T _necp_match_policy",
    "type": "CPP"
  },
  {
    "name": "T _select$DARWIN_EXTSN",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_read_overwrite",
    "type": "CPP"
  },
  {
    "name": "T _mach_msg_server_once",
    "type": "CPP"
  },
  {
    "name": "T _proc_disable_cpumon",
    "type": "CPP"
  },
  {
    "name": "T _task_get_exception_ports",
    "type": "CPP"
  },
  {
    "name": "T _audit_session_port",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_setauditsessionport_np",
    "type": "CPP"
  },
  {
    "name": "t _posix_spawn_appendportaction_np",
    "type": "CPP"
  },
  {
    "name": "T ___sigreturn",
    "type": "CPP"
  },
  {
    "name": "T _audit_session_join",
    "type": "CPP"
  },
  {
    "name": "T ___sigwait",
    "type": "CPP"
  },
  {
    "name": "T _setpgid",
    "type": "CPP"
  },
  {
    "name": "T _lstat",
    "type": "CPP"
  },
  {
    "name": "T _stat",
    "type": "CPP"
  },
  {
    "name": "T _fstatfs",
    "type": "CPP"
  },
  {
    "name": "T _mach_ports_lookup",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_setcpumonitor_default",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_setspecialport_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawn_file_actions_addopen",
    "type": "CPP"
  },
  {
    "name": "T _kevent64",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_setbinpref_np",
    "type": "CPP"
  },
  {
    "name": "T ___setlogin",
    "type": "CPP"
  },
  {
    "name": "T ___initgroups",
    "type": "CPP"
  },
  {
    "name": "T ___getlogin",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_set_context",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_set_context",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_get_set_status",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_get_set_status",
    "type": "CPP"
  },
  {
    "name": "T ___pthread_canceled",
    "type": "CPP"
  },
  {
    "name": "T _clock_sleep",
    "type": "CPP"
  },
  {
    "name": "T _vm_map",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_vm_map",
    "type": "CPP"
  },
  {
    "name": "T _flistxattr",
    "type": "CPP"
  },
  {
    "name": "T _mach_msg_receive",
    "type": "CPP"
  },
  {
    "name": "T _mount",
    "type": "CPP"
  },
  {
    "name": "T _wait4",
    "type": "CPP"
  },
  {
    "name": "T ___open_extended",
    "type": "CPP"
  },
  {
    "name": "T _exchangedata",
    "type": "CPP"
  },
  {
    "name": "T ___carbon_delete",
    "type": "CPP"
  },
  {
    "name": "T ___delete",
    "type": "CPP"
  },
  {
    "name": "T _unmount",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawn_file_actions_addinherit_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawn_file_actions_addclose",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_setexceptionports_np",
    "type": "CPP"
  },
  {
    "name": "t _reallocf",
    "type": "CPP"
  },
  {
    "name": "t _pthread_current_stack_contains_np",
    "type": "CPP"
  },
  {
    "name": "t _bzero",
    "type": "CPP"
  },
  {
    "name": "t __libkernel_strlen",
    "type": "CPP"
  },
  {
    "name": "t __libkernel_strchr",
    "type": "CPP"
  },
  {
    "name": "t __libkernel_bzero",
    "type": "CPP"
  },
  {
    "name": "t __libkernel_memset",
    "type": "CPP"
  },
  {
    "name": "t __libkernel_memmove",
    "type": "CPP"
  },
  {
    "name": "t __libkernel_strcpy",
    "type": "CPP"
  },
  {
    "name": "t __libkernel_strlcpy",
    "type": "CPP"
  },
  {
    "name": "T _mach_host_special_port_description",
    "type": "CPP"
  },
  {
    "name": "T _mach_task_special_port_description",
    "type": "CPP"
  },
  {
    "name": "T _mach_host_special_port_for_id",
    "type": "CPP"
  },
  {
    "name": "t _port_for_id_internal",
    "type": "CPP"
  },
  {
    "name": "T _mach_task_special_port_for_id",
    "type": "CPP"
  },
  {
    "name": "T _pkt_subtype_assert_fail",
    "type": "CPP"
  },
  {
    "name": "T _pkt_type_assert_fail",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_set_headroom",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_headroom",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_set_link_header_length",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_link_header_length",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_set_link_broadcast",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_link_broadcast",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_set_link_multicast",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_link_multicast",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_set_link_ethfcs",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_link_ethfcs",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_set_transport_traffic_background",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_transport_traffic_background",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_set_transport_traffic_realtime",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_transport_traffic_realtime",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_set_transport_retransmit",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_transport_retransmit",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_set_transport_last_packet",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_set_service_class",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_service_class",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_set_traffic_class",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_traffic_class",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_set_inet_checksum",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_inet_checksum",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_flow_uuid",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_set_flow_uuid",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_clear_flow_uuid",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_set_group_start",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_group_start",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_set_group_end",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_group_end",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_expire_time",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_set_expire_time",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_token",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_set_token",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_packetid",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_set_packetid",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_set_vlan_tag",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_vlan_tag",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_vlan_id",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_vlan_priority",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_truncated",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_data_length",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_buflet_count",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_get_next_buflet",
    "type": "CPP"
  },
  {
    "name": "T _os_packet_finalize",
    "type": "CPP"
  },
  {
    "name": "T _os_inet_checksum",
    "type": "CPP"
  },
  {
    "name": "T _os_copy_and_inet_checksum",
    "type": "CPP"
  },
  {
    "name": "T _os_buflet_get_data_offset",
    "type": "CPP"
  },
  {
    "name": "T _os_buflet_get_data_length",
    "type": "CPP"
  },
  {
    "name": "T _os_buflet_set_data_offset",
    "type": "CPP"
  },
  {
    "name": "T _os_buflet_set_data_length",
    "type": "CPP"
  },
  {
    "name": "T _os_buflet_get_object_address",
    "type": "CPP"
  },
  {
    "name": "T _os_buflet_get_data_limit",
    "type": "CPP"
  },
  {
    "name": "T _reboot",
    "type": "CPP"
  },
  {
    "name": "T _reboot_np",
    "type": "CPP"
  },
  {
    "name": "t __mach_continuous_time",
    "type": "CPP"
  },
  {
    "name": "T _renameat",
    "type": "CPP"
  },
  {
    "name": "t _internal_catch_exception_raise_state_identity",
    "type": "CPP"
  },
  {
    "name": "t _internal_catch_exception_raise_state",
    "type": "CPP"
  },
  {
    "name": "t _internal_catch_exception_raise",
    "type": "CPP"
  },
  {
    "name": "t _fprintf_stderr",
    "type": "CPP"
  },
  {
    "name": "T _guarded_open_dprotected_np",
    "type": "CPP"
  },
  {
    "name": "T _host_get_atm_diagnostic_flag",
    "type": "CPP"
  },
  {
    "name": "T _host_get_multiuser_config_flags",
    "type": "CPP"
  },
  {
    "name": "T _host_check_multiuser_mode",
    "type": "CPP"
  },
  {
    "name": "T _mach_error_type",
    "type": "CPP"
  },
  {
    "name": "t _err_sparse_mapit",
    "type": "CPP"
  },
  {
    "name": "T _mach_error",
    "type": "CPP"
  },
  {
    "name": "T _host_page_size",
    "type": "CPP"
  },
  {
    "name": "T __mach_fork_child",
    "type": "CPP"
  },
  {
    "name": "T _mach_msg_server_importance",
    "type": "CPP"
  },
  {
    "name": "T _mig_allocate",
    "type": "CPP"
  },
  {
    "name": "T _quota",
    "type": "CPP"
  },
  {
    "name": "T _setquota",
    "type": "CPP"
  },
  {
    "name": "T _panic_init",
    "type": "CPP"
  },
  {
    "name": "T _panic",
    "type": "CPP"
  },
  {
    "name": "T _port_obj_init",
    "type": "CPP"
  },
  {
    "name": "T _semaphore_signal_all",
    "type": "CPP"
  },
  {
    "name": "T _semaphore_signal_thread",
    "type": "CPP"
  },
  {
    "name": "T _semaphore_wait_signal",
    "type": "CPP"
  },
  {
    "name": "T _semaphore_timedwait_signal",
    "type": "CPP"
  },
  {
    "name": "T _msg_rpc",
    "type": "CPP"
  },
  {
    "name": "T _msg_send",
    "type": "CPP"
  },
  {
    "name": "T _msg_receive",
    "type": "CPP"
  },
  {
    "name": "T _task_self_",
    "type": "CPP"
  },
  {
    "name": "T _host_self",
    "type": "CPP"
  },
  {
    "name": "T __mach_vsnprintf",
    "type": "CPP"
  },
  {
    "name": "T __mach_snprintf",
    "type": "CPP"
  },
  {
    "name": "T _pselect$DARWIN_EXTSN$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _mach_task_self",
    "type": "CPP"
  },
  {
    "name": "T _mach_right_recv_construct",
    "type": "CPP"
  },
  {
    "name": "T _mach_right_recv_destruct",
    "type": "CPP"
  },
  {
    "name": "T _mach_right_send_create",
    "type": "CPP"
  },
  {
    "name": "T _mach_right_send_retain",
    "type": "CPP"
  },
  {
    "name": "T _mach_right_send_once_create",
    "type": "CPP"
  },
  {
    "name": "T _mach_right_send_once_consume",
    "type": "CPP"
  },
  {
    "name": "T _proc_listallpids",
    "type": "CPP"
  },
  {
    "name": "T _proc_listpgrppids",
    "type": "CPP"
  },
  {
    "name": "T _proc_listchildpids",
    "type": "CPP"
  },
  {
    "name": "T _proc_listcoalitions",
    "type": "CPP"
  },
  {
    "name": "T _proc_setthread_cpupercent",
    "type": "CPP"
  },
  {
    "name": "T _proc_pidfdinfo",
    "type": "CPP"
  },
  {
    "name": "T _proc_pidfileportinfo",
    "type": "CPP"
  },
  {
    "name": "T _proc_piddynkqueueinfo",
    "type": "CPP"
  },
  {
    "name": "T _proc_udata_info",
    "type": "CPP"
  },
  {
    "name": "T _proc_regionfilename",
    "type": "CPP"
  },
  {
    "name": "T _proc_kmsgbuf",
    "type": "CPP"
  },
  {
    "name": "T _proc_libversion",
    "type": "CPP"
  },
  {
    "name": "T _proc_get_dirty",
    "type": "CPP"
  },
  {
    "name": "T _proc_clear_dirty",
    "type": "CPP"
  },
  {
    "name": "T _proc_terminate",
    "type": "CPP"
  },
  {
    "name": "T _proc_resume_cpumon",
    "type": "CPP"
  },
  {
    "name": "T _proc_set_cpumon_params_fatal",
    "type": "CPP"
  },
  {
    "name": "T _proc_set_wakemon_params",
    "type": "CPP"
  },
  {
    "name": "T _proc_get_wakemon_params",
    "type": "CPP"
  },
  {
    "name": "T _proc_list_uptrs",
    "type": "CPP"
  },
  {
    "name": "T _proc_list_dynkqueueids",
    "type": "CPP"
  },
  {
    "name": "T _proc_setcpu_percentage",
    "type": "CPP"
  },
  {
    "name": "T _proc_reset_footprint_interval",
    "type": "CPP"
  },
  {
    "name": "T _proc_clear_cpulimits",
    "type": "CPP"
  },
  {
    "name": "T _proc_donate_importance_boost",
    "type": "CPP"
  },
  {
    "name": "T _proc_clear_vmpressure",
    "type": "CPP"
  },
  {
    "name": "T _proc_set_owner_vmpressure",
    "type": "CPP"
  },
  {
    "name": "T _proc_set_delayidlesleep",
    "type": "CPP"
  },
  {
    "name": "T _proc_clear_delayidlesleep",
    "type": "CPP"
  },
  {
    "name": "T _proc_disable_apptype",
    "type": "CPP"
  },
  {
    "name": "T _proc_enable_apptype",
    "type": "CPP"
  },
  {
    "name": "T _proc_suppress",
    "type": "CPP"
  },
  {
    "name": "T __getprivatesystemidentifier",
    "type": "CPP"
  },
  {
    "name": "T __register_gethostuuid_callback",
    "type": "CPP"
  },
  {
    "name": "T _mach_boottime_usec",
    "type": "CPP"
  },
  {
    "name": "T _futimens",
    "type": "CPP"
  },
  {
    "name": "t _prepare_times_array_and_attrs",
    "type": "CPP"
  },
  {
    "name": "T _utimensat",
    "type": "CPP"
  },
  {
    "name": "T _thread_set_policy",
    "type": "CPP"
  },
  {
    "name": "T _thread_get_register_pointer_values",
    "type": "CPP"
  },
  {
    "name": "T _renameatx_np",
    "type": "CPP"
  },
  {
    "name": "T _renamex_np",
    "type": "CPP"
  },
  {
    "name": "T _rename_ext",
    "type": "CPP"
  },
  {
    "name": "T _log_data_as_kernel",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_getflags",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_getsigdefault",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_getpgroup",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_getsigmask",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_getbinpref_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_getpcontrol_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_getprocesstype_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_setpgroup",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_setpcontrol_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_setprocesstype_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_setsuidcredport_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawn_file_actions_add_fileportdup2_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawn_file_actions_addchdir_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawn_file_actions_addfchdir_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_setcpumonitor",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_getcpumonitor",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_set_threadlimit_ext",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_set_importancewatch_port_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_set_registered_ports_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_setcoalition_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_set_qos_clamp_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_get_qos_clamp_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_set_darwin_role_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_get_darwin_role_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_set_persona_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_set_persona_uid_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_set_persona_gid_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_set_persona_groups_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_set_max_addr_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_set_uid_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_set_gid_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_set_groups_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_set_login_np",
    "type": "CPP"
  },
  {
    "name": "T _posix_spawnattr_set_jetsam_ttr_np",
    "type": "CPP"
  },
  {
    "name": "T _stackshot_config_create",
    "type": "CPP"
  },
  {
    "name": "T _stackshot_config_set_pid",
    "type": "CPP"
  },
  {
    "name": "T _stackshot_config_set_flags",
    "type": "CPP"
  },
  {
    "name": "T _stackshot_capture_with_config",
    "type": "CPP"
  },
  {
    "name": "T _stackshot_config_get_stackshot_buffer",
    "type": "CPP"
  },
  {
    "name": "T _stackshot_config_get_stackshot_size",
    "type": "CPP"
  },
  {
    "name": "T _stackshot_config_set_size_hint",
    "type": "CPP"
  },
  {
    "name": "T _stackshot_config_set_delta_timestamp",
    "type": "CPP"
  },
  {
    "name": "T _stackshot_config_dealloc_buffer",
    "type": "CPP"
  },
  {
    "name": "T _stackshot_config_dealloc",
    "type": "CPP"
  },
  {
    "name": "T ___darwin_check_fd_set_overflow",
    "type": "CPP"
  },
  {
    "name": "T _terminate_with_payload",
    "type": "CPP"
  },
  {
    "name": "T _system_get_sfi_window",
    "type": "CPP"
  },
  {
    "name": "T _sfi_get_class_offtime",
    "type": "CPP"
  },
  {
    "name": "T _sfi_process_set_flags",
    "type": "CPP"
  },
  {
    "name": "T _sfi_process_get_flags",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_create_extended",
    "type": "CPP"
  },
  {
    "name": "t _os_channel_info2attr",
    "type": "CPP"
  },
  {
    "name": "t _os_channel_init_ring",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_create",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_get_fd",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_read_attr",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_write_attr",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_read_nexus_extension_info",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_sync",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_destroy",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_is_defunct",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_ring_id",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_tx_ring",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_rx_ring",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_pending",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_ring_sync_time",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_ring_notify_time",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_available_slot_count",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_advance_slot",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_get_next_slot",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_set_slot_properties",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_slot_get_packet",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_get_stats_region",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_get_advisory_region",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_flow_admissible",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_attr_create",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_attr_clone",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_attr_set_key",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_attr_destroy",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_attr_set",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_attr_get",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_attr_get_key",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_packet_alloc",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_packet_free",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_slot_attach_packet",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_slot_detach_packet",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_packet_pool_purge",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_get_next_event_handle",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_event_free",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_get_interface_advisory",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_configure_interface_advisory",
    "type": "CPP"
  },
  {
    "name": "T _sem_destroy",
    "type": "CPP"
  },
  {
    "name": "T _sem_getvalue",
    "type": "CPP"
  },
  {
    "name": "T _sem_init",
    "type": "CPP"
  },
  {
    "name": "T _pid_shutdown_networking",
    "type": "CPP"
  },
  {
    "name": "T _coalition_create",
    "type": "CPP"
  },
  {
    "name": "T _coalition_terminate",
    "type": "CPP"
  },
  {
    "name": "T _coalition_reap",
    "type": "CPP"
  },
  {
    "name": "T _coalition_info_resource_usage",
    "type": "CPP"
  },
  {
    "name": "T _coalition_info_set_name",
    "type": "CPP"
  },
  {
    "name": "T _coalition_info_set_efficiency",
    "type": "CPP"
  },
  {
    "name": "T _coalition_ledger_set_logical_writes_limit",
    "type": "CPP"
  },
  {
    "name": "T _fs_snapshot_create",
    "type": "CPP"
  },
  {
    "name": "T _fs_snapshot_delete",
    "type": "CPP"
  },
  {
    "name": "T _fs_snapshot_rename",
    "type": "CPP"
  },
  {
    "name": "T _fs_snapshot_revert",
    "type": "CPP"
  },
  {
    "name": "T _fs_snapshot_root",
    "type": "CPP"
  },
  {
    "name": "T _fs_snapshot_mount",
    "type": "CPP"
  },
  {
    "name": "T _pselect",
    "type": "CPP"
  },
  {
    "name": "T _kdebug_using_continuous_time",
    "type": "CPP"
  },
  {
    "name": "T _kdebug_signpost",
    "type": "CPP"
  },
  {
    "name": "T _pselect$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _os_nexus_attr_create",
    "type": "CPP"
  },
  {
    "name": "T _os_nexus_attr_clone",
    "type": "CPP"
  },
  {
    "name": "T _os_nexus_attr_set",
    "type": "CPP"
  },
  {
    "name": "T _os_nexus_attr_get",
    "type": "CPP"
  },
  {
    "name": "T _os_nexus_attr_destroy",
    "type": "CPP"
  },
  {
    "name": "T _os_nexus_controller_create",
    "type": "CPP"
  },
  {
    "name": "T _os_nexus_controller_get_fd",
    "type": "CPP"
  },
  {
    "name": "T _os_nexus_controller_register_provider",
    "type": "CPP"
  },
  {
    "name": "T _os_nexus_controller_deregister_provider",
    "type": "CPP"
  },
  {
    "name": "T _os_nexus_controller_alloc_provider_instance",
    "type": "CPP"
  },
  {
    "name": "T _os_nexus_controller_free_provider_instance",
    "type": "CPP"
  },
  {
    "name": "T _os_nexus_controller_bind_provider_instance",
    "type": "CPP"
  },
  {
    "name": "T _os_nexus_controller_unbind_provider_instance",
    "type": "CPP"
  },
  {
    "name": "T _os_nexus_controller_read_provider_attr",
    "type": "CPP"
  },
  {
    "name": "T _os_nexus_controller_destroy",
    "type": "CPP"
  },
  {
    "name": "T ___os_nexus_ifattach",
    "type": "CPP"
  },
  {
    "name": "T ___os_nexus_ifdetach",
    "type": "CPP"
  },
  {
    "name": "T ___os_nexus_flow_add",
    "type": "CPP"
  },
  {
    "name": "T ___os_nexus_flow_del",
    "type": "CPP"
  },
  {
    "name": "T _sigsuspend",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_notify",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_notify_simple",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_instance_clear",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_instance_free",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_instance_set_start",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_instance_set_deadline",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_instance_set_finish",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_instance_set_complexity",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_instance_get_start",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_instance_get_deadline",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_instance_get_finish",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_instance_get_complexity",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_instance_start",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_instance_update",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_instance_finish",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_destroy",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_join",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_join_port",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_leave",
    "type": "CPP"
  },
  {
    "name": "T _work_interval_copy_port",
    "type": "CPP"
  },
  {
    "name": "T _os_cpu_copy_in_cksum",
    "type": "CPP"
  },
  {
    "name": "T _os_cpu_in_cksum",
    "type": "CPP"
  },
  {
    "name": "T _os_cpu_in_cksum_mbuf",
    "type": "CPP"
  },
  {
    "name": "T _proc_listpidspath",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_event_get_next_event",
    "type": "CPP"
  },
  {
    "name": "T _os_channel_event_get_event_data",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_names",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_rename",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_allocate_name",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_peek",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_set_mscount",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_set_seqno",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_allocate_qos",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_allocate_full",
    "type": "CPP"
  },
  {
    "name": "T _task_set_port_space",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_get_srights",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_space_info",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_space_basic_info",
    "type": "CPP"
  },
  {
    "name": "T _mig_dealloc_special_reply_port",
    "type": "CPP"
  },
  {
    "name": "T _mach_sync_ipc_link_monitoring_start",
    "type": "CPP"
  },
  {
    "name": "T _mach_sync_ipc_link_monitoring_stop",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_dnrequest_info",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_kernel_object",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_kobject",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_kobject_description",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_unguard",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_guard_with_flags",
    "type": "CPP"
  },
  {
    "name": "T _mach_port_swap_guard",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_remap",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_read",
    "type": "CPP"
  },
  {
    "name": "T _getaudit",
    "type": "CPP"
  },
  {
    "name": "T _setaudit",
    "type": "CPP"
  },
  {
    "name": "T _kpersona_alloc",
    "type": "CPP"
  },
  {
    "name": "T _kpersona_palloc",
    "type": "CPP"
  },
  {
    "name": "T _kpersona_dealloc",
    "type": "CPP"
  },
  {
    "name": "T _kpersona_getpath",
    "type": "CPP"
  },
  {
    "name": "T _kpersona_pidinfo",
    "type": "CPP"
  },
  {
    "name": "T _kpersona_find",
    "type": "CPP"
  },
  {
    "name": "T _kpersona_find_by_type",
    "type": "CPP"
  },
  {
    "name": "T _clock_set_time",
    "type": "CPP"
  },
  {
    "name": "T _clock_set_attributes",
    "type": "CPP"
  },
  {
    "name": "T _clock_alarm_reply",
    "type": "CPP"
  },
  {
    "name": "T _clock_get_attributes",
    "type": "CPP"
  },
  {
    "name": "T _clock_alarm",
    "type": "CPP"
  },
  {
    "name": "T _exception_raise",
    "type": "CPP"
  },
  {
    "name": "T _exception_raise_state",
    "type": "CPP"
  },
  {
    "name": "T _exception_raise_state_identity",
    "type": "CPP"
  },
  {
    "name": "T _exc_server_routine",
    "type": "CPP"
  },
  {
    "name": "t __Xexception_raise",
    "type": "CPP"
  },
  {
    "name": "t __Xexception_raise_state",
    "type": "CPP"
  },
  {
    "name": "t __Xexception_raise_state_identity",
    "type": "CPP"
  },
  {
    "name": "T _exc_server",
    "type": "CPP"
  },
  {
    "name": "T _host_get_boot_info",
    "type": "CPP"
  },
  {
    "name": "T _host_reboot",
    "type": "CPP"
  },
  {
    "name": "T _host_priv_statistics",
    "type": "CPP"
  },
  {
    "name": "T _host_default_memory_manager",
    "type": "CPP"
  },
  {
    "name": "T _vm_wire",
    "type": "CPP"
  },
  {
    "name": "T _thread_wire",
    "type": "CPP"
  },
  {
    "name": "T _vm_allocate_cpm",
    "type": "CPP"
  },
  {
    "name": "T _host_processors",
    "type": "CPP"
  },
  {
    "name": "T _host_get_clock_control",
    "type": "CPP"
  },
  {
    "name": "T _kmod_create",
    "type": "CPP"
  },
  {
    "name": "T _kmod_destroy",
    "type": "CPP"
  },
  {
    "name": "T _kmod_control",
    "type": "CPP"
  },
  {
    "name": "T _host_set_special_port",
    "type": "CPP"
  },
  {
    "name": "T _host_set_exception_ports",
    "type": "CPP"
  },
  {
    "name": "T _host_get_exception_ports",
    "type": "CPP"
  },
  {
    "name": "T _host_swap_exception_ports",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_wire",
    "type": "CPP"
  },
  {
    "name": "T _host_processor_sets",
    "type": "CPP"
  },
  {
    "name": "T _host_processor_set_priv",
    "type": "CPP"
  },
  {
    "name": "T _host_set_UNDServer",
    "type": "CPP"
  },
  {
    "name": "T _host_get_UNDServer",
    "type": "CPP"
  },
  {
    "name": "T _kext_request",
    "type": "CPP"
  },
  {
    "name": "T _host_security_create_task_token",
    "type": "CPP"
  },
  {
    "name": "T _host_security_set_task_token",
    "type": "CPP"
  },
  {
    "name": "T _lock_acquire",
    "type": "CPP"
  },
  {
    "name": "T _lock_release",
    "type": "CPP"
  },
  {
    "name": "T _lock_try",
    "type": "CPP"
  },
  {
    "name": "T _lock_make_stable",
    "type": "CPP"
  },
  {
    "name": "T _lock_handoff",
    "type": "CPP"
  },
  {
    "name": "T _lock_handoff_accept",
    "type": "CPP"
  },
  {
    "name": "T _host_kernel_version",
    "type": "CPP"
  },
  {
    "name": "T __host_page_size",
    "type": "CPP"
  },
  {
    "name": "T _mach_memory_object_memory_entry",
    "type": "CPP"
  },
  {
    "name": "T _host_processor_info",
    "type": "CPP"
  },
  {
    "name": "T _kmod_get_info",
    "type": "CPP"
  },
  {
    "name": "T _host_virtual_physical_table_info",
    "type": "CPP"
  },
  {
    "name": "T _processor_set_default",
    "type": "CPP"
  },
  {
    "name": "T _processor_set_create",
    "type": "CPP"
  },
  {
    "name": "T _mach_memory_object_memory_entry_64",
    "type": "CPP"
  },
  {
    "name": "T _host_lockgroup_info",
    "type": "CPP"
  },
  {
    "name": "T _mach_zone_info",
    "type": "CPP"
  },
  {
    "name": "T _mach_zone_force_gc",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_host_create_mach_voucher",
    "type": "CPP"
  },
  {
    "name": "T _host_register_mach_voucher_attr_manager",
    "type": "CPP"
  },
  {
    "name": "T _host_register_well_known_mach_voucher_attr_manager",
    "type": "CPP"
  },
  {
    "name": "T _host_set_atm_diagnostic_flag",
    "type": "CPP"
  },
  {
    "name": "T _mach_memory_info",
    "type": "CPP"
  },
  {
    "name": "T _host_set_multiuser_config_flags",
    "type": "CPP"
  },
  {
    "name": "T _mach_zone_info_for_zone",
    "type": "CPP"
  },
  {
    "name": "T _mach_zone_info_for_largest_zone",
    "type": "CPP"
  },
  {
    "name": "T _mach_zone_get_zlog_zones",
    "type": "CPP"
  },
  {
    "name": "T _mach_zone_get_btlog_records",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_names",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_rename",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_allocate_name",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_allocate",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_destroy",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_deallocate",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_mod_refs",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_peek",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_set_mscount",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_move_member",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_insert_right",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_set_seqno",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_allocate_qos",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_allocate_full",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_task_set_port_space",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_get_srights",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_space_info",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_dnrequest_info",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_kernel_object",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_insert_member",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_extract_member",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_kobject",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_construct",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_destruct",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_guard",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_unguard",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_space_basic_info",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_special_reply_port_reset_link",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_guard_with_flags",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_swap_guard",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_port_kobject_description",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_vm_allocate",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_vm_deallocate",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_vm_protect",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_inherit",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_vm_read",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_read_list",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_write",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_msync",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_behavior_set",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_machine_attribute",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_vm_remap",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_page_query",
    "type": "CPP"
  },
  {
    "name": "T _mach_make_memory_entry",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_vm_purgable_control",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_page_info",
    "type": "CPP"
  },
  {
    "name": "T _mach_vm_page_range_query",
    "type": "CPP"
  },
  {
    "name": "T _mach_notify_port_deleted",
    "type": "CPP"
  },
  {
    "name": "T _mach_notify_port_destroyed",
    "type": "CPP"
  },
  {
    "name": "T _mach_notify_no_senders",
    "type": "CPP"
  },
  {
    "name": "T _mach_notify_send_once",
    "type": "CPP"
  },
  {
    "name": "T _mach_notify_dead_name",
    "type": "CPP"
  },
  {
    "name": "T _processor_set_statistics",
    "type": "CPP"
  },
  {
    "name": "T _processor_set_destroy",
    "type": "CPP"
  },
  {
    "name": "T _processor_set_max_priority",
    "type": "CPP"
  },
  {
    "name": "T _processor_set_policy_enable",
    "type": "CPP"
  },
  {
    "name": "T _processor_set_policy_disable",
    "type": "CPP"
  },
  {
    "name": "T _processor_set_tasks",
    "type": "CPP"
  },
  {
    "name": "T _processor_set_threads",
    "type": "CPP"
  },
  {
    "name": "T _processor_set_policy_control",
    "type": "CPP"
  },
  {
    "name": "T _processor_set_stack_usage",
    "type": "CPP"
  },
  {
    "name": "T _processor_set_info",
    "type": "CPP"
  },
  {
    "name": "T _processor_start",
    "type": "CPP"
  },
  {
    "name": "T _processor_exit",
    "type": "CPP"
  },
  {
    "name": "T _processor_info",
    "type": "CPP"
  },
  {
    "name": "T _processor_control",
    "type": "CPP"
  },
  {
    "name": "T _processor_assign",
    "type": "CPP"
  },
  {
    "name": "T _processor_get_assignment",
    "type": "CPP"
  },
  {
    "name": "T _netname_check_in",
    "type": "CPP"
  },
  {
    "name": "T _netname_look_up",
    "type": "CPP"
  },
  {
    "name": "T _netname_check_out",
    "type": "CPP"
  },
  {
    "name": "T _netname_version",
    "type": "CPP"
  },
  {
    "name": "T _task_create",
    "type": "CPP"
  },
  {
    "name": "T _task_terminate",
    "type": "CPP"
  },
  {
    "name": "T _task_suspend",
    "type": "CPP"
  },
  {
    "name": "T _task_resume",
    "type": "CPP"
  },
  {
    "name": "T _thread_create",
    "type": "CPP"
  },
  {
    "name": "T _thread_create_running",
    "type": "CPP"
  },
  {
    "name": "T _task_swap_exception_ports",
    "type": "CPP"
  },
  {
    "name": "T _lock_set_create",
    "type": "CPP"
  },
  {
    "name": "T _lock_set_destroy",
    "type": "CPP"
  },
  {
    "name": "T _task_policy_get",
    "type": "CPP"
  },
  {
    "name": "T _task_sample",
    "type": "CPP"
  },
  {
    "name": "T _task_policy",
    "type": "CPP"
  },
  {
    "name": "T _task_set_emulation",
    "type": "CPP"
  },
  {
    "name": "T _task_get_emulation_vector",
    "type": "CPP"
  },
  {
    "name": "T _task_set_emulation_vector",
    "type": "CPP"
  },
  {
    "name": "T _task_set_ras_pc",
    "type": "CPP"
  },
  {
    "name": "T _task_zone_info",
    "type": "CPP"
  },
  {
    "name": "T _task_assign",
    "type": "CPP"
  },
  {
    "name": "T _task_assign_default",
    "type": "CPP"
  },
  {
    "name": "T _task_get_assignment",
    "type": "CPP"
  },
  {
    "name": "T _task_set_policy",
    "type": "CPP"
  },
  {
    "name": "T _task_get_state",
    "type": "CPP"
  },
  {
    "name": "T _task_set_state",
    "type": "CPP"
  },
  {
    "name": "T _task_set_phys_footprint_limit",
    "type": "CPP"
  },
  {
    "name": "T _task_suspend2",
    "type": "CPP"
  },
  {
    "name": "T _task_resume2",
    "type": "CPP"
  },
  {
    "name": "T _task_purgable_info",
    "type": "CPP"
  },
  {
    "name": "T _task_get_mach_voucher",
    "type": "CPP"
  },
  {
    "name": "T _task_set_mach_voucher",
    "type": "CPP"
  },
  {
    "name": "T _task_swap_mach_voucher",
    "type": "CPP"
  },
  {
    "name": "T _task_generate_corpse",
    "type": "CPP"
  },
  {
    "name": "T _task_map_corpse_info",
    "type": "CPP"
  },
  {
    "name": "T _task_register_dyld_image_infos",
    "type": "CPP"
  },
  {
    "name": "T _task_unregister_dyld_image_infos",
    "type": "CPP"
  },
  {
    "name": "T _task_get_dyld_image_infos",
    "type": "CPP"
  },
  {
    "name": "T _task_register_dyld_shared_cache_image_info",
    "type": "CPP"
  },
  {
    "name": "T _task_register_dyld_set_dyld_state",
    "type": "CPP"
  },
  {
    "name": "T _task_register_dyld_get_process_state",
    "type": "CPP"
  },
  {
    "name": "T _task_map_corpse_info_64",
    "type": "CPP"
  },
  {
    "name": "T _task_inspect",
    "type": "CPP"
  },
  {
    "name": "T _task_get_exc_guard_behavior",
    "type": "CPP"
  },
  {
    "name": "T _task_set_exc_guard_behavior",
    "type": "CPP"
  },
  {
    "name": "T _task_create_suid_cred",
    "type": "CPP"
  },
  {
    "name": "T _thread_terminate",
    "type": "CPP"
  },
  {
    "name": "T _act_get_state",
    "type": "CPP"
  },
  {
    "name": "T _act_set_state",
    "type": "CPP"
  },
  {
    "name": "T _thread_set_state",
    "type": "CPP"
  },
  {
    "name": "T _thread_suspend",
    "type": "CPP"
  },
  {
    "name": "T _thread_resume",
    "type": "CPP"
  },
  {
    "name": "T _thread_abort",
    "type": "CPP"
  },
  {
    "name": "T _thread_abort_safely",
    "type": "CPP"
  },
  {
    "name": "T _thread_depress_abort",
    "type": "CPP"
  },
  {
    "name": "T _thread_get_special_port",
    "type": "CPP"
  },
  {
    "name": "T _thread_set_special_port",
    "type": "CPP"
  },
  {
    "name": "T _thread_swap_exception_ports",
    "type": "CPP"
  },
  {
    "name": "T _thread_sample",
    "type": "CPP"
  },
  {
    "name": "T _etap_trace_thread",
    "type": "CPP"
  },
  {
    "name": "T _thread_assign",
    "type": "CPP"
  },
  {
    "name": "T _thread_assign_default",
    "type": "CPP"
  },
  {
    "name": "T _thread_get_assignment",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_thread_set_policy",
    "type": "CPP"
  },
  {
    "name": "T _thread_get_mach_voucher",
    "type": "CPP"
  },
  {
    "name": "T _thread_set_mach_voucher",
    "type": "CPP"
  },
  {
    "name": "T _thread_swap_mach_voucher",
    "type": "CPP"
  },
  {
    "name": "T _vm_inherit",
    "type": "CPP"
  },
  {
    "name": "T _vm_read_list",
    "type": "CPP"
  },
  {
    "name": "T _vm_write",
    "type": "CPP"
  },
  {
    "name": "T _vm_read_overwrite",
    "type": "CPP"
  },
  {
    "name": "T _vm_msync",
    "type": "CPP"
  },
  {
    "name": "T _vm_behavior_set",
    "type": "CPP"
  },
  {
    "name": "T _vm_machine_attribute",
    "type": "CPP"
  },
  {
    "name": "T _vm_map_page_query",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_vm_purgable_control",
    "type": "CPP"
  },
  {
    "name": "T _mach_memory_entry_purgable_control",
    "type": "CPP"
  },
  {
    "name": "T _mach_memory_entry_access_tracking",
    "type": "CPP"
  },
  {
    "name": "T _mach_memory_entry_ownership",
    "type": "CPP"
  },
  {
    "name": "T __kernelrpc_mach_voucher_extract_attr_recipe",
    "type": "CPP"
  },
  {
    "name": "T _mach_voucher_extract_all_attr_recipes",
    "type": "CPP"
  },
  {
    "name": "T _mach_voucher_debug_info",
    "type": "CPP"
  },
  {
    "name": "T _____old_semwait_signal_nocancel",
    "type": "CPP"
  },
  {
    "name": "T _____sigwait_nocancel",
    "type": "CPP"
  },
  {
    "name": "T ___abort_with_payload",
    "type": "CPP"
  },
  {
    "name": "T _accept$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _accessx_np",
    "type": "CPP"
  },
  {
    "name": "T _aio_suspend$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T ___channel_get_info",
    "type": "CPP"
  },
  {
    "name": "T ___channel_get_opt",
    "type": "CPP"
  },
  {
    "name": "T ___channel_open",
    "type": "CPP"
  },
  {
    "name": "T ___channel_set_opt",
    "type": "CPP"
  },
  {
    "name": "T ___channel_sync",
    "type": "CPP"
  },
  {
    "name": "T ___coalition",
    "type": "CPP"
  },
  {
    "name": "T ___coalition_info",
    "type": "CPP"
  },
  {
    "name": "T ___coalition_ledger",
    "type": "CPP"
  },
  {
    "name": "T ___copyfile",
    "type": "CPP"
  },
  {
    "name": "T ___fs_snapshot",
    "type": "CPP"
  },
  {
    "name": "T ___fstat_extended",
    "type": "CPP"
  },
  {
    "name": "T _fsync$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _getsgroups_np",
    "type": "CPP"
  },
  {
    "name": "T _getwgroups_np",
    "type": "CPP"
  },
  {
    "name": "T ___guarded_open_dprotected_np",
    "type": "CPP"
  },
  {
    "name": "T ___identitysvc",
    "type": "CPP"
  },
  {
    "name": "T ___kdebug_trace",
    "type": "CPP"
  },
  {
    "name": "T ___kdebug_trace_string",
    "type": "CPP"
  },
  {
    "name": "T ___log_data",
    "type": "CPP"
  },
  {
    "name": "T ___lstat_extended",
    "type": "CPP"
  },
  {
    "name": "T ___sandbox_me",
    "type": "CPP"
  },
  {
    "name": "T ___mac_get_fd",
    "type": "CPP"
  },
  {
    "name": "T ___mac_get_file",
    "type": "CPP"
  },
  {
    "name": "T ___mac_get_link",
    "type": "CPP"
  },
  {
    "name": "T ___mac_get_mount",
    "type": "CPP"
  },
  {
    "name": "T ___mac_get_pid",
    "type": "CPP"
  },
  {
    "name": "T ___mac_get_proc",
    "type": "CPP"
  },
  {
    "name": "T ___mac_getfsstat",
    "type": "CPP"
  },
  {
    "name": "T ___sandbox_mm",
    "type": "CPP"
  },
  {
    "name": "T ___mac_set_fd",
    "type": "CPP"
  },
  {
    "name": "T ___mac_set_file",
    "type": "CPP"
  },
  {
    "name": "T ___mac_set_link",
    "type": "CPP"
  },
  {
    "name": "T ___mach_bridge_remote_time",
    "type": "CPP"
  },
  {
    "name": "T ___memorystatus_available_memory",
    "type": "CPP"
  },
  {
    "name": "T ___microstackshot",
    "type": "CPP"
  },
  {
    "name": "T ___mkdir_extended",
    "type": "CPP"
  },
  {
    "name": "T ___mkfifo_extended",
    "type": "CPP"
  },
  {
    "name": "T _msgctl",
    "type": "CPP"
  },
  {
    "name": "T _msgrcv$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _msgsnd$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _msgsys",
    "type": "CPP"
  },
  {
    "name": "T _msync$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T ___nexus_create",
    "type": "CPP"
  },
  {
    "name": "T ___nexus_deregister",
    "type": "CPP"
  },
  {
    "name": "T ___nexus_destroy",
    "type": "CPP"
  },
  {
    "name": "T ___nexus_get_opt",
    "type": "CPP"
  },
  {
    "name": "T ___nexus_open",
    "type": "CPP"
  },
  {
    "name": "T ___nexus_register",
    "type": "CPP"
  },
  {
    "name": "T ___nexus_set_opt",
    "type": "CPP"
  },
  {
    "name": "T ___old_semwait_signal",
    "type": "CPP"
  },
  {
    "name": "T _poll$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _pread$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T ___pselect_nocancel",
    "type": "CPP"
  },
  {
    "name": "T ___psynch_rw_downgrade",
    "type": "CPP"
  },
  {
    "name": "T ___psynch_rw_longrdlock",
    "type": "CPP"
  },
  {
    "name": "T ___psynch_rw_unlock2",
    "type": "CPP"
  },
  {
    "name": "T ___psynch_rw_upgrade",
    "type": "CPP"
  },
  {
    "name": "T ___psynch_rw_yieldwrlock",
    "type": "CPP"
  },
  {
    "name": "T ___pthread_markcancel",
    "type": "CPP"
  },
  {
    "name": "T _pwrite$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _readv$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T ___reboot",
    "type": "CPP"
  },
  {
    "name": "T _recvmsg$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T ___renameat",
    "type": "CPP"
  },
  {
    "name": "T ___renameatx_np",
    "type": "CPP"
  },
  {
    "name": "T _sem_wait$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _semctl",
    "type": "CPP"
  },
  {
    "name": "T _semsys",
    "type": "CPP"
  },
  {
    "name": "T _setregid",
    "type": "CPP"
  },
  {
    "name": "T _setreuid",
    "type": "CPP"
  },
  {
    "name": "T _setsgroups_np",
    "type": "CPP"
  },
  {
    "name": "T ___settid_with_pid",
    "type": "CPP"
  },
  {
    "name": "T ___settimeofday",
    "type": "CPP"
  },
  {
    "name": "T _setwgroups_np",
    "type": "CPP"
  },
  {
    "name": "T ___sfi_pidctl",
    "type": "CPP"
  },
  {
    "name": "T ___shared_region_check_np",
    "type": "CPP"
  },
  {
    "name": "T ___shared_region_map_and_slide_np",
    "type": "CPP"
  },
  {
    "name": "T _shmctl",
    "type": "CPP"
  },
  {
    "name": "T _shmsys",
    "type": "CPP"
  },
  {
    "name": "T ___sigsuspend",
    "type": "CPP"
  },
  {
    "name": "T ___stack_snapshot_with_config",
    "type": "CPP"
  },
  {
    "name": "T ___stat_extended",
    "type": "CPP"
  },
  {
    "name": "T ___telemetry",
    "type": "CPP"
  },
  {
    "name": "T ___thread_selfusage",
    "type": "CPP"
  },
  {
    "name": "T ___umask_extended",
    "type": "CPP"
  },
  {
    "name": "T _vfork",
    "type": "CPP"
  },
  {
    "name": "T _waitid$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _writev$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _acct",
    "type": "CPP"
  },
  {
    "name": "T _adjtime",
    "type": "CPP"
  },
  {
    "name": "T _aio_cancel",
    "type": "CPP"
  },
  {
    "name": "T _aio_error",
    "type": "CPP"
  },
  {
    "name": "T _aio_fsync",
    "type": "CPP"
  },
  {
    "name": "T _aio_read",
    "type": "CPP"
  },
  {
    "name": "T _aio_return",
    "type": "CPP"
  },
  {
    "name": "T _aio_suspend",
    "type": "CPP"
  },
  {
    "name": "T _aio_write",
    "type": "CPP"
  },
  {
    "name": "T _audit",
    "type": "CPP"
  },
  {
    "name": "T _auditctl",
    "type": "CPP"
  },
  {
    "name": "T _chroot",
    "type": "CPP"
  },
  {
    "name": "T _disconnectx",
    "type": "CPP"
  },
  {
    "name": "T _faccessat",
    "type": "CPP"
  },
  {
    "name": "T _fchdir",
    "type": "CPP"
  },
  {
    "name": "T _fchmodat",
    "type": "CPP"
  },
  {
    "name": "T _fchownat",
    "type": "CPP"
  },
  {
    "name": "T _fclonefileat",
    "type": "CPP"
  },
  {
    "name": "T _fdatasync",
    "type": "CPP"
  },
  {
    "name": "T _fhopen",
    "type": "CPP"
  },
  {
    "name": "T _fmount",
    "type": "CPP"
  },
  {
    "name": "T _fpathconf",
    "type": "CPP"
  },
  {
    "name": "T _fremovexattr",
    "type": "CPP"
  },
  {
    "name": "T _fsgetpath_ext",
    "type": "CPP"
  },
  {
    "name": "T _fstat",
    "type": "CPP"
  },
  {
    "name": "T _fstatat",
    "type": "CPP"
  },
  {
    "name": "T _getattrlistat",
    "type": "CPP"
  },
  {
    "name": "T _getauid",
    "type": "CPP"
  },
  {
    "name": "T _getdirentries",
    "type": "CPP"
  },
  {
    "name": "T _getdirentriesattr",
    "type": "CPP"
  },
  {
    "name": "T _getfh",
    "type": "CPP"
  },
  {
    "name": "T _getfsstat",
    "type": "CPP"
  },
  {
    "name": "T _getitimer",
    "type": "CPP"
  },
  {
    "name": "T _getsid",
    "type": "CPP"
  },
  {
    "name": "T _grab_pgo_data",
    "type": "CPP"
  },
  {
    "name": "T _guarded_writev_np",
    "type": "CPP"
  },
  {
    "name": "T _kas_info",
    "type": "CPP"
  },
  {
    "name": "T _ledger",
    "type": "CPP"
  },
  {
    "name": "T _linkat",
    "type": "CPP"
  },
  {
    "name": "T _lio_listio",
    "type": "CPP"
  },
  {
    "name": "T _memorystatus_get_level",
    "type": "CPP"
  },
  {
    "name": "T _mincore",
    "type": "CPP"
  },
  {
    "name": "T _minherit",
    "type": "CPP"
  },
  {
    "name": "T _mkfifo",
    "type": "CPP"
  },
  {
    "name": "T _mknod",
    "type": "CPP"
  },
  {
    "name": "T _mlockall",
    "type": "CPP"
  },
  {
    "name": "T _modwatch",
    "type": "CPP"
  },
  {
    "name": "T _mremap_encrypted",
    "type": "CPP"
  },
  {
    "name": "T _msgget",
    "type": "CPP"
  },
  {
    "name": "T _msgrcv",
    "type": "CPP"
  },
  {
    "name": "T _msgsnd",
    "type": "CPP"
  },
  {
    "name": "T _munlockall",
    "type": "CPP"
  },
  {
    "name": "T _necp_session_action",
    "type": "CPP"
  },
  {
    "name": "T _necp_session_open",
    "type": "CPP"
  },
  {
    "name": "T _net_qos_guideline",
    "type": "CPP"
  },
  {
    "name": "T _netagent_trigger",
    "type": "CPP"
  },
  {
    "name": "T _nfsclnt",
    "type": "CPP"
  },
  {
    "name": "T _nfssvc",
    "type": "CPP"
  },
  {
    "name": "T _ntp_adjtime",
    "type": "CPP"
  },
  {
    "name": "T _ntp_gettime",
    "type": "CPP"
  },
  {
    "name": "T _openbyid_np",
    "type": "CPP"
  },
  {
    "name": "T _os_fault_with_payload",
    "type": "CPP"
  },
  {
    "name": "T _peeloff",
    "type": "CPP"
  },
  {
    "name": "T _pid_hibernate",
    "type": "CPP"
  },
  {
    "name": "T _pid_resume",
    "type": "CPP"
  },
  {
    "name": "T _pid_shutdown_sockets",
    "type": "CPP"
  },
  {
    "name": "T _pid_suspend",
    "type": "CPP"
  },
  {
    "name": "T _proc_trace_log",
    "type": "CPP"
  },
  {
    "name": "T _proc_uuid_policy",
    "type": "CPP"
  },
  {
    "name": "T _readlinkat",
    "type": "CPP"
  },
  {
    "name": "T _readv",
    "type": "CPP"
  },
  {
    "name": "T _recvmsg_x",
    "type": "CPP"
  },
  {
    "name": "T _revoke",
    "type": "CPP"
  },
  {
    "name": "T _searchfs",
    "type": "CPP"
  },
  {
    "name": "T _sem_post",
    "type": "CPP"
  },
  {
    "name": "T _sem_trywait",
    "type": "CPP"
  },
  {
    "name": "T _sem_unlink",
    "type": "CPP"
  },
  {
    "name": "T _sem_wait",
    "type": "CPP"
  },
  {
    "name": "T _semget",
    "type": "CPP"
  },
  {
    "name": "T _semop",
    "type": "CPP"
  },
  {
    "name": "T _sendfile",
    "type": "CPP"
  },
  {
    "name": "T _sendmsg_x",
    "type": "CPP"
  },
  {
    "name": "T _setattrlistat",
    "type": "CPP"
  },
  {
    "name": "T _setaudit_addr",
    "type": "CPP"
  },
  {
    "name": "T _setauid",
    "type": "CPP"
  },
  {
    "name": "T _setgroups",
    "type": "CPP"
  },
  {
    "name": "T _setprivexec",
    "type": "CPP"
  },
  {
    "name": "T _shm_unlink",
    "type": "CPP"
  },
  {
    "name": "T _shmat",
    "type": "CPP"
  },
  {
    "name": "T _shmdt",
    "type": "CPP"
  },
  {
    "name": "T _shmget",
    "type": "CPP"
  },
  {
    "name": "T _sigpending",
    "type": "CPP"
  },
  {
    "name": "T _socket_delegate",
    "type": "CPP"
  },
  {
    "name": "T _statfs",
    "type": "CPP"
  },
  {
    "name": "T _swapon",
    "type": "CPP"
  },
  {
    "name": "T _symlinkat",
    "type": "CPP"
  },
  {
    "name": "T _sync",
    "type": "CPP"
  },
  {
    "name": "T _system_override",
    "type": "CPP"
  },
  {
    "name": "T _thread_selfcounts",
    "type": "CPP"
  },
  {
    "name": "T _truncate",
    "type": "CPP"
  },
  {
    "name": "T _undelete",
    "type": "CPP"
  },
  {
    "name": "T _usrctl",
    "type": "CPP"
  },
  {
    "name": "T _vfs_purge",
    "type": "CPP"
  },
  {
    "name": "T _vm_pressure_monitor",
    "type": "CPP"
  },
  {
    "name": "T _waitevent",
    "type": "CPP"
  },
  {
    "name": "T _waitid",
    "type": "CPP"
  },
  {
    "name": "T _watchevent",
    "type": "CPP"
  },
  {
    "name": "T _i386_get_ldt",
    "type": "CPP"
  },
  {
    "name": "T _i386_set_ldt",
    "type": "CPP"
  },
  {
    "name": "T __thread_set_tsd_base",
    "type": "CPP"
  },
  {
    "name": "t _pkt_subtype_assert_fail.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _pkt_type_assert_fail.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _os_packet_set_headroom.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _os_packet_get_headroom.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _os_packet_set_link_header_length.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _os_packet_get_link_header_length.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _os_packet_set_link_broadcast.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _os_packet_get_link_broadcast.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _os_packet_set_link_multicast.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _os_packet_get_link_multicast.cold.1",
    "type": "CPP"
  },
  {
    "name": "t _os_packet_set_link_ethfcs.cold.1",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libsystem_platform.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T _os_unfair_lock_lock_with_options_4Libc",
    "type": "CPP"
  },
  {
    "name": "T _os_unfair_lock_unlock_4Libc",
    "type": "CPP"
  },
  {
    "name": "T _os_unfair_recursive_lock_lock_with_options",
    "type": "CPP"
  },
  {
    "name": "T __platform_strcmp",
    "type": "CPP"
  },
  {
    "name": "t __platform_memmove$VARIANT$Haswell",
    "type": "CPP"
  },
  {
    "name": "T _os_unfair_recursive_lock_unlock",
    "type": "CPP"
  },
  {
    "name": "T __platform_strncmp",
    "type": "CPP"
  },
  {
    "name": "t __platform_memset$VARIANT$Haswell",
    "type": "CPP"
  },
  {
    "name": "t __platform_bzero$VARIANT$Haswell",
    "type": "CPP"
  },
  {
    "name": "T __platform_strlen",
    "type": "CPP"
  },
  {
    "name": "T __os_once",
    "type": "CPP"
  },
  {
    "name": "t __os_once_callout",
    "type": "CPP"
  },
  {
    "name": "T _os_unfair_lock_lock",
    "type": "CPP"
  },
  {
    "name": "T _os_unfair_lock_assert_owner",
    "type": "CPP"
  },
  {
    "name": "T _ffs",
    "type": "CPP"
  },
  {
    "name": "T _ffsll",
    "type": "CPP"
  },
  {
    "name": "T _fls",
    "type": "CPP"
  },
  {
    "name": "T _flsll",
    "type": "CPP"
  },
  {
    "name": "T __os_alloc_once",
    "type": "CPP"
  },
  {
    "name": "t __os_alloc",
    "type": "CPP"
  },
  {
    "name": "T __platform_strcpy",
    "type": "CPP"
  },
  {
    "name": "t __platform_memchr$VARIANT$Base",
    "type": "CPP"
  },
  {
    "name": "t __platform_memchr$VARIANT$Haswell",
    "type": "CPP"
  },
  {
    "name": "T __platform_memchr",
    "type": "CPP"
  },
  {
    "name": "t __platform_strchr$VARIANT$Base",
    "type": "CPP"
  },
  {
    "name": "t __platform_strchr$VARIANT$Haswell",
    "type": "CPP"
  },
  {
    "name": "T __platform_strchr",
    "type": "CPP"
  },
  {
    "name": "T __platform_memcmp",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicAnd32Barrier",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicOr32Barrier",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicXor32Barrier",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicAnd32OrigBarrier",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicOr32OrigBarrier",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicXor32OrigBarrier",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicCompareAndSwapIntBarrier",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicCompareAndSwapPtrBarrier",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicAdd32Barrier",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicIncrement32Barrier",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicDecrement32Barrier",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicAdd64Barrier",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicIncrement64Barrier",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicDecrement64Barrier",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicTestAndSetBarrier",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicTestAndClearBarrier",
    "type": "CPP"
  },
  {
    "name": "T _OSMemoryBarrier",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicEnqueue",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicDequeue",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicFifoEnqueue",
    "type": "CPP"
  },
  {
    "name": "T _OSAtomicFifoDequeue",
    "type": "CPP"
  },
  {
    "name": "T __platform_strnlen",
    "type": "CPP"
  },
  {
    "name": "T __platform_strlcpy",
    "type": "CPP"
  },
  {
    "name": "T __platform_memset_pattern16",
    "type": "CPP"
  },
  {
    "name": "t __platform_memset_pattern4$VARIANT$Haswell",
    "type": "CPP"
  },
  {
    "name": "t __platform_memset_pattern8$VARIANT$Haswell",
    "type": "CPP"
  },
  {
    "name": "t __platform_memset_pattern16$VARIANT$Haswell",
    "type": "CPP"
  },
  {
    "name": "T _os_unfair_lock_assert_not_owner",
    "type": "CPP"
  },
  {
    "name": "t __os_unfair_lock_lock_slow",
    "type": "CPP"
  },
  {
    "name": "t __os_unfair_lock_unlock_slow",
    "type": "CPP"
  },
  {
    "name": "T __platform_strstr",
    "type": "CPP"
  },
  {
    "name": "T __platform_strncpy",
    "type": "CPP"
  },
  {
    "name": "T _os_unfair_lock_trylock",
    "type": "CPP"
  },
  {
    "name": "T __os_nospin_lock_lock",
    "type": "CPP"
  },
  {
    "name": "T __os_nospin_lock_unlock",
    "type": "CPP"
  },
  {
    "name": "T __os_nospin_lock_trylock",
    "type": "CPP"
  },
  {
    "name": "T _os_unfair_recursive_lock_tryunlock4objc",
    "type": "CPP"
  },
  {
    "name": "T _sigsetjmp",
    "type": "CPP"
  },
  {
    "name": "T _setjmp",
    "type": "CPP"
  },
  {
    "name": "T _siglongjmp",
    "type": "CPP"
  },
  {
    "name": "T _longjmp",
    "type": "CPP"
  },
  {
    "name": "T __platform_strlcat",
    "type": "CPP"
  },
  {
    "name": "T __platform_memset_pattern8",
    "type": "CPP"
  },
  {
    "name": "T __simple_salloc",
    "type": "CPP"
  },
  {
    "name": "T __simple_vsprintf",
    "type": "CPP"
  },
  {
    "name": "T __simple_sprintf",
    "type": "CPP"
  },
  {
    "name": "t _hex",
    "type": "CPP"
  },
  {
    "name": "T __simple_string",
    "type": "CPP"
  },
  {
    "name": "T __simple_sfree",
    "type": "CPP"
  },
  {
    "name": "t _dec",
    "type": "CPP"
  },
  {
    "name": "T __simple_asl_log",
    "type": "CPP"
  },
  {
    "name": "T __simple_asl_log_prog",
    "type": "CPP"
  },
  {
    "name": "T __simple_asl_msg_new",
    "type": "CPP"
  },
  {
    "name": "T __simple_asl_msg_set",
    "type": "CPP"
  },
  {
    "name": "T __simple_esprintf",
    "type": "CPP"
  },
  {
    "name": "t __simple_asl_escape_key",
    "type": "CPP"
  },
  {
    "name": "t __simple_asl_escape_val",
    "type": "CPP"
  },
  {
    "name": "T __simple_sappend",
    "type": "CPP"
  },
  {
    "name": "T __simple_sresize",
    "type": "CPP"
  },
  {
    "name": "T __simple_asl_send",
    "type": "CPP"
  },
  {
    "name": "t __simple_asl_connect_once",
    "type": "CPP"
  },
  {
    "name": "t _udec",
    "type": "CPP"
  },
  {
    "name": "T _os_unfair_recursive_lock_trylock",
    "type": "CPP"
  },
  {
    "name": "T __platform_memset_pattern4",
    "type": "CPP"
  },
  {
    "name": "T __os_semaphore_create",
    "type": "CPP"
  },
  {
    "name": "T __os_semaphore_dispose",
    "type": "CPP"
  },
  {
    "name": "T ___platform_sigaction",
    "type": "CPP"
  },
  {
    "name": "t __os_once_gate_wait",
    "type": "CPP"
  },
  {
    "name": "t __os_once_gate_broadcast",
    "type": "CPP"
  },
  {
    "name": "t __os_nospin_lock_lock_slow",
    "type": "CPP"
  },
  {
    "name": "t __os_nospin_lock_unlock_slow",
    "type": "CPP"
  },
  {
    "name": "T ___libplatform_init",
    "type": "CPP"
  },
  {
    "name": "t ___pfz_setup",
    "type": "CPP"
  },
  {
    "name": "T __simple_getenv",
    "type": "CPP"
  },
  {
    "name": "T __platform_bzero",
    "type": "CPP"
  },
  {
    "name": "t __simple_asl_init",
    "type": "CPP"
  },
  {
    "name": "t __os_alloc_slow",
    "type": "CPP"
  },
  {
    "name": "t __simple_asl_init_context",
    "type": "CPP"
  },
  {
    "name": "T __platform_memmove",
    "type": "CPP"
  },
  {
    "name": "T __platform_memset",
    "type": "CPP"
  },
  {
    "name": "T _spin_lock",
    "type": "CPP"
  },
  {
    "name": "T _spin_unlock",
    "type": "CPP"
  },
  {
    "name": "T __sigtramp",
    "type": "CPP"
  },
  {
    "name": "T _os_lock_lock",
    "type": "CPP"
  },
  {
    "name": "t __os_lock_handoff_lock",
    "type": "CPP"
  },
  {
    "name": "T _os_lock_unlock",
    "type": "CPP"
  },
  {
    "name": "t __os_lock_handoff_unlock",
    "type": "CPP"
  },
  {
    "name": "t __os_lock_handoff_lock_slow",
    "type": "CPP"
  },
  {
    "name": "t __os_lock_unfair_lock",
    "type": "CPP"
  },
  {
    "name": "t __platform_memset$VARIANT$Ivybridge",
    "type": "CPP"
  },
  {
    "name": "t __platform_bzero$VARIANT$Ivybridge",
    "type": "CPP"
  },
  {
    "name": "t __platform_memmove$VARIANT$Ivybridge",
    "type": "CPP"
  },
  {
    "name": "t __platform_memmove$VARIANT$Nehalem",
    "type": "CPP"
  },
  {
    "name": "t __os_lock_spin_lock",
    "type": "CPP"
  },
  {
    "name": "t __os_lock_spin_unlock",
    "type": "CPP"
  },
  {
    "name": "T __os_semaphore_signal",
    "type": "CPP"
  },
  {
    "name": "T __os_semaphore_wait",
    "type": "CPP"
  },
  {
    "name": "t __OSSpinLockLockSlow",
    "type": "CPP"
  },
  {
    "name": "T _OSSpinLockTry",
    "type": "CPP"
  },
  {
    "name": "t __platform_memset_pattern4$VARIANT$Ivybridge",
    "type": "CPP"
  },
  {
    "name": "t __platform_memset_pattern8$VARIANT$Ivybridge",
    "type": "CPP"
  },
  {
    "name": "t __platform_memset_pattern16$VARIANT$Ivybridge",
    "type": "CPP"
  },
  {
    "name": "T _os_lock_trylock",
    "type": "CPP"
  },
  {
    "name": "t __os_lock_handoff_trylock",
    "type": "CPP"
  },
  {
    "name": "T __setjmp",
    "type": "CPP"
  },
  {
    "name": "T __longjmp",
    "type": "CPP"
  },
  {
    "name": "t __sigunaltstack",
    "type": "CPP"
  },
  {
    "name": "T __simple_vesprintf",
    "type": "CPP"
  },
  {
    "name": "t ___simple_bprintf",
    "type": "CPP"
  },
  {
    "name": "T __simple_esappend",
    "type": "CPP"
  },
  {
    "name": "T _platform_task_attach",
    "type": "CPP"
  },
  {
    "name": "t __platform_task_deallocate",
    "type": "CPP"
  },
  {
    "name": "T _platform_task_detach",
    "type": "CPP"
  },
  {
    "name": "T _platform_task_is_64_bit",
    "type": "CPP"
  },
  {
    "name": "T _platform_task_suspend_threads",
    "type": "CPP"
  },
  {
    "name": "T _platform_task_resume_threads",
    "type": "CPP"
  },
  {
    "name": "T _platform_task_perform",
    "type": "CPP"
  },
  {
    "name": "T _platform_task_update_threads",
    "type": "CPP"
  },
  {
    "name": "T _platform_task_copy_next_thread",
    "type": "CPP"
  },
  {
    "name": "T _platform_thread_get_unique_id",
    "type": "CPP"
  },
  {
    "name": "T _platform_thread_release",
    "type": "CPP"
  },
  {
    "name": "T _platform_thread_abort_safely",
    "type": "CPP"
  },
  {
    "name": "T _platform_thread_suspend",
    "type": "CPP"
  },
  {
    "name": "T _platform_thread_resume",
    "type": "CPP"
  },
  {
    "name": "T _platform_thread_info",
    "type": "CPP"
  },
  {
    "name": "T _platform_thread_get_state",
    "type": "CPP"
  },
  {
    "name": "T _platform_thread_set_state",
    "type": "CPP"
  },
  {
    "name": "T _platform_thread_perform",
    "type": "CPP"
  },
  {
    "name": "T _platform_thread_get_pthread",
    "type": "CPP"
  },
  {
    "name": "t __platform_thread_deallocate",
    "type": "CPP"
  },
  {
    "name": "T __simple_vdprintf",
    "type": "CPP"
  },
  {
    "name": "t __flush_reset",
    "type": "CPP"
  },
  {
    "name": "t __flush",
    "type": "CPP"
  },
  {
    "name": "T __simple_dprintf",
    "type": "CPP"
  },
  {
    "name": "t __enlarge",
    "type": "CPP"
  },
  {
    "name": "T __simple_put",
    "type": "CPP"
  },
  {
    "name": "T __simple_putline",
    "type": "CPP"
  },
  {
    "name": "t _oct",
    "type": "CPP"
  },
  {
    "name": "t _ydec",
    "type": "CPP"
  },
  {
    "name": "t _preempt",
    "type": "CPP"
  },
  {
    "name": "t _backoff",
    "type": "CPP"
  },
  {
    "name": "T _sys_cache_control",
    "type": "CPP"
  },
  {
    "name": "T _sys_icache_invalidate",
    "type": "CPP"
  },
  {
    "name": "T _sys_dcache_flush",
    "type": "CPP"
  },
  {
    "name": "t __OSSpinLockLockYield",
    "type": "CPP"
  },
  {
    "name": "T _spin_lock_try",
    "type": "CPP"
  },
  {
    "name": "t __os_lock_spin_trylock",
    "type": "CPP"
  },
  {
    "name": "T _os_unfair_lock_lock_no_tsd_4libpthread",
    "type": "CPP"
  },
  {
    "name": "T _os_unfair_lock_unlock_no_tsd_4libpthread",
    "type": "CPP"
  },
  {
    "name": "T _os_unfair_recursive_lock_owned",
    "type": "CPP"
  },
  {
    "name": "T _os_unfair_recursive_lock_unlock_forked_child",
    "type": "CPP"
  },
  {
    "name": "t __os_lock_unfair_trylock",
    "type": "CPP"
  },
  {
    "name": "t __os_lock_unfair_unlock",
    "type": "CPP"
  },
  {
    "name": "t __os_lock_nospin_lock",
    "type": "CPP"
  },
  {
    "name": "t __os_lock_nospin_trylock",
    "type": "CPP"
  },
  {
    "name": "t __os_lock_nospin_unlock",
    "type": "CPP"
  },
  {
    "name": "T ___os_once_reset",
    "type": "CPP"
  },
  {
    "name": "T _longjmperror",
    "type": "CPP"
  },
  {
    "name": "t _memset",
    "type": "CPP"
  },
  {
    "name": "T __platform_memccpy",
    "type": "CPP"
  },
  {
    "name": "t __platform_memmove$VARIANT$Base",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libsystem_pthread.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T __pthread_exit_if_canceled",
    "type": "CPP"
  },
  {
    "name": "T ___pthread_init",
    "type": "CPP"
  },
  {
    "name": "t __pthread_strtoul",
    "type": "CPP"
  },
  {
    "name": "t __pthread_main_thread_init",
    "type": "CPP"
  },
  {
    "name": "t __pthread_bsdthread_init",
    "type": "CPP"
  },
  {
    "name": "t __pthread_set_main_qos",
    "type": "CPP"
  },
  {
    "name": "t __pthread_key_global_init",
    "type": "CPP"
  },
  {
    "name": "t __pthread_mutex_global_init",
    "type": "CPP"
  },
  {
    "name": "T _pthread_key_init_np",
    "type": "CPP"
  },
  {
    "name": "T _pthread_key_create",
    "type": "CPP"
  },
  {
    "name": "T _pthread_mutex_lock",
    "type": "CPP"
  },
  {
    "name": "t __pthread_mutex_lock_init_slow",
    "type": "CPP"
  },
  {
    "name": "t __pthread_mutex_check_init_slow",
    "type": "CPP"
  },
  {
    "name": "t __pthread_mutex_firstfit_lock_slow",
    "type": "CPP"
  },
  {
    "name": "T _pthread_mutex_unlock",
    "type": "CPP"
  },
  {
    "name": "t __pthread_mutex_unlock_init_slow",
    "type": "CPP"
  },
  {
    "name": "t __pthread_mutex_firstfit_unlock_slow",
    "type": "CPP"
  },
  {
    "name": "T _qos_class_main",
    "type": "CPP"
  },
  {
    "name": "T _start_wqthread",
    "type": "CPP"
  },
  {
    "name": "T _thread_start",
    "type": "CPP"
  },
  {
    "name": "T _thread_chkstk_darwin",
    "type": "CPP"
  },
  {
    "name": "T _pthread_getspecific",
    "type": "CPP"
  },
  {
    "name": "T _pthread_setspecific",
    "type": "CPP"
  },
  {
    "name": "T _pthread_cond_broadcast",
    "type": "CPP"
  },
  {
    "name": "t __pthread_cond_check_init_slow",
    "type": "CPP"
  },
  {
    "name": "T _pthread_mutex_destroy",
    "type": "CPP"
  },
  {
    "name": "T _pthread_atfork",
    "type": "CPP"
  },
  {
    "name": "T _pthread_mutex_init",
    "type": "CPP"
  },
  {
    "name": "T _pthread_self",
    "type": "CPP"
  },
  {
    "name": "T _pthread_mach_thread_np",
    "type": "CPP"
  },
  {
    "name": "T _pthread_mutexattr_init",
    "type": "CPP"
  },
  {
    "name": "T _pthread_mutexattr_settype",
    "type": "CPP"
  },
  {
    "name": "T _pthread_main_np",
    "type": "CPP"
  },
  {
    "name": "T _pthread_equal",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_init",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_setscope",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_setdetachstate",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_getschedparam",
    "type": "CPP"
  },
  {
    "name": "T _pthread_main_thread_np",
    "type": "CPP"
  },
  {
    "name": "T _pthread_mutexattr_destroy",
    "type": "CPP"
  },
  {
    "name": "T __pthread_workqueue_supported",
    "type": "CPP"
  },
  {
    "name": "T _pthread_workqueue_setup",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_getschedpolicy",
    "type": "CPP"
  },
  {
    "name": "T __pthread_qos_class_encode",
    "type": "CPP"
  },
  {
    "name": "t __pthread_qos_class_to_thread_qos",
    "type": "CPP"
  },
  {
    "name": "T __pthread_workqueue_set_event_manager_priority",
    "type": "CPP"
  },
  {
    "name": "T _pthread_once",
    "type": "CPP"
  },
  {
    "name": "t ___pthread_once_handler",
    "type": "CPP"
  },
  {
    "name": "T _pthread_qos_max_parallelism",
    "type": "CPP"
  },
  {
    "name": "T __pthread_workqueue_addthreads",
    "type": "CPP"
  },
  {
    "name": "T __pthread_wqthread",
    "type": "CPP"
  },
  {
    "name": "t __pthread_wqthread_setup",
    "type": "CPP"
  },
  {
    "name": "T _pthread_rwlock_rdlock",
    "type": "CPP"
  },
  {
    "name": "t __pthread_rwlock_lock_slow",
    "type": "CPP"
  },
  {
    "name": "t __pthread_rwlock_check_init_slow",
    "type": "CPP"
  },
  {
    "name": "T _pthread_rwlock_unlock",
    "type": "CPP"
  },
  {
    "name": "T _pthread_rwlock_wrlock",
    "type": "CPP"
  },
  {
    "name": "T _pthread_create",
    "type": "CPP"
  },
  {
    "name": "t __pthread_markcancel_if_canceled",
    "type": "CPP"
  },
  {
    "name": "T _pthread_set_qos_class_self_np",
    "type": "CPP"
  },
  {
    "name": "T __pthread_set_properties_self",
    "type": "CPP"
  },
  {
    "name": "T _pthread_setname_np",
    "type": "CPP"
  },
  {
    "name": "T _pthread_cond_wait",
    "type": "CPP"
  },
  {
    "name": "T _pthread_testcancel",
    "type": "CPP"
  },
  {
    "name": "t __pthread_mutex_droplock",
    "type": "CPP"
  },
  {
    "name": "T _sched_yield",
    "type": "CPP"
  },
  {
    "name": "t __pthread_cond_updateval",
    "type": "CPP"
  },
  {
    "name": "T _pthread_cond_timedwait",
    "type": "CPP"
  },
  {
    "name": "T _pthread_get_stackaddr_np",
    "type": "CPP"
  },
  {
    "name": "T __pthread_workqueue_override_start_direct",
    "type": "CPP"
  },
  {
    "name": "t __pthread_mutex_firstfit_lock_wait",
    "type": "CPP"
  },
  {
    "name": "t __pthread_mutex_firstfit_wake",
    "type": "CPP"
  },
  {
    "name": "T __pthread_workqueue_override_reset",
    "type": "CPP"
  },
  {
    "name": "T __pthread_workqueue_should_narrow",
    "type": "CPP"
  },
  {
    "name": "T _pthread_get_stacksize_np",
    "type": "CPP"
  },
  {
    "name": "T _pthread_mutex_trylock",
    "type": "CPP"
  },
  {
    "name": "T _pthread_rwlock_init",
    "type": "CPP"
  },
  {
    "name": "T __pthread_qos_class_decode",
    "type": "CPP"
  },
  {
    "name": "t __pthread_wqthread_exit",
    "type": "CPP"
  },
  {
    "name": "T _pthread_exit",
    "type": "CPP"
  },
  {
    "name": "t __pthread_setcancelstate_exit",
    "type": "CPP"
  },
  {
    "name": "t __pthread_tsd_cleanup",
    "type": "CPP"
  },
  {
    "name": "t __pthread_terminate_invoke",
    "type": "CPP"
  },
  {
    "name": "t __pthread_terminate",
    "type": "CPP"
  },
  {
    "name": "T _pthread_cond_init",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_getstacksize",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_setstacksize",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_destroy",
    "type": "CPP"
  },
  {
    "name": "T _pthread_getschedparam",
    "type": "CPP"
  },
  {
    "name": "T _pthread_setschedparam",
    "type": "CPP"
  },
  {
    "name": "T __pthread_clear_qos_tsd",
    "type": "CPP"
  },
  {
    "name": "T _pthread_cond_destroy",
    "type": "CPP"
  },
  {
    "name": "T _qos_class_self",
    "type": "CPP"
  },
  {
    "name": "T _pthread_stack_frame_decode_np",
    "type": "CPP"
  },
  {
    "name": "T __pthread_workqueue_override_start_direct_check_owner",
    "type": "CPP"
  },
  {
    "name": "T _pthread_rwlock_trywrlock",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_set_qos_class_np",
    "type": "CPP"
  },
  {
    "name": "t __pthread_rwlock_lock_wait",
    "type": "CPP"
  },
  {
    "name": "t __pthread_rwlock_unlock_slow",
    "type": "CPP"
  },
  {
    "name": "t __pthread_rwlock_unlock_drop",
    "type": "CPP"
  },
  {
    "name": "T __pthread_qos_override_end_direct",
    "type": "CPP"
  },
  {
    "name": "T _pthread_cond_timedwait_relative_np",
    "type": "CPP"
  },
  {
    "name": "T _pthread_rwlock_destroy",
    "type": "CPP"
  },
  {
    "name": "T _pthread_getname_np",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_setschedpolicy",
    "type": "CPP"
  },
  {
    "name": "T __pthread_workloop_create",
    "type": "CPP"
  },
  {
    "name": "T _pthread_threadid_np",
    "type": "CPP"
  },
  {
    "name": "T _pthread_get_qos_class_np",
    "type": "CPP"
  },
  {
    "name": "T _pthread_override_qos_class_start_np",
    "type": "CPP"
  },
  {
    "name": "T _pthread_cond_signal",
    "type": "CPP"
  },
  {
    "name": "T _pthread_setcanceltype",
    "type": "CPP"
  },
  {
    "name": "T _pthread_set_fixedpriority_self",
    "type": "CPP"
  },
  {
    "name": "T _pthread_sigmask",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_setschedparam",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_get_qos_class_np",
    "type": "CPP"
  },
  {
    "name": "t _malloc",
    "type": "CPP"
  },
  {
    "name": "T _pthread_override_qos_class_end_np",
    "type": "CPP"
  },
  {
    "name": "t _free",
    "type": "CPP"
  },
  {
    "name": "T _pthread_detach",
    "type": "CPP"
  },
  {
    "name": "T __pthread_atfork_prepare_handlers",
    "type": "CPP"
  },
  {
    "name": "T _pthread_is_threaded_np",
    "type": "CPP"
  },
  {
    "name": "T __pthread_atfork_prepare",
    "type": "CPP"
  },
  {
    "name": "T __pthread_atfork_parent",
    "type": "CPP"
  },
  {
    "name": "T __pthread_atfork_parent_handlers",
    "type": "CPP"
  },
  {
    "name": "t __pthread_current_stack_address",
    "type": "CPP"
  },
  {
    "name": "T _pthread_key_delete",
    "type": "CPP"
  },
  {
    "name": "T __pthread_qos_override_start_direct",
    "type": "CPP"
  },
  {
    "name": "T _pthread_join",
    "type": "CPP"
  },
  {
    "name": "t __pthread_joiner_prepost_wake",
    "type": "CPP"
  },
  {
    "name": "T __pthread_joiner_wake",
    "type": "CPP"
  },
  {
    "name": "t __pthread_deallocate",
    "type": "CPP"
  },
  {
    "name": "T _pthread_kill",
    "type": "CPP"
  },
  {
    "name": "T _pthread_set_timeshare_self",
    "type": "CPP"
  },
  {
    "name": "T __pthread_workqueue_init_with_workloop",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_setinheritsched",
    "type": "CPP"
  },
  {
    "name": "T _pthread_fchdir_np",
    "type": "CPP"
  },
  {
    "name": "T _pthread_rwlockattr_init",
    "type": "CPP"
  },
  {
    "name": "T _pthread_rwlockattr_destroy",
    "type": "CPP"
  },
  {
    "name": "T _sched_get_priority_max",
    "type": "CPP"
  },
  {
    "name": "T __pthread_set_self",
    "type": "CPP"
  },
  {
    "name": "T __pthread_workqueue_init",
    "type": "CPP"
  },
  {
    "name": "T __pthread_qos_class_encode_workqueue",
    "type": "CPP"
  },
  {
    "name": "T __pthread_override_qos_class_start_direct",
    "type": "CPP"
  },
  {
    "name": "T __pthread_start",
    "type": "CPP"
  },
  {
    "name": "T __pthread_override_qos_class_end_direct",
    "type": "CPP"
  },
  {
    "name": "T __pthread_testcancel",
    "type": "CPP"
  },
  {
    "name": "t __pthread_cond_wait",
    "type": "CPP"
  },
  {
    "name": "t __pthread_exit",
    "type": "CPP"
  },
  {
    "name": "T _pthread_join$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _pthread_mutexattr_setpshared",
    "type": "CPP"
  },
  {
    "name": "T __pthread_fork_prepare",
    "type": "CPP"
  },
  {
    "name": "T __pthread_fork_parent",
    "type": "CPP"
  },
  {
    "name": "T _sigwait",
    "type": "CPP"
  },
  {
    "name": "T _pthread_workqueue_setdispatch_np",
    "type": "CPP"
  },
  {
    "name": "T _sched_get_priority_min",
    "type": "CPP"
  },
  {
    "name": "T _pthread_yield_np",
    "type": "CPP"
  },
  {
    "name": "T _pthread_setcancelstate",
    "type": "CPP"
  },
  {
    "name": "T _pthread_set_qos_class_np",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_getdetachstate",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_getinheritsched",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_getscope",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_getstackaddr",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_setstackaddr",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_getstack",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_setstack",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_setguardsize",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_getguardsize",
    "type": "CPP"
  },
  {
    "name": "T _pthread_attr_setcpupercent_np",
    "type": "CPP"
  },
  {
    "name": "T __pthread_is_threaded",
    "type": "CPP"
  },
  {
    "name": "T _pthread_from_mach_thread_np",
    "type": "CPP"
  },
  {
    "name": "t __pthread_create",
    "type": "CPP"
  },
  {
    "name": "T _pthread_create_from_mach_thread",
    "type": "CPP"
  },
  {
    "name": "T _pthread_create_suspended_np",
    "type": "CPP"
  },
  {
    "name": "T ___pthread_workqueue_setkill",
    "type": "CPP"
  },
  {
    "name": "T __pthread_self",
    "type": "CPP"
  },
  {
    "name": "T _pthread_getconcurrency",
    "type": "CPP"
  },
  {
    "name": "T _pthread_setconcurrency",
    "type": "CPP"
  },
  {
    "name": "t __pthread_main_thread_postfork_init",
    "type": "CPP"
  },
  {
    "name": "T _cthread_yield",
    "type": "CPP"
  },
  {
    "name": "T _pthread_current_stack_contains_np",
    "type": "CPP"
  },
  {
    "name": "t __pthread_wqthread_legacy_worker_wrap",
    "type": "CPP"
  },
  {
    "name": "T _pthread_workqueue_setdispatchoffset_np",
    "type": "CPP"
  },
  {
    "name": "T __pthread_workqueue_init_with_kevent",
    "type": "CPP"
  },
  {
    "name": "T _pthread_workqueue_addthreads_np",
    "type": "CPP"
  },
  {
    "name": "T __pthread_workloop_destroy",
    "type": "CPP"
  },
  {
    "name": "T _pthread_introspection_hook_install",
    "type": "CPP"
  },
  {
    "name": "t __pthread_introspection_hook_callout_thread_create",
    "type": "CPP"
  },
  {
    "name": "t __pthread_introspection_hook_callout_thread_terminate",
    "type": "CPP"
  },
  {
    "name": "t ___pthread_invalid_workloopfunction",
    "type": "CPP"
  },
  {
    "name": "t ___pthread_invalid_keventfunction",
    "type": "CPP"
  },
  {
    "name": "t __pthread_introspection_hook_callout_thread_start",
    "type": "CPP"
  },
  {
    "name": "t __pthread_introspection_hook_callout_thread_destroy",
    "type": "CPP"
  },
  {
    "name": "T _pthread_cancel",
    "type": "CPP"
  },
  {
    "name": "t __pthread_join",
    "type": "CPP"
  },
  {
    "name": "T _pthread_cond_wait$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _pthread_cond_timedwait$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _sigwait$NOCANCEL",
    "type": "CPP"
  },
  {
    "name": "T _pthread_condattr_init",
    "type": "CPP"
  },
  {
    "name": "T _pthread_condattr_destroy",
    "type": "CPP"
  },
  {
    "name": "T _pthread_condattr_getpshared",
    "type": "CPP"
  },
  {
    "name": "T _pthread_condattr_setpshared",
    "type": "CPP"
  },
  {
    "name": "T _pthread_cond_signal_thread_np",
    "type": "CPP"
  },
  {
    "name": "t __pthread_cond_cleanup",
    "type": "CPP"
  },
  {
    "name": "t _mutex_seq_atomic_cmpxchgv_relaxed",
    "type": "CPP"
  },
  {
    "name": "t _mutex_seq_atomic_cmpxchgv_acquire",
    "type": "CPP"
  },
  {
    "name": "t _mutex_seq_atomic_cmpxchgv_release",
    "type": "CPP"
  },
  {
    "name": "T _pthread_mutex_getprioceiling",
    "type": "CPP"
  },
  {
    "name": "T _pthread_mutex_setprioceiling",
    "type": "CPP"
  },
  {
    "name": "T _pthread_mutexattr_getprioceiling",
    "type": "CPP"
  },
  {
    "name": "T _pthread_mutexattr_getprotocol",
    "type": "CPP"
  },
  {
    "name": "T _pthread_mutexattr_getpolicy_np",
    "type": "CPP"
  },
  {
    "name": "T _pthread_mutexattr_gettype",
    "type": "CPP"
  },
  {
    "name": "T _pthread_mutexattr_getpshared",
    "type": "CPP"
  },
  {
    "name": "T _pthread_mutexattr_setprioceiling",
    "type": "CPP"
  },
  {
    "name": "T _pthread_mutexattr_setprotocol",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libsystem_symptoms.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T __symptoms_is_daemon_fallback_blacklisted",
    "type": "CPP"
  },
  {
    "name": "t ____symptoms_is_daemon_fallback_blacklisted_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _symptom_framework_init",
    "type": "CPP"
  },
  {
    "name": "t _obtain_symptom_framework",
    "type": "CPP"
  },
  {
    "name": "t _find_symptom_reporter_by_name",
    "type": "CPP"
  },
  {
    "name": "t __symptoms_globals_init",
    "type": "CPP"
  },
  {
    "name": "t _symptoms_go_multithreaded",
    "type": "CPP"
  },
  {
    "name": "t ___framework_creation_queue_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___obtain_symptom_framework_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _symptom_new",
    "type": "CPP"
  },
  {
    "name": "T _symptom_set_qualifier",
    "type": "CPP"
  },
  {
    "name": "T _symptom_set_additional_qualifier",
    "type": "CPP"
  },
  {
    "name": "t _get_symptom_qual_size",
    "type": "CPP"
  },
  {
    "name": "t _get_symptom_qual_count",
    "type": "CPP"
  },
  {
    "name": "T _symptom_send",
    "type": "CPP"
  },
  {
    "name": "t _sr_log_symptom",
    "type": "CPP"
  },
  {
    "name": "t _sr_log_symptom_action",
    "type": "CPP"
  },
  {
    "name": "t _symptom_post",
    "type": "CPP"
  },
  {
    "name": "t _dump_symptom",
    "type": "CPP"
  },
  {
    "name": "t _dump_basic_symptom",
    "type": "CPP"
  },
  {
    "name": "t _get_symptom_ctrl",
    "type": "CPP"
  },
  {
    "name": "t _handle_symptom",
    "type": "CPP"
  },
  {
    "name": "t _ensure_sym_ctrl_is_queued",
    "type": "CPP"
  },
  {
    "name": "t _dump_symptom_state",
    "type": "CPP"
  },
  {
    "name": "t _dump_system_reporter",
    "type": "CPP"
  },
  {
    "name": "t _dump_creation_filter",
    "type": "CPP"
  },
  {
    "name": "t _dump_idents",
    "type": "CPP"
  },
  {
    "name": "t _dump_ident",
    "type": "CPP"
  },
  {
    "name": "t _dump_active_idents",
    "type": "CPP"
  },
  {
    "name": "t _ensure_alert",
    "type": "CPP"
  },
  {
    "name": "t _ensure_symptom_framework_connect",
    "type": "CPP"
  },
  {
    "name": "t _connect_symptom_framework",
    "type": "CPP"
  },
  {
    "name": "t _symptom_transport_connect",
    "type": "CPP"
  },
  {
    "name": "t _read_current_status",
    "type": "CPP"
  },
  {
    "name": "t _dump_status",
    "type": "CPP"
  },
  {
    "name": "t _symptom_transport_send",
    "type": "CPP"
  },
  {
    "name": "t _sr_log_status_send",
    "type": "CPP"
  },
  {
    "name": "t ___symptom_transport_connect_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _symptoms_transport_fastdrop",
    "type": "CPP"
  },
  {
    "name": "t _symptoms_transport_dropped",
    "type": "CPP"
  },
  {
    "name": "t _reevaluate_sr_symptoms",
    "type": "CPP"
  },
  {
    "name": "t _sym_ctrl_dequeue",
    "type": "CPP"
  },
  {
    "name": "t _update_globals_for_symptom_removal",
    "type": "CPP"
  },
  {
    "name": "t ___ensure_symptom_framework_connect_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __sr_log",
    "type": "CPP"
  },
  {
    "name": "t _symptom_free",
    "type": "CPP"
  },
  {
    "name": "t _symptoms_incoming_message",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libsystem_trace.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T __libtrace_init",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_create_debug_control_port",
    "type": "CPP"
  },
  {
    "name": "T __os_activity_create",
    "type": "CPP"
  },
  {
    "name": "t __os_activity_create_addr",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_init_slow",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_get_logd_port",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_metadata_init",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_image_was_loaded",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_dylib_or_main_executable_was_loaded",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_get_image_info",
    "type": "CPP"
  },
  {
    "name": "t ____os_trace_get_image_info_block_invoke.1",
    "type": "CPP"
  },
  {
    "name": "t ____os_trace_get_image_info_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_prefs_and_mode_refresh_slow",
    "type": "CPP"
  },
  {
    "name": "t __os_log_preferences_refresh_process",
    "type": "CPP"
  },
  {
    "name": "t ____os_trace_paths_init_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_read_plist_at",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_read_file_at",
    "type": "CPP"
  },
  {
    "name": "t ____os_log_preferences_refresh_process_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_malloc",
    "type": "CPP"
  },
  {
    "name": "t __os_log_preference_option",
    "type": "CPP"
  },
  {
    "name": "t __os_log_option_for_key",
    "type": "CPP"
  },
  {
    "name": "T _os_activity_scope_enter",
    "type": "CPP"
  },
  {
    "name": "T _os_activity_scope_leave",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_mig_server",
    "type": "CPP"
  },
  {
    "name": "t __XStateDump",
    "type": "CPP"
  },
  {
    "name": "t __os_state_request_for_self",
    "type": "CPP"
  },
  {
    "name": "T __os_log_set_nscf_formatter",
    "type": "CPP"
  },
  {
    "name": "T _os_log_create",
    "type": "CPP"
  },
  {
    "name": "t __os_log_find",
    "type": "CPP"
  },
  {
    "name": "t __os_log_set_default_signpost_opts",
    "type": "CPP"
  },
  {
    "name": "t __os_log_preferences_refresh",
    "type": "CPP"
  },
  {
    "name": "t __os_log_preferences_cache_find_record_by_name",
    "type": "CPP"
  },
  {
    "name": "t __os_log_stream_filter_refresh",
    "type": "CPP"
  },
  {
    "name": "T _os_signpost_id_make_with_pointer",
    "type": "CPP"
  },
  {
    "name": "T _os_signpost_enabled",
    "type": "CPP"
  },
  {
    "name": "t __os_log_watch_for_prefchanges",
    "type": "CPP"
  },
  {
    "name": "T _os_log_type_enabled",
    "type": "CPP"
  },
  {
    "name": "T __os_log_impl",
    "type": "CPP"
  },
  {
    "name": "t __os_log",
    "type": "CPP"
  },
  {
    "name": "t __os_log_impl_flatten_and_send",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_flatten_to_blob",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_flatten_data_into_blob",
    "type": "CPP"
  },
  {
    "name": "t _os_trace_blob_addns",
    "type": "CPP"
  },
  {
    "name": "T __os_activity_initiate",
    "type": "CPP"
  },
  {
    "name": "t __os_activity_initiate_impl",
    "type": "CPP"
  },
  {
    "name": "T __os_log_debug_impl",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_flatten_object",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_flatten_NSCF",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_mh_map_insert_impl",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_rwptr_wrunlock",
    "type": "CPP"
  },
  {
    "name": "T __os_signpost_emit_with_name_impl",
    "type": "CPP"
  },
  {
    "name": "T __os_signpost_emit_impl",
    "type": "CPP"
  },
  {
    "name": "T _os_activity_apply",
    "type": "CPP"
  },
  {
    "name": "T _os_activity_apply_f",
    "type": "CPP"
  },
  {
    "name": "T _os_log_shim_enabled",
    "type": "CPP"
  },
  {
    "name": "T _os_log_shim_with_CFString",
    "type": "CPP"
  },
  {
    "name": "t __os_log_with_args_impl",
    "type": "CPP"
  },
  {
    "name": "t _os_log_fmt_encode",
    "type": "CPP"
  },
  {
    "name": "t _os_log_fmt_delimit",
    "type": "CPP"
  },
  {
    "name": "T __os_log_error_impl",
    "type": "CPP"
  },
  {
    "name": "t _os_trace_blob_add_slow",
    "type": "CPP"
  },
  {
    "name": "t _os_trace_blob_grow",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_realloc",
    "type": "CPP"
  },
  {
    "name": "t __os_log_impl_send_oversize",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_logd_pipe_copy",
    "type": "CPP"
  },
  {
    "name": "T _os_state_add_handler",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_calloc",
    "type": "CPP"
  },
  {
    "name": "T __os_log_pack_size",
    "type": "CPP"
  },
  {
    "name": "T __os_log_pack_fill",
    "type": "CPP"
  },
  {
    "name": "T _os_log_pack_compose",
    "type": "CPP"
  },
  {
    "name": "T _os_log_fmt_compose",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_compose_data",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_compose_format_copy",
    "type": "CPP"
  },
  {
    "name": "t _os_trace_blob_addf",
    "type": "CPP"
  },
  {
    "name": "t _os_trace_blob_vaddf",
    "type": "CPP"
  },
  {
    "name": "T _os_log_pack_send",
    "type": "CPP"
  },
  {
    "name": "T _os_signpost_id_generate",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_plugin_annotated",
    "type": "CPP"
  },
  {
    "name": "T _os_log_fmt_get_plugin",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_formatters_list",
    "type": "CPP"
  },
  {
    "name": "t ____os_trace_formatters_list_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_load_formatter",
    "type": "CPP"
  },
  {
    "name": "t ___os_log_fmt_object_for_data_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _os_log_fmt_read_scalar",
    "type": "CPP"
  },
  {
    "name": "t _os_trace_blob_adds_CF",
    "type": "CPP"
  },
  {
    "name": "T _os_activity_get_identifier",
    "type": "CPP"
  },
  {
    "name": "T __os_signpost_emit_unreliably_with_name_impl",
    "type": "CPP"
  },
  {
    "name": "T _os_state_remove_handler",
    "type": "CPP"
  },
  {
    "name": "t __os_state_block_entry_free",
    "type": "CPP"
  },
  {
    "name": "T __os_log_fault_impl",
    "type": "CPP"
  },
  {
    "name": "T _os_log_backtrace_create_from_return_address",
    "type": "CPP"
  },
  {
    "name": "T _os_log_backtrace_create_from_pcs",
    "type": "CPP"
  },
  {
    "name": "T _os_log_backtrace_serialize_to_blob",
    "type": "CPP"
  },
  {
    "name": "t __os_log_impl_compose",
    "type": "CPP"
  },
  {
    "name": "t ____os_state_request_for_self_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _os_log_fault_default_callback",
    "type": "CPP"
  },
  {
    "name": "t ____os_state_request_for_self_impl_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_logd_send",
    "type": "CPP"
  },
  {
    "name": "t ___LIBTRACE_CLIENT_QUARANTINED_DUE_TO_HIGH_LOGGING_VOLUME__",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_debug_channel_handler",
    "type": "CPP"
  },
  {
    "name": "T _os_log_with_args",
    "type": "CPP"
  },
  {
    "name": "T _os_log_shim_legacy_logging_enabled",
    "type": "CPP"
  },
  {
    "name": "t __os_log_impl_dynamic",
    "type": "CPP"
  },
  {
    "name": "T __os_signpost_pack_fill",
    "type": "CPP"
  },
  {
    "name": "T __os_signpost_pack_send",
    "type": "CPP"
  },
  {
    "name": "t ___os_trace_blob_vaddf_CF_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_rwptr_cleanup",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_zalloc",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_mmap_at",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_mmap",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_fdscandir_b",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_scandir_free_namelist",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_get_boot_uuid",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_get_boot_uuid_slow",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_memdup",
    "type": "CPP"
  },
  {
    "name": "T _os_log_set_client_type",
    "type": "CPP"
  },
  {
    "name": "T __os_log_preferences_load",
    "type": "CPP"
  },
  {
    "name": "T __os_log_preferences_compute",
    "type": "CPP"
  },
  {
    "name": "t __os_log_preference_option_ttl",
    "type": "CPP"
  },
  {
    "name": "t __os_log_preference_value",
    "type": "CPP"
  },
  {
    "name": "T _os_log_is_debug_enabled",
    "type": "CPP"
  },
  {
    "name": "T _os_log_is_enabled",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_send_sections_to_logd",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_flatten_coder",
    "type": "CPP"
  },
  {
    "name": "t -[OSLogCoder appendBytes:length:]",
    "type": "CPP"
  },
  {
    "name": "T _os_trace_debug_enabled",
    "type": "CPP"
  },
  {
    "name": "T _os_activity_get_active",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_with_buffer",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_diagnosticd_pipe",
    "type": "CPP"
  },
  {
    "name": "T __os_activity_start",
    "type": "CPP"
  },
  {
    "name": "T _os_activity_end",
    "type": "CPP"
  },
  {
    "name": "T _os_trace_set_mode",
    "type": "CPP"
  },
  {
    "name": "T __os_log_create",
    "type": "CPP"
  },
  {
    "name": "T __os_log_internal",
    "type": "CPP"
  },
  {
    "name": "t ____os_log_asl_vtable_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t -[OSLogCoder _initBlob]",
    "type": "CPP"
  },
  {
    "name": "t -[OSLogCoder setPublic]",
    "type": "CPP"
  },
  {
    "name": "t -[OSLogCoder setTruncated]",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_macho_for_each_slice",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32b40r48r56r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32b40r48r56r",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32r",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_rwptr_rdlock_wait",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_rwptr_wrunlock_slow",
    "type": "CPP"
  },
  {
    "name": "t __os_activity_stream_reflect",
    "type": "CPP"
  },
  {
    "name": "T __os_activity_stream_entry_encode",
    "type": "CPP"
  },
  {
    "name": "t ____os_activity_stream_reflect_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T __os_activity_initiate_f",
    "type": "CPP"
  },
  {
    "name": "t __os_activity_label_useraction_impl",
    "type": "CPP"
  },
  {
    "name": "T __os_activity_label_useraction",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_image_was_unloaded",
    "type": "CPP"
  },
  {
    "name": "T __libtrace_fork_child",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_is_development_build",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_atm_diagnostic_config",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_prefs_latest_version_4tests",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_mode_match_4tests",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_set_diagnostic_flags",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_get_reconnect_info",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_assumes_log",
    "type": "CPP"
  },
  {
    "name": "t __os_trace_stream",
    "type": "CPP"
  },
  {
    "name": "T _os_trace_get_type",
    "type": "CPP"
  },
  {
    "name": "T _os_trace_get_code",
    "type": "CPP"
  },
  {
    "name": "T _os_trace_get_mode",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_set_mode_for_pid",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_get_mode_for_pid",
    "type": "CPP"
  },
  {
    "name": "T _os_trace_clear_task_mode",
    "type": "CPP"
  },
  {
    "name": "T _os_trace_add_task_mode",
    "type": "CPP"
  },
  {
    "name": "T _os_trace_set_task_mode",
    "type": "CPP"
  },
  {
    "name": "T _os_trace_get_task_mode",
    "type": "CPP"
  },
  {
    "name": "T _os_trace_info_enabled",
    "type": "CPP"
  },
  {
    "name": "t -[OS_os_log dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_os_activity dealloc]",
    "type": "CPP"
  },
  {
    "name": "t _os_trace_blob_add_localtime",
    "type": "CPP"
  },
  {
    "name": "t _os_trace_blob_add_hexdump",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_flatten_masked_data",
    "type": "CPP"
  },
  {
    "name": "T _os_log_fmt_convert_trace",
    "type": "CPP"
  },
  {
    "name": "T _os_log_fmt_extract_pubdata",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_builtin_annotated",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_compose_scalar",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_builtin_bool",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_builtin_bitrate",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_builtin_bytes",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_builtin_darwin_errno",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_builtin_darwin_mode",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_builtin_darwin_signal",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_builtin_iec_bitrate",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_builtin_iec_bytes",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_builtin_mach_errno",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_builtin_trace_mode",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_builtin_time",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_builtin_timespec",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_builtin_timeval",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_builtin_uuid_t",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_spec_is_integer",
    "type": "CPP"
  },
  {
    "name": "t __os_log_fmt_builtin_scaled",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_sysprefsdir_path",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_intprefsdir_path",
    "type": "CPP"
  },
  {
    "name": "T __os_trace_prefsdir_path",
    "type": "CPP"
  },
  {
    "name": "t __os_log_preferences_merge",
    "type": "CPP"
  },
  {
    "name": "t ____os_log_preferences_load_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____os_log_preferences_load_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ____os_log_preferences_load_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "t __os_log_preferences_apply_overrides",
    "type": "CPP"
  },
  {
    "name": "t ____os_log_preferences_apply_overrides_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____os_log_stream_filter_refresh_process_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____os_log_stream_filter_refresh_process_block_invoke.57",
    "type": "CPP"
  },
  {
    "name": "t ____os_log_stream_filter_refresh_process_block_invoke.60",
    "type": "CPP"
  },
  {
    "name": "t __os_log_stream_filter_compare",
    "type": "CPP"
  },
  {
    "name": "t ____os_log_watch_for_prefchanges_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __os_log_mask_callback_impl",
    "type": "CPP"
  },
  {
    "name": "t ____os_log_stream_filter_refresh_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____os_log_stream_filter_refresh_block_invoke.65",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32r40r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32r40r",
    "type": "CPP"
  },
  {
    "name": "T _os_log_errors_count",
    "type": "CPP"
  },
  {
    "name": "T _os_log_faults_count",
    "type": "CPP"
  },
  {
    "name": "T _os_log_get_type",
    "type": "CPP"
  },
  {
    "name": "T _os_log_set_fault_callback",
    "type": "CPP"
  },
  {
    "name": "t __os_log_impl_stream",
    "type": "CPP"
  },
  {
    "name": "t __os_log_impl_redirect_to_kernel",
    "type": "CPP"
  },
  {
    "name": "t __os_log_impl_mirror_to_stderr",
    "type": "CPP"
  },
  {
    "name": "t __os_log_mirror_syslog",
    "type": "CPP"
  },
  {
    "name": "t __os_log_impl_mirror_symptom",
    "type": "CPP"
  },
  {
    "name": "T _os_signpost_set_introspection_hook_4Perf",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libunwind.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "T __Unwind_RaiseException",
    "type": "CPP"
  },
  {
    "name": "T _unw_getcontext",
    "type": "CPP"
  },
  {
    "name": "T _unw_init_local",
    "type": "CPP"
  },
  {
    "name": "t libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::setInfoBasedOnIPRegister(bool)",
    "type": "CPP"
  },
  {
    "name": "t libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::getReg(int)",
    "type": "CPP"
  },
  {
    "name": "t libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::getInfoFromCompactEncodingSection(unsigned long long, unsigned long long, unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "T _unw_step",
    "type": "CPP"
  },
  {
    "name": "t libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::step()",
    "type": "CPP"
  },
  {
    "name": "t libunwind::CompactUnwinder_x86_64<libunwind::LocalAddressSpace>::stepWithCompactEncoding(unsigned int, unsigned long long, libunwind::LocalAddressSpace&, libunwind::Registers_x86_64&)",
    "type": "CPP"
  },
  {
    "name": "t libunwind::CompactUnwinder_x86_64<libunwind::LocalAddressSpace>::stepWithCompactEncodingRBPFrame(unsigned int, unsigned long long, libunwind::LocalAddressSpace&, libunwind::Registers_x86_64&)",
    "type": "CPP"
  },
  {
    "name": "T _unw_get_proc_info",
    "type": "CPP"
  },
  {
    "name": "t libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::getInfo(unw_proc_info_t*)",
    "type": "CPP"
  },
  {
    "name": "T __Unwind_GetLanguageSpecificData",
    "type": "CPP"
  },
  {
    "name": "T __Unwind_GetRegionStart",
    "type": "CPP"
  },
  {
    "name": "T __Unwind_GetIP",
    "type": "CPP"
  },
  {
    "name": "T _unw_get_reg",
    "type": "CPP"
  },
  {
    "name": "t libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::validReg(int)",
    "type": "CPP"
  },
  {
    "name": "t _unwind_phase2",
    "type": "CPP"
  },
  {
    "name": "T __Unwind_SetGR",
    "type": "CPP"
  },
  {
    "name": "T _unw_set_reg",
    "type": "CPP"
  },
  {
    "name": "t libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::setReg(int, unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "T __Unwind_SetIP",
    "type": "CPP"
  },
  {
    "name": "T _unw_resume",
    "type": "CPP"
  },
  {
    "name": "t libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::jumpto()",
    "type": "CPP"
  },
  {
    "name": "t libunwind::Registers_x86_64::jumpto()",
    "type": "CPP"
  },
  {
    "name": "T __Unwind_DeleteException",
    "type": "CPP"
  },
  {
    "name": "t libunwind::LocalAddressSpace::getEncodedP(unsigned long long&, unsigned long long, unsigned char)",
    "type": "CPP"
  },
  {
    "name": "t libunwind::Registers_x86_64::getFloatRegister(int) const",
    "type": "CPP"
  },
  {
    "name": "t libunwind::Registers_x86_64::setFloatRegister(int, double)",
    "type": "CPP"
  },
  {
    "name": "T _unw_get_fpreg",
    "type": "CPP"
  },
  {
    "name": "T _unw_set_fpreg",
    "type": "CPP"
  },
  {
    "name": "T _unw_get_proc_name",
    "type": "CPP"
  },
  {
    "name": "T _unw_is_fpreg",
    "type": "CPP"
  },
  {
    "name": "T _unw_regname",
    "type": "CPP"
  },
  {
    "name": "T _unw_is_signal_frame",
    "type": "CPP"
  },
  {
    "name": "T _unw_iterate_dwarf_unwind_cache",
    "type": "CPP"
  },
  {
    "name": "t libunwind::DwarfFDECache<libunwind::LocalAddressSpace>::iterateCacheEntries(void (*)(unsigned long long, unsigned long long, unsigned long long, unsigned long long))",
    "type": "CPP"
  },
  {
    "name": "t __unw_add_dynamic_fde",
    "type": "CPP"
  },
  {
    "name": "t libunwind::CFI_Parser<libunwind::LocalAddressSpace>::decodeFDE(libunwind::LocalAddressSpace&, unsigned long long, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::FDE_Info*, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::CIE_Info*)",
    "type": "CPP"
  },
  {
    "name": "t libunwind::DwarfFDECache<libunwind::LocalAddressSpace>::add(unsigned long long, unsigned long long, unsigned long long, unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "t __unw_remove_dynamic_fde",
    "type": "CPP"
  },
  {
    "name": "t libunwind::DwarfFDECache<libunwind::LocalAddressSpace>::removeAllIn(unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "t libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::~UnwindCursor()",
    "type": "CPP"
  },
  {
    "name": "t libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::~UnwindCursor()",
    "type": "CPP"
  },
  {
    "name": "t libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::validFloatReg(int)",
    "type": "CPP"
  },
  {
    "name": "t libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::getFloatReg(int)",
    "type": "CPP"
  },
  {
    "name": "t libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::setFloatReg(int, double)",
    "type": "CPP"
  },
  {
    "name": "t libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::getRegisterName(int)",
    "type": "CPP"
  },
  {
    "name": "t libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::isSignalFrame()",
    "type": "CPP"
  },
  {
    "name": "t libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::getFunctionName(char*, unsigned long, unsigned long long*)",
    "type": "CPP"
  },
  {
    "name": "t libunwind::DwarfInstructions<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::stepWithDwarf(libunwind::LocalAddressSpace&, unsigned long long, unsigned long long, libunwind::Registers_x86_64&)",
    "type": "CPP"
  },
  {
    "name": "t libunwind::CFI_Parser<libunwind::LocalAddressSpace>::parseFDEInstructions(libunwind::LocalAddressSpace&, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::FDE_Info const&, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::CIE_Info const&, unsigned long long, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::PrologInfo*)",
    "type": "CPP"
  },
  {
    "name": "t libunwind::DwarfInstructions<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::getCFA(libunwind::LocalAddressSpace&, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::PrologInfo const&, libunwind::Registers_x86_64 const&)",
    "type": "CPP"
  },
  {
    "name": "t libunwind::DwarfInstructions<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::getSavedRegister(libunwind::LocalAddressSpace&, libunwind::Registers_x86_64 const&, unsigned long long, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::RegisterLocation const&)",
    "type": "CPP"
  },
  {
    "name": "t libunwind::CFI_Parser<libunwind::LocalAddressSpace>::parseInstructions(libunwind::LocalAddressSpace&, unsigned long long, unsigned long long, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::CIE_Info const&, unsigned long long, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::PrologInfoStackEntry*&, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::PrologInfo*)",
    "type": "CPP"
  },
  {
    "name": "t libunwind::DwarfInstructions<libunwind::LocalAddressSpace, libunwind::Registers_x86_64>::evaluateExpression(unsigned long long, libunwind::LocalAddressSpace&, libunwind::Registers_x86_64 const&, unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "t libunwind::CompactUnwinder_x86_64<libunwind::LocalAddressSpace>::stepWithCompactEncodingFrameless(unsigned int, unsigned long long, libunwind::LocalAddressSpace&, libunwind::Registers_x86_64&, bool)",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/system/libxpc.dylib",
    "type": "SHARED_LIB"
  },
  {
    "name": "t +[OS_xpc_connection load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_service load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_null load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_bool load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_double load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_pointer load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_date load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_data load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_string load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_uuid load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_fd load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_shmem load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_mach_send load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_array load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_dictionary load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_error load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_endpoint load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_serializer load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_pipe load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_mach_recv load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_bundle load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_service_instance load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_activity load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_file_transfer load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_int64 load]",
    "type": "CPP"
  },
  {
    "name": "t +[OS_xpc_uint64 load]",
    "type": "CPP"
  },
  {
    "name": "T __libxpc_initializer",
    "type": "CPP"
  },
  {
    "name": "t __xpc_ktrace_pid0",
    "type": "CPP"
  },
  {
    "name": "t __xpc_install_dispatch_hooks",
    "type": "CPP"
  },
  {
    "name": "T _xpc_get_class4NSXPC",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_base_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_calloc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_port_retain_send",
    "type": "CPP"
  },
  {
    "name": "t __xpc_create_bootstrap_pipe",
    "type": "CPP"
  },
  {
    "name": "T _xpc_pipe_create_from_port",
    "type": "CPP"
  },
  {
    "name": "T _xpc_pipe_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_collect_environment",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_create",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_set_string",
    "type": "CPP"
  },
  {
    "name": "T _xpc_string_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_try_strdup",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_set_value",
    "type": "CPP"
  },
  {
    "name": "T _xpc_get_type",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_insert",
    "type": "CPP"
  },
  {
    "name": "t __hash_bucket",
    "type": "CPP"
  },
  {
    "name": "t __xpc_malloc",
    "type": "CPP"
  },
  {
    "name": "T _xpc_retain",
    "type": "CPP"
  },
  {
    "name": "T _xpc_release",
    "type": "CPP"
  },
  {
    "name": "t __xpc_has_prefix",
    "type": "CPP"
  },
  {
    "name": "t __xpc_collect_images",
    "type": "CPP"
  },
  {
    "name": "T _xpc_uint64_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dyld_image_callback",
    "type": "CPP"
  },
  {
    "name": "t __xpc_has_suffix",
    "type": "CPP"
  },
  {
    "name": "t __xpc_services_unavailable",
    "type": "CPP"
  },
  {
    "name": "t __should_do_early_init",
    "type": "CPP"
  },
  {
    "name": "T _xpc_copy_entitlement_for_self",
    "type": "CPP"
  },
  {
    "name": "t __xpc_get_self_audit_token",
    "type": "CPP"
  },
  {
    "name": "t __xpc_get_globals",
    "type": "CPP"
  },
  {
    "name": "t __fetch_self_token",
    "type": "CPP"
  },
  {
    "name": "t __xpc_copy_entitlements",
    "type": "CPP"
  },
  {
    "name": "t __xpc_copy_entitlements_data",
    "type": "CPP"
  },
  {
    "name": "t __xpc_get_csops_blob",
    "type": "CPP"
  },
  {
    "name": "T _xpc_data_create",
    "type": "CPP"
  },
  {
    "name": "T _xpc_data_create_with_dispatch_data",
    "type": "CPP"
  },
  {
    "name": "T _xpc_data_get_bytes_ptr",
    "type": "CPP"
  },
  {
    "name": "t __xpc_data_map",
    "type": "CPP"
  },
  {
    "name": "T _xpc_data_get_length",
    "type": "CPP"
  },
  {
    "name": "T _xpc_create_from_plist",
    "type": "CPP"
  },
  {
    "name": "t __xpc_plist_parse_xml",
    "type": "CPP"
  },
  {
    "name": "t __xpc_xml_lex",
    "type": "CPP"
  },
  {
    "name": "t __xpc_xml_lexer_read_tag",
    "type": "CPP"
  },
  {
    "name": "t __xpc_xml_lexer_process_tag",
    "type": "CPP"
  },
  {
    "name": "t __xpc_xml_parser_push",
    "type": "CPP"
  },
  {
    "name": "t __xpc_xml_parser_string_terminate",
    "type": "CPP"
  },
  {
    "name": "t __xpc_try_malloc",
    "type": "CPP"
  },
  {
    "name": "T _xpc_string_create_no_copy",
    "type": "CPP"
  },
  {
    "name": "T _xpc_bool_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_xml_parser_stack_finish_leaf",
    "type": "CPP"
  },
  {
    "name": "t __xpc_xml_parser_pop",
    "type": "CPP"
  },
  {
    "name": "T _xpc_string_get_string_ptr",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_object dealloc]",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dispose",
    "type": "CPP"
  },
  {
    "name": "t __xpc_string_dispose",
    "type": "CPP"
  },
  {
    "name": "t __xpc_base_dispose",
    "type": "CPP"
  },
  {
    "name": "t __xpc_memcmp",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_append_value",
    "type": "CPP"
  },
  {
    "name": "t __xpc_array_insert",
    "type": "CPP"
  },
  {
    "name": "t __xpc_data_dispose",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_get_value",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_look_up",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_look_up_table",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_dispose",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_node_free",
    "type": "CPP"
  },
  {
    "name": "t __xpc_array_dispose",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uncork_domain",
    "type": "CPP"
  },
  {
    "name": "T _xpc_bundle_create",
    "type": "CPP"
  },
  {
    "name": "T _xpc_bundle_create_from_origin",
    "type": "CPP"
  },
  {
    "name": "t __xpc_strdup",
    "type": "CPP"
  },
  {
    "name": "T _xpc_bundle_get_property",
    "type": "CPP"
  },
  {
    "name": "T _xpc_bundle_resolve",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_bundle_resolve_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __xpc_realpath",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_resolve_root",
    "type": "CPP"
  },
  {
    "name": "t __resolve_and_stat_path",
    "type": "CPP"
  },
  {
    "name": "t __xpc_realpath_fd",
    "type": "CPP"
  },
  {
    "name": "t __xpc_asprintf",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_resolve_executable",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_get_string",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_look_up_fast",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_resolve_services",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_dispose",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_set_uint64",
    "type": "CPP"
  },
  {
    "name": "t __xpc_domain_routine",
    "type": "CPP"
  },
  {
    "name": "t __xpc_interface_routine",
    "type": "CPP"
  },
  {
    "name": "T _xpc_pipe_routine_with_flags",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pipe_check_in_once",
    "type": "CPP"
  },
  {
    "name": "T _xpc_pipe_routine",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pipe_pack_message",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_create",
    "type": "CPP"
  },
  {
    "name": "T __xpc_dictionary_extract_reply_port",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_pack",
    "type": "CPP"
  },
  {
    "name": "t __xpc_ktrace_pid1",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_apply",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_apply_f",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_apply_node_f",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_apply_f_apply",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_dictionary_apply",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mmap_anon",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_append",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_get_graph_length",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_serialize_apply",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uint64_serialize",
    "type": "CPP"
  },
  {
    "name": "T _xpc_uint64_get_value",
    "type": "CPP"
  },
  {
    "name": "t __xpc_string_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_get_graph_ptr",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_extract_importance_voucher",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_get_transaction",
    "type": "CPP"
  },
  {
    "name": "t __xpc_ktrace_pid2",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_get_mach_message_header",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_get_mach_message_length",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_reset_mach_message_header",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_clear_sent_descriptors",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_cleanup",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_reap_combined_send_receive",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_destroy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_dispose",
    "type": "CPP"
  },
  {
    "name": "T _xpc_receive_mach_msg",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_received_message_init",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_msg_get_audit_token",
    "type": "CPP"
  },
  {
    "name": "T __xpc_payload_create_from_mach_msg",
    "type": "CPP"
  },
  {
    "name": "t __xpc_payload_alloc",
    "type": "CPP"
  },
  {
    "name": "t _xpc_graph_unpack",
    "type": "CPP"
  },
  {
    "name": "t __xpc_graph_unpack_impl",
    "type": "CPP"
  },
  {
    "name": "t _xpc_payload_get_contiguous_bytes",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_create_from_received_message",
    "type": "CPP"
  },
  {
    "name": "t __xpc_graph_deserializer_read",
    "type": "CPP"
  },
  {
    "name": "t __xpc_graph_deserializer_get_payload",
    "type": "CPP"
  },
  {
    "name": "t _xpc_payload_get_transport",
    "type": "CPP"
  },
  {
    "name": "t _xpc_mach_payload_ool_port_count",
    "type": "CPP"
  },
  {
    "name": "t __xpc_graph_deserializer_init_clone",
    "type": "CPP"
  },
  {
    "name": "t __xpc_wire_length_from_wire_id",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_wire_length",
    "type": "CPP"
  },
  {
    "name": "t __xpc_wire_length",
    "type": "CPP"
  },
  {
    "name": "t __xpc_graph_deserializer_move",
    "type": "CPP"
  },
  {
    "name": "t __xpc_received_message_move",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_get_int64",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_look_up_wire",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_get_audit_token",
    "type": "CPP"
  },
  {
    "name": "t __xpc_received_message_get_audit_token",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_payload dealloc]",
    "type": "CPP"
  },
  {
    "name": "t __xpc_payload_dispose",
    "type": "CPP"
  },
  {
    "name": "t __xpc_received_message_destroy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_message_request_destroy",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_get_count",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_get_count",
    "type": "CPP"
  },
  {
    "name": "T _xpc_copy_entitlements_for_self",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_get_bool",
    "type": "CPP"
  },
  {
    "name": "T _xpc_bool_get_value",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_set_string",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_set_value",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_set_bool",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_set_bool",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_look_up2",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_look_up3",
    "type": "CPP"
  },
  {
    "name": "t __bootstrap_create_request",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_set_mach_send",
    "type": "CPP"
  },
  {
    "name": "T _xpc_mach_send_create",
    "type": "CPP"
  },
  {
    "name": "T _xpc_mach_send_create_with_disposition",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_set_int64",
    "type": "CPP"
  },
  {
    "name": "T _xpc_int64_create",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_set_uuid",
    "type": "CPP"
  },
  {
    "name": "T _xpc_uuid_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bootstrap_routine_authenticate",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uuid_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_int64_serialize",
    "type": "CPP"
  },
  {
    "name": "T _xpc_int64_get_value",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_send_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_append_port",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_deserialize_into",
    "type": "CPP"
  },
  {
    "name": "t __xpc_graph_deserializer_read_string",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_unpack_value",
    "type": "CPP"
  },
  {
    "name": "t __xpc_graph_deserializer_get_depth",
    "type": "CPP"
  },
  {
    "name": "t __xpc_class_id_valid",
    "type": "CPP"
  },
  {
    "name": "t __xpc_deserialize_from_wire_id",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uint64_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_graph_deserializer_restore_depth",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_send_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_graph_deserializer_read_port",
    "type": "CPP"
  },
  {
    "name": "t _xpc_mach_payload_extract_ool_send_right",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_payload_extract_ool_port",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_get_uint64",
    "type": "CPP"
  },
  {
    "name": "T _xpc_mach_send_get_right",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_send_dispose",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_port_release",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uuid_dispose",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_port_allocate",
    "type": "CPP"
  },
  {
    "name": "T _xpc_bundle_create_main",
    "type": "CPP"
  },
  {
    "name": "T _xpc_bundle_get_info_dictionary",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_get_dictionary",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_set_data",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_check_in_with_ports",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_check_in",
    "type": "CPP"
  },
  {
    "name": "t __xpc_data_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_data_serialize_inline_apply",
    "type": "CPP"
  },
  {
    "name": "t __skip_id_and_value",
    "type": "CPP"
  },
  {
    "name": "t __xpc_class_id_from_wire_valid",
    "type": "CPP"
  },
  {
    "name": "t __xpc_graph_deserializer_skip_value",
    "type": "CPP"
  },
  {
    "name": "t __xpc_data_wire_length",
    "type": "CPP"
  },
  {
    "name": "t __xpc_int64_wire_length",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_get_data",
    "type": "CPP"
  },
  {
    "name": "t __xpc_data_get_wire_value",
    "type": "CPP"
  },
  {
    "name": "t __xpc_graph_deserializer_get_transport",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_apply_f",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_array_apply",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bool_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_array_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_string_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_string_get_wire_value",
    "type": "CPP"
  },
  {
    "name": "t __xpc_data_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_vm_map_memory_entry",
    "type": "CPP"
  },
  {
    "name": "t __xpc_int64_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pipe_dispose",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_port_close_recv",
    "type": "CPP"
  },
  {
    "name": "T __xpc_runtime_is_app_sandboxed",
    "type": "CPP"
  },
  {
    "name": "t __is_containerized_once",
    "type": "CPP"
  },
  {
    "name": "T _xpc_null_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uuid_wire_length",
    "type": "CPP"
  },
  {
    "name": "t __xpc_string_wire_length",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_apply",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_unpack_value_and_vend",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uuid_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_apply_apply",
    "type": "CPP"
  },
  {
    "name": "T _vproc_swap_string",
    "type": "CPP"
  },
  {
    "name": "T _vproc_swap_complex",
    "type": "CPP"
  },
  {
    "name": "t __vproc_create_request",
    "type": "CPP"
  },
  {
    "name": "t __xpc_vproc_routine",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_get_type",
    "type": "CPP"
  },
  {
    "name": "T _vproc_swap_integer",
    "type": "CPP"
  },
  {
    "name": "t __xpc_int64_get_wire_value",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_create_mach_service",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_create",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_set_event_handler",
    "type": "CPP"
  },
  {
    "name": "t __xpc_Block_copy_impl",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_activate",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_activate_if_needed",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_init",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_bootstrap_look_up_slow",
    "type": "CPP"
  },
  {
    "name": "t __xpc_look_up_endpoint",
    "type": "CPP"
  },
  {
    "name": "t __xpc_domain_routine_authenticate",
    "type": "CPP"
  },
  {
    "name": "T __xpc_dictionary_extract_mach_send",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_send_extract_right",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_port_setup_port_destroyed",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_wants_sigterm",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_send_message_with_reply_sync",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_pack_message",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_get_remote_connection",
    "type": "CPP"
  },
  {
    "name": "t __xpc_null_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_get_dispatch_mach_msg",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_handle_event_inline",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_handle_sent_event",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_release_message",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_unpack_message",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_mach_event",
    "type": "CPP"
  },
  {
    "name": "t __xpc_received_message_set_connection",
    "type": "CPP"
  },
  {
    "name": "t __xpc_retain_with_resurrect",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_get_platform",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_set_creds",
    "type": "CPP"
  },
  {
    "name": "t __xpc_received_message_get_request",
    "type": "CPP"
  },
  {
    "name": "t __xpc_message_request_extract_voucher",
    "type": "CPP"
  },
  {
    "name": "t __xpc_graph_deserializer_enter_container",
    "type": "CPP"
  },
  {
    "name": "t __xpc_array_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_null_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_deserialize",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_apply",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_get_value",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_dup_fd",
    "type": "CPP"
  },
  {
    "name": "T _xpc_copy_entitlement_for_token",
    "type": "CPP"
  },
  {
    "name": "T _xpc_copy_entitlements_for_pid",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_set_target_queue",
    "type": "CPP"
  },
  {
    "name": "T _xpc_transaction_begin",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_send_message",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_enqueue",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_send_barrier",
    "type": "CPP"
  },
  {
    "name": "T _xpc_transaction_end",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_resume",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_send_message_with_reply",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_port_guard",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_reply_queue_from_msg_context",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uint64_get_wire_value",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uint64_wire_length",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bool_wire_length",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_connection release]",
    "type": "CPP"
  },
  {
    "name": "T _xpc_date_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_date_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bool_get_wire_value",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bool_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_date_deserialize",
    "type": "CPP"
  },
  {
    "name": "T _xpc_uuid_get_bytes",
    "type": "CPP"
  },
  {
    "name": "T _xpc_date_get_value",
    "type": "CPP"
  },
  {
    "name": "t __xpc_date_dispose",
    "type": "CPP"
  },
  {
    "name": "t __xpc_shmem_deserialize",
    "type": "CPP"
  },
  {
    "name": "T _xpc_shmem_map",
    "type": "CPP"
  },
  {
    "name": "t __xpc_shmem_dispose",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_set_target_uid",
    "type": "CPP"
  },
  {
    "name": "T _xpc_endpoint_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_copy_listener_port",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_port_try_retain_send",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_set_uint64",
    "type": "CPP"
  },
  {
    "name": "t __xpc_endpoint_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_array_wire_length",
    "type": "CPP"
  },
  {
    "name": "t __xpc_endpoint_dispose",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_suspend",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_call_event_handler",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_get_pid",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_port_setup_no_more_senders",
    "type": "CPP"
  },
  {
    "name": "t __xpc_double_wire_length",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_get_double",
    "type": "CPP"
  },
  {
    "name": "t __xpc_double_get_wire_value",
    "type": "CPP"
  },
  {
    "name": "T _xpc_copy_description",
    "type": "CPP"
  },
  {
    "name": "T _xpc_copy_debug_description",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_create_for_description",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_debug_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_pad",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_desc_apply",
    "type": "CPP"
  },
  {
    "name": "t __xpc_object_pad",
    "type": "CPP"
  },
  {
    "name": "t __xpc_null_debug_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_string_debug_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bool_debug_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_unpad",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_free",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_get_name",
    "type": "CPP"
  },
  {
    "name": "t __xpc_message_request_get_transaction",
    "type": "CPP"
  },
  {
    "name": "t __xpc_message_request_get_voucher",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_connection _xref_dispose]",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_last_xref_cancel",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_handle_disconnect_event",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_dispose",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_look_up",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bootstrap_services",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_handle_async_reply",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_msg_get_context",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_call_reply_async",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_invoke_reply",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_reply_callout",
    "type": "CPP"
  },
  {
    "name": "T _xpc_double_create",
    "type": "CPP"
  },
  {
    "name": "T _xpc_create_with_format",
    "type": "CPP"
  },
  {
    "name": "t __create_with_format_and_arguments",
    "type": "CPP"
  },
  {
    "name": "t ____create_with_format_and_arguments_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____create_with_format_and_arguments_block_invoke.56",
    "type": "CPP"
  },
  {
    "name": "t ____create_with_format_and_arguments_block_invoke.50",
    "type": "CPP"
  },
  {
    "name": "t ____create_with_format_and_arguments_block_invoke.9",
    "type": "CPP"
  },
  {
    "name": "t ____create_with_format_and_arguments_block_invoke.5",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_set_oneshot_instance",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_set_instance",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_set_bootstrap",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_set_bootstrap_impl",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_routine",
    "type": "CPP"
  },
  {
    "name": "T _xpc_activity_register",
    "type": "CPP"
  },
  {
    "name": "t ____activity_log_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_init",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_activity_init_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_is_unmanaged",
    "type": "CPP"
  },
  {
    "name": "T _xpc_set_event_stream_handler",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_create_listener",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_set_event_channel",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_set_context",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_set_finalizer_f",
    "type": "CPP"
  },
  {
    "name": "T __xpc_connection_set_event_handler_f",
    "type": "CPP"
  },
  {
    "name": "t __xpc_is_being_debugged",
    "type": "CPP"
  },
  {
    "name": "t __xpc_is_being_debugged_once",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pid_is_being_debugged",
    "type": "CPP"
  },
  {
    "name": "t __xpc_proc_bsdinfo",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activate_endpoint",
    "type": "CPP"
  },
  {
    "name": "t __xpc_domain_routine_activate",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_recv_deserialize",
    "type": "CPP"
  },
  {
    "name": "t _xpc_mach_payload_extract_ool_receive_right",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_extract_mach_recv",
    "type": "CPP"
  },
  {
    "name": "T _xpc_mach_recv_extract_right",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_recv_dispose",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_port_set_queue_limit",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_port_make_send",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_activity_register_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_find_registration",
    "type": "CPP"
  },
  {
    "name": "T _xpc_activity_set_criteria",
    "type": "CPP"
  },
  {
    "name": "T _xpc_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_copy_apply",
    "type": "CPP"
  },
  {
    "name": "t __xpc_int64_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_string_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_normalize_critiera",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_normalize_integer",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bool_copy",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_activity_set_criteria_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_activity_set_criteria_block_invoke.64",
    "type": "CPP"
  },
  {
    "name": "T _xpc_set_event",
    "type": "CPP"
  },
  {
    "name": "T _xpc_set_event_with_flags",
    "type": "CPP"
  },
  {
    "name": "t __xpc_event_routine",
    "type": "CPP"
  },
  {
    "name": "t _xpc_activity_set_state_with_completion_status",
    "type": "CPP"
  },
  {
    "name": "t __xpc_events_listener_event",
    "type": "CPP"
  },
  {
    "name": "t __xpc_endpoint_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_events_peer_event",
    "type": "CPP"
  },
  {
    "name": "t ___XPC_CONNECTION_EVENT_HANDLER_CALLOUT__",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_activity_init_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_dispatch",
    "type": "CPP"
  },
  {
    "name": "T _os_transaction_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_os_transaction_alloc",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_activity_dispatch_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32r40r",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_create_from_endpoint",
    "type": "CPP"
  },
  {
    "name": "t __xpc_endpoint_copy_listener_port",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32r40r",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_activity_set_state_with_completion_status_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_activity_set_state_with_completion_status_block_invoke_3",
    "type": "CPP"
  },
  {
    "name": "T _xpc_activity_set_state",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_set_eligible",
    "type": "CPP"
  },
  {
    "name": "t ___XPC_ACTIVITY_CALLING_HANDLER__",
    "type": "CPP"
  },
  {
    "name": "T _xpc_activity_get_state",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_register2",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bootstrap_routine",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_parent",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_send_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_recv_desc",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_set_double",
    "type": "CPP"
  },
  {
    "name": "t __xpc_double_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_double_dispose",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_get_array",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_cancel",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_port_cleanup_right",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_set_privileged",
    "type": "CPP"
  },
  {
    "name": "t -[OS_os_transaction dealloc]",
    "type": "CPP"
  },
  {
    "name": "t __xpc_os_transaction_dispose",
    "type": "CPP"
  },
  {
    "name": "T _xpc_mach_send_copy_right",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_check_in",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_check_in3",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bootstrap_routine_check_in",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_get_uuid",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_end_running",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_set_data",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_get_data",
    "type": "CPP"
  },
  {
    "name": "T _xpc_init_services",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_set_uuid",
    "type": "CPP"
  },
  {
    "name": "T _xpc_string_get_length",
    "type": "CPP"
  },
  {
    "name": "T _xpc_copy_clean_description",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_desc_flags",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uint64_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_string_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uuid_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bool_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_endpoint_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_base_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uint64_dispose",
    "type": "CPP"
  },
  {
    "name": "t __xpc_received_message_get_connection",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_create_reply",
    "type": "CPP"
  },
  {
    "name": "t __xpc_received_message_expects_reply",
    "type": "CPP"
  },
  {
    "name": "t __xpc_received_message_extract_request",
    "type": "CPP"
  },
  {
    "name": "t __xpc_message_request_get_transport",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_message_request_extract_reply_port",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_set_transaction",
    "type": "CPP"
  },
  {
    "name": "t __xpc_message_request_set_transaction",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_pass2mig",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_pass2mig_once",
    "type": "CPP"
  },
  {
    "name": "t _notify_server",
    "type": "CPP"
  },
  {
    "name": "t __Xmach_notify_port_destroyed",
    "type": "CPP"
  },
  {
    "name": "t _do_mach_notify_port_destroyed",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_port_get_context",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_kill",
    "type": "CPP"
  },
  {
    "name": "t __xpc_int64_dispose",
    "type": "CPP"
  },
  {
    "name": "t __xpc_endpoint_get_listener_port",
    "type": "CPP"
  },
  {
    "name": "t __xpc_fd_deserialize",
    "type": "CPP"
  },
  {
    "name": "T _xpc_fd_dup",
    "type": "CPP"
  },
  {
    "name": "t __xpc_fileport_makefd",
    "type": "CPP"
  },
  {
    "name": "t __xpc_fd_dispose",
    "type": "CPP"
  },
  {
    "name": "T _xpc_activity_unregister",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_unregister",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_dispose",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_activity_set_state2_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __Xmach_notify_no_senders",
    "type": "CPP"
  },
  {
    "name": "t _do_mach_notify_no_senders",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32r",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_activity_unregister_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_remove_peer",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_remove_peer_impl",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uint64_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_array_copy",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_get_pointer",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_set_pointer",
    "type": "CPP"
  },
  {
    "name": "T _xpc_pointer_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_plist_swap_int",
    "type": "CPP"
  },
  {
    "name": "t __xpc_plist_offset_of_object",
    "type": "CPP"
  },
  {
    "name": "t __xpc_plist_collapse_stack",
    "type": "CPP"
  },
  {
    "name": "t __xpc_plist_unwind_stack",
    "type": "CPP"
  },
  {
    "name": "T _xpc_pointer_get_value",
    "type": "CPP"
  },
  {
    "name": "T _xpc_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_equal_apply",
    "type": "CPP"
  },
  {
    "name": "t __xpc_data_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uint64_equal",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_get_string",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_get_uint64",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_set_pointer",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_get_pointer",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pointer_dispose",
    "type": "CPP"
  },
  {
    "name": "t __xpc_data_debug_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_data_print_bytes_string",
    "type": "CPP"
  },
  {
    "name": "t __xpc_int64_debug_desc",
    "type": "CPP"
  },
  {
    "name": "T _xpc_pipe_simpleroutine",
    "type": "CPP"
  },
  {
    "name": "t __xpc_send_serializer",
    "type": "CPP"
  },
  {
    "name": "t __Xmach_notify_send_once",
    "type": "CPP"
  },
  {
    "name": "t _do_mach_notify_send_once",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_set_state_fakereply",
    "type": "CPP"
  },
  {
    "name": "T _xpc_fd_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_fileport_makeport",
    "type": "CPP"
  },
  {
    "name": "t __xpc_fd_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_double_deserialize",
    "type": "CPP"
  },
  {
    "name": "T _xpc_double_get_value",
    "type": "CPP"
  },
  {
    "name": "T _xpc_transactions_enable",
    "type": "CPP"
  },
  {
    "name": "T _xpc_copy_event",
    "type": "CPP"
  },
  {
    "name": "T _xpc_activity_copy_criteria",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_activity_copy_criteria_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _xpc_generate_audit_token",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pointer_copy",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_set_non_launching",
    "type": "CPP"
  },
  {
    "name": "T _os_transaction_copy_description",
    "type": "CPP"
  },
  {
    "name": "T _xpc_activity_should_defer",
    "type": "CPP"
  },
  {
    "name": "T _xpc_shmem_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_shmem_create_with_prot",
    "type": "CPP"
  },
  {
    "name": "t __xpc_shmem_serialize",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_copy_mach_send",
    "type": "CPP"
  },
  {
    "name": "T _xpc_track_activity",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_check_in2",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_get_context",
    "type": "CPP"
  },
  {
    "name": "T _xpc_set_idle_handler",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_get_audit_token",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bool_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_int64_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_string_equal",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_activity_set_criteria_block_invoke.66",
    "type": "CPP"
  },
  {
    "name": "t __xpc_double_copy",
    "type": "CPP"
  },
  {
    "name": "T _xpc_activity_add_eligibility_changed_handler",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_activity_add_eligibility_changed_handler_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32b",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_activity_add_eligibility_changed_handler_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32b",
    "type": "CPP"
  },
  {
    "name": "T _xpc_activity_copy_identifier",
    "type": "CPP"
  },
  {
    "name": "T _xpc_activity_remove_eligibility_changed_handler",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_activity_remove_eligibility_changed_handler_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __xpc_double_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_array_debug_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_realloc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_int64_desc",
    "type": "CPP"
  },
  {
    "name": "T _xpc_extension_type_init",
    "type": "CPP"
  },
  {
    "name": "T _xpc_install_remote_hooks",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_uint64 retain]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_uint64 release]",
    "type": "CPP"
  },
  {
    "name": "T __xpc_dictionary_get_reply_msg_id",
    "type": "CPP"
  },
  {
    "name": "T __xpc_dictionary_extract_reply_msg_id",
    "type": "CPP"
  },
  {
    "name": "T _xpc_make_serialization_with_ool",
    "type": "CPP"
  },
  {
    "name": "t __xpc_make_serialization_with_ool_impl",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_create_for_data",
    "type": "CPP"
  },
  {
    "name": "T _xpc_make_serialization",
    "type": "CPP"
  },
  {
    "name": "t __contains_ool",
    "type": "CPP"
  },
  {
    "name": "T _xpc_create_from_serialization",
    "type": "CPP"
  },
  {
    "name": "t __xpc_create_from_serialization_with_ool_impl",
    "type": "CPP"
  },
  {
    "name": "t __xpc_payload_create_from_data",
    "type": "CPP"
  },
  {
    "name": "t _xpc_graph_unpack_with_ool",
    "type": "CPP"
  },
  {
    "name": "T _xpc_receive_remote_msg",
    "type": "CPP"
  },
  {
    "name": "t __xpc_remote_received_message_init",
    "type": "CPP"
  },
  {
    "name": "t __xpc_graph_deserializer_set_ool_callback",
    "type": "CPP"
  },
  {
    "name": "t __xpc_graph_deserializer_get_ool_callback",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_set_fd",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_get_asid",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_get_euid",
    "type": "CPP"
  },
  {
    "name": "t ____uncork_domain_impl_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _xpc_add_bundle",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uuid_copy",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_get_uuid",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_set_legacy",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_activity_notify_eligibility_changed_handlers_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_send_notification",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uint64_debug_desc",
    "type": "CPP"
  },
  {
    "name": "T __availability_version_check",
    "type": "CPP"
  },
  {
    "name": "T _os_system_version_get_current_version",
    "type": "CPP"
  },
  {
    "name": "t _populate_current_version",
    "type": "CPP"
  },
  {
    "name": "T _xpc_transaction_exit_clean",
    "type": "CPP"
  },
  {
    "name": "T _xpc_main",
    "type": "CPP"
  },
  {
    "name": "t __xpc_copy_xpcservice_dictionary",
    "type": "CPP"
  },
  {
    "name": "t __fetch_xpcservice_info",
    "type": "CPP"
  },
  {
    "name": "t __xpc_copy_xpcservice_identifier",
    "type": "CPP"
  },
  {
    "name": "t __setup_listener",
    "type": "CPP"
  },
  {
    "name": "t __xpc_objc_main",
    "type": "CPP"
  },
  {
    "name": "t __get_autorelease_pool",
    "type": "CPP"
  },
  {
    "name": "t __xpc_objc_main.cold.4",
    "type": "CPP"
  },
  {
    "name": "t __xpc_main_activate_listener",
    "type": "CPP"
  },
  {
    "name": "t __xpc_main_listener_event",
    "type": "CPP"
  },
  {
    "name": "T _xpc_activity_copy_dispatch_queue",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_object description]",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_desc",
    "type": "CPP"
  },
  {
    "name": "T _xpc_copy_bootstrap",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_create_bootstrap_copy",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_copy_entitlement_value",
    "type": "CPP"
  },
  {
    "name": "T _xpc_strerror",
    "type": "CPP"
  },
  {
    "name": "T _xpc_atfork_prepare",
    "type": "CPP"
  },
  {
    "name": "T _xpc_atfork_parent",
    "type": "CPP"
  },
  {
    "name": "T _launch_extension_check_in_live_4UIKit",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uuid_debug_desc",
    "type": "CPP"
  },
  {
    "name": "T _launch_copy_extension_properties_for_pid",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_copy_attrs",
    "type": "CPP"
  },
  {
    "name": "T __vproc_transaction_try_exit",
    "type": "CPP"
  },
  {
    "name": "T _xpc_transaction_interrupt_clean_exit",
    "type": "CPP"
  },
  {
    "name": "t __service_create_request",
    "type": "CPP"
  },
  {
    "name": "t __translate_attrs",
    "type": "CPP"
  },
  {
    "name": "T _xpc_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_array_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uint64_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_array_equal",
    "type": "CPP"
  },
  {
    "name": "t _state2str_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_get_connection",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_unprivileged",
    "type": "CPP"
  },
  {
    "name": "T _vproc_transaction_begin",
    "type": "CPP"
  },
  {
    "name": "T _vproc_transaction_end",
    "type": "CPP"
  },
  {
    "name": "t __xpc_plist_read_int",
    "type": "CPP"
  },
  {
    "name": "T _xpc_string_create_with_format",
    "type": "CPP"
  },
  {
    "name": "T _xpc_create_reply_with_format",
    "type": "CPP"
  },
  {
    "name": "t _xpc_format_specifiers_lookup",
    "type": "CPP"
  },
  {
    "name": "T __vproc_transaction_count",
    "type": "CPP"
  },
  {
    "name": "T _xpc_bundle_copy_resource_path",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_new_string",
    "type": "CPP"
  },
  {
    "name": "T _launch_msg",
    "type": "CPP"
  },
  {
    "name": "t __xpc_launch_routine",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_set_15663819_hack",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_dict_lookup",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_array_get_count",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_array_get_index",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_get_fd",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_get_machport",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_recv_get_name",
    "type": "CPP"
  },
  {
    "name": "T _launch_activate_socket",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_dup_fd",
    "type": "CPP"
  },
  {
    "name": "T _xpc_endpoint_create_bs_named",
    "type": "CPP"
  },
  {
    "name": "t __xpc_endpoint_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_endpoint_hash",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_set_bs_type",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_get_bs_type",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_copy_bundle_id",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_expects_reply",
    "type": "CPP"
  },
  {
    "name": "t __xpc_message_request_expects_reply",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_get_double",
    "type": "CPP"
  },
  {
    "name": "t __xpc_endpoint_equal",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_handoff_reply",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_message_request_handoff_reply",
    "type": "CPP"
  },
  {
    "name": "T _xpc_is_kind_of_xpc_object4NSXPC",
    "type": "CPP"
  },
  {
    "name": "t _populate_current_ios_support_version",
    "type": "CPP"
  },
  {
    "name": "T __vproc_transactions_enable",
    "type": "CPP"
  },
  {
    "name": "T _xpc_bundle_copy_info_dictionary",
    "type": "CPP"
  },
  {
    "name": "T _xpc_bundle_get_path",
    "type": "CPP"
  },
  {
    "name": "T _xpc_bundle_get_executable_path",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_int64 release]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_int64 retain]",
    "type": "CPP"
  },
  {
    "name": "T _xpc_event_publisher_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_event_publisher_alloc",
    "type": "CPP"
  },
  {
    "name": "T _xpc_event_publisher_set_handler",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_event_publisher_set_handler_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _xpc_event_publisher_set_error_handler",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_event_publisher_set_error_handler_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __xpc_data_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_date_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_munmap",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_set_state2",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_alloc",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_dict_insert",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_get_integer",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_free",
    "type": "CPP"
  },
  {
    "name": "T _xpc_data_get_bytes",
    "type": "CPP"
  },
  {
    "name": "t __xpc_null_wire_length",
    "type": "CPP"
  },
  {
    "name": "T _xpc_date_create_absolute",
    "type": "CPP"
  },
  {
    "name": "T _xpc_date_get_value_absolute",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_get_egid",
    "type": "CPP"
  },
  {
    "name": "t __xpc_double_debug_desc",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_register",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_hash_apply",
    "type": "CPP"
  },
  {
    "name": "t __xpc_data_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_data_hash_apply",
    "type": "CPP"
  },
  {
    "name": "t __xpc_null_copy",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_create_connection",
    "type": "CPP"
  },
  {
    "name": "T _xpc_date_create_from_current",
    "type": "CPP"
  },
  {
    "name": "t __xpc_date_create_from_current_once",
    "type": "CPP"
  },
  {
    "name": "T _xpc_coalition_copy_info",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_get_int64",
    "type": "CPP"
  },
  {
    "name": "t -[OS_os_transaction description]",
    "type": "CPP"
  },
  {
    "name": "t ____create_with_format_and_arguments_block_invoke.12",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uuid_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uuid_equal",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_is_extension",
    "type": "CPP"
  },
  {
    "name": "T _launch_copy_properties_for_pid_4assertiond",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pipe_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_retain",
    "type": "CPP"
  },
  {
    "name": "t __xpc_release",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_set_event_handler2",
    "type": "CPP"
  },
  {
    "name": "T __xpc_dictionary_set_remote_connection",
    "type": "CPP"
  },
  {
    "name": "T __vproc_transaction_begin",
    "type": "CPP"
  },
  {
    "name": "T __vproc_transaction_end",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pipe_simpleroutine",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_set_criteria",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_activity_unregister",
    "type": "CPP"
  },
  {
    "name": "t __xpc_neuter_potential_reentrancy",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_plist_parse_string_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_copy_mach_send",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_set_int64",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_get_errno",
    "type": "CPP"
  },
  {
    "name": "T __spawn_via_launchd",
    "type": "CPP"
  },
  {
    "name": "T __xpc_spawnattr_pack_string",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_set_mach_recv",
    "type": "CPP"
  },
  {
    "name": "T _xpc_mach_recv_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_recv_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_message_request_init",
    "type": "CPP"
  },
  {
    "name": "t __xpc_message_request_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_message_request_handoff_reply_f",
    "type": "CPP"
  },
  {
    "name": "t __xpc_remote_message_request_get_reply_msg_id",
    "type": "CPP"
  },
  {
    "name": "t __xpc_remote_message_request_set_reply_msg_id",
    "type": "CPP"
  },
  {
    "name": "t _xpc_mach_payload_extract_ool_send_once_right",
    "type": "CPP"
  },
  {
    "name": "t __xpc_get_extension_type",
    "type": "CPP"
  },
  {
    "name": "t __xpc_extension_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_extension_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_extension_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_extension_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_extension_debug_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_extension_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_extension_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_extension_wire_length",
    "type": "CPP"
  },
  {
    "name": "T __system_version_copy_string_sysctl",
    "type": "CPP"
  },
  {
    "name": "T __system_ios_support_version_copy_string_sysctl",
    "type": "CPP"
  },
  {
    "name": "T __system_version_copy_string_plist",
    "type": "CPP"
  },
  {
    "name": "T __system_version_parse_string",
    "type": "CPP"
  },
  {
    "name": "T _os_system_version_sim_get_current_host_version",
    "type": "CPP"
  },
  {
    "name": "t _populate_current_host_version",
    "type": "CPP"
  },
  {
    "name": "t __copy_plist_from_fd",
    "type": "CPP"
  },
  {
    "name": "t __xpc_copy_secure_plist",
    "type": "CPP"
  },
  {
    "name": "t __xpc_event_routine_async",
    "type": "CPP"
  },
  {
    "name": "t __xpc_interface_routine_async",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_routine_async",
    "type": "CPP"
  },
  {
    "name": "t __xpc_domain_routine_async",
    "type": "CPP"
  },
  {
    "name": "t __xpc_control_routine",
    "type": "CPP"
  },
  {
    "name": "t ___XPC_IS_CRASHING_AFTER_AN_ATTEMPT_TO_CREATE_A_PROHIBITED_DOMAIN__",
    "type": "CPP"
  },
  {
    "name": "T _launch_get_service_enabled",
    "type": "CPP"
  },
  {
    "name": "t __launch_get_service_enabled_impl",
    "type": "CPP"
  },
  {
    "name": "T _launch_get_system_service_enabled",
    "type": "CPP"
  },
  {
    "name": "T _launch_set_service_enabled",
    "type": "CPP"
  },
  {
    "name": "t __launch_set_service_enabled_impl",
    "type": "CPP"
  },
  {
    "name": "T _launch_set_system_service_enabled",
    "type": "CPP"
  },
  {
    "name": "T _launch_enable_directory",
    "type": "CPP"
  },
  {
    "name": "t __launch_enable_or_disable_directory",
    "type": "CPP"
  },
  {
    "name": "T _launch_disable_directory",
    "type": "CPP"
  },
  {
    "name": "T _launch_create_persona",
    "type": "CPP"
  },
  {
    "name": "T _launch_destroy_persona",
    "type": "CPP"
  },
  {
    "name": "T _launch_path_for_user_service_4coresim",
    "type": "CPP"
  },
  {
    "name": "t __copy_attrs",
    "type": "CPP"
  },
  {
    "name": "T _launch_version_for_user_service_4coresim",
    "type": "CPP"
  },
  {
    "name": "T _launch_bootout_user_service_4coresim",
    "type": "CPP"
  },
  {
    "name": "t __print_disable_error",
    "type": "CPP"
  },
  {
    "name": "t __print_enable_error",
    "type": "CPP"
  },
  {
    "name": "t __xpc_type_from_id",
    "type": "CPP"
  },
  {
    "name": "t __xpc_base_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_base_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_base_debug_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_base_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_base_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_base_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_base_wire_length",
    "type": "CPP"
  },
  {
    "name": "T _xpc_type_get_name",
    "type": "CPP"
  },
  {
    "name": "T _xpc_copy_short_description",
    "type": "CPP"
  },
  {
    "name": "T _xpc_create_from_serialization_with_ool",
    "type": "CPP"
  },
  {
    "name": "T _xpc_exit_reason_get_label",
    "type": "CPP"
  },
  {
    "name": "t ____contains_ool_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __xpc_array_short_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_array_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_array_debug",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_set_mach_send",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_set_double",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_set_date",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_set_fd",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_set_connection",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_get_bool",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_get_date",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_create_connection",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_get_dictionary",
    "type": "CPP"
  },
  {
    "name": "T _xpc_array_get_array",
    "type": "CPP"
  },
  {
    "name": "T _launch_socket_service_check_in",
    "type": "CPP"
  },
  {
    "name": "T _launchd_getfd",
    "type": "CPP"
  },
  {
    "name": "T _launchd_fdopen",
    "type": "CPP"
  },
  {
    "name": "T _launchd_msg_send",
    "type": "CPP"
  },
  {
    "name": "T _launchd_msg_recv",
    "type": "CPP"
  },
  {
    "name": "T _launchd_close",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_pack",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_unpack",
    "type": "CPP"
  },
  {
    "name": "T __vprocmgr_getsocket",
    "type": "CPP"
  },
  {
    "name": "T __launch_msg2",
    "type": "CPP"
  },
  {
    "name": "T _launch_wait",
    "type": "CPP"
  },
  {
    "name": "T _mpm_wait",
    "type": "CPP"
  },
  {
    "name": "T _mpm_uncork_fork",
    "type": "CPP"
  },
  {
    "name": "T _reboot2",
    "type": "CPP"
  },
  {
    "name": "T _reboot3",
    "type": "CPP"
  },
  {
    "name": "T _create_and_switch_to_per_session_launchd",
    "type": "CPP"
  },
  {
    "name": "T _load_launchd_jobs_at_loginwindow_prompt",
    "type": "CPP"
  },
  {
    "name": "T _place_hold_on_real_loginwindow",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_copy",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_dict_remove",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_dict_iterate",
    "type": "CPP"
  },
  {
    "name": "t __launch_data_dict_iterate_apply",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_dict_get_count",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_array_set_index",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_new_fd",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_new_machport",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_new_integer",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_new_bool",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_new_real",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_new_opaque",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_new_errno",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_set_fd",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_set_machport",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_set_integer",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_set_bool",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_set_real",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_set_string",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_set_opaque",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_set_errno",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_get_bool",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_get_real",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_get_string",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_get_opaque",
    "type": "CPP"
  },
  {
    "name": "T _launch_data_get_opaque_size",
    "type": "CPP"
  },
  {
    "name": "T _launch_get_fd",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bool_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bool_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bool_dispose",
    "type": "CPP"
  },
  {
    "name": "T __xpc_bool_create_distinct",
    "type": "CPP"
  },
  {
    "name": "T __xpc_bool_set_value",
    "type": "CPP"
  },
  {
    "name": "T _xpc_get_event_name",
    "type": "CPP"
  },
  {
    "name": "T _xpc_copy_event_entitlements",
    "type": "CPP"
  },
  {
    "name": "T _xpc_event_stream_check_in2",
    "type": "CPP"
  },
  {
    "name": "T _xpc_event_stream_check_in",
    "type": "CPP"
  },
  {
    "name": "T _xpc_set_event_state",
    "type": "CPP"
  },
  {
    "name": "t __xpc_set_event_state_impl",
    "type": "CPP"
  },
  {
    "name": "t __xpc_events_ctx_finalizer",
    "type": "CPP"
  },
  {
    "name": "T _xpc_event_publisher_set_initial_load_completed_handler_4remoted",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_event_publisher_set_initial_load_completed_handler_4remoted_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __xpc_event_publisher_xref_dispose",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_event_publisher_xref_dispose_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __xpc_event_publisher_cancel",
    "type": "CPP"
  },
  {
    "name": "t __xpc_event_publisher_dispose",
    "type": "CPP"
  },
  {
    "name": "T _xpc_event_publisher_activate",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_event_publisher_activate_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_event_publisher_activate_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t __xpc_event_publisher_fetch_subscriptions",
    "type": "CPP"
  },
  {
    "name": "t __xpc_event_publisher_arm_poll",
    "type": "CPP"
  },
  {
    "name": "T _xpc_event_publisher_fire",
    "type": "CPP"
  },
  {
    "name": "t __xpc_event_publisher_fire_impl",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_event_publisher_fire_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _xpc_event_publisher_fire_noboost",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_event_publisher_fire_noboost_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _xpc_event_publisher_fire_with_reply",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_event_publisher_fire_with_reply_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _xpc_event_publisher_fire_with_reply_sync",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_event_publisher_fire_with_reply_sync_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _xpc_event_publisher_set_subscriber_keepalive",
    "type": "CPP"
  },
  {
    "name": "T _xpc_event_publisher_get_subscriber_asid",
    "type": "CPP"
  },
  {
    "name": "t __xpc_event_publisher_cancel_complete",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_event_publisher_cancel_complete_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __xpc_token_cache_get_at_index",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_event_publisher_setup_poll_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_event_publisher_setup_poll_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t __xpc_event_publisher_error",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_event_publisher_set_subscriptions_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_event_publisher_set_subscriptions_block_invoke.43",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_event_publisher_set_subscriptions_block_invoke.45",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_event_publisher_set_subscriptions_block_invoke.47",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_event_publisher_fire_impl_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_event_publisher_create_connection_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_connection_wire_length",
    "type": "CPP"
  },
  {
    "name": "t _do_mach_notify_port_deleted",
    "type": "CPP"
  },
  {
    "name": "t _do_mach_notify_dead_name",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_get_instance",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_set_qos_class_floor",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_set_qos_class_fallback",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_enable_termination_imminent_event",
    "type": "CPP"
  },
  {
    "name": "T _xpc_connection_enable_sim2host_4sim",
    "type": "CPP"
  },
  {
    "name": "t __xpc_data_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_data_debug",
    "type": "CPP"
  },
  {
    "name": "T __xpc_data_set_value",
    "type": "CPP"
  },
  {
    "name": "T _xpc_data_get_inline_max",
    "type": "CPP"
  },
  {
    "name": "t __xpc_date_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_date_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_date_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_date_debug_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_date_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_date_wire_length",
    "type": "CPP"
  },
  {
    "name": "t __xpc_date_get_wire_value",
    "type": "CPP"
  },
  {
    "name": "T _xpc_date_is_int64_range",
    "type": "CPP"
  },
  {
    "name": "t __xpc_copy_cs_identity",
    "type": "CPP"
  },
  {
    "name": "t __xpc_allocate_purgable_buffer",
    "type": "CPP"
  },
  {
    "name": "t __xpc_deallocate_purgable_buffer",
    "type": "CPP"
  },
  {
    "name": "t __xpc_deallocate_buffer",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_copy_basic_description",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_inspect_short_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_dictionary_inspect_desc",
    "type": "CPP"
  },
  {
    "name": "T __xpc_dictionary_create_reply_with_port",
    "type": "CPP"
  },
  {
    "name": "T __xpc_dictionary_set_reply_msg_id",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_handoff_reply_f",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_send_reply",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_set_date",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_set_connection",
    "type": "CPP"
  },
  {
    "name": "T _xpc_dictionary_get_date",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_dictionary_inspect_desc",
    "type": "CPP"
  },
  {
    "name": "T _vprocmgr_lookup_vproc",
    "type": "CPP"
  },
  {
    "name": "T _vproc_retain",
    "type": "CPP"
  },
  {
    "name": "T _vproc_release",
    "type": "CPP"
  },
  {
    "name": "T __vproc_set_global_on_demand",
    "type": "CPP"
  },
  {
    "name": "T __vproc_kickstart_by_label",
    "type": "CPP"
  },
  {
    "name": "T __vprocmgr_log_drain",
    "type": "CPP"
  },
  {
    "name": "T __vprocmgr_log_forward",
    "type": "CPP"
  },
  {
    "name": "T __vproc_log",
    "type": "CPP"
  },
  {
    "name": "T __vproc_log_error",
    "type": "CPP"
  },
  {
    "name": "T __vproc_logv",
    "type": "CPP"
  },
  {
    "name": "T __vprocmgr_move_subset_to_user",
    "type": "CPP"
  },
  {
    "name": "T __vproc_grab_subset",
    "type": "CPP"
  },
  {
    "name": "T __vproc_post_fork_ping",
    "type": "CPP"
  },
  {
    "name": "T __vprocmgr_switch_to_session",
    "type": "CPP"
  },
  {
    "name": "T __vproc_standby_begin",
    "type": "CPP"
  },
  {
    "name": "T __vproc_standby_end",
    "type": "CPP"
  },
  {
    "name": "T __vproc_standby_count",
    "type": "CPP"
  },
  {
    "name": "T __vproc_standby_timeout",
    "type": "CPP"
  },
  {
    "name": "T __vproc_transaction_count_for_pid",
    "type": "CPP"
  },
  {
    "name": "T __vproc_pid_is_managed",
    "type": "CPP"
  },
  {
    "name": "T __vproc_send_signal_by_label",
    "type": "CPP"
  },
  {
    "name": "T __vprocmgr_detach_from_console",
    "type": "CPP"
  },
  {
    "name": "T __vproc_transaction_set_clean_callback",
    "type": "CPP"
  },
  {
    "name": "T __vprocmgr_init",
    "type": "CPP"
  },
  {
    "name": "T __vproc_get_last_exit_status",
    "type": "CPP"
  },
  {
    "name": "T _vproc_standby_begin",
    "type": "CPP"
  },
  {
    "name": "T _vproc_standby_end",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_info",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_init",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_look_up_per_user",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_lookup_children",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_get_root",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_create_server",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_subset",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_create_service",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_status",
    "type": "CPP"
  },
  {
    "name": "T _bootstrap_strerror",
    "type": "CPP"
  },
  {
    "name": "t __xpc_double_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_double_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_double_debug",
    "type": "CPP"
  },
  {
    "name": "T __xpc_double_set_value",
    "type": "CPP"
  },
  {
    "name": "t __xpc_int64_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_int64_debug",
    "type": "CPP"
  },
  {
    "name": "T __xpc_int64_set_value",
    "type": "CPP"
  },
  {
    "name": "t __xpc_null_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_null_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_null_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_null_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_null_dispose",
    "type": "CPP"
  },
  {
    "name": "t __xpc_string_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_string_inspect_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_string_debug",
    "type": "CPP"
  },
  {
    "name": "T __xpc_string_set_value",
    "type": "CPP"
  },
  {
    "name": "t __xpc_string_create",
    "type": "CPP"
  },
  {
    "name": "T _xpc_string_create_with_format_and_arguments",
    "type": "CPP"
  },
  {
    "name": "T _xpc_coalition_history_pipe_async",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uint64_debug",
    "type": "CPP"
  },
  {
    "name": "T _launch_copy_endpoints_properties_for_pid",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uuid_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_uuid_get_wire_value",
    "type": "CPP"
  },
  {
    "name": "t __xpc_fd_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_fd_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_fd_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_fd_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_fd_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_fd_wire_length",
    "type": "CPP"
  },
  {
    "name": "T __xpc_fd_get_port",
    "type": "CPP"
  },
  {
    "name": "t __xpc_shmem_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_shmem_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_shmem_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_shmem_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_shmem_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_shmem_wire_length",
    "type": "CPP"
  },
  {
    "name": "T _xpc_shmem_create_readonly",
    "type": "CPP"
  },
  {
    "name": "T _xpc_shmem_get_length",
    "type": "CPP"
  },
  {
    "name": "T __xpc_shmem_get_mach_port",
    "type": "CPP"
  },
  {
    "name": "T _xpc_atfork_child",
    "type": "CPP"
  },
  {
    "name": "T _xpc_impersonate_user",
    "type": "CPP"
  },
  {
    "name": "T _xpc_handle_service",
    "type": "CPP"
  },
  {
    "name": "T _xpc_handle_subservice",
    "type": "CPP"
  },
  {
    "name": "T _xpc_get_attachment_endpoint",
    "type": "CPP"
  },
  {
    "name": "T _xpc_copy_domain",
    "type": "CPP"
  },
  {
    "name": "T _xpc_copy_entitlements_data_for_token",
    "type": "CPP"
  },
  {
    "name": "T _xpc_copy_code_signing_identity_for_token",
    "type": "CPP"
  },
  {
    "name": "T _xpc_copy_extension_sdk_entry",
    "type": "CPP"
  },
  {
    "name": "T _xpc_test_symbols_exported",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_serializer_wire_length",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_send_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_send_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_send_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_send_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_send_wire_length",
    "type": "CPP"
  },
  {
    "name": "T _xpc_create_reply_with_format_and_arguments",
    "type": "CPP"
  },
  {
    "name": "T _xpc_create_with_format_and_arguments",
    "type": "CPP"
  },
  {
    "name": "t ____create_with_format_and_arguments_block_invoke.1",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32b40r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32b40r",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32b40b48r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32b40b48r",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_copy_",
    "type": "CPP"
  },
  {
    "name": "t ___Block_byref_object_dispose_",
    "type": "CPP"
  },
  {
    "name": "t ____create_with_format_and_arguments_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32r40r48r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32r40r48r",
    "type": "CPP"
  },
  {
    "name": "t ____create_with_format_and_arguments_block_invoke.20",
    "type": "CPP"
  },
  {
    "name": "t ____create_with_format_and_arguments_block_invoke.22",
    "type": "CPP"
  },
  {
    "name": "t ____create_with_format_and_arguments_block_invoke.25",
    "type": "CPP"
  },
  {
    "name": "t ____create_with_format_and_arguments_block_invoke.28",
    "type": "CPP"
  },
  {
    "name": "t ____create_with_format_and_arguments_block_invoke.31",
    "type": "CPP"
  },
  {
    "name": "t ____create_with_format_and_arguments_block_invoke.34",
    "type": "CPP"
  },
  {
    "name": "t ____create_with_format_and_arguments_block_invoke.36",
    "type": "CPP"
  },
  {
    "name": "t ____create_with_format_and_arguments_block_invoke.39",
    "type": "CPP"
  },
  {
    "name": "t ____create_with_format_and_arguments_block_invoke.41",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32b40b48b56r64r72r80r88r96r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32b40b48b56r64r72r80r88r96r",
    "type": "CPP"
  },
  {
    "name": "t ____create_with_format_and_arguments_block_invoke.47",
    "type": "CPP"
  },
  {
    "name": "t ___copy_helper_block_8_32b40b48b56r64r72r80r88r",
    "type": "CPP"
  },
  {
    "name": "t ___destroy_helper_block_8_32b40b48b56r64r72r80r88r",
    "type": "CPP"
  },
  {
    "name": "T _launch_add_external_service",
    "type": "CPP"
  },
  {
    "name": "T _launch_remove_external_service",
    "type": "CPP"
  },
  {
    "name": "t __deliver_error",
    "type": "CPP"
  },
  {
    "name": "t __removal_reply_event",
    "type": "CPP"
  },
  {
    "name": "t __removal_reply_cancel",
    "type": "CPP"
  },
  {
    "name": "T _launch_copy_extension_properties",
    "type": "CPP"
  },
  {
    "name": "T _launch_copy_busy_extension_instances",
    "type": "CPP"
  },
  {
    "name": "t __xpc_endpoint_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_endpoint_wire_length",
    "type": "CPP"
  },
  {
    "name": "t __xpc_endpoint_create",
    "type": "CPP"
  },
  {
    "name": "T _xpc_endpoint_compare",
    "type": "CPP"
  },
  {
    "name": "T _xpc_endpoint_create_mach_port_4sim",
    "type": "CPP"
  },
  {
    "name": "T _xpc_endpoint_copy_listener_port_4sim",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pointer_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pointer_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pointer_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pointer_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pointer_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pointer_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pointer_wire_length",
    "type": "CPP"
  },
  {
    "name": "t __xpc_set_exception_port",
    "type": "CPP"
  },
  {
    "name": "t __xpc_transaction_end",
    "type": "CPP"
  },
  {
    "name": "t __xpc_transaction_begin",
    "type": "CPP"
  },
  {
    "name": "T _os_transaction_needs_more_time",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_resolve_path_variant",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_resolve_variant_with_provider",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_bundle_resolve_path_variant_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_variant_exec_depth",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_variant_create_subpath",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_resolve_executable_name",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_is_valid_variant",
    "type": "CPP"
  },
  {
    "name": "t __xpc_get_embedded_crash_message",
    "type": "CPP"
  },
  {
    "name": "t __xpc_api_misuse",
    "type": "CPP"
  },
  {
    "name": "t _xpc_debugger_api_misuse_info",
    "type": "CPP"
  },
  {
    "name": "T __xpc_runtime_get_entitlements_data",
    "type": "CPP"
  },
  {
    "name": "t __xpc_runtime_get_entitlements_data_once",
    "type": "CPP"
  },
  {
    "name": "T __xpc_runtime_get_self_entitlements",
    "type": "CPP"
  },
  {
    "name": "t __xpc_runtime_get_self_entitlements_once",
    "type": "CPP"
  },
  {
    "name": "T _xpc_add_bundles_for_domain",
    "type": "CPP"
  },
  {
    "name": "T __xpc_spawnattr_pack_string_fragment",
    "type": "CPP"
  },
  {
    "name": "T __xpc_spawnattr_unpack_string",
    "type": "CPP"
  },
  {
    "name": "T __xpc_spawnattr_unpack_strings",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pipe_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pipe_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pipe_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pipe_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pipe_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pipe_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pipe_wire_length",
    "type": "CPP"
  },
  {
    "name": "T __xpc_pipe_handle_mig",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pipe_routine",
    "type": "CPP"
  },
  {
    "name": "T _xpc_pipe_routine_async",
    "type": "CPP"
  },
  {
    "name": "T _xpc_pipe_routine_reply",
    "type": "CPP"
  },
  {
    "name": "T _xpc_pipe_routine_forward",
    "type": "CPP"
  },
  {
    "name": "T _xpc_pipe_receive",
    "type": "CPP"
  },
  {
    "name": "t __xpc_pipe_receive",
    "type": "CPP"
  },
  {
    "name": "T _xpc_pipe_invalidate",
    "type": "CPP"
  },
  {
    "name": "T _xpc_pipe_try_receive",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin",
    "type": "CPP"
  },
  {
    "name": "t ___chkstk_darwin_probe",
    "type": "CPP"
  },
  {
    "name": "t __xpc_assert_dumping_ground",
    "type": "CPP"
  },
  {
    "name": "t __waiting4memory",
    "type": "CPP"
  },
  {
    "name": "t __xpc_strndup",
    "type": "CPP"
  },
  {
    "name": "t __xpc_hash",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_enum2label",
    "type": "CPP"
  },
  {
    "name": "T _xpc_create_from_plist_descriptor",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_create_from_plist_descriptor_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __xpc_xml_replace_entities",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_recv_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_recv_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_recv_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_recv_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_mach_recv_wire_length",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_wire_length",
    "type": "CPP"
  },
  {
    "name": "T _xpc_bundle_resolve_on_queue",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_resolve",
    "type": "CPP"
  },
  {
    "name": "T _xpc_bundle_populate",
    "type": "CPP"
  },
  {
    "name": "T _xpc_bundle_get_xpcservice_dictionary",
    "type": "CPP"
  },
  {
    "name": "T _xpc_bundle_copy_services",
    "type": "CPP"
  },
  {
    "name": "T _xpc_bundle_resolve_sync",
    "type": "CPP"
  },
  {
    "name": "T _xpc_bundle_get_error",
    "type": "CPP"
  },
  {
    "name": "t __xpc_bundle_resolve_sync",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_bundle_resolve_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_bundle_invoke_callback_async_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t _xpc_inspect_get_remote_type",
    "type": "CPP"
  },
  {
    "name": "t _xpc_inspect_object_localize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_inspect_copy_description_local",
    "type": "CPP"
  },
  {
    "name": "t __xpc_inspect_copy_short_description_local",
    "type": "CPP"
  },
  {
    "name": "T _xpc_inspect_copy_description_local",
    "type": "CPP"
  },
  {
    "name": "t __xpc_inspect_object_local_fixup",
    "type": "CPP"
  },
  {
    "name": "T _xpc_inspect_copy_short_description_local",
    "type": "CPP"
  },
  {
    "name": "T _xpc_inspect_copy_description",
    "type": "CPP"
  },
  {
    "name": "T _xpc_inspect_copy_short_description",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_object init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_object debugDescription]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_service release]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_service _xref_dispose]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_int64 retainWeakReference]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_int64 allowsWeakReference]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_int64 retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_uint64 retainWeakReference]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_uint64 allowsWeakReference]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_uint64 retainCount]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_os_transaction init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_event_publisher release]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_event_publisher init]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_event_publisher _xref_dispose]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_event_publisher dealloc]",
    "type": "CPP"
  },
  {
    "name": "t -[OS_xpc_event_publisher description]",
    "type": "CPP"
  },
  {
    "name": "t __xpc_file_transfer_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_file_transfer_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_file_transfer_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_file_transfer_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_file_transfer_debug_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_file_transfer_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_file_transfer_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_file_transfer_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_file_transfer_wire_length",
    "type": "CPP"
  },
  {
    "name": "t __xpc_file_transfer_dispose",
    "type": "CPP"
  },
  {
    "name": "T _xpc_file_transfer_create_with_fd",
    "type": "CPP"
  },
  {
    "name": "t __xpc_file_transfer_create_with_fd_impl",
    "type": "CPP"
  },
  {
    "name": "T _xpc_file_transfer_create_with_path",
    "type": "CPP"
  },
  {
    "name": "T _xpc_file_transfer_cancel",
    "type": "CPP"
  },
  {
    "name": "T _xpc_file_transfer_get_size",
    "type": "CPP"
  },
  {
    "name": "T _xpc_file_transfer_write_to_fd",
    "type": "CPP"
  },
  {
    "name": "t __xpc_file_transfer_write_to_fd_impl",
    "type": "CPP"
  },
  {
    "name": "T _xpc_file_transfer_write_to_path",
    "type": "CPP"
  },
  {
    "name": "T _xpc_file_transfer_copy_io",
    "type": "CPP"
  },
  {
    "name": "T _xpc_file_transfer_get_transfer_id",
    "type": "CPP"
  },
  {
    "name": "T _xpc_file_transfer_set_transport_writing_callbacks",
    "type": "CPP"
  },
  {
    "name": "T _xpc_file_transfer_write_finished",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_file_transfer_write_finished_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _xpc_file_transfer_send_finished",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_file_transfer_send_finished_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __xpc_file_transfer_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_file_transfer_create_io_for_fd",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_file_transfer_create_io_for_fd_block_invoke",
    "type": "CPP"
  },
  {
    "name": "T _launch_service_stats_enable_4ppse",
    "type": "CPP"
  },
  {
    "name": "t __launch_service_stats_toggle",
    "type": "CPP"
  },
  {
    "name": "T _launch_service_stats_disable_4ppse",
    "type": "CPP"
  },
  {
    "name": "T _launch_service_stats_is_enabled_4ppse",
    "type": "CPP"
  },
  {
    "name": "T __launch_service_stats_copy_4ppse_impl",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_instance_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_instance_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_instance_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_instance_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_instance_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_instance_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_instance_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_instance_wire_length",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_instance_dispose",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_instance_set_path",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_instance_set_start_suspended",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_instance_set_environment",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_instance_set_binpref",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_instance_dup2",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_instance_dup2_insert",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_instance_set_cwd",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_instance_set_endpoint",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_instance_set_jetsam_properties",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_instance_set_context",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_instance_set_finalizer_f",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_instance_get_type",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_instance_get_pid",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_instance_get_host_pid",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_instance_get_context",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_instance_is_configurable",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_instance_run",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_wire_length",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_dispose",
    "type": "CPP"
  },
  {
    "name": "T __xpc_service_last_xref_cancel",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_create",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_create_internal",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_create_from_specifier",
    "type": "CPP"
  },
  {
    "name": "t __xpc_parse_service_specifier",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_set_attach_handler",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_create_request",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_get_rendezvous_token",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_kickstart",
    "type": "CPP"
  },
  {
    "name": "T _xpc_service_attach",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_attach_event",
    "type": "CPP"
  },
  {
    "name": "t __xpc_service_attach_cancel",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_copy",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_equal",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_hash",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_debug_desc",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_debug",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_serialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_deserialize",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_wire_length",
    "type": "CPP"
  },
  {
    "name": "T _xpc_activity_set_completion_status",
    "type": "CPP"
  },
  {
    "name": "T _xpc_activity_defer_until_percentage",
    "type": "CPP"
  },
  {
    "name": "T _xpc_activity_defer_until_network_change",
    "type": "CPP"
  },
  {
    "name": "T _xpc_activity_get_percentage",
    "type": "CPP"
  },
  {
    "name": "T _xpc_activity_run",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_create_control_channel",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_activity_run_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_activity_run_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "T _xpc_activity_list",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_activity_list_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_activity_list_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "T _xpc_activity_debug",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_activity_debug_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t ___xpc_activity_debug_block_invoke_2",
    "type": "CPP"
  },
  {
    "name": "T _xpc_activity_set_network_threshold",
    "type": "CPP"
  },
  {
    "name": "t ____xpc_activity_new_unmanaged_connection_block_invoke",
    "type": "CPP"
  },
  {
    "name": "t __xpc_activity_setup_control_channel",
    "type": "CPP"
  },
  {
    "name": " node:internal/main/run_main_module:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 0,
    "tm": 53055,
    "source": {
      "script": 91,
      "start": 0,
      "end": 632,
      "positions": "C0O0C4O632",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/main/run_main_module:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 1,
    "tm": 53178,
    "source": {
      "script": 91,
      "start": 0,
      "end": 632,
      "positions": "C0O56C3O56C8O25C13O102C15O102C19O137C22O560C25O560C30O598C35O605C40O622C47O626C51O606C57O631",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "nativeModuleRequire node:internal/bootstrap/loaders:332:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 2,
    "tm": 53572,
    "source": {
      "script": 9,
      "start": 10315,
      "end": 10658,
      "positions": "C0O10324C2O10335C4O10331C9O10351C13O10372C14O10392C19O10405C24O10409C29O10409C35O10550C37O10560C47O10608C60O10566C65O10560C66O10629C71O10629C75O10656",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "compileForInternalLoader node:internal/bootstrap/loaders:299:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 3,
    "tm": 55812,
    "source": {
      "script": 9,
      "start": 9528,
      "end": 10089,
      "positions": "C0O9546C6O9561C12O9590C16O9598C17O9626C22O9634C23O9647C30O9690C37O9721C45O9690C63O9820C70O9820C75O9855C89O9890C103O9847C108O9928C109O9940C124O9970C126O9983C141O10003C152O10022C160O10054C165O10003C170O10077C174O10085",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/bootstrap/pre_execution:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 4,
    "tm": 56411,
    "source": {
      "script": 92,
      "start": 0,
      "end": 15975,
      "positions": "C0O0C4O15975",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/bootstrap/pre_execution:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 5,
    "tm": 58313,
    "source": {
      "script": 92,
      "start": 0,
      "end": 15975,
      "positions": "C0O0C193O25C199O43C205O67C211O78C217O93C223O122C229O235C235O235C240O162C246O180C252O203C258O300C264O300C269O272C275O348C281O348C286O337C292O409C298O409C303O435C308O375C314O458C320O458C324O458C326O15578C333O15599C339O15621C345O15643C351O15666C357O15683C363O15701C369O15731C375O15757C381O15780C387O15810C393O15842C399O15864C405O15891C411O15914C417O15934C423O15957C429O15593C434O15974",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/options:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 6,
    "tm": 58724,
    "source": {
      "script": 93,
      "start": 0,
      "end": 1664,
      "positions": "C0O0C4O1664",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/options:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 7,
    "tm": 58915,
    "source": {
      "script": 93,
      "start": 0,
      "end": 1664,
      "positions": "C0O0C43O94C46O94C51O25C57O39C62O62C67O153C68O153C70O164C71O164C73O180C74O180C76O1429C83O1568C89O1586C95O1610C101O1633C144O1444C149O1663",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "internalBinding node:internal/bootstrap/loaders:164:45",
    "type": "JS",
    "kind": "Unopt",
    "func": 8,
    "tm": 59041,
    "source": {
      "script": 9,
      "start": 5115,
      "end": 5353,
      "positions": "C0O5140C7O5150C11O5164C15O5201C25O5228C30O5226C37O5262C48O5281C56O5317C61O5262C66O5338C68O5349",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "prepareMainThreadExecution node:internal/bootstrap/pre_execution:23:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 9,
    "tm": 59397,
    "source": {
      "script": 92,
      "start": 522,
      "end": 2411,
      "positions": "C10O665C15O665C18O767C21O767C25O802C28O802C31O831C34O831C37O851C40O851C43O876C46O876C49O1079C52O1091C57O1095C63O1119C66O1127C77O1183C82O1187C87O1156C91O1148C95O1214C98O1214C101O1306C104O1306C107O1412C110O1412C113O1434C116O1434C119O1493C122O1493C125O1816C128O1816C131O1891C134O1891C137O2088C140O2088C143O2115C146O2115C149O2149C152O2149C155O2177C158O2177C161O2197C164O2197C167O2222C170O2222C173O2266C179O2266C184O2308C189O2326C195O2308C199O2356C202O2356C205O2380C208O2380C212O2410",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "reconnectZeroFillToggle node:internal/buffer:1072:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 10,
    "tm": 59544,
    "source": {
      "script": 19,
      "start": 30717,
      "end": 30757,
      "positions": "C0O30724C5O30735C11O30733C18O30756",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "patchProcessObject node:internal/bootstrap/pre_execution:82:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 11,
    "tm": 62903,
    "source": {
      "script": 92,
      "start": 2440,
      "end": 4282,
      "positions": "C0O2474C6O2474C11O2520C19O2520C24O2758C30O2758C35O2796C40O2797C46O2727C51O2739C56O2822C61O2837C65O2849C68O2857C75O2871C79O2890C90O2911C98O2997C104O3001C111O2890C116O3013C119O3021C129O3039C133O3029C137O3052C144O3079C151O3083C158O3097C164O3131C171O3135C178O3097C185O3213C191O3213C199O3246C202O3254C210O3269C218O3285C225O3289C229O3269C234O3262C244O3457C253O3457C258O3503C267O3503C272O3556C281O3556C286O3616C295O3616C300O3674C309O3674C314O3734C323O3734C328O3798C337O3798C342O3863C351O3863C356O3934C365O3934C370O4004C379O4004C384O4064C393O4064C398O4134C409O4134C414O4204C425O4204C431O4281",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getFastAPIs node:internal/process/per_thread:57:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 12,
    "tm": 63212,
    "source": {
      "script": 23,
      "start": 1229,
      "end": 2412,
      "positions": "C0O1229C24O1285C29O1285C34O1263C40O1500C50O1524C57O1500C62O1500C64O2232C74O2259C86O2232C91O2232C93O2367C100O2380C106O2392C112O2410",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resolve node:path:1091:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 13,
    "tm": 64672,
    "source": {
      "script": 35,
      "start": 33782,
      "end": 34692,
      "positions": "C0O33782C3O33817C6O33848C8O33878C12O33885C16O33898C18O33892C25O33902C27O33946C28O33948C35O33959C42O33965C45O33965C49O33984C57O33984C62O34058C68O34065C73O34082C75O34107C87O34133C92O34155C99O34182C107O34221C109O34217C113O33921C118O33860C121O34437C126O34483C137O34452C143O34569C147O34599C152O34610C156O34625C157O34656C163O34663C174O34688",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "validateString node:internal/validators:117:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 14,
    "tm": 72396,
    "source": {
      "script": 17,
      "start": 3398,
      "end": 3507,
      "positions": "C0O3416C6O3451C22O3457C27O3451C29O3506",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:path:1082:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 15,
    "tm": 73379,
    "source": {
      "script": 35,
      "start": 33631,
      "end": 33650,
      "positions": "C0O33645C3O33645C8O33645C12O33650",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "wrappedCwd node:internal/bootstrap/switches/does_own_process_state:124:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 16,
    "tm": 73452,
    "source": {
      "script": 90,
      "start": 3341,
      "end": 3425,
      "positions": "C0O3348C7O3362C12O3374C17O3397C22O3397C29O3384C35O3406C39O3423",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "normalizeString node:path:66:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 17,
    "tm": 74293,
    "source": {
      "script": 35,
      "start": 2161,
      "end": 4085,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isPosixPathSeparator node:path:56:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 18,
    "tm": 74484,
    "source": {
      "script": 35,
      "start": 1854,
      "end": 1902,
      "positions": "C0O1865C2O1881C4O1877C7O1900",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "addReadOnlyProcessAlias node:internal/bootstrap/pre_execution:130:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 19,
    "tm": 74646,
    "source": {
      "script": 92,
      "start": 4316,
      "end": 4541,
      "positions": "C16O4368C21O4368C26O4394C28O4411C36O4441C43O4504C49O4522C56O4411C62O4540",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getOptionValue node:internal/options:32:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 20,
    "tm": 74732,
    "source": {
      "script": 93,
      "start": 720,
      "end": 960,
      "positions": "C0O753C3O753C7O795C15O795C22O845C30O867C38O867C43O854C47O845C53O882C55O907C60O913C61O935C66O935C74O950C81O958",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getOptionsFromBinding node:internal/options:18:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 21,
    "tm": 74800,
    "source": {
      "script": 93,
      "start": 467,
      "end": 565,
      "positions": "C0O474C6O497C11O524C15O509C28O545C32O563",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupTraceCategoryState node:internal/bootstrap/pre_execution:222:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 22,
    "tm": 75278,
    "source": {
      "script": 92,
      "start": 6784,
      "end": 7011,
      "positions": "C0O6826C6O6826C11O6799C16O6898C22O6898C27O6869C32O6940C35O6965C40O6940C45O7010",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toggleTraceCategoryState node:internal/process/per_thread:385:34",
    "type": "JS",
    "kind": "Unopt",
    "func": 23,
    "tm": 75373,
    "source": {
      "script": 23,
      "start": 11040,
      "end": 11337,
      "positions": "C0O11064C4O11093C10O11128C16O11159C21O11203C26O11204C33O11149C39O11228C44O11249C49O11249C55O11268C61O11300C66O11321C71O11321C76O11336",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupPerfHooks node:internal/bootstrap/pre_execution:228:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 24,
    "tm": 75444,
    "source": {
      "script": 92,
      "start": 7036,
      "end": 7156,
      "positions": "C0O7043C6O7043C11O7079C16O7080C20O7103C26O7103C31O7133C36O7134C41O7155",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "refreshTimeOrigin node:internal/perf/performance:178:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 25,
    "tm": 75521,
    "source": {
      "script": 70,
      "start": 3755,
      "end": 3912,
      "positions": "C0O3762C7O3783C10O3795C25O3879C28O3879C35O3762C41O3911",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "refreshTimeOrigin node:internal/perf/utils:25:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 26,
    "tm": 76044,
    "source": {
      "script": 41,
      "start": 525,
      "end": 563,
      "positions": "C0O532C5O545C11O543C18O562",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupInspectorHooks node:internal/bootstrap/pre_execution:233:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 27,
    "tm": 76183,
    "source": {
      "script": 92,
      "start": 7186,
      "end": 7739,
      "positions": "C0O7529C6O7533C11O7558C17O7623C23O7623C28O7593C33O7607C38O7669C44O7669C49O7697C54O7698C61O7738",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/inspector_async_hook:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 28,
    "tm": 76471,
    "source": {
      "script": 94,
      "start": 0,
      "end": 1972,
      "positions": "C0O0C4O1972",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/inspector_async_hook:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 29,
    "tm": 76690,
    "source": {
      "script": 94,
      "start": 0,
      "end": 1972,
      "positions": "C0O0C42O19C43O19C45O29C46O29C48O48C54O1930C61O1951C67O1961C73O1945C78O1971",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupWarningHandler node:internal/bootstrap/pre_execution:142:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 30,
    "tm": 76839,
    "source": {
      "script": 92,
      "start": 4571,
      "end": 4768,
      "positions": "C0O4606C6O4606C11O4590C16O4645C24O4649C33O4693C38O4697C45O4714C50O4729C53O4737C61O4737C68O4767",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "addListener node:events:486:58",
    "type": "JS",
    "kind": "Unopt",
    "func": 31,
    "tm": 76983,
    "source": {
      "script": 13,
      "start": 14192,
      "end": 14264,
      "positions": "C0O14213C14O14220C19O14262",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "_addListener node:events:418:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 32,
    "tm": 80348,
    "source": {
      "script": 13,
      "start": 11979,
      "end": 13994,
      "positions": "C0O12021C2O12030C4O12044C6O12057C9O12057C13O12101C18O12112C20O12144C22O12170C27O12170C32O12168C39O12194C40O12214C46O12380C52O12422C60O12475C77O12422C82O12654C87O12673C89O12690C93O12705C97O12816C99O12829C103O12845C109O12854C115O12883C121O12988C129O13022C140O13033C149O13043C166O13056C175O13066C182O13012C193O13141C197O13171C202O13171C209O13218C214O13218C219O13276C222O13280C227O13310C228O13316C233O13332C240O13339C245O13356C251O13372C252O13388C256O13521C264O13618C278O13628C281O13628C295O13578C304O13694C307O13702C312O13694C327O13654C333O13733C339O13521C345O13815C347O13822C351O13861C353O13871C357O13887C359O13894C363O13927C367O13916C371O13941C374O13949C379O13949C384O13978C386O13992",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "checkListener node:events:127:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 33,
    "tm": 80465,
    "source": {
      "script": 13,
      "start": 3670,
      "end": 3726,
      "positions": "C0O3685C8O3685C14O3725",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/validators:235:42",
    "type": "JS",
    "kind": "Unopt",
    "func": 34,
    "tm": 80525,
    "source": {
      "script": 17,
      "start": 7207,
      "end": 7323,
      "positions": "C0O7228C6O7265C22O7271C27O7265C29O7322",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "emit node:events:340:44",
    "type": "JS",
    "kind": "Unopt",
    "func": 35,
    "tm": 80690,
    "source": {
      "script": 13,
      "start": 9741,
      "end": 11955,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "startListeningIfSignal node:internal/process/signal:22:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 36,
    "tm": 80846,
    "source": {
      "script": 89,
      "start": 429,
      "end": 904,
      "positions": "C0O440C3O444C11O463C14O475C19O475C26O492C32O524C38O533C43O563C50O531C56O589C61O589C67O613C72O613C76O627C78O643C84O673C98O643C103O641C107O721C114O728C118O757C123O757C129O776C131O798C136O798C140O813C148O819C153O813C154O870C159O882C164O882C171O903",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isSignal node:internal/process/signal:17:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 37,
    "tm": 81088,
    "source": {
      "script": 89,
      "start": 255,
      "end": 334,
      "positions": "C0O267C8O303C13O310C17O318C18O332",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupDebugEnv node:internal/bootstrap/pre_execution:194:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 38,
    "tm": 81227,
    "source": {
      "script": 92,
      "start": 6034,
      "end": 6244,
      "positions": "C0O6041C6O6041C11O6074C19O6102C24O6106C29O6075C34O6121C42O6125C48O6169C54O6169C59O6206C64O6219C69O6220C74O6243",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeDebugEnv node:internal/util/debuglog:22:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 39,
    "tm": 81369,
    "source": {
      "script": 40,
      "start": 546,
      "end": 991,
      "positions": "C0O561C7O574C14O572C20O596C31O709C44O709C51O753C62O754C69O782C80O783C88O833C100O848C116O833C121O833C123O871C132O883C144O959C151O971C158O990",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getOptionValue node:internal/options:32:24",
    "type": "JS",
    "kind": "Baseline",
    "func": 20,
    "tm": 82056,
    "source": {
      "script": 93,
      "start": 720,
      "end": 960,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isPosixPathSeparator node:path:56:30",
    "type": "JS",
    "kind": "Baseline",
    "func": 18,
    "tm": 82113,
    "source": {
      "script": 35,
      "start": 1854,
      "end": 1902,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "normalizeString node:path:66:25",
    "type": "JS",
    "kind": "Baseline",
    "func": 17,
    "tm": 82195,
    "source": {
      "script": 35,
      "start": 2161,
      "end": 4085,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupStacktracePrinterOnSigint node:internal/bootstrap/pre_execution:173:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 40,
    "tm": 82277,
    "source": {
      "script": 92,
      "start": 5598,
      "end": 5784,
      "positions": "C0O5605C8O5610C14O5650C15O5657C16O5691C22O5691C27O5672C32O5741C38O5774C43O5774C48O5783",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeReport node:internal/bootstrap/pre_execution:183:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 41,
    "tm": 82393,
    "source": {
      "script": 92,
      "start": 5811,
      "end": 6010,
      "positions": "C0O5811C8O5837C16O5837C21O5826C27O5875C42O5896C47O5968C55O5875C61O6009",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/process/report:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 42,
    "tm": 82730,
    "source": {
      "script": 95,
      "start": 0,
      "end": 2623,
      "positions": "C0O0C4O2623",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/process/report:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 43,
    "tm": 83073,
    "source": {
      "script": 95,
      "start": 0,
      "end": 2623,
      "positions": "C0O0C51O66C54O66C59O92C64O24C70O48C76O189C79O189C84O110C90O129C96O147C102O169C108O232C111O232C115O232C117O269C123O312C128O316C136O756C290O2572C297O2593C303O2613C309O2587C314O2622",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeReportSignalHandlers node:internal/bootstrap/pre_execution:202:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 44,
    "tm": 83360,
    "source": {
      "script": 92,
      "start": 6345,
      "end": 6441,
      "positions": "C0O6381C6O6381C11O6360C16O6420C20O6440",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "addSignalHandler node:internal/process/report:97:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 45,
    "tm": 83443,
    "source": {
      "script": 95,
      "start": 2222,
      "end": 2368,
      "positions": "C0O2232C5O2239C10O2239C16O2269C22O2304C27O2313C32O2313C38O2331C41O2339C49O2339C56O2367",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeHeapSnapshotSignalHandlers node:internal/bootstrap/pre_execution:208:46",
    "type": "JS",
    "kind": "Unopt",
    "func": 46,
    "tm": 83518,
    "source": {
      "script": 92,
      "start": 6488,
      "end": 6750,
      "positions": "C0O6488C8O6510C18O6510C23O6554C25O6571C26O6578C27O6582C35O6582C40O6612C45O6613C50O6673C58O6673C63O6651C69O6691C74O6699C79O6702C84O6699C91O6749",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupChildProcessIpcChannel node:internal/bootstrap/pre_execution:338:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 47,
    "tm": 83612,
    "source": {
      "script": 92,
      "start": 10502,
      "end": 11031,
      "positions": "C0O10509C3O10521C8O10525C14O10563C20O10563C25O10607C33O10630C38O10634C46O10607C52O10660C53O10670C57O10660C61O10751C64O10766C73O10824C76O10832C81O10836C90O10883C93O10898C102O10940C108O10940C113O10964C118O10965C124O11004C127O11019C132O11004C137O11030",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializePolicy node:internal/bootstrap/pre_execution:366:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 48,
    "tm": 83808,
    "source": {
      "script": 92,
      "start": 11330,
      "end": 13128,
      "positions": "C0O11364C10O11364C15O11407C17O11437C21O11445C35O11445C41O11570C49O11570C55O11547C60O11562C65O11689C67O11706C75O11710C81O11725C87O11726C94O11766C100O11798C108O11780C116O11855C120O11877C126O11877C132O11855C138O11891C149O11907C153O11921C161O11935C167O11993C175O11993C180O12027C190O12027C197O12102C207O12102C212O12144C214O12197C222O12197C227O12275C235O12275C241O12243C246O12255C251O12324C257O12324C263O12374C269O12374C275O12433C277O12459C279O12483C283O12464C288O12573C290O12589C295O12524C300O12552C305O12615C311O12651C317O12651C322O12692C328O12692C334O12721C340O12741C344O12728C349O12761C356O12808C358O12837C360O12878C366O12900C376O12900C383O12878C389O12492C394O12446C397O12935C401O12962C415O12968C420O12962C421O13051C429O13051C435O13092C441O13116C447O13093C454O13127",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeClusterIPC node:internal/bootstrap/pre_execution:357:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 49,
    "tm": 83995,
    "source": {
      "script": 92,
      "start": 11062,
      "end": 11303,
      "positions": "C0O11069C3O11081C10O11085C18O11100C23O11104C29O11142C35O11142C40O11174C45O11174C49O11263C52O11278C62O11302",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeSourceMapsHandlers node:internal/bootstrap/pre_execution:461:38",
    "type": "JS",
    "kind": "Unopt",
    "func": 50,
    "tm": 84071,
    "source": {
      "script": 92,
      "start": 14819,
      "end": 14968,
      "positions": "C0O14863C6O14863C11O14834C16O14914C21O14943C26O14967",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/source_map/source_map_cache:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 51,
    "tm": 84397,
    "source": {
      "script": 96,
      "start": 0,
      "end": 7654,
      "positions": "C0O0C4O7654",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/source_map/source_map_cache:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 52,
    "tm": 85480,
    "source": {
      "script": 96,
      "start": 0,
      "end": 7654,
      "positions": "C0O0C152O25C158O46C164O59C170O75C176O89C182O123C188O156C194O179C199O190C205O214C211O526C217O526C222O515C228O557C234O557C239O590C252O591C258O557C260O653C266O653C270O653C272O695C278O695C283O676C289O752C295O752C300O732C305O832C311O832C316O806C322O901C328O901C333O881C339O1137C341O1137C346O1137C348O1264C350O1264C355O1264C357O1325C363O1325C368O1287C374O1302C380O1317C386O1354C387O1354C389O1370C390O1370C392O7518C399O7539C405O7556C411O7580C417O7604C423O7627C429O7533C434O7653",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "debuglog node:internal/util/debuglog:71:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 53,
    "tm": 85784,
    "source": {
      "script": 40,
      "start": 2232,
      "end": 3279,
      "positions": "C0O2232C28O2357C32O2357C34O2789C35O2789C37O2811C41O2811C43O2899C48O3128C58O3149C63O3174C74O3128C79O3263C81O3277",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/util/iterable_weak_map:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 54,
    "tm": 86046,
    "source": {
      "script": 97,
      "start": 0,
      "end": 1958,
      "positions": "C0O0C4O1958",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/util/iterable_weak_map:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 55,
    "tm": 86420,
    "source": {
      "script": 97,
      "start": 0,
      "end": 1958,
      "positions": "C0O0C26O25C31O41C37O69C43O80C49O95C55O110C134O1392C168O1904C173O1875C177O1917C184O1938C190O1932C195O1957",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "<instance_members_initializer> node:internal/util/iterable_weak_map:17:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 56,
    "tm": 86458,
    "source": {
      "script": 97,
      "start": 399,
      "end": 516,
      "positions": "C3O410C10O410C27O441C34O441C48O479C62O479C74O516",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/cjs/helpers:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 57,
    "tm": 91523,
    "source": {
      "script": 98,
      "start": 0,
      "end": 6746,
      "positions": "C0O0C4O6746",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/cjs/helpers:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 58,
    "tm": 92484,
    "source": {
      "script": 98,
      "start": 0,
      "end": 6746,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "SafeSet node:internal/per_context/primordials:364:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 59,
    "tm": 92936,
    "source": {
      "script": 6,
      "start": 10527,
      "end": 10544,
      "positions": "C3O10533C7O10539C11O10533C26O10543",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "SafeMap node:internal/per_context/primordials:351:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 60,
    "tm": 94382,
    "source": {
      "script": 6,
      "start": 10200,
      "end": 10217,
      "positions": "C3O10206C7O10212C11O10206C26O10216",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "IterableWeakMap node:internal/util/iterable_weak_map:16:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 61,
    "tm": 94483,
    "source": {
      "script": 97,
      "start": 373,
      "end": 373,
      "positions": "C0O373C15O373",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "SafeWeakMap node:internal/per_context/primordials:357:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 62,
    "tm": 94540,
    "source": {
      "script": 6,
      "start": 10371,
      "end": 10388,
      "positions": "C3O10377C7O10383C11O10377C26O10387",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "SafeFinalizationRegistry node:internal/per_context/primordials:378:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 63,
    "tm": 94603,
    "source": {
      "script": 6,
      "start": 10977,
      "end": 11022,
      "positions": "C3O10997C7O11003C11O10997C26O11021",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeDeprecations node:internal/bootstrap/pre_execution:251:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 64,
    "tm": 94975,
    "source": {
      "script": 92,
      "start": 7965,
      "end": 10464,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeWASI node:internal/bootstrap/pre_execution:415:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 65,
    "tm": 95440,
    "source": {
      "script": 92,
      "start": 13153,
      "end": 13359,
      "positions": "C0O13185C6O13185C11O13168C16O13251C21O13255C29O13255C35O13270C37O13301C43O13301C47O13295C52O13358",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeCJSLoader node:internal/bootstrap/pre_execution:422:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 66,
    "tm": 95568,
    "source": {
      "script": 92,
      "start": 13389,
      "end": 13683,
      "positions": "C0O13414C6O13414C11O13456C17O13498C22O13505C27O13505C31O13601C42O13622C47O13658C51O13616C56O13682",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/cjs/loader:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 67,
    "tm": 96847,
    "source": {
      "script": 99,
      "start": 0,
      "end": 40182,
      "positions": "C0O0C4O40182",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/cjs/loader:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 68,
    "tm": 101219
  },
  {
    "name": " node:internal/modules/package_json_reader:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 69,
    "tm": 102095,
    "source": {
      "script": 100,
      "start": 0,
      "end": 983,
      "positions": "C0O0C4O983",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/package_json_reader:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 70,
    "tm": 102584,
    "source": {
      "script": 100,
      "start": 0,
      "end": 983,
      "positions": "C0O0C29O23C34O83C37O83C42O56C48O132C54O132C59O114C65O177C71O177C76O156C82O209C84O209C89O209C91O229C92O229C94O956C101O975C107O971C112O982",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/process/esm_loader:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 71,
    "tm": 103362,
    "source": {
      "script": 101,
      "start": 0,
      "end": 2883,
      "positions": "C0O0C4O2883",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/process/esm_loader:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 72,
    "tm": 104756,
    "source": {
      "script": 101,
      "start": 0,
      "end": 2883,
      "positions": "C0O0C44O25C50O111C56O111C61O137C66O67C72O167C78O167C83O153C89O258C95O258C100O217C106O323C112O323C117O305C123O381C129O381C134O358C140O413C144O448C148O749C152O789C156O1259C159O1259C164O1259C166O1277C168O1295C172O2528C176O2544C181O2882",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/loader:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 73,
    "tm": 105397,
    "source": {
      "script": 102,
      "start": 0,
      "end": 11918,
      "positions": "C0O0C4O11918",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/loader:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 74,
    "tm": 107308,
    "source": {
      "script": 102,
      "start": 0,
      "end": 11918,
      "positions": "C0O0C104O79C110O79C114O130C120O139C126O155C132O177C138O199C144O224C150O249C156O265C161O289C167O303C173O326C179O347C185O362C191O578C197O578C202O604C207O402C213O426C219O451C225O483C231O520C237O548C243O653C249O653C254O620C260O635C266O731C272O731C277O688C283O708C289O781C295O781C299O781C301O843C307O843C311O843C313O940C319O940C324O898C330O916C336O1005C342O1005C347O989C353O1067C359O1067C364O1051C370O1142C376O1142C381O1123C510O11868C517O11837C522O11887C524O11905C529O11917",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "<instance_members_initializer> node:internal/modules/esm/loader:59:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 75,
    "tm": 107387,
    "source": {
      "script": 102,
      "start": 1611,
      "end": 2404,
      "positions": "C3O1631C17O1786C28O1792C45O1966C56O1972C73O2065C80O2065C94O2183C104O2270C111O2270C125O2393C138O2404",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/module_map:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 76,
    "tm": 107732,
    "source": {
      "script": 103,
      "start": 0,
      "end": 955,
      "positions": "C0O0C4O955",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/module_map:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 77,
    "tm": 107891,
    "source": {
      "script": 103,
      "start": 0,
      "end": 955,
      "positions": "C0O0C17O33C20O33C24O33C26O87C31O125C34O125C39O158C52O159C58O125C60O236C63O236C68O262C73O211C79O297C82O297C87O278C97O407C141O927C143O942C148O954",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/module_job:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 78,
    "tm": 108978,
    "source": {
      "script": 104,
      "start": 0,
      "end": 7692,
      "positions": "C0O0C4O7692",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/module_job:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 79,
    "tm": 109819,
    "source": {
      "script": 104,
      "start": 0,
      "end": 7692,
      "positions": "C0O0C85O25C91O47C97O68C103O90C109O112C114O133C119O157C125O171C130O189C136O214C142O230C148O253C154O274C160O285C166O312C172O336C178O362C184O386C190O454C196O454C201O439C207O518C213O518C218O495C224O580C230O580C235O554C241O644C247O644C251O644C253O696C256O696C258O728C260O728C262O769C263O769C265O799C269O799C271O917C275O917C314O7646C321O7615C326O7664C328O7679C333O7691",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/resolve:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 80,
    "tm": 111157,
    "source": {
      "script": 105,
      "start": 0,
      "end": 36468,
      "positions": "C0O0C4O36468",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/resolve:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 81,
    "tm": 115093
  },
  {
    "name": " node:internal/modules/esm/get_format:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 82,
    "tm": 115748,
    "source": {
      "script": 106,
      "start": 0,
      "end": 2630,
      "positions": "C0O0C4O2630",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/get_format:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 83,
    "tm": 116099,
    "source": {
      "script": 106,
      "start": 0,
      "end": 2630,
      "positions": "C0O0C53O24C58O40C63O56C69O89C75O147C78O147C83O135C89O191C92O191C97O172C102O253C105O253C109O253C111O342C114O342C118O342C120O429C123O429C127O429C129O503C132O503C137O484C143O575C146O575C151O552C157O557C163O639C166O639C171O665C176O608C182O701C186O701C188O821C192O821C194O956C198O987C207O1051C213O1015C217O1062C221O1093C230O1157C236O1121C240O1193C242O1206C252O1230C260O1646C268O2284C276O1193C281O1193C283O2538C290O2559C296O2579C302O2601C308O2553C313O2629",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/load:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 84,
    "tm": 116395,
    "source": {
      "script": 107,
      "start": 0,
      "end": 643,
      "positions": "C0O0C4O643",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/load:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 85,
    "tm": 116550,
    "source": {
      "script": 107,
      "start": 0,
      "end": 643,
      "positions": "C0O0C19O44C22O44C27O23C33O117C36O117C41O96C47O185C50O185C55O169C61O606C68O627C74O621C79O642",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/get_source:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 86,
    "tm": 116963,
    "source": {
      "script": 108,
      "start": 0,
      "end": 1349,
      "positions": "C0O0C4O1349",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/get_source:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 87,
    "tm": 117326,
    "source": {
      "script": 108,
      "start": 0,
      "end": 1349,
      "positions": "C0O0C37O25C43O48C49O112C52O112C57O93C62O207C65O207C74O251C81O207C83O316C86O316C91O305C97O347C100O347C105O378C110O404C113O404C118O396C124O486C127O486C132O512C137O439C143O458C149O545C153O542C155O581C159O581C161O1304C163O1329C168O1348",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/promises:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 88,
    "tm": 118403,
    "source": {
      "script": 109,
      "start": 0,
      "end": 22879,
      "positions": "C0O0C4O22879",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/promises:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 89,
    "tm": 122099
  },
  {
    "name": "<instance_members_initializer> node:internal/fs/promises:189:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 90,
    "tm": 122263,
    "source": {
      "script": 109,
      "start": 4202,
      "end": 5000,
      "positions": "C0O4202C12O4210C26O5000",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/rimraf:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 91,
    "tm": 123152,
    "source": {
      "script": 110,
      "start": 0,
      "end": 7095,
      "positions": "C0O0C4O7095",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/rimraf:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 92,
    "tm": 124003,
    "source": {
      "script": 110,
      "start": 0,
      "end": 7095,
      "positions": "C0O0C139O368C145O393C151O404C156O450C159O450C164O439C170O480C173O480C177O480C179O642C182O505C188O514C194O527C200O536C206O549C212O560C218O575C224O584C230O597C236O605C242O617C248O627C254O662C257O662C262O654C267O702C270O702C275O687C281O739C284O739C289O729C295O792C302O792C307O792C309O863C316O863C321O863C323O958C330O967C333O950C335O1001C345O1001C347O1060C357O1060C359O1126C361O1126C363O1154C366O1161C371O1161C376O1154C378O7038C385O7057C391O7065C397O7081C403O7053C408O7094",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "from node:buffer:295:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 93,
    "tm": 124345,
    "source": {
      "script": 18,
      "start": 8406,
      "end": 9357,
      "positions": "C3O8444C9O8479C12O8486C17O8522C18O8526C28O8581C33O8585C39O8616C51O8623C56O8672C57O8700C63O8717C68O8717C73O8732C78O8771C95O8862C104O8869C109O8909C110O8931C113O8931C118O8954C120O8967C122O8976C123O8982C125O8999C127O8998C134O9060C136O9066C138O9065C145O9084C151O9102C155O9147C158O9154C163O9194C164O9216C182O9222C187O9216",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "fromString node:buffer:431:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 94,
    "tm": 135815,
    "source": {
      "script": 18,
      "start": 12457,
      "end": 12891,
      "positions": "C0O12484C2O12491C8O12536C14O12543C19O12567C25O12574C30O12587C35O12594C40O12611C41O12616C46O12634C51O12644C56O12681C59O12687C64O12717C66O12746C73O12752C78O12746C79O12803C85O12810C90O12823C95O12830C100O12847C101O12854C104O12861C109O12889",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "fromStringFast node:buffer:412:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 95,
    "tm": 136052,
    "source": {
      "script": 18,
      "start": 11913,
      "end": 12436,
      "positions": "C0O11950C5O11950C11O11973C14O11995C18O12004C21O11984C26O12016C31O12052C36O12023C41O12065C42O12069C44O12083C49O12094C51O12092C54O12080C59O12111C62O12111C65O12135C72O12150C77O12161C85O12135C91O12203C110O12203C116O12234C118O12245C123O12329C130O12348C135O12359C143O12333C149O12386C156O12400C162O12397C168O12410C171O12410C174O12425C176O12434",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "FastBuffer node:internal/buffer:958:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 96,
    "tm": 136149,
    "source": {
      "script": 19,
      "start": 26364,
      "end": 26453,
      "positions": "C3O26407C7O26441C20O26407C35O26452",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "write node:buffer:592:12",
    "type": "JS",
    "kind": "Unopt",
    "func": 97,
    "tm": 136219,
    "source": {
      "script": 18,
      "start": 16525,
      "end": 16589,
      "positions": "C0O16559C17O16559C22O16589",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "alignPool node:buffer:158:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 98,
    "tm": 136343,
    "source": {
      "script": 18,
      "start": 3998,
      "end": 4102,
      "positions": "C0O4032C4O4047C9O4060C19O4071C25O4083C34O4093C41O4101",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "promisify node:internal/util:324:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 99,
    "tm": 136659,
    "source": {
      "script": 12,
      "start": 8845,
      "end": 10349,
      "positions": "C0O8845C17O8907C25O8947C33O8971C38O8950C55O9007C68O9007C73O9050C80O9063C82O9062C87O9107C94O9116C96O9115C100O9148C110O9148C115O9200C126O9232C136O9273C143O9207C148O9339C149O9502C156O9511C158O9510C161O9502C163O10066C174O10091C180O10091C185O10066C190O10127C201O10152C211O10191C218O10127C223O10258C234O10301C240O10301C245O10265C250O10347",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "EventEmitterMixin node:internal/event_target:827:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 100,
    "tm": 138738,
    "source": {
      "script": 38,
      "start": 23423,
      "end": 23845,
      "positions": "C0O23475C23O23659C30O23691C33O23704C38O23659C43O23718C47O23751C52O23792C57O23751C62O23818C64O23843",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/translators:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 101,
    "tm": 141942,
    "source": {
      "script": 111,
      "start": 0,
      "end": 11226,
      "positions": "C0O0C4O11226",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/translators:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 102,
    "tm": 143286,
    "source": {
      "script": 111,
      "start": 0,
      "end": 11226,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/create_dynamic_module:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 103,
    "tm": 144038,
    "source": {
      "script": 112,
      "start": 0,
      "end": 1756,
      "positions": "C0O0C4O1756",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/create_dynamic_module:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 104,
    "tm": 144347,
    "source": {
      "script": 112,
      "start": 0,
      "end": 1756,
      "positions": "C0O0C39O25C45O47C51O68C57O85C63O101C69O140C72O140C77O173C90O174C96O140C98O642C103O1718C105O1733C110O1755",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/vm/module:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 105,
    "tm": 145026,
    "source": {
      "script": 113,
      "start": 0,
      "end": 12310,
      "positions": "C0O0C4O12310",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/vm/module:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 106,
    "tm": 146296,
    "source": {
      "script": 113,
      "start": 0,
      "end": 12310,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "<instance_members_initializer> node:internal/vm/module:256:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 107,
    "tm": 146400,
    "source": {
      "script": 113,
      "start": 6796,
      "end": 6832,
      "positions": "C3O6805C29O6832",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "ESMLoader node:internal/modules/esm/loader:52:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 108,
    "tm": 146687,
    "source": {
      "script": 102,
      "start": 1392,
      "end": 1392,
      "positions": "C0O1392C15O1392",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "ModuleMap node:internal/modules/esm/module_map:15:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 109,
    "tm": 146770,
    "source": {
      "script": 103,
      "start": 430,
      "end": 447,
      "positions": "C3O436C7O442C11O436C26O446",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "desc.value node:internal/per_context/primordials:325:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 110,
    "tm": 146843,
    "source": {
      "script": 6,
      "start": 9496,
      "end": 9555,
      "positions": "C0O9513C7O9520C12O9543",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "SafeIterator node:internal/per_context/primordials:270:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 111,
    "tm": 146896,
    "source": {
      "script": 6,
      "start": 7785,
      "end": 7845,
      "positions": "C0O7804C3O7821C7O7819C12O7844",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "next node:internal/per_context/primordials:273:9",
    "type": "JS",
    "kind": "Unopt",
    "func": 112,
    "tm": 146952,
    "source": {
      "script": 6,
      "start": 7854,
      "end": 7899,
      "positions": "C0O7865C3O7882C8O7872C12O7893",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "deprecate node:internal/util:96:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 113,
    "tm": 147203,
    "source": {
      "script": 12,
      "start": 2408,
      "end": 3584,
      "positions": "C0O2408C26O2428C31O2440C37O2454C42O2470C44O2480C45O2535C53O2573C61O2595C66O2576C83O2631C87O2659C100O2659C105O2705C106O2705C108O3280C121O3280C126O3320C129O3327C135O3520C141O3546C145O3541C149O3564C151O3582",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._initPaths node:internal/modules/cjs/loader:1227:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 114,
    "tm": 147459,
    "source": {
      "script": 99,
      "start": 38372,
      "end": 39328,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resolve node:path:1091:10",
    "type": "JS",
    "kind": "Baseline",
    "func": 13,
    "tm": 147656,
    "source": {
      "script": 35,
      "start": 33782,
      "end": 34692,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "nativeModuleRequire node:internal/bootstrap/loaders:332:29",
    "type": "JS",
    "kind": "Baseline",
    "func": 2,
    "tm": 147703,
    "source": {
      "script": 9,
      "start": 10315,
      "end": 10658,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "compileForInternalLoader node:internal/bootstrap/loaders:299:27",
    "type": "JS",
    "kind": "Baseline",
    "func": 3,
    "tm": 147753,
    "source": {
      "script": 9,
      "start": 9528,
      "end": 10089,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getOptionsFromBinding node:internal/options:18:31",
    "type": "JS",
    "kind": "Baseline",
    "func": 21,
    "tm": 147796,
    "source": {
      "script": 93,
      "start": 467,
      "end": 565,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "next node:internal/per_context/primordials:273:9",
    "type": "JS",
    "kind": "Baseline",
    "func": 112,
    "tm": 147830,
    "source": {
      "script": 6,
      "start": 7854,
      "end": 7899,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "SafeMap node:internal/per_context/primordials:351:16",
    "type": "JS",
    "kind": "Baseline",
    "func": 60,
    "tm": 147865,
    "source": {
      "script": 6,
      "start": 10200,
      "end": 10217,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/run_main:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 115,
    "tm": 148032,
    "source": {
      "script": 114,
      "start": 0,
      "end": 2695,
      "positions": "C0O0C4O2695",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/run_main:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 116,
    "tm": 148362,
    "source": {
      "script": 114,
      "start": 0,
      "end": 2695,
      "positions": "C0O0C60O25C66O85C72O85C77O133C83O141C89O153C95O212C101O212C106O193C112O254C118O254C122O254C124O2627C131O2648C137O2673C143O2642C148O2694",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeESMLoader node:internal/bootstrap/pre_execution:432:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 117,
    "tm": 148526,
    "source": {
      "script": 92,
      "start": 13713,
      "end": 14780,
      "positions": "C0O13795C6O13795C13O13844C16O13840C21O13838C25O13862C31O13894C32O13901C33O14001C39O14001C44O13917C49O13957C54O14047C60O14047C65O14248C70O14206C74O14318C79O14279C83O14484C91O14488C97O14604C103O14604C108O14553C113O14561C118O14579C123O14650C129O14650C134O14669C136O14679C140O14693C142O14713C146O14737C148O14756C153O14779",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get hasLoadedAnyUserCJSModule node:internal/modules/cjs/loader:74:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 118,
    "tm": 148709,
    "source": {
      "script": 99,
      "start": 2306,
      "end": 2346,
      "positions": "C0O2311C4O2344",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "assert node:internal/assert:11:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 119,
    "tm": 148804,
    "source": {
      "script": 16,
      "start": 172,
      "end": 307,
      "positions": "C0O193C4O242C7O242C11O259C13O265C18O259C20O306",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "loadPreloadModules node:internal/bootstrap/pre_execution:475:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 120,
    "tm": 149017,
    "source": {
      "script": 92,
      "start": 15256,
      "end": 15576,
      "positions": "C0O15343C8O15343C13O15374C15O15411C21O15418C26O15494C32O15494C37O15494C42O15461C47O15538C52O15575",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._preloadModules node:internal/modules/cjs/loader:1257:34",
    "type": "JS",
    "kind": "Unopt",
    "func": 121,
    "tm": 149120,
    "source": {
      "script": 99,
      "start": 39364,
      "end": 39938,
      "positions": "C0O39379C5O39384C11O39412C12O39419C13O39423C17O39436C23O39631C33O39631C42O39681C45O39703C53O39728C58O39728C63O39703C68O39694C85O39756C88O39762C95O39767C100O39789C106O39802C114O39817C116O39817C119O39851C121O39867C125O39856C130O39891C137O39907C141O39891C146O39876C151O39838C154O39915C158O39928C165O39937",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module node:internal/modules/cjs/loader:172:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 122,
    "tm": 149218,
    "source": {
      "script": 99,
      "start": 5284,
      "end": 5521,
      "positions": "C14O5306C16O5314C20O5322C22O5334C25O5339C30O5339C35O5332C39O5354C40O5367C44O5375C49O5393C54O5393C60O5414C71O5414C76O5453C77O5467C81O5477C82O5489C86O5500C88O5514C93O5520",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "dirname node:path:1275:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 123,
    "tm": 149330,
    "source": {
      "script": 35,
      "start": 38742,
      "end": 39411,
      "positions": "C0O38755C8O38755C13O38798C19O38805C24O38818C26O38829C27O38850C34O38850C42O38889C44O38885C48O38923C51O38950C53O38978C57O38985C61O38992C63O38992C68O39011C73O39015C81O39054C83O39050C88O39084C92O39115C97O39134C101O39221C103O39000C108O38960C111O39262C113O39270C118O39284C128O39311C129O39316C135O39335C140O39348C142O39360C143O39365C156O39372C161O39407",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "updateChildren node:internal/modules/cjs/loader:165:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 124,
    "tm": 149434,
    "source": {
      "script": 99,
      "start": 5049,
      "end": 5222,
      "positions": "C0O5092C7O5098C15O5112C19O5130C23O5138C26O5138C33O5184C38O5184C44O5221",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._nodeModulePaths node:internal/modules/cjs/loader:629:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 125,
    "tm": 149545,
    "source": {
      "script": 99,
      "start": 18791,
      "end": 19922,
      "positions": "C0O18846C5O18858C10O18858C17O19037C19O19046C24O19061C28O19086C29O19301C32O19327C36O19334C40O19343C42O19358C47O19368C48O19368C53O19400C58O19400C64O19442C66O19455C68O19451C73O19485C75O19495C77O19491C82O19512C89O19563C100O19563C108O19599C112O19512C117O19638C120O19656C124O19676C126O19682C131O19700C138O19711C144O19715C149O19737C156O19769C159O19376C164O19309C167O19856C175O19856C180O19905C182O19918",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module.require node:internal/modules/cjs/loader:997:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 126,
    "tm": 149700,
    "source": {
      "script": 99,
      "start": 31204,
      "end": 31495,
      "positions": "C0O31213C8O31213C13O31241C15O31248C20O31262C36O31268C41O31262C42O31377C51O31389C60O31405C63O31419C76O31419C93O31474C102O31486C126O31494",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._load node:internal/modules/cjs/loader:757:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 127,
    "tm": 149882
  },
  {
    "name": "logger node:internal/util/debuglog:96:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 128,
    "tm": 150137,
    "source": {
      "script": 40,
      "start": 2899,
      "end": 3124,
      "positions": "C0O2899C3O2931C30O2955C35O2962C38O2970C39O2985C45O3002C49O2992C53O3007C54O3022C60O3039C66O3048C70O3029C75O3053C76O3069C80O3076C87O3089C92O3085C98O3076C103O3114",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/per_context/primordials:276:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 129,
    "tm": 150224,
    "source": {
      "script": 6,
      "start": 7920,
      "end": 7949,
      "positions": "C0O7931C2O7943",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "debug node:internal/util/debuglog:76:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 130,
    "tm": 150311,
    "source": {
      "script": 40,
      "start": 2357,
      "end": 2781,
      "positions": "C0O2357C3O2376C6O2376C9O2484C16O2505C22O2492C30O2490C36O2524C42O2560C47O2563C50O2560C54O2588C81O2612C86O2619C89O2627C90O2642C96O2659C100O2649C104O2664C105O2679C111O2696C117O2705C121O2686C126O2710C127O2726C131O2733C138O2746C143O2742C149O2733C154O2771",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "init node:internal/util/debuglog:72:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 131,
    "tm": 150388,
    "source": {
      "script": 40,
      "start": 2259,
      "end": 2342,
      "positions": "C0O2268C10O2274C14O2272C16O2311C26O2321C33O2319C40O2341",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "testEnabled node:internal/util/debuglog:32:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 132,
    "tm": 150443,
    "source": {
      "script": 40,
      "start": 973,
      "end": 984,
      "positions": "C0O979C1O984",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "debuglogImpl node:internal/util/debuglog:49:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 133,
    "tm": 150526,
    "source": {
      "script": 40,
      "start": 1451,
      "end": 1995,
      "positions": "C0O1451C9O1470C18O1484C23O1511C34O1544C39O1552C43O1544C45O1563C55O1563C59O1595C71O1606C75O1611C83O1934C97O1952C99O1950C103O1970C112O1987C115O1993",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/cjs/loader:272:66",
    "type": "JS",
    "kind": "Unopt",
    "func": 134,
    "tm": 150599,
    "source": {
      "script": 99,
      "start": 7709,
      "end": 7734,
      "positions": "C0O7721C2O7727C9O7733",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "noop node:internal/util/debuglog:47:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 135,
    "tm": 150645,
    "source": {
      "script": 40,
      "start": 1419,
      "end": 1427,
      "positions": "C1O1426",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._resolveFilename node:internal/modules/cjs/loader:848:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 136,
    "tm": 150846
  },
  {
    "name": "canBeRequiredByUsers node:internal/bootstrap/loaders:240:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 137,
    "tm": 151004,
    "source": {
      "script": 9,
      "start": 7353,
      "end": 7449,
      "positions": "C0O7376C5O7389C10O7393C15O7393C21O7406C23O7424C27O7445",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._resolveLookupPaths node:internal/modules/cjs/loader:667:38",
    "type": "JS",
    "kind": "Unopt",
    "func": 138,
    "tm": 151116,
    "source": {
      "script": 99,
      "start": 19964,
      "end": 21141,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "trySelfParentPath node:internal/modules/cjs/loader:427:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 139,
    "tm": 151811,
    "source": {
      "script": 99,
      "start": 12270,
      "end": 12533,
      "positions": "C0O12283C4O12296C5O12309C6O12324C12O12354C16O12363C17O12384C24O12387C29O12410C36O12413C44O12455C47O12470C52O12470C59O12478C62O12483C66O12476C69O12487C72O12508C73O12521C75O12532",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "trySelf node:internal/modules/cjs/loader:441:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 140,
    "tm": 152203,
    "source": {
      "script": 99,
      "start": 12551,
      "end": 13384,
      "positions": "C0O12577C4O12594C5O12607C6O12648C9O12648C17O12625C22O12636C27O12686C31O12702C37O12725C38O12738C39O12756C47O12775C48O12788C49O12796C51O12829C55O12821C60O12841C65O12867C70O12913C82O12871C89O12929C94O12947C97O12981C102O12986C107O12947C112O12945C118O13010C119O13023C123O13041C128O13070C133O13099C138O13121C142O13099C149O13163C152O13163C159O13190C168O13070C183O13048C188O13236C200O13257C203O13263C210O13268C215O13302C222O13346C226O13308C231O13302C232O13370C234O13370",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "readPackageScope node:internal/modules/cjs/loader:321:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 141,
    "tm": 153573,
    "source": {
      "script": 99,
      "start": 8919,
      "end": 9437,
      "positions": "C0O8962C7O8996C10O8962C16O9008C18O9035C25O9090C28O9052C34O9100C47O9112C54O9168C61O9207C66O9211C70O9172C77O9236C78O9249C79O9268C84O9292C86O9290C90O9268C95O9302C97O9313C104O9334C110O9353C116O9370C117O9397C119O9397C124O9026C127O9422C128O9435",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "readPackage node:internal/modules/cjs/loader:290:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 142,
    "tm": 153744,
    "source": {
      "script": 99,
      "start": 8102,
      "end": 8892,
      "positions": "C0O8137C5O8142C13O8142C20O8200C25O8217C30O8217C36O8234C38O8262C40O8278C41O8297C46O8315C51O8315C57O8353C63O8366C72O8392C77O8402C79O8432C84O8449C91O8449C97O8475C98O8488C102O8521C107O8521C112O8559C117O8580C125O8605C133O8633C141O8664C149O8692C160O8708C165O8725C170O8725C176O8754C178O8770C190O8791C195O8798C199O8814C207O8843C213O8854C220O8865C224O8861C227O8824C231O8878C233O8878",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "read node:internal/modules/package_json_reader:16:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 143,
    "tm": 154001,
    "source": {
      "script": 100,
      "start": 292,
      "end": 954,
      "positions": "C0O307C5O317C10O317C17O338C22O351C27O351C32O365C33O412C40O440C43O440C48O412C53O384C59O395C66O489C73O491C79O499C86O544C92O544C97O525C102O575C106O607C112O643C115O654C127O704C132O738C142O652C148O774C154O821C159O821C164O852C169O861C174O861C180O907C185O913C190O913C196O938C198O952",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toNamespacedPath node:path:1266:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 144,
    "tm": 154088,
    "source": {
      "script": 35,
      "start": 38609,
      "end": 38669,
      "positions": "C0O38653C2O38665",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._findPath node:internal/modules/cjs/loader:494:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 145,
    "tm": 155815,
    "source": {
      "script": 99,
      "start": 14327,
      "end": 16931,
      "positions": "C0O14380C5O14385C10O14385C16O14408C18O14435C26O14458C30O14478C36O14485C41O14498C42O14511C43O14536C45O14544C51O14555C57O14555C62O14553C66O14606C69O14613C76O14623C80O14637C82O14652C84O14665C85O14673C87O14709C93O14716C100O14727C103O14770C107O14777C111O14727C119O14790C121O14782C125O14812C127O14838C134O14874C137O14854C143O14943C145O14956C149O14948C154O15041C156O15046C160O15055C165O15070C172O15084C177O15089C179O15104C183O15158C186O15158C192O15198C194O15227C196O15250C197O15279C202O15284C207O15284C214O15319C216O15345C219O15345C224O15365C228O15393C229O15400C234O15427C238O15452C244O15488C249O15504C254O15504C262O15554C265O15565C272O15614C278O16228C283O16244C288O16244C296O16290C299O16301C304O16348C308O16419C312O16453C320O16478C325O16460C330O16500C342O16511C348O16569C354O16589C359O16674C363O16706C371O16731C376O16713C381O16751C396O16762C402O16818C406O16840C409O16847C416O16868C420O16886C422O16902C423O14965C428O14930C434O16916C435O16929",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isAbsolute node:path:1156:13",
    "type": "JS",
    "kind": "Unopt",
    "func": 146,
    "tm": 156022,
    "source": {
      "script": 35,
      "start": 35448,
      "end": 35594,
      "positions": "C0O35461C8O35461C13O35507C19O35514C26O35532C31O35532C39O35571C41O35567C44O35590",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "stat node:internal/modules/cjs/loader:151:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 147,
    "tm": 156270,
    "source": {
      "script": 99,
      "start": 4627,
      "end": 5024,
      "positions": "C0O4642C5O4658C10O4658C17O4688C23O4733C28O4743C33O4743C39O4762C41O4788C43O4802C44O4824C49O4824C54O4856C61O4889C66O4969C71O4979C76O4979C82O5008C84O5022",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "tryExtensions node:internal/modules/cjs/loader:400:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 148,
    "tm": 156426,
    "source": {
      "script": 99,
      "start": 11501,
      "end": 11685,
      "positions": "C0O11536C2O11548C6O11541C11O11584C16O11600C19O11594C23O11584C29O11619C31O11641C33O11657C34O11557C39O11523C42O11670C43O11683",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "tryFile node:internal/modules/cjs/loader:384:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 149,
    "tm": 156502,
    "source": {
      "script": 99,
      "start": 11077,
      "end": 11271,
      "positions": "C0O11114C3O11114C8O11135C9O11142C14O11149C15O11156C16O11159C24O11184C26O11198C31O11210C36O11210C41O11231C42O11238C45O11245C49O11269",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toRealPath node:internal/modules/cjs/loader:393:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 150,
    "tm": 156598,
    "source": {
      "script": 99,
      "start": 11292,
      "end": 11404,
      "positions": "C0O11310C5O11320C10O11333C17O11353C20O11364C28O11383C35O11320C41O11402",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "realpathSync node:fs:2408:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 151,
    "tm": 157014
  },
  {
    "name": "getOptions node:internal/fs/utils:314:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 152,
    "tm": 165295,
    "source": {
      "script": 78,
      "start": 7218,
      "end": 7841,
      "positions": "C0O7248C14O7340C16O7362C17O7370C23O7409C29O7453C31O7477C35O7492C42O7527C48O7566C66O7572C71O7566C72O7659C79O7668C84O7686C87O7709C92O7686C96O7735C102O7763C107O7791C115O7763C120O7824C122O7839",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "assertEncoding node:internal/fs/utils:151:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 153,
    "tm": 168211,
    "source": {
      "script": 78,
      "start": 3527,
      "end": 3704,
      "positions": "C0O3542C6O3559C9O3566C14O3566C21O3609C24O3636C40O3642C45O3636C47O3703",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toPathIfFileURL node:internal/url:1496:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 154,
    "tm": 168375,
    "source": {
      "script": 33,
      "start": 41449,
      "end": 41570,
      "positions": "C0O41469C3O41474C9O41508C11O41529C12O41532C15O41539C19O41568",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isURLInstance node:internal/url:1492:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 155,
    "tm": 172832,
    "source": {
      "script": 33,
      "start": 41326,
      "end": 41423,
      "positions": "C0O41346C3O41367C6O41392C12O41414C16O41421",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/utils:668:38",
    "type": "JS",
    "kind": "Unopt",
    "func": 156,
    "tm": 172939,
    "source": {
      "script": 78,
      "start": 18141,
      "end": 18411,
      "positions": "C14O18174C22O18207C25O18207C31O18233C36O18264C49O18239C54O18233C55O18329C68O18329C74O18366C76O18395C78O18395C80O18410",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/utils:357:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 157,
    "tm": 173083,
    "source": {
      "script": 78,
      "start": 8569,
      "end": 9158,
      "positions": "C16O8633C21O8686C26O8686C31O8780C37O8803C41O8831C45O8848C51O8848C60O8899C64O8920C69O8920C76O8965C77O8972C78O8992C94O8992C100O9106C104O9128C106O9128C107O9145C109O9156",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isUint8Array node:internal/util/types:13:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 158,
    "tm": 173163,
    "source": {
      "script": 15,
      "start": 257,
      "end": 342,
      "positions": "C0O269C5O276C12O323C15O340",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "splitRoot node:fs:2362:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 159,
    "tm": 173479,
    "source": {
      "script": 77,
      "start": 62796,
      "end": 62988,
      "positions": "C0O62821C2O62832C6O62826C11O62853C16O62857C24O62895C26O62891C31O62923C44O62930C49O62962C50O62842C55O62808C58O62973C60O62984",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "nextPart node:fs:2395:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 160,
    "tm": 173595,
    "source": {
      "script": 77,
      "start": 63703,
      "end": 63761,
      "positions": "C0O63716C14O63723C19O63757",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "handleErrorFromBinding node:internal/fs/utils:340:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 161,
    "tm": 173740,
    "source": {
      "script": 78,
      "start": 7930,
      "end": 8428,
      "positions": "C0O7948C6O8011C11O8011C16O8033C24O8033C29O8090C31O8090C32O8115C38O8343C43O8370C51O8343C56O8416C60O8406C62O8427",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isFileType node:fs:205:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 162,
    "tm": 173812,
    "source": {
      "script": 77,
      "start": 5285,
      "end": 5526,
      "positions": "C0O5419C2O5424C6O5431C10O5465C15O5472C20O5488C22O5503C24O5501C30O5511C33O5524",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "encodeRealpathResult node:fs:2371:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 163,
    "tm": 174060,
    "source": {
      "script": 77,
      "start": 63022,
      "end": 63280,
      "positions": "C0O63044C4O63069C10O63089C17O63098C22O63114C24O63128C25O63148C30O63155C35O63155C41O63183C48O63192C53O63212C55O63228C56O63251C61O63268C66O63251C71O63278",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "loadNativeModule node:internal/modules/cjs/helpers:44:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 164,
    "tm": 174150,
    "source": {
      "script": 98,
      "start": 1151,
      "end": 1431,
      "positions": "C0O1187C5O1200C10O1204C15O1204C21O1221C26O1228C35O1258C43O1258C48O1384C53O1384C57O1414C59O1425C61O1430",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module.load node:internal/modules/cjs/loader:969:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 165,
    "tm": 174270,
    "source": {
      "script": 99,
      "start": 30265,
      "end": 31078,
      "positions": "C0O30280C8O30326C16O30280C21O30334C26O30347C32O30334C36O30358C38O30372C42O30386C45O30406C52O30423C55O30428C60O30428C66O30406C71O30397C75O30469C78O30469C83O30546C91O30550C101O30603C106O30614C112O30628C124O30634C129O30628C130O30674C133O30681C140O30692C144O30703C150O30723C151O30735C155O30764C160O30773C165O30875C170O30910C175O30921C187O30961C192O30968C197O30968C204O30982C206O30980C211O31014C216O31023C221O31023C228O31048C233O31057C238O31057C245O31077",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "findLongestRegisteredExtension node:internal/modules/cjs/loader:413:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 166,
    "tm": 174439,
    "source": {
      "script": 99,
      "start": 11813,
      "end": 12242,
      "positions": "C0O11841C5O11846C10O11846C16O11872C18O11896C20O11922C22O11990C36O11943C44O11990C49O12004C51O12023C55O12032C56O12042C61O12049C63O12096C68O12115C74O12154C77O12165C84O12176C89O12196C91O12220C92O11927C95O12227C97O12240",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "basename node:path:1306:11",
    "type": "JS",
    "kind": "Unopt",
    "func": 167,
    "tm": 174584,
    "source": {
      "script": 35,
      "start": 39512,
      "end": 41904,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._extensions..js node:internal/modules/cjs/loader:1110:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 168,
    "tm": 174786,
    "source": {
      "script": 99,
      "start": 34668,
      "end": 36368,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "readFileSync node:fs:450:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 169,
    "tm": 175013,
    "source": {
      "script": 77,
      "start": 11355,
      "end": 12732,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isEncoding node:buffer:529:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 170,
    "tm": 175136,
    "source": {
      "script": 18,
      "start": 14774,
      "end": 14906,
      "positions": "C0O14789C6O14837C12O14844C20O14862C23O14862C28O14890C29O14904",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "normalizeEncoding node:internal/util:160:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 171,
    "tm": 175195,
    "source": {
      "script": 12,
      "start": 4206,
      "end": 4311,
      "positions": "C0O4216C7O4239C14O4257C19O4270C21O4284C22O4287C25O4294C29O4309",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isUint32 node:internal/validators:39:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 172,
    "tm": 175246,
    "source": {
      "script": 17,
      "start": 777,
      "end": 822,
      "positions": "C0O789C2O813C5O802C8O820",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "openSync node:fs:576:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 173,
    "tm": 175320,
    "source": {
      "script": 77,
      "start": 14426,
      "end": 14805,
      "positions": "C0O14450C5O14457C11O14503C16O14503C21O14527C37O14534C44O14585C51O14587C58O14612C63O14620C70O14625C73O14636C78O14636C95O14620C101O14758C106O14758C110O14789C112O14803",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/utils:680:42",
    "type": "JS",
    "kind": "Unopt",
    "func": 174,
    "tm": 175384,
    "source": {
      "script": 78,
      "start": 18456,
      "end": 18591,
      "positions": "C14O18511C19O18511C24O18545C29O18545C34O18577C36O18589",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "stringToFlags node:internal/fs/utils:555:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 175,
    "tm": 175607,
    "source": {
      "script": 78,
      "start": 15047,
      "end": 16281,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "parseFileMode node:internal/validators:58:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 176,
    "tm": 175747,
    "source": {
      "script": 17,
      "start": 1468,
      "end": 1764,
      "positions": "C0O1491C11O1508C17O1545C24O1570C27O1550C34O1596C41O1641C52O1602C57O1596C58O1662C66O1670C73O1703C89O1703C94O1749C96O1762",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/validators:83:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 177,
    "tm": 175831,
    "source": {
      "script": 17,
      "start": 2236,
      "end": 2817,
      "positions": "C36O2377C39O2382C45O2406C51O2447C67O2453C72O2447C73O2516C78O2521C84O2555C100O2561C105O2555C106O2624C116O2663C129O2676C142O2630C147O2624C148O2701C150O2711C157O2726C162O2741C172O2780C185O2793C198O2747C203O2741C205O2816",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isInt32 node:internal/validators:35:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 178,
    "tm": 175946,
    "source": {
      "script": 17,
      "start": 715,
      "end": 758,
      "positions": "C0O727C2O751C5O740C8O756",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "tryStatSync node:fs:404:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 179,
    "tm": 176096,
    "source": {
      "script": 77,
      "start": 10330,
      "end": 10540,
      "positions": "C0O10361C2O10381C7O10389C22O10389C28O10433C36O10457C38O10473C43O10476C48O10476C53O10495C58O10501C62O10495C63O10525C65O10538",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "tryCreateBuffer node:fs:414:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 180,
    "tm": 176196,
    "source": {
      "script": 77,
      "start": 10566,
      "end": 10853,
      "positions": "C0O10603C2O10615C7O10635C9O10646C11O10644C16O10668C23O10674C28O10668C29O10717C34O10733C39O10733C45O10756C57O10762C58O10789C65O10803C67O10813C72O10816C77O10816C93O10837C95O10851",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "allocUnsafe node:buffer:372:42",
    "type": "JS",
    "kind": "Unopt",
    "func": 181,
    "tm": 176257,
    "source": {
      "script": 18,
      "start": 10871,
      "end": 10926,
      "positions": "C0O10882C5O10882C9O10902C12O10909C16O10924",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:buffer:348:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 182,
    "tm": 176311,
    "source": {
      "script": 18,
      "start": 10169,
      "end": 10324,
      "positions": "C0O10183C8O10183C13O10215C14O10226C21O10242C23O10239C28O10261C33O10293C46O10267C51O10261C53O10323",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "validateNumber node:internal/validators:122:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 183,
    "tm": 176364,
    "source": {
      "script": 17,
      "start": 3532,
      "end": 3641,
      "positions": "C0O3550C6O3585C22O3591C27O3585C29O3640",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "allocate node:buffer:397:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 184,
    "tm": 176429,
    "source": {
      "script": 18,
      "start": 11573,
      "end": 11888,
      "positions": "C0O11584C1O11593C6O11605C11O11612C16O11629C17O11636C20O11655C24O11664C27O11645C32O11678C34O11690C39O11701C41O11699C44O11687C49O11720C52O11720C55O11748C62O11763C67O11774C75O11748C81O11797C88O11811C94O11808C100O11821C103O11821C106O11838C108O11847C109O11854C114O11861C118O11886",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "tryReadSync node:fs:429:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 185,
    "tm": 176520,
    "source": {
      "script": 77,
      "start": 10875,
      "end": 11110,
      "positions": "C0O10924C2O10936C7O10959C12O10974C29O10974C35O11010C47O11016C48O11043C55O11057C57O11067C62O11070C67O11070C83O11091C85O11108",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "readSync node:fs:684:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 186,
    "tm": 176620,
    "source": {
      "script": 77,
      "start": 17128,
      "end": 18059,
      "positions": "C0O17128C2O17171C7O17176C13O17199C18O17199C22O17240C29O17247C34O17318C40O17340C52O17352C58O17368C64O17380C70O17410C75O17436C80O17463C93O17463C98O17508C105O17524C106O17535C111O17548C112O17557C113O17576C119O17587C124O17600C140O17606C145O17600C146O17728C151O17776C162O17728C167O17792C172O17818C176O17836C184O17836C189O17891C191O17912C196O17920C221O17920C227O18012C232O18012C236O18043C238O18057",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/utils:686:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 187,
    "tm": 176721,
    "source": {
      "script": 78,
      "start": 18634,
      "end": 18755,
      "positions": "C14O18663C22O18667C29O18691C30O18700C31O18708C44O18708C49O18743C51O18753",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/validators:190:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 188,
    "tm": 176813,
    "source": {
      "script": 17,
      "start": 5662,
      "end": 5892,
      "positions": "C14O5695C19O5700C25O5733C30O5764C43O5739C48O5733C50O5891",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/validators:72:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 189,
    "tm": 176904,
    "source": {
      "script": 17,
      "start": 1809,
      "end": 2190,
      "positions": "C12O1829C25O1859C32O1892C38O1929C54O1935C59O1929C60O1988C65O1993C71O2023C87O2029C92O2023C93O2082C95O2092C102O2107C107O2120C117O2159C130O2172C143O2126C148O2120C150O2189",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/utils:636:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 190,
    "tm": 176996,
    "source": {
      "script": 78,
      "start": 17258,
      "end": 17637,
      "positions": "C0O17298C1O17309C6O17322C22O17328C27O17322C28O17386C29O17397C34O17410C50O17416C55O17410C56O17474C58O17485C64O17494C69O17518C82O17607C95O17524C100O17518C102O17636",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/utils:886:42",
    "type": "JS",
    "kind": "Unopt",
    "func": 191,
    "tm": 177147,
    "source": {
      "script": 78,
      "start": 23965,
      "end": 24523,
      "positions": "C0O23989C6O24029C14O24029C21O24077C27O24117C32O24140C35O24135C37O24132C47O24166C53O24173C56O24160C61O24188C77O24271C80O24266C98O24291C104O24298C117O24194C122O24188C125O24371C143O24377C148O24371C150O24522",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "closeSync node:fs:526:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 192,
    "tm": 178417,
    "source": {
      "script": 77,
      "start": 13295,
      "end": 13417,
      "positions": "C0O13304C5O13309C11O13344C13O13350C18O13358C31O13358C36O13387C41O13387C46O13416",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toString node:buffer:782:46",
    "type": "JS",
    "kind": "Unopt",
    "func": 193,
    "tm": 178568,
    "source": {
      "script": 18,
      "start": 23264,
      "end": 23826,
      "positions": "C0O23264C2O23305C8O23312C13O23337C20O23355C25O23337C31O23363C32O23388C37O23399C38O23409C43O23419C48O23437C50O23447C55O23459C57O23469C58O23481C65O23496C71O23525C76O23536C83O23558C90O23571C92O23579C97O23593C99O23603C100O23607C104O23651C109O23651C115O23673C116O23689C119O23689C124O23717C126O23744C133O23750C138O23744C139O23800C156O23800C161O23824",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getEncodingOps node:buffer:678:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 194,
    "tm": 178718
  },
  {
    "name": "slice node:buffer:593:12",
    "type": "JS",
    "kind": "Unopt",
    "func": 195,
    "tm": 178859,
    "source": {
      "script": 18,
      "start": 16602,
      "end": 16648,
      "positions": "C0O16627C5O16627C11O16648",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "validateString node:internal/validators:117:24",
    "type": "JS",
    "kind": "Baseline",
    "func": 14,
    "tm": 179056,
    "source": {
      "script": 17,
      "start": 3398,
      "end": 3507,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._nodeModulePaths node:internal/modules/cjs/loader:629:37",
    "type": "JS",
    "kind": "Baseline",
    "func": 125,
    "tm": 179124,
    "source": {
      "script": 99,
      "start": 18791,
      "end": 19922,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toNamespacedPath node:path:1266:19",
    "type": "JS",
    "kind": "Baseline",
    "func": 144,
    "tm": 179160,
    "source": {
      "script": 35,
      "start": 38609,
      "end": 38669,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "dirname node:path:1275:10",
    "type": "JS",
    "kind": "Baseline",
    "func": 123,
    "tm": 179205,
    "source": {
      "script": 35,
      "start": 38742,
      "end": 39411,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isFileType node:fs:205:20",
    "type": "JS",
    "kind": "Baseline",
    "func": 162,
    "tm": 179245,
    "source": {
      "script": 77,
      "start": 5285,
      "end": 5526,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._compile node:internal/modules/cjs/loader:1055:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 196,
    "tm": 179623,
    "source": {
      "script": 99,
      "start": 32760,
      "end": 34601,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "maybeCacheSourceMap node:internal/source_map/source_map_cache:74:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 197,
    "tm": 179866,
    "source": {
      "script": 96,
      "start": 2239,
      "end": 3273,
      "positions": "C0O2308C3O2308C7O2334C10O2348C15O2352C23O2372C25O2392C26O2399C30O2412C35O2423C44O2421C54O2564C64O2574C69O2564C73O2586C74O2593C75O2614C80O2640C85O2614C91O2717C93O2747C96O2775C101O2782C106O2747C112O2817C117O2837C122O2844C127O2866C131O2897C136O2915C141O2919C148O2948C155O2979C165O3009C171O3023C175O2915C183O3149C188O3167C193O3171C201O3204C211O3234C217O3248C221O3167C228O3272",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getSourceMapsEnabled node:internal/source_map/source_map_cache:43:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 198,
    "tm": 179958,
    "source": {
      "script": 96,
      "start": 1418,
      "end": 1563,
      "positions": "C0O1425C6O1468C11O1489C17O1489C22O1468C26O1536C30O1561",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setSourceMapsEnabled node:internal/source_map/source_map_cache:50:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 199,
    "tm": 180036,
    "source": {
      "script": 96,
      "start": 1594,
      "end": 2209,
      "positions": "C0O1604C8O1604C13O1709C19O1709C24O1648C29O1674C34O1738C38O1767C42O1822C48O1822C53O1796C58O1878C64O1936C70O2095C76O2095C81O2068C86O2127C90O2183C92O2201C99O2208",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "validateBoolean node:internal/validators:138:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 200,
    "tm": 180104,
    "source": {
      "script": 17,
      "start": 4042,
      "end": 4153,
      "positions": "C0O4060C6O4096C22O4102C27O4096C29O4152",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "wrapSafe node:internal/modules/cjs/loader:1017:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 201,
    "tm": 180227,
    "source": {
      "script": 99,
      "start": 31692,
      "end": 32552,
      "positions": "C0O31692C9O31735C17O31770C22O31777C27O31777C33O31796C40O31806C45O31823C52O31840C56O31929C64O31806C70O32084C74O32101C81O32111C86O32127C98O32242C102O32258C113O32111C118O32427C130O32450C135O32462C142O32473C147O32502C157O32502C162O32536C164O32536",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "compileFunction node:vm:308:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 202,
    "tm": 180432,
    "source": {
      "script": 85,
      "start": 9562,
      "end": 11817,
      "positions": "C10O9562C16O9595C25O9595C30O9627C34O9659C43O9659C48O9696C53O9718C59O9696C64O9825C76O9844C84O9866C92O9886C100O9914C108O9945C116O9977C125O10005C130O10048C139O10048C144O10096C153O10096C158O10152C167O10152C172O10204C176O10238C185O10238C190O10290C199O10290C204O10357C208O10397C221O10486C227O10526C244O10532C249O10526C250O10655C259O10655C264O10720C269O10742C275O10720C280O10914C312O10914C318O11091C322O11127C327O11164C331O11155C335O11202C341O11227C346O11256C350O11247C354O11275C358O11303C368O11324C379O11324C384O11473C393O11473C398O11435C403O11532C412O11532C417O11516C422O11584C426O11584C428O11662C432O11655C434O11688C439O11699C451O11742C459O11688C467O11806C471O11815",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/validators:167:39",
    "type": "JS",
    "kind": "Unopt",
    "func": 203,
    "tm": 181991,
    "source": {
      "script": 17,
      "start": 4966,
      "end": 5244,
      "positions": "C16O5002C21O5007C27O5034C43O5040C48O5034C49O5104C56O5111C61O5145C66O5168C71O5185C87O5191C92O5185C94O5243",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:vm:313:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 204,
    "tm": 182066,
    "source": {
      "script": 85,
      "start": 9752,
      "end": 9803,
      "positions": "C0O9766C10O9798C21O9766C26O9803",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/validators:100:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 205,
    "tm": 182142,
    "source": {
      "script": 17,
      "start": 2861,
      "end": 3371,
      "positions": "C0O2892C3O2897C9O2920C15O2959C31O2965C36O2959C37O3024C42O3029C48O3061C64O3067C69O3061C70O3138C80O3190C90O3229C109O3196C114O3190C115O3266C120O3288C125O3301C141O3307C146O3301C148O3370",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " /usr/local/lib/node_modules/0x/lib/preload/no-cluster.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 206,
    "tm": 182244,
    "source": {
      "script": 115,
      "start": 0,
      "end": 119,
      "positions": "C0O0C4O119",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " /usr/local/lib/node_modules/0x/lib/preload/no-cluster.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 207,
    "tm": 182304,
    "source": {
      "script": 115,
      "start": 0,
      "end": 119,
      "positions": "C0O16C3O16C8O44C21O44C28O118",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "importModuleDynamicallyWrap node:internal/vm/module:435:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 208,
    "tm": 182436,
    "source": {
      "script": 113,
      "start": 11705,
      "end": 12148,
      "positions": "C0O11705C13O11774C18O12146",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "makeRequireFunction node:internal/modules/cjs/helpers:58:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 209,
    "tm": 182554,
    "source": {
      "script": 98,
      "start": 1708,
      "end": 3678,
      "positions": "C0O1708C22O1744C25O1748C29O1744C31O1768C33O1779C53O1811C58O1815C69O1831C73O1811C75O1858C81O1858C83O1885C89O1894C95O1922C104O3082C109O3313C111O3329C115O3469C117O3483C121O3495C126O3518C130O3508C134O3583C137O3611C141O3602C145O3627C148O3650C152O3641C156O3661C158O3676",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "require node:internal/modules/cjs/helpers:101:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 210,
    "tm": 182654,
    "source": {
      "script": 98,
      "start": 3108,
      "end": 3154,
      "positions": "C0O3123C3O3134C8O3134C13O3148",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/cjs/helpers:29:66",
    "type": "JS",
    "kind": "Unopt",
    "func": 211,
    "tm": 182721,
    "source": {
      "script": 98,
      "start": 810,
      "end": 835,
      "positions": "C0O822C2O828C9O834",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "compileForPublicLoader node:internal/bootstrap/loaders:246:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 212,
    "tm": 182795,
    "source": {
      "script": 9,
      "start": 7543,
      "end": 8215,
      "positions": "C0O7562C6O7706C16O7749C33O7712C38O7706C39O7786C44O7786C48O7828C54O8017C61O8048C69O8017C75O8072C80O8090C90O8106C93O8122C98O8106C102O8088C106O8147C111O8147C115O8172C120O8172C124O8203C128O8211",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:cluster:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 213,
    "tm": 182956,
    "source": {
      "script": 116,
      "start": 0,
      "end": 1291,
      "positions": "C0O0C4O1291",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:cluster:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 214,
    "tm": 183234,
    "source": {
      "script": 116,
      "start": 0,
      "end": 1291,
      "positions": "C0O1172C3O1200C7O1189C19O1227C24O1272C29O1244C33O1242C38O1290",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/primary:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 215,
    "tm": 183967,
    "source": {
      "script": 117,
      "start": 0,
      "end": 10794,
      "positions": "C0O0C4O10794",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/primary:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 216,
    "tm": 186598
  },
  {
    "name": " node:child_process:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 217,
    "tm": 187443,
    "source": {
      "script": 118,
      "start": 0,
      "end": 24635,
      "positions": "C0O0C4O24635",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:child_process:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 218,
    "tm": 190042,
    "source": {
      "script": 118,
      "start": 0,
      "end": 24635,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/child_process:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 219,
    "tm": 191387,
    "source": {
      "script": 119,
      "start": 0,
      "end": 30803,
      "positions": "C0O0C4O30803",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/child_process:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 220,
    "tm": 194625
  },
  {
    "name": "<instance_members_initializer> node:internal/child_process:524:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 221,
    "tm": 194768,
    "source": {
      "script": 119,
      "start": 13654,
      "end": 13711,
      "positions": "C3O13665C16O13681C26O13706C34O13711",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:net:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 222,
    "tm": 196255,
    "source": {
      "script": 120,
      "start": 0,
      "end": 47747,
      "positions": "C0O0C4O47747",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:net:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 223,
    "tm": 201427
  },
  {
    "name": " node:internal/net:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 224,
    "tm": 202197,
    "source": {
      "script": 121,
      "start": 0,
      "end": 1749,
      "positions": "C0O0C4O1749",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/net:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 225,
    "tm": 202647,
    "source": {
      "script": 121,
      "start": 0,
      "end": 1749,
      "positions": "C0O0C45O25C50O35C56O58C61O99C64O99C69O116C73O99C75O149C78O149C83O133C89O187C92O187C96O187C98O246C101O316C106O320C119O335C124O360C129O375C142O360C147O360C149O417C152O457C160O483C173O499C183O473C192O521C205O537C218O547C228O511C237O569C250O586C263O597C273O559C282O625C295O643C308O658C321O669C331O615C340O697C353O715C366O730C379O741C389O687C398O769C411O787C424O802C437O813C447O759C456O841C469O859C482O874C495O885C505O831C514O919C527O934C540O947C550O903C556O965C562O457C567O457C569O1633C576O1654C582O1662C588O1672C594O1682C601O1721C611O1648C616O1748",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/dtrace:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 226,
    "tm": 203080,
    "source": {
      "script": 122,
      "start": 0,
      "end": 568,
      "positions": "C0O0C4O568",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/dtrace:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 227,
    "tm": 203183,
    "source": {
      "script": 122,
      "start": 0,
      "end": 568,
      "positions": "C0O30C3O30C8O322C17O334C25O68C36O109C47O151C58O192C69O234C80O277C91O368C98O389C104O419C110O450C116O480C122O511C128O543C134O383C139O567",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "protoGetter node:net:718:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 228,
    "tm": 203715,
    "source": {
      "script": 120,
      "start": 18631,
      "end": 18771,
      "positions": "C0O18652C8O18680C13O18691C20O18755C27O18652C33O18770",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:dgram:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 229,
    "tm": 204589,
    "source": {
      "script": 123,
      "start": 0,
      "end": 27485,
      "positions": "C0O0C4O27485",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:dgram:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 230,
    "tm": 207653
  },
  {
    "name": " node:internal/dgram:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 231,
    "tm": 209773,
    "source": {
      "script": 124,
      "start": 0,
      "end": 1849,
      "positions": "C0O0C4O1849",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/dgram:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 232,
    "tm": 210255,
    "source": {
      "script": 124,
      "start": 0,
      "end": 1849,
      "positions": "C0O0C56O25C62O50C67O94C73O94C78O84C83O138C86O138C91O130C97O195C100O195C105O175C111O263C117O263C122O230C128O241C134O317C137O317C142O303C148O350C154O403C157O403C162O431C163O431C165O1776C172O1797C178O1813C184O1836C190O1791C195O1848",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/socket_list:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 233,
    "tm": 210939,
    "source": {
      "script": 125,
      "start": 0,
      "end": 2705,
      "positions": "C0O0C4O2705",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/socket_list:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 234,
    "tm": 211226,
    "source": {
      "script": 125,
      "start": 0,
      "end": 2705,
      "positions": "C0O0C8O57C11O57C16O83C21O23C27O113C30O113C35O218C73O1525C101O2649C108O2668C114O2684C120O2664C125O2704",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "customPromiseExecFunction node:child_process:231:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 235,
    "tm": 211487,
    "source": {
      "script": 118,
      "start": 6605,
      "end": 6969,
      "positions": "C0O6605C9O6619C13O6967",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/round_robin_handle:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 236,
    "tm": 211748,
    "source": {
      "script": 126,
      "start": 0,
      "end": 3155,
      "positions": "C0O0C4O3155",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/round_robin_handle:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 237,
    "tm": 212117,
    "source": {
      "script": 126,
      "start": 0,
      "end": 3155,
      "positions": "C0O0C37O25C43O41C49O63C55O86C61O97C67O139C70O139C74O139C76O179C79O179C83O179C85O218C88O218C93O203C99O275C102O275C107O261C113O305C115O320C119O1146C128O1160C132O1811C141O1828C145O2175C154O2196C158O2563C167O2581C172O3154",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/utils:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 238,
    "tm": 212307,
    "source": {
      "script": 127,
      "start": 0,
      "end": 1053,
      "positions": "C0O0C4O1053",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/utils:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 239,
    "tm": 212447,
    "source": {
      "script": 127,
      "start": 0,
      "end": 1053,
      "positions": "C0O0C24O25C30O41C35O68C42O89C48O103C54O83C58O134C60O134C65O134C67O159C68O159C71O1052",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/shared_handle:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 240,
    "tm": 212617,
    "source": {
      "script": 128,
      "start": 0,
      "end": 1102,
      "positions": "C0O0C4O1102",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/shared_handle:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 241,
    "tm": 212765,
    "source": {
      "script": 128,
      "start": 0,
      "end": 1102,
      "positions": "C0O0C22O22C28O62C31O62C35O62C37O104C40O104C44O104C46O143C49O143C53O143C55O160C57O175C61O685C70O699C74O861C83O878C88O1101",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/worker:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 242,
    "tm": 212928,
    "source": {
      "script": 129,
      "start": 0,
      "end": 1315,
      "positions": "C0O0C4O1315",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/worker:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 243,
    "tm": 213147,
    "source": {
      "script": 129,
      "start": 0,
      "end": 1315,
      "positions": "C0O0C17O25C22O49C28O102C31O102C35O102C37O122C39O137C43O812C46O840C54O864C59O812C64O876C70O876C75O921C78O928C87O943C91O1009C94O1016C103O1031C107O1117C110O1124C119O1141C123O1235C126O1242C135O1264C140O1314",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "EventEmitter node:events:84:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 244,
    "tm": 213413,
    "source": {
      "script": 13,
      "start": 2479,
      "end": 2527,
      "positions": "C0O2490C3O2503C8O2508C13O2508C20O2526",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "EventEmitter.init node:events:194:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 245,
    "tm": 213506,
    "source": {
      "script": 13,
      "start": 5579,
      "end": 6168,
      "positions": "C0O5600C6O5636C13O5648C16O5648C21O5674C25O5644C30O5690C32O5705C37O5705C41O5703C45O5729C46O5747C50O5785C60O5778C64O5817C71O5825C80O5852C85O5873C93O5852C98O5926C100O5931C105O5943C108O5956C113O5943C117O5941C123O6112C125O6117C131O6142C138O6152C140O6151C143O6127C148O6167",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getESMFacade node:internal/bootstrap/loaders:264:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 246,
    "tm": 213693,
    "source": {
      "script": 9,
      "start": 8231,
      "end": 8860,
      "positions": "C0O8231C8O8249C14O8269C18O8276C19O8304C29O8304C34O8289C39O8352C42O8365C51O8396C53O8396C55O8426C62O8451C67O8426C72O8468C82O8468C87O8516C89O8568C102O8530C107O8528C111O8774C116O8781C121O8781C125O8805C130O8812C140O8812C146O8849C150O8856",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/bootstrap/loaders:273:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 247,
    "tm": 213832,
    "source": {
      "script": 9,
      "start": 8595,
      "end": 8700,
      "positions": "C0O8608C5O8621C10O8621C14O8649C24O8670C27O8683C32O8649C39O8699",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "syncExports node:internal/bootstrap/loaders:287:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 248,
    "tm": 213912,
    "source": {
      "script": 9,
      "start": 9167,
      "end": 9500,
      "positions": "C0O9195C5O9220C11O9249C13O9262C17O9254C22O9304C24O9309C28O9322C30O9337C35O9352C37O9375C42O9382C51O9434C54O9446C59O9472C67O9434C73O9382C79O9271C84O9236C88O9499",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getOwn node:internal/bootstrap/loaders:180:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 249,
    "tm": 213979,
    "source": {
      "script": 9,
      "start": 5498,
      "end": 5652,
      "positions": "C0O5534C5O5541C14O5595C26O5595C34O5650",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "(?:^|\\/)\\.?\\.$",
    "timestamp": 214205,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": " node:vm:313:27",
    "type": "JS",
    "kind": "Baseline",
    "func": 204,
    "tm": 215800,
    "source": {
      "script": 85,
      "start": 9752,
      "end": 9803,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "internalBinding node:internal/bootstrap/loaders:164:45",
    "type": "JS",
    "kind": "Baseline",
    "func": 8,
    "tm": 215943,
    "source": {
      "script": 9,
      "start": 5115,
      "end": 5353,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "deprecate node:internal/util:96:19",
    "type": "JS",
    "kind": "Baseline",
    "func": 113,
    "tm": 216023,
    "source": {
      "script": 12,
      "start": 2408,
      "end": 3584,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getOwn node:internal/bootstrap/loaders:180:16",
    "type": "JS",
    "kind": "Baseline",
    "func": 249,
    "tm": 216218,
    "source": {
      "script": 9,
      "start": 5498,
      "end": 5652,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "syncExports node:internal/bootstrap/loaders:287:14",
    "type": "JS",
    "kind": "Baseline",
    "func": 248,
    "tm": 216324,
    "source": {
      "script": 9,
      "start": 9167,
      "end": 9500,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "nextPart node:fs:2395:31",
    "type": "JS",
    "kind": "Baseline",
    "func": 160,
    "tm": 216366,
    "source": {
      "script": 77,
      "start": 63703,
      "end": 63761,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " /usr/local/lib/node_modules/0x/lib/preload/redir-stdout.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 250,
    "tm": 217265,
    "source": {
      "script": 130,
      "start": 0,
      "end": 412,
      "positions": "C0O0C4O412",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " /usr/local/lib/node_modules/0x/lib/preload/redir-stdout.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 251,
    "tm": 217376,
    "source": {
      "script": 130,
      "start": 0,
      "end": 412,
      "positions": "C0O25C3O25C8O56C13O118C16O130C21O155C30O127C42O185C53O227C65O219C70O219C72O294C76O301C81O316C93O392C101O301C109O411",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get BlockList node:net:1779:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 252,
    "tm": 217586,
    "source": {
      "script": 120,
      "start": 47366,
      "end": 47455,
      "positions": "C0O47375C14O47389C19O47418C26O47385C32O47434C36O47451",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/blocklist:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 253,
    "tm": 217834,
    "source": {
      "script": 131,
      "start": 0,
      "end": 3877,
      "positions": "C0O0C4O3877",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/blocklist:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 254,
    "tm": 218293,
    "source": {
      "script": 131,
      "start": 0,
      "end": 3877,
      "positions": "C0O0C35O25C41O36C46O60C51O127C54O127C59O106C65O204C68O204C73O190C78O293C81O293C86O241C92O267C98O385C101O385C106O339C111O357C116O367C121O450C124O450C129O438C135O501C138O501C142O501C144O545C147O545C152O528C158O611C161O611C166O637C171O584C177O688C180O688C185O654C191O669C197O745C204O884C241O3223C251O3384C278O3519C301O3691C306O3725C311O3735C315O3713C319O3787C324O3808C329O3748C334O3821C341O3842C347O3855C353O3836C358O3876",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/socketaddress:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 255,
    "tm": 218882,
    "source": {
      "script": 132,
      "start": 0,
      "end": 3207,
      "positions": "C0O0C4O3207",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/socketaddress:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 256,
    "tm": 219620,
    "source": {
      "script": 132,
      "start": 0,
      "end": 3207,
      "positions": "C0O0C38O25C43O49C48O143C51O143C56O100C62O118C68O129C74O257C77O257C82O185C88O203C94O221C100O237C106O345C109O345C114O345C119O313C125O419C128O419C133O405C138O466C141O466C146O454C152O557C155O557C160O511C165O529C170O539C175O618C178O618C182O618C184O653C187O653C191O653C193O701C226O2071C236O2313C246O2482C279O2877C302O2988C307O3028C312O3038C316O3010C320O3094C325O3119C330O3051C335O3132C342O3153C348O3170C354O3195C360O3147C365O3206",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get SocketAddress node:net:1783:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 257,
    "tm": 219966,
    "source": {
      "script": 120,
      "start": 47476,
      "end": 47581,
      "positions": "C0O47485C14O47503C19O47536C26O47499C32O47556C36O47577",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:worker_threads:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 258,
    "tm": 220125,
    "source": {
      "script": 133,
      "start": 0,
      "end": 686,
      "positions": "C0O0C4O686",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:worker_threads:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 259,
    "tm": 220239,
    "source": {
      "script": 133,
      "start": 0,
      "end": 686,
      "positions": "C0O139C3O139C8O25C13O41C18O54C23O72C28O94C33O116C38O128C43O285C46O285C51O178C56O193C61O211C66O239C71O263C76O353C79O353C84O327C89O382C96O403C102O419C108O434C114O452C120O476C126O504C132O528C138O546C144O558C150O571C156O621C162O641C168O663C174O397C179O685",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/worker:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 260,
    "tm": 220852,
    "source": {
      "script": 134,
      "start": 0,
      "end": 15348,
      "positions": "C0O0C4O15348",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/worker:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 261,
    "tm": 222432
  },
  {
    "name": " node:internal/error_serdes:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 262,
    "tm": 222887,
    "source": {
      "script": 135,
      "start": 0,
      "end": 4030,
      "positions": "C0O0C4O4030",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/error_serdes:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 263,
    "tm": 223946,
    "source": {
      "script": 135,
      "start": 0,
      "end": 4030,
      "positions": "C0O0C100O30C106O30C111O47C115O30C117O66C123O91C128O100C133O113C139O138C145O154C151O170C157O194C163O228C169O257C175O281C180O295C186O322C191O336C196O354C201O365C207O386C212O401C217O414C222O467C223O467C225O496C227O496C229O523C231O523C233O542C240O546C246O553C252O564C258O576C264O586C270O599C276O615C282O542C284O658C287O670C294O658C299O658C301O2038C302O2038C304O2235C305O2235C307O3156C308O3156C310O3975C317O3994C323O4010C329O3990C334O4029",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Socket node:net:283:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 264,
    "tm": 224514
  },
  {
    "name": "Duplex node:internal/streams/duplex:52:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 265,
    "tm": 224831,
    "source": {
      "script": 48,
      "start": 1951,
      "end": 2360,
      "positions": "C0O1965C2O1976C7O2000C12O2007C17O2027C18O2031C23O2040C28O2040C34O2063C39O2072C44O2072C50O2095C51O2114C55O2125C59O2156C65O2165C70O2182C71O2196C75O2222C81O2231C86O2248C87O2262C91O2288C97O2302C102O2321C103O2340C108O2359",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Readable node:internal/streams/readable:181:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 266,
    "tm": 225418,
    "source": {
      "script": 49,
      "start": 6246,
      "end": 7126,
      "positions": "C0O6246C9O6260C16O6271C21O6297C28O6304C33O6326C34O6481C41O6497C44O6504C48O6486C52O6515C71O6537C76O6535C80O6584C84O6622C92O6649C95O6670C99O6660C103O6700C111O6730C114O6754C118O6744C122O6787C130O6819C133O6845C137O6835C141O6872C149O6883C151O6899C158O6932C166O6899C171O6954C178O6961C186O6961C192O6985C199O6997C212O6997C219O7125",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Stream node:internal/streams/legacy:10:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 267,
    "tm": 229681,
    "source": {
      "script": 50,
      "start": 127,
      "end": 160,
      "positions": "C0O138C5O141C10O141C17O159",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "ReadableState node:internal/streams/readable:78:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 268,
    "tm": 230214,
    "source": {
      "script": 49,
      "start": 2519,
      "end": 6226,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getHighWaterMark node:internal/streams/state:19:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 269,
    "tm": 230370,
    "source": {
      "script": 53,
      "start": 424,
      "end": 832,
      "positions": "C0O478C12O478C18O529C21O552C26O557C33O585C38O611C47O633C56O678C69O684C74O678C75O732C80O739C84O754C85O781C88O818C93O788C97O830",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "highWaterMarkFrom node:internal/streams/state:10:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 270,
    "tm": 230679,
    "source": {
      "script": 53,
      "start": 168,
      "end": 309,
      "positions": "C0O218C7O250C15O270C19O288C25O307",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getDefaultHighWaterMark node:internal/streams/state:15:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 271,
    "tm": 230745,
    "source": {
      "script": 53,
      "start": 343,
      "end": 397,
      "positions": "C0O360C12O395",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "BufferList node:internal/streams/buffer_list:14:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 272,
    "tm": 230817,
    "source": {
      "script": 52,
      "start": 265,
      "end": 338,
      "positions": "C0O274C1O284C5O296C6O306C10O318C11O330C16O337",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "construct node:internal/streams/destroy:225:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 273,
    "tm": 231384,
    "source": {
      "script": 47,
      "start": 4626,
      "end": 5014,
      "positions": "C0O4661C8O4694C9O4701C10O4726C15O4761C20O4780C24O4793C25O4807C29O4822C33O4835C34O4849C38O4872C45O4877C48O4872C54O4908C61O4922C64O4908C72O4934C77O4959C78O4966C79O4974C82O4982C90O4982C97O5013",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Writable node:internal/streams/writable:219:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 274,
    "tm": 232432,
    "source": {
      "script": 56,
      "start": 7409,
      "end": 8929,
      "positions": "C0O7409C9O7983C16O8000C19O8007C23O7989C27O8019C33O8037C44O8037C51O8093C58O8100C63O8122C64O8126C83O8148C88O8146C92O8195C96O8233C104O8261C107O8283C111O8273C115O8314C123O8343C126O8366C130O8356C134O8398C142O8428C145O8452C149O8442C153O8485C161O8513C164O8535C168O8525C172O8566C180O8598C183O8624C187O8614C191O8651C197O8665C204O8698C212O8665C217O8720C224O8727C232O8727C238O8751C245O8763C258O8763C265O8928",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "WritableState node:internal/streams/writable:77:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 275,
    "tm": 235020,
    "source": {
      "script": 56,
      "start": 2482,
      "end": 6983,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resetBuffer node:internal/streams/writable:202:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 276,
    "tm": 235253,
    "source": {
      "script": 56,
      "start": 7005,
      "end": 7117,
      "positions": "C0O7017C2O7032C6O7040C7O7060C11O7067C12O7084C16O7094C17O7108C22O7116",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "set node:internal/streams/readable:1175:8",
    "type": "JS",
    "kind": "Unopt",
    "func": 277,
    "tm": 235351,
    "source": {
      "script": 49,
      "start": 35837,
      "end": 35964,
      "positions": "C0O35887C6O35918C13O35946C15O35942C20O35963",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "createHandle node:net:137:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 278,
    "tm": 235439,
    "source": {
      "script": 120,
      "start": 3597,
      "end": 3957,
      "positions": "C0O3617C13O3617C18O3660C23O3660C28O3683C30O3692C35O3710C42O3733C46O3745C49O3759C57O3768C60O3782C67O3717C72O3795C73O3803C75O3812C80O3829C87O3851C91O3863C94O3876C102O3885C105O3898C112O3836C117O3911C118O3919C125O3925C130O3919",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "set node:net:1707:6",
    "type": "JS",
    "kind": "Unopt",
    "func": 279,
    "tm": 235792,
    "source": {
      "script": 120,
      "start": 45570,
      "end": 45603,
      "positions": "C0O45576C2O45588C7O45597C13O45601",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get node:net:1706:6",
    "type": "JS",
    "kind": "Unopt",
    "func": 280,
    "tm": 235867,
    "source": {
      "script": 120,
      "start": 45535,
      "end": 45563,
      "positions": "C0O45540C2O45552C4O45551C7O45561",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Readable.on node:internal/streams/readable:875:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 281,
    "tm": 236076,
    "source": {
      "script": 49,
      "start": 27773,
      "end": 28672,
      "positions": "C0O27798C5O27805C10O27815C15O27818C29O27818C35O27859C40O27878C42O27885C47O28067C55O28067C62O28093C65O28060C69O28186C75O28194C80O28216C85O28216C91O28235C93O28242C98O28275C104O28296C110O28323C112O28368C118O28347C122O28382C123O28396C127O28411C128O28433C132O28448C140O28475C145O28489C150O28448C155O28515C161O28533C164O28533C170O28577C176O28596C179O28604C187O28604C193O28659C195O28670",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initSocketHandle node:net:254:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 282,
    "tm": 236203,
    "source": {
      "script": 120,
      "start": 6321,
      "end": 6899,
      "positions": "C0O6337C5O6337C9O6353C10O6368C14O6454C20O6474C27O6482C32O6496C36O6513C43O6530C45O6528C49O6548C51O6553C57O6591C62O6572C66O6570C70O6620C72O6625C74O6624C78O6639C80O6675C82O6680C84O6679C88O6699C90O6740C94O6758C99O6763C105O6796C106O6803C107O6812C109O6817C114O6826C118O6856C123O6864C128O6864C134O6898",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "undestroy node:internal/streams/destroy:160:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 283,
    "tm": 236300,
    "source": {
      "script": 47,
      "start": 3064,
      "end": 3661,
      "positions": "C0O3086C5O3119C10O3138C14O3151C15O3165C19O3177C20O3186C24O3199C25O3214C29O3227C30O3239C34O3252C35O3262C39O3274C40O3289C44O3302C45O3312C49O3325C50O3333C54O3346C55O3359C59O3375C63O3388C64O3402C68O3414C69O3426C73O3439C74O3448C78O3461C79O3476C83O3489C84O3499C88O3511C89O3526C93O3539C94O3547C98O3560C99O3569C103O3582C104O3596C108O3609C109O3623C113O3636C114O3647C119O3660",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getNewAsyncId node:net:156:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 284,
    "tm": 236418,
    "source": {
      "script": 120,
      "start": 3982,
      "end": 4098,
      "positions": "C0O3995C4O4028C14O4061C17O4061C22O4083C27O4083C31O4096",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get node:internal/bootstrap/pre_execution:315:8",
    "type": "JS",
    "kind": "Unopt",
    "func": 285,
    "tm": 236549,
    "source": {
      "script": 92,
      "start": 10116,
      "end": 10149,
      "positions": "C0O10127C4O10143",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " /usr/local/lib/node_modules/0x/lib/preload/soft-exit.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 286,
    "tm": 237093,
    "source": {
      "script": 136,
      "start": 0,
      "end": 207,
      "positions": "C0O0C4O207",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " /usr/local/lib/node_modules/0x/lib/preload/soft-exit.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 287,
    "tm": 237170,
    "source": {
      "script": 136,
      "start": 0,
      "end": 207,
      "positions": "C0O40C5O76C7O101C11O81C16O118C20O126C27O146C31O151C35O159C40O126C46O110C51O63C54O168C61O187C67O183C72O206",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeFrozenIntrinsics node:internal/bootstrap/pre_execution:467:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 288,
    "tm": 237374,
    "source": {
      "script": 92,
      "start": 15005,
      "end": 15227,
      "positions": "C0O15012C8O15016C14O15061C17O15069C28O15069C34O15181C40O15181C45O15218C49O15226",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "executeUserEntryPoint node:internal/modules/run_main:74:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 289,
    "tm": 237466,
    "source": {
      "script": 114,
      "start": 2320,
      "end": 2625,
      "positions": "C7O2336C14O2340C22O2370C25O2370C30O2416C33O2416C38O2452C40O2476C45O2487C50O2476C56O2588C61O2595C73O2595C79O2624",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resolveMainPath node:internal/modules/run_main:11:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 290,
    "tm": 237538,
    "source": {
      "script": 114,
      "start": 296,
      "end": 710,
      "positions": "C0O468C5O475C12O485C15O490C20O490C30O475C36O520C38O539C39O546C40O579C48O579C53O625C55O656C60O667C65O692C67O708",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "realpathSync node:fs:2408:22",
    "type": "JS",
    "kind": "Baseline",
    "func": 151,
    "tm": 237943,
    "source": {
      "script": 77,
      "start": 63994,
      "end": 67905,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "noop node:internal/util/debuglog:47:14",
    "type": "JS",
    "kind": "Baseline",
    "func": 135,
    "tm": 237988,
    "source": {
      "script": 40,
      "start": 1419,
      "end": 1427,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "debuglog node:internal/util/debuglog:71:18",
    "type": "JS",
    "kind": "Baseline",
    "func": 53,
    "tm": 238029,
    "source": {
      "script": 40,
      "start": 2232,
      "end": 3279,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "canBeRequiredByUsers node:internal/bootstrap/loaders:240:30",
    "type": "JS",
    "kind": "Baseline",
    "func": 137,
    "tm": 238062,
    "source": {
      "script": 9,
      "start": 7353,
      "end": 7449,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isInt32 node:internal/validators:35:17",
    "type": "JS",
    "kind": "Baseline",
    "func": 178,
    "tm": 238093,
    "source": {
      "script": 17,
      "start": 715,
      "end": 758,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "readPackageScope node:internal/modules/cjs/loader:321:26",
    "type": "JS",
    "kind": "Baseline",
    "func": 141,
    "tm": 238139,
    "source": {
      "script": 99,
      "start": 8919,
      "end": 9437,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isUint32 node:internal/validators:39:18",
    "type": "JS",
    "kind": "Baseline",
    "func": 172,
    "tm": 238171,
    "source": {
      "script": 17,
      "start": 777,
      "end": 822,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "shouldUseESMLoader node:internal/modules/run_main:26:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 291,
    "tm": 238302,
    "source": {
      "script": 114,
      "start": 739,
      "end": 1299,
      "positions": "C0O773C8O773C13O816C15O836C16O848C17O891C25O891C30O948C32O980C37O996C38O1008C39O1056C45O1072C51O1072C58O1119C59O1131C60O1134C66O1151C72O1151C79O1198C80O1211C81O1226C86O1226C91O1256C93O1274C98O1279C105O1284C108O1297",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "runMainESM node:internal/modules/run_main:43:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 292,
    "tm": 238471,
    "source": {
      "script": 114,
      "start": 1320,
      "end": 1635,
      "positions": "C0O1320C12O1355C20O1355C25O1343C30O1423C38O1423C43O1405C49O1451C54O1469C59O1469C64O1451C69O1634",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "loadESM node:internal/process/esm_loader:85:41",
    "type": "JS",
    "kind": "Unopt",
    "func": 293,
    "tm": 238565,
    "source": {
      "script": 101,
      "start": 2568,
      "end": 2881,
      "positions": "C10O2568C21O2593C24O2599C35O2593C58O2623C60O2638C63O2629C75O2623C113O2672C120O2676C125O2723C130O2731C138O2731C143O2759C154O2766C155O2777C163O2777C168O2802C178O2803C197O2880",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeLoader node:internal/process/esm_loader:50:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 294,
    "tm": 238732,
    "source": {
      "script": 101,
      "start": 1441,
      "end": 2526,
      "positions": "C10O1441C18O1475C24O1475C29O1456C34O1637C37O1637C42O1700C48O1708C59O1715C60O1755C66O1755C71O1727C76O1783C79O1783C83O1840C88O1857C91O1871C96O1871C103O1877C110O1861C111O1900C114O2159C119O2159C125O2298C132O2329C135O2329C140O2347C147O2358C152O2358C163O2304C176O2274C202O2482C207O2498C212O2498C225O2482C259O2525",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "handleMainPromise node:internal/modules/run_main:55:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 295,
    "tm": 238839,
    "source": {
      "script": 114,
      "start": 1669,
      "end": 2104,
      "positions": "C10O1669C23O1988C26O1996C34O1996C43O2029C53O2036C90O2069C93O2077C101O2077C145O2103",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/run_main:47:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 296,
    "tm": 238933,
    "source": {
      "script": 114,
      "start": 1477,
      "end": 1630,
      "positions": "C0O1511C7O1516C15O1516C24O1545C30O1545C35O1568C44O1613C49O1619C54O1626",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "pathToFileURL node:internal/url:1455:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 297,
    "tm": 239047,
    "source": {
      "script": 33,
      "start": 40073,
      "end": 41302,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "URL node:internal/url:620:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 298,
    "tm": 239153,
    "source": {
      "script": 33,
      "start": 16989,
      "end": 17324,
      "positions": "C0O17043C5O17071C7O17089C11O17121C18O17136C28O17150C30O17149C34O17170C38O17175C45O17190C48O17186C53O17184C57O17208C73O17260C81O17260C98O17208C104O17323",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "URLContext node:internal/url:160:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 299,
    "tm": 239221,
    "source": {
      "script": 33,
      "start": 3700,
      "end": 3912,
      "positions": "C0O3709C1O3720C5O3729C7O3741C11O3752C13O3766C17O3776C19O3790C23O3800C24O3810C28O3822C29O3832C33O3844C35O3854C39O3864C40O3875C44O3887C45O3901C50O3911",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "onParseComplete node:internal/url:532:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 300,
    "tm": 239358,
    "source": {
      "script": 33,
      "start": 14195,
      "end": 14864,
      "positions": "C0O14309C2O14314C4O14313C8O14326C10O14336C14O14347C16O14358C20O14372C22O14396C24O14394C29O14420C43O14385C47O14445C49O14469C51O14467C56O14493C70O14458C74O14518C76O14527C80O14537C82O14557C84O14555C89O14577C101O14585C103O14546C107O14598C109O14608C113O14619C115O14632C119O14646C121O14655C125O14665C127O14675C129O14674C134O14728C136O14733C141O14753C144O14749C149O14747C153O14776C155O14781C157O14780C163O14795C168O14804C172O14818C177O14840C179O14839C183O14818C189O14863",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "URLSearchParams node:internal/url:182:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 301,
    "tm": 239582,
    "source": {
      "script": 33,
      "start": 4325,
      "end": 6722,
      "positions": "C10O4350C16O4399C18O4404C24O4418C30O4435C42O4518C44O4523C46O4522C50O4546C52O4566C54O4565C57O4557C62O4764C64O4769C66O4768C71O4792C73O4797C77O4825C83O4825C87O4811C93O4847C101O4902C107O4948C119O4954C124O4948C125O5148C128O5179C156O5171C187O5171C190O5197C208O5318C210O5317C217O5364C233O5370C238O5364C239O5473C243O5509C271O5498C302O5498C305O5527C313O5561C317O5561C323O5527C331O5487C407O5594C413O5594C418O5160C492O5655C494O5660C500O5674C504O5707C532O5699C563O5699C566O5735C574O5742C579O5763C595O5769C600O5763C601O5850C609O5874C611O5873C617O5893C624O5902C629O5850C634O5688C707O6046C709O6051C715O6065C719O6092C725O6092C730O6135C732O6147C736O6140C741O6184C743O6188C747O6216C753O6216C759O6270C761O6301C767O6344C773O6344C778O6393C786O6409C791O6393C796O6429C798O6434C800O6433C805O6448C811O6448C817O6156C822O6122C827O6544C833O6551C838O6576C839O6584C846O6588C851O6609C861O6609C867O6625C871O6625C876O6697C878O6702C883O6711C888O6721",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initSearchParams node:internal/url:1016:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 302,
    "tm": 239767,
    "source": {
      "script": 33,
      "start": 27037,
      "end": 27152,
      "positions": "C0O27053C4O27070C6O27074C11O27088C15O27098C16O27105C17O27112C19O27116C25O27132C29O27130C34O27151",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "encodePathChars node:internal/url:1440:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 303,
    "tm": 239872,
    "source": {
      "script": 33,
      "start": 39357,
      "end": 40049,
      "positions": "C0O39372C8O39376C15O39420C22O39464C31O39431C38O39544C46O39562C52O39562C59O39607C66O39651C75O39618C82O39677C90O39681C97O39726C104O39770C113O39737C120O39794C128O39798C135O39843C142O39887C151O39854C158O39918C166O39922C173O39967C180O40011C189O39978C196O40031C198O40047",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "set pathname node:internal/url:884:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 304,
    "tm": 239964,
    "source": {
      "script": 33,
      "start": 23613,
      "end": 23815,
      "positions": "C0O23660C5O23682C9O23691C11O23690C16O23712C17O23719C18O23724C29O23736C38O23759C40O23758C49O23799C54O23799C63O23724C69O23814",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/url:636:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 305,
    "tm": 240071,
    "source": {
      "script": 33,
      "start": 17431,
      "end": 17506,
      "positions": "C0O17440C4O17453C6O17452C10O17462C19O17470C21O17468C26O17496C30O17502",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "onParsePathComplete node:internal/url:591:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 306,
    "tm": 240178,
    "source": {
      "script": 33,
      "start": 16154,
      "end": 16620,
      "positions": "C0O16272C2O16277C4O16276C8O16289C10O16302C12O16300C17O16322C22O16335C24O16344C28O16356C35O16369C40O16366C46O16404C48O16413C52O16423C59O16437C61O16436C66O16433C70O16515C72O16528C74O16526C79O16548C84O16561C86O16570C90O16582C97O16595C102O16592C107O16619",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get href node:internal/url:734:11",
    "type": "JS",
    "kind": "Unopt",
    "func": 307,
    "tm": 240250,
    "source": {
      "script": 33,
      "start": 20096,
      "end": 20134,
      "positions": "C0O20105C4O20117C6O20116C12O20125C17O20130",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/url:682:12",
    "type": "JS",
    "kind": "Unopt",
    "func": 308,
    "tm": 240366,
    "source": {
      "script": 33,
      "start": 18731,
      "end": 19981,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/validators:153:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 309,
    "tm": 240477,
    "source": {
      "script": 17,
      "start": 4365,
      "end": 4924,
      "positions": "C0O4423C4O4463C9O4499C14O4537C21O4573C26O4609C33O4645C38O4659C46O4706C50O4720C53O4720C67O4795C75O4860C91O4866C96O4860C98O4923",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "import node:internal/modules/esm/loader:268:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 310,
    "tm": 240612,
    "source": {
      "script": 102,
      "start": 7099,
      "end": 7615,
      "positions": "C10O7099C18O7144C25O7144C30O7174C32O7187C41O7201C50O7244C55O7269C64O7269C70O7305C81O7478C90O7320C98O7310C100O7310C116O7347C123O7370C128O7347C135O7394C146O7395C152O7428C162O7429C167O7340C178O7292C193O7504C204O7525C209O7521C215O7510C227O7504C253O7556C262O7607C275O7611",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getModuleJob node:internal/modules/esm/loader:221:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 311,
    "tm": 240748,
    "source": {
      "script": 102,
      "start": 5668,
      "end": 6606,
      "positions": "C4O5668C30O5721C33O5732C38O5732C52O5721C75O5705C81O5713C86O5777C89O5782C94O5792C99O5792C105O5866C109O5897C112O5902C117O5912C122O5927C126O5912C132O5940C136O5963C148O5974C149O6003C154O6345C163O6386C169O6386C174O6430C199O6436C205O6556C208O6561C213O6571C218O6571C224O6591C236O6602",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resolve node:internal/modules/esm/loader:402:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 312,
    "tm": 240964,
    "source": {
      "script": 102,
      "start": 10560,
      "end": 11833,
      "positions": "C10O10560C18O10612C22O10642C34O10710C37O10710C43O10741C63O10747C68O10741C69O10865C76O10914C78O10919C83O10929C87O10956C89O10961C93O10972C100O10979C111O11022C117O11032C121O11082C128O11117C134O11137C144O11066C157O11060C183O11192C189O11236C207O11242C212O11236C213O11364C218O11372C223O11397C234O11473C255O11479C260O11473C261O11615C267O11652C288O11658C293O11652C294O11789C301O11804C307O11818C323O11829",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "defaultResolve node:internal/modules/esm/resolve:981:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 313,
    "tm": 241280
  },
  {
    "name": "get protocol node:internal/url:769:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 314,
    "tm": 241460,
    "source": {
      "script": 33,
      "start": 20934,
      "end": 20975,
      "positions": "C0O20943C4O20955C6O20954C10O20964C14O20971",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getConditionsSet node:internal/modules/esm/resolve:164:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 315,
    "tm": 241597,
    "source": {
      "script": 105,
      "start": 5169,
      "end": 5496,
      "positions": "C0O5186C6O5233C8O5229C13O5259C18O5264C24O5298C40O5304C45O5298C46O5426C53O5433C58O5457C59O5464C63O5494",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "moduleResolve node:internal/modules/esm/resolve:917:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 316,
    "tm": 241684,
    "source": {
      "script": 105,
      "start": 30750,
      "end": 31299,
      "positions": "C0O30888C2O30900C5O30904C11O30962C24O30973C32O31008C33O31021C39O31025C44O31040C56O31056C62O31043C72O31136C79O31147C88O31145C89O31187C101O31198C107O31255C110O31262C115O31297",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "shouldBeTreatedAsRelativeOrAbsolutePath node:internal/modules/esm/resolve:905:49",
    "type": "JS",
    "kind": "Unopt",
    "func": 317,
    "tm": 241748,
    "source": {
      "script": 105,
      "start": 30459,
      "end": 30594,
      "positions": "C0O30475C2O30489C7O30497C8O30510C9O30513C10O30526C16O30530C21O30539C22O30551C23O30554C26O30561C30O30592",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isRelativeSpecifier node:internal/modules/esm/resolve:895:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 318,
    "tm": 241811,
    "source": {
      "script": 105,
      "start": 30166,
      "end": 30409,
      "positions": "C0O30182C1O30195C7O30199C12O30228C19O30235C26O30253C32O30257C37O30266C38O30278C39O30283C41O30296C47O30300C52O30331C59O30338C66O30356C72O30360C77O30369C78O30381C79O30394C80O30407",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "finalizeResolution node:internal/modules/esm/resolve:389:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 319,
    "tm": 241943,
    "source": {
      "script": 105,
      "start": 12129,
      "end": 13327,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get pathname node:internal/url:875:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 320,
    "tm": 242197,
    "source": {
      "script": 33,
      "start": 23404,
      "end": 23597,
      "positions": "C0O23425C4O23430C6O23429C10O23444C14O23453C16O23452C21O23485C27O23489C30O23493C31O23506C36O23511C42O23518C47O23531C49O23541C50O23546C57O23557C60O23580C68O23557C77O23593",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "fileURLToPath node:internal/url:1413:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 321,
    "tm": 242389,
    "source": {
      "script": 33,
      "start": 38248,
      "end": 38573,
      "positions": "C0O38259C6O38293C13O38300C22O38322C25O38327C31O38352C49O38358C54O38352C55O38428C62O38437C67O38454C77O38460C82O38454C83O38498C92O38517C101O38545C105O38571",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get origin node:internal/url:746:13",
    "type": "JS",
    "kind": "Unopt",
    "func": 322,
    "tm": 242495,
    "source": {
      "script": 33,
      "start": 20359,
      "end": 20918,
      "positions": "C0O20441C4O20446C6O20445C10O20472C59O20518C64O20523C70O20530C78O20565C83O20585C89O20589C95O20573C101O20595C105O20602C110O20695C116O20716C117O20822C122O20854C127O20866C132O20876C137O20829C142O20882C143O20893C149O20914",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getPathFromURLPosix node:internal/url:1395:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 323,
    "tm": 242589,
    "source": {
      "script": 33,
      "start": 37748,
      "end": 38224,
      "positions": "C0O37766C7O37775C12O37789C19O37825C24O37795C29O37789C30O37863C35O37888C37O37904C41O37893C46O37923C48O37935C54O37939C59O37979C66O37993C70O37979C75O37998C79O38012C81O38027C84O38024C90O38032C97O38049C102O38068C112O38074C117O38068C118O37913C123O37875C126O38186C131O38193C135O38222",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get hostname node:internal/url:841:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 324,
    "tm": 242657,
    "source": {
      "script": 33,
      "start": 22614,
      "end": 22659,
      "positions": "C0O22623C4O22635C6O22634C10O22644C18O22655",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "tryStatSync node:internal/modules/esm/resolve:183:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 325,
    "tm": 242759,
    "source": {
      "script": 105,
      "start": 5700,
      "end": 5766,
      "positions": "C0O5755C5O5719C10O5710C21O5759C24O5755C29O5766",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "statSync node:fs:1528:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 326,
    "tm": 242847,
    "source": {
      "script": 77,
      "start": 38875,
      "end": 39279,
      "positions": "C7O38875C16O38937C21O38944C26O38982C33O38984C40O39008C45O39016C52O39021C55O39032C60O39032C66O39093C76O39016C82O39132C88O39147C96O39160C102O39188C103O39205C104O39212C109O39212C113O39243C118O39250C122O39277",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "hasNoEntryError node:fs:1465:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 327,
    "tm": 242975,
    "source": {
      "script": 77,
      "start": 37312,
      "end": 37503,
      "positions": "C0O37330C6O37357C11O37373C16O37357C21O37385C27O37399C36O37403C39O37416C40O37432C46O37456C51O37462C58O37467C61O37480C62O37488C63O37501",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getStatsFromBinding node:internal/fs/utils:530:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 328,
    "tm": 243080,
    "source": {
      "script": 78,
      "start": 13973,
      "end": 15023,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isBigUint64Array node:internal/util/types:53:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 329,
    "tm": 243233,
    "source": {
      "script": 15,
      "start": 1371,
      "end": 1460,
      "positions": "C0O1383C5O1390C12O1437C15O1458",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "msFromTimeSpec node:internal/fs/utils:446:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 330,
    "tm": 243290,
    "source": {
      "script": 78,
      "start": 11006,
      "end": 11065,
      "positions": "C0O11022C2O11035C4O11033C10O11054C12O11052C15O11045C18O11063",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Stats node:internal/fs/utils:495:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 331,
    "tm": 243382,
    "source": {
      "script": 78,
      "start": 12749,
      "end": 13277,
      "positions": "C0O12886C41O12886C46O13014C48O13027C52O13040C54O13053C58O13066C60O13079C64O13092C66O13109C70O13126C73O13139C77O13137C81O13162C84O13175C88O13173C92O13198C95O13211C99O13209C103O13234C106O13251C110O13249C115O13276",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "StatsBase node:internal/fs/utils:400:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 332,
    "tm": 243486,
    "source": {
      "script": 78,
      "start": 9913,
      "end": 10202,
      "positions": "C0O9999C2O10008C6O10017C8O10027C12O10037C14O10048C18O10059C20O10068C24O10077C26O10086C30O10095C32O10105C36O10115C38O10128C42O10141C44O10150C48O10159C50O10169C54O10179C56O10191C61O10201",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "dateFromMs node:internal/fs/utils:460:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 333,
    "tm": 243592,
    "source": {
      "script": 78,
      "start": 11518,
      "end": 11563,
      "positions": "C0O11527C7O11543C10O11543C17O11554C23O11534C28O11561",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "StatsBase.isDirectory node:internal/fs/utils:414:43",
    "type": "JS",
    "kind": "Unopt",
    "func": 334,
    "tm": 243672,
    "source": {
      "script": 78,
      "start": 10246,
      "end": 10295,
      "positions": "C0O10265C7O10284C10O10265C15O10293",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Stats._checkModeProperty node:internal/fs/utils:517:46",
    "type": "JS",
    "kind": "Unopt",
    "func": 335,
    "tm": 243735,
    "source": {
      "script": 78,
      "start": 13626,
      "end": 13848,
      "positions": "C0O13641C8O13672C10O13668C17O13696C19O13692C26O13724C28O13720C33O13741C34O13754C35O13818C42O13825C44O13823C50O13833C53O13846",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "StatsBase.isFile node:internal/fs/utils:418:38",
    "type": "JS",
    "kind": "Unopt",
    "func": 336,
    "tm": 243790,
    "source": {
      "script": 78,
      "start": 10335,
      "end": 10384,
      "positions": "C0O10354C7O10373C10O10354C15O10382",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get search node:internal/url:893:13",
    "type": "JS",
    "kind": "Unopt",
    "func": 337,
    "tm": 244105,
    "source": {
      "script": 33,
      "start": 23829,
      "end": 23955,
      "positions": "C0O23856C4O23861C6O23860C10O23846C15O23875C19O23903C24O23917C26O23927C27O23932C32O23943C36O23951",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "set search node:internal/url:900:13",
    "type": "JS",
    "kind": "Unopt",
    "func": 338,
    "tm": 244206,
    "source": {
      "script": 33,
      "start": 23969,
      "end": 24476,
      "positions": "C0O23996C4O24001C6O24000C10O24015C17O24024C23O24049C25O24060C30O24076C31O24086C35O24100C44O24114C46O24113C51O24110C57O24154C58O24164C64O24168C69O24177C79O24186C86O24225C88O24235C92O24247C101O24260C106O24257C110O24287C114O24309C125O24323C134O24356C142O24356C154O24309C159O24427C168O24449C170O24448C174O24427C180O24475",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toUSVString node:internal/util:59:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 339,
    "tm": 244288,
    "source": {
      "script": 12,
      "start": 1351,
      "end": 1643,
      "positions": "C0O1373C4O1524C11O1544C14O1524C20O1573C22O1589C24O1600C25O1603C30O1634C35O1610C40O1641",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get hash node:internal/url:923:11",
    "type": "JS",
    "kind": "Unopt",
    "func": 340,
    "tm": 244380,
    "source": {
      "script": 33,
      "start": 24561,
      "end": 24699,
      "positions": "C0O24591C4O24596C6O24595C10O24578C15O24610C19O24644C24O24658C26O24668C27O24673C32O24684C36O24695",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "set hash node:internal/url:930:11",
    "type": "JS",
    "kind": "Unopt",
    "func": 341,
    "tm": 244460,
    "source": {
      "script": 33,
      "start": 24711,
      "end": 25144,
      "positions": "C0O24736C4O24741C6O24740C10O24789C15O24811C17O24830C18O24843C22O24857C31O24871C33O24870C38O24867C42O24901C43O24908C44O24919C45O24927C51O24931C56O24940C66O24947C73O24982C75O24995C79O25005C88O25018C93O25015C97O25046C108O25058C117O25090C125O25090C137O25046C143O25143",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toString node:internal/url:730:11",
    "type": "JS",
    "kind": "Unopt",
    "func": 342,
    "tm": 244531,
    "source": {
      "script": 33,
      "start": 20046,
      "end": 20084,
      "positions": "C0O20055C4O20067C6O20066C12O20075C17O20080",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get node:internal/modules/esm/module_map:16:6",
    "type": "JS",
    "kind": "Unopt",
    "func": 343,
    "tm": 244701,
    "source": {
      "script": 103,
      "start": 499,
      "end": 569,
      "positions": "C0O511C10O511C15O543C17O556C28O556C33O565",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "ModuleJob node:internal/modules/esm/module_job:55:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 344,
    "tm": 244828,
    "source": {
      "script": 104,
      "start": 1296,
      "end": 2977,
      "positions": "C0O1296C13O1352C18O1364C22O1378C27O1390C31O1404C36O1420C40O1439C44O1451C48O1586C55O1607C58O1636C67O1645C76O1650C89O1607C94O1605C98O1754C103O2661C106O2675C109O2673C113O2782C123O2809C132O2817C135O2782C140O2943C144O2961C149O2976",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "moduleProvider node:internal/modules/esm/loader:229:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 345,
    "tm": 244940,
    "source": {
      "script": 102,
      "start": 6003,
      "end": 6319,
      "positions": "C10O6003C18O6074C21O6085C26O6090C33O6097C39O6085C53O6074C76O6050C81O6063C86O6134C93O6146C98O6146C104O6171C106O6188C115O6194C120O6188C121O6245C143O6252C158O6313",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "load node:internal/modules/esm/loader:297:13",
    "type": "JS",
    "kind": "Unopt",
    "func": 346,
    "tm": 245076,
    "source": {
      "script": 102,
      "start": 7982,
      "end": 9232,
      "positions": "C10O7982C60O8030C62O8035C67O8043C71O8068C73O8073C77O8082C84O8089C95O8130C101O8138C105O8162C114O8168C127O8162C153O8210C159O8250C177O8256C182O8250C183O8377C188O8391C193O8420C198O8464C210O8464C216O8568C228O8629C235O8679C255O8574C260O8568C261O8711C267O8751C288O8757C293O8751C294O8894C309O8966C312O8966C322O9001C325O9001C331O9033C350O9039C355O9033C356O9185C363O9200C369O9214C385O9228",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "defaultLoad node:internal/modules/esm/load:7:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 347,
    "tm": 245185,
    "source": {
      "script": 107,
      "start": 257,
      "end": 604,
      "positions": "C10O257C18O286C23O298C28O324C33O341C38O341C45O354C50O363C55O389C57O405C64O433C69O458C73O482C78O508C83O540C90O547C94O523C107O517C135O565C142O578C148O590C164O602",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "defaultGetFormat node:internal/modules/esm/get_format:81:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 348,
    "tm": 245268,
    "source": {
      "script": 106,
      "start": 2347,
      "end": 2536,
      "positions": "C0O2381C7O2381C13O2398C20O2435C23O2460C28O2405C37O2476C40O2500C44O2492C48O2509C57O2534",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "file: node:internal/modules/esm/get_format:56:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 349,
    "tm": 245376,
    "source": {
      "script": 106,
      "start": 1653,
      "end": 2280,
      "positions": "C0O1685C5O1700C10O1685C15O1719C17O1732C19O1740C24O1759C29O1790C34O1768C41O1796C55O1853C62O1880C66O1897C70O1918C77O1954C82O1976C85O1984C96O1984C102O2109C109O2142C115O2172C122O2214C125O2214C135O2178C140O2172C141O2254C146O2276",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "extname node:path:1385:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 350,
    "tm": 245496,
    "source": {
      "script": 35,
      "start": 41977,
      "end": 43660,
      "positions": "C0O41990C8O41990C13O42039C16O42063C18O42080C21O42107C23O42253C25O42278C29O42285C33O42292C34O42292C39O42324C44O42324C50O42366C52O42379C54O42375C59O42543C63O42574C65O42588C69O42603C71O42628C73O42652C75O42660C80O42775C82O42805C84O42813C88O42832C90O42845C92O42841C97O42940C99O42953C104O42971C111O42998C113O43014C118O43031C123O43061C125O43074C130O43234C133O42300C138O42260C141O43271C143O43284C150O43306C156O43401C163O43498C170O43533C173O43525C180O43572C183O43558C188O43586C190O43596C191O43607C205O43614C210O43656",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getPackageType node:internal/modules/esm/resolve:785:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 351,
    "tm": 245598,
    "source": {
      "script": 105,
      "start": 26557,
      "end": 26647,
      "positions": "C0O26589C3O26589C8O26640C12O26645",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getPackageScopeConfig node:internal/modules/esm/resolve:247:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 352,
    "tm": 245686,
    "source": {
      "script": 105,
      "start": 7340,
      "end": 8410,
      "positions": "C0O7376C13O7376C19O7473C24O7487C32O7491C39O7568C41O7601C46O7618C49O7618C54O7601C60O7725C66O7733C68O7754C69O7787C72O7807C85O7824C91O8029C96O8061C100O8038C105O8071C107O7415C110O8108C115O8108C120O8163C127O8180C132O8226C137O8247C142O8289C147O8313C154O8331C159O8348C164O8348C170O8387C172O8408",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getPackageConfig node:internal/modules/esm/resolve:191:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 353,
    "tm": 245884,
    "source": {
      "script": 105,
      "start": 5925,
      "end": 7238,
      "positions": "C0O5970C5O5987C10O5987C16O6000C18O6034C20O6050C21O6072C26O6090C31O6090C37O6100C42O6111C44O6165C51O6184C56O6223C61O6246C66O6292C71O6318C78O6340C83O6357C88O6357C94O6387C96O6408C97O6420C102O6445C107O6459C115O6457C125O6502C137O6559C144O6570C163O6597C168O6611C174O6597C178O6595C185O6643C192O6508C197O6502C198O6671C203O6680C208O6686C213O6692C218O6724C223O6751C233O6804C235O6827C241O6857C243O6877C249O6907C251O6980C253O6989C260O7010C265O7026C268O7066C275O7083C281O7111C287O7121C293O7131C299O7141C305O7154C312O7170C317O7187C322O7187C328O7215C330O7236",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "onParseComplete node:internal/url:532:25",
    "type": "JS",
    "kind": "Baseline",
    "func": 300,
    "tm": 246131,
    "source": {
      "script": 33,
      "start": 14195,
      "end": 14864,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getPathFromURLPosix node:internal/url:1395:29",
    "type": "JS",
    "kind": "Baseline",
    "func": 323,
    "tm": 246187,
    "source": {
      "script": 33,
      "start": 37748,
      "end": 38224,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isUint8Array node:internal/util/types:13:22",
    "type": "JS",
    "kind": "Baseline",
    "func": 158,
    "tm": 246219,
    "source": {
      "script": 15,
      "start": 257,
      "end": 342,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isURLInstance node:internal/url:1492:23",
    "type": "JS",
    "kind": "Baseline",
    "func": 155,
    "tm": 246251,
    "source": {
      "script": 33,
      "start": 41326,
      "end": 41423,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/url:636:21",
    "type": "JS",
    "kind": "Baseline",
    "func": 305,
    "tm": 246287,
    "source": {
      "script": 33,
      "start": 17431,
      "end": 17506,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "URLContext node:internal/url:160:14",
    "type": "JS",
    "kind": "Baseline",
    "func": 299,
    "tm": 246318,
    "source": {
      "script": 33,
      "start": 3700,
      "end": 3912,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "defaultGetSource node:internal/modules/esm/get_source:25:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 354,
    "tm": 246525,
    "source": {
      "script": 108,
      "start": 662,
      "end": 1303,
      "positions": "C10O662C31O670C70O722C77O722C83O742C85O763C92O772C97O791C102O806C114O800C144O849C151O858C156O891C163O911C166O936C171O891C177O951C179O971C186O977C191O971C192O1024C199O1035C206O1055C211O1071C218O1076C221O1076C228O1102C237O1071C246O1146C258O1152C263O1146C264O1204C271O1214C280O1232C285O1239C290O1248C295O1248C301O1287C313O1301",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "readFile node:internal/fs/promises:786:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 355,
    "tm": 246757,
    "source": {
      "script": 109,
      "start": 22099,
      "end": 22434,
      "positions": "C10O22099C18O22119C23O22140C28O22129C35O22188C44O22204C46O22224C48O22213C53O22240C56O22247C71O22277C72O22281C75O22302C80O22281C84O22325C98O22331C111O22325C137O22358C145O22393C151O22425C156O22365C171O22432",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "checkAborted node:internal/fs/promises:319:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 356,
    "tm": 246829,
    "source": {
      "script": 109,
      "start": 7147,
      "end": 7210,
      "positions": "C0O7160C7O7170C16O7185C21O7191C26O7185C28O7209",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "open node:internal/fs/promises:449:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 357,
    "tm": 246902,
    "source": {
      "script": 109,
      "start": 11300,
      "end": 11606,
      "positions": "C10O11300C18O11324C23O11331C29O11377C34O11377C39O11401C55O11408C62O11446C69O11479C72O11487C79O11502C82O11513C87O11513C95O11589C104O11487C117O11473C142O11453C157O11604",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "link node:internal/modules/esm/module_job:66:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 358,
    "tm": 247257,
    "source": {
      "script": 104,
      "start": 1754,
      "end": 2604,
      "positions": "C4O1754C26O1774C36O1799C48O1788C73O1786C77O1820C89O1832C98O1850C100O1839C104O1820C108O2166C110O2166C112O2193C117O2198C122O2205C132O2205C138O2447C140O2483C151O2504C156O2500C162O2489C174O2483C199O2541C210O2563C218O2559C224O2548C238O2598",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "primordials.PromisePrototypeCatch node:internal/per_context/primordials:397:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 359,
    "tm": 247385,
    "source": {
      "script": 6,
      "start": 11446,
      "end": 11533,
      "positions": "C0O11477C13O11477C18O11533",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "set node:internal/modules/esm/module_map:20:6",
    "type": "JS",
    "kind": "Unopt",
    "func": 360,
    "tm": 247469,
    "source": {
      "script": 103,
      "start": 575,
      "end": 848,
      "positions": "C0O592C10O592C15O624C19O643C21O632C26O653C37O708C55O714C60O708C61O775C73O792C84O775C88O817C90O830C104O830C109O844",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/module_map:7:63",
    "type": "JS",
    "kind": "Unopt",
    "func": 361,
    "tm": 247633,
    "source": {
      "script": 103,
      "start": 175,
      "end": 200,
      "positions": "C0O187C2O193C9O199",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/loader:277:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 362,
    "tm": 247689,
    "source": {
      "script": 102,
      "start": 7400,
      "end": 7418,
      "positions": "C0O7413C5O7413C9O7418",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "run node:internal/modules/esm/module_job:180:12",
    "type": "JS",
    "kind": "Unopt",
    "func": 363,
    "tm": 247803,
    "source": {
      "script": 104,
      "start": 6439,
      "end": 7612,
      "positions": "C10O6439C18O6459C23O6459C35O6448C58O6494C61O6524C66O6558C71O6565C76O6565C90O6547C128O6623C133O6628C143O6635C152O6669C158O6707C163O6669C169O6727C182O6737C186O6772C196O6804C204O6776C211O6838C224O6848C228O6934C235O6965C240O6972C248O6934C259O7003C267O7053C272O7060C277O7003C292O7080C297O7134C302O7162C307O7169C312O7135C318O7201C325O7206C330O7232C344O7379C358O7322C364O7402C370O7481C376O7242C380O7558C382O7558C383O7577C388O7599C408O7608",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "instantiate node:internal/modules/esm/module_job:98:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 364,
    "tm": 247891,
    "source": {
      "script": 104,
      "start": 2992,
      "end": 3126,
      "positions": "C0O3010C6O3071C11O3071C15O3064C19O3109C23O3122",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "_instantiate node:internal/modules/esm/module_job:105:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 365,
    "tm": 248121,
    "source": {
      "script": 104,
      "start": 3148,
      "end": 6426,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "addJobsToDependencyGraph node:internal/modules/esm/module_job:107:38",
    "type": "JS",
    "kind": "Unopt",
    "func": 366,
    "tm": 248262,
    "source": {
      "script": 104,
      "start": 3229,
      "end": 3526,
      "positions": "C10O3229C18O3258C23O3274C28O3274C35O3300C46O3307C47O3322C52O3334C57O3334C62O3395C74O3379C100O3409C111O3431C118O3458C123O3492C126O3458C134O3427C140O3416C154O3520",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "FileHandle node:internal/fs/promises:116:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 367,
    "tm": 248463,
    "source": {
      "script": 109,
      "start": 2847,
      "end": 3013,
      "positions": "C3O2866C11O2866C40O2879C45O2884C50O2893C54O2911C59O2916C67O2923C69O2947C77O2921C81O2961C86O2966C91O2973C95O2982C100O2987C104O3002C111O3012",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "MixedEventEmitter node:internal/event_target:829:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 368,
    "tm": 248538,
    "source": {
      "script": 38,
      "start": 23503,
      "end": 23633,
      "positions": "C0O23503C8O23521C15O23528C21O23563C25O23572C29O23563C41O23585C48O23607C54O23585C62O23632",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "readFileHandle node:internal/fs/promises:359:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 369,
    "tm": 248749,
    "source": {
      "script": 109,
      "start": 8384,
      "end": 10156,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get fd node:internal/fs/promises:129:9",
    "type": "JS",
    "kind": "Unopt",
    "func": 370,
    "tm": 248914,
    "source": {
      "script": 109,
      "start": 3084,
      "end": 3114,
      "positions": "C0O3093C2O3105C4O3104C7O3110",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "primordials.SafePromisePrototypeFinally node:internal/per_context/primordials:409:43",
    "type": "JS",
    "kind": "Unopt",
    "func": 371,
    "tm": 248999,
    "source": {
      "script": 6,
      "start": 12020,
      "end": 12293,
      "positions": "C0O12020C13O12153C27O12153C32O12293",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/per_context/primordials:412:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 372,
    "tm": 249064,
    "source": {
      "script": 6,
      "start": 12165,
      "end": 12289,
      "positions": "C0O12279C14O12179C20O12253C28O12260C34O12278C39O12279C45O12289",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "SafePromise node:internal/per_context/primordials:393:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 373,
    "tm": 249117,
    "source": {
      "script": 6,
      "start": 11370,
      "end": 11401,
      "positions": "C3O11383C7O11389C11O11383C26O11400",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/per_context/primordials:413:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 374,
    "tm": 249169,
    "source": {
      "script": 6,
      "start": 12195,
      "end": 12244,
      "positions": "C0O12205C16O12205C21O12244",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "allocUnsafeSlow node:buffer:382:50",
    "type": "JS",
    "kind": "Unopt",
    "func": 375,
    "tm": 249273,
    "source": {
      "script": 18,
      "start": 11191,
      "end": 11256,
      "positions": "C0O11202C5O11202C9O11222C14O11229C18O11254",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "createUnsafeBuffer node:internal/buffer:1059:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 376,
    "tm": 249334,
    "source": {
      "script": 19,
      "start": 30321,
      "end": 30430,
      "positions": "C0O30332C8O30344C15O30361C22O30368C39O30408C48O30420C70O30429",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "close node:internal/fs/promises:189:11",
    "type": "JS",
    "kind": "Unopt",
    "func": 377,
    "tm": 250698,
    "source": {
      "script": 109,
      "start": 4210,
      "end": 5000,
      "positions": "C0O4222C7O4231C9O4230C15O4236C20O4252C27O4259C30O4276C31O4288C38O4297C40O4296C45O4321C52O4333C54O4332C57O4348C58O4360C65O4365C73O4371C77O4379C84O4388C86O4387C91O4395C96O4410C103O4415C108O4420C112O4432C119O4437C126O4454C136O4496C138O4495C142O4505C147O4505C157O4454C162O4452C168O4593C175O4598C182O4615C189O4656C199O4652C210O4615C215O4613C219O4945C222O4950C230O4950C235O4969C242O4981C244O4980C247O4996",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/promises:203:9",
    "type": "JS",
    "kind": "Unopt",
    "func": 378,
    "tm": 250947,
    "source": {
      "script": 109,
      "start": 4522,
      "end": 4564,
      "positions": "C0O4530C7O4535C11O4550C16O4563",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "moduleStrategy node:internal/modules/esm/translators:134:56",
    "type": "JS",
    "kind": "Unopt",
    "func": 379,
    "tm": 251109,
    "source": {
      "script": 111,
      "start": 3755,
      "end": 4116,
      "positions": "C6O3755C14O3781C25O3781C30O3825C33O3834C39O3855C44O3855C49O3891C59O3927C64O3891C68O3952C87O3952C93O4000C98O4011C103O4023C108O4027C115O4041C121O4067C125O4023C131O4100C143O4114",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "assertBufferSource node:internal/modules/esm/translators:79:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 380,
    "tm": 251208,
    "source": {
      "script": 111,
      "start": 2223,
      "end": 2616,
      "positions": "C0O2257C10O2308C11O2315C12O2370C15O2370C19O2330C24O2349C29O2389C35O2416C41O2446C42O2453C43O2460C50O2512C77O2466C82O2460",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "lazyTypes node:internal/modules/esm/translators:24:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 381,
    "tm": 251274,
    "source": {
      "script": 111,
      "start": 437,
      "end": 531,
      "positions": "C0O444C6O465C10O479C11O482C17O498C24O496C30O529",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "stringify node:internal/modules/esm/translators:95:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 382,
    "tm": 251344,
    "source": {
      "script": 111,
      "start": 2636,
      "end": 2836,
      "positions": "C0O2647C6O2677C8O2689C9O2692C20O2692C25O2746C33O2779C36O2775C45O2795C50O2754C56O2806C61O2821C66O2821C71O2834",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "TextDecoder node:internal/encoding:379:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 383,
    "tm": 251482,
    "source": {
      "script": 21,
      "start": 10299,
      "end": 11083,
      "positions": "C15O10299C21O10342C25O10374C35O10389C43O10374C48O10519C53O10519C58O10557C60O10588C69O10594C74O10588C75O10655C77O10664C81O10713C94O10721C103O10773C116O10785C125O10847C130O10847C136O10879C138O10913C147O10919C152O10913C153O10968C157O10973C161O10983C165O10997C169O11002C174O11011C178O11027C182O11032C187O11040C191O11055C195O11060C200O11071C205O11082",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getEncodingFromLabel node:internal/encoding:313:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 384,
    "tm": 253574,
    "source": {
      "script": 21,
      "start": 8645,
      "end": 8795,
      "positions": "C0O8669C5O8679C10O8679C16O8693C18O8716C20O8727C21O8730C26O8747C34O8777C39O8777C44O8751C49O8747C54O8793",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "decode node:internal/encoding:408:11",
    "type": "JS",
    "kind": "Unopt",
    "func": 385,
    "tm": 253734,
    "source": {
      "script": 21,
      "start": 11096,
      "end": 11918,
      "positions": "C8O11105C25O11134C30O11134C34O11163C41O11167C47O11202C52O11210C56O11222C61O11223C69O11249C76O11254C82O11290C102O11296C107O11290C108O11466C118O11481C126O11466C131O11611C133O11620C137O11667C153O11680C159O11722C168O11735C170O11734C180O11722C186O11766C190O11805C197O11854C207O11811C212O11805C213O11895C221O11895C226O11912",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "validateDecoder node:internal/encoding:64:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 386,
    "tm": 253815,
    "source": {
      "script": 21,
      "start": 1269,
      "end": 1370,
      "positions": "C0O1279C7O1302C9O1301C14O1312C19O1326C29O1332C34O1326C36O1369",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "slice node:buffer:602:12",
    "type": "JS",
    "kind": "Unopt",
    "func": 387,
    "tm": 253916,
    "source": {
      "script": 18,
      "start": 16971,
      "end": 17017,
      "positions": "C0O16996C5O16996C11O17017",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/translators:44:63",
    "type": "JS",
    "kind": "Unopt",
    "func": 388,
    "tm": 253993,
    "source": {
      "script": 111,
      "start": 1058,
      "end": 1083,
      "positions": "C0O1070C2O1076C9O1082",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " file:///Users/macondo/Documents/coderhouse-task/tarea_15/punto_2/src/server.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 389,
    "tm": 254615
  },
  {
    "name": " node:internal/modules/esm/module_job:75:41",
    "type": "JS",
    "kind": "Unopt",
    "func": 390,
    "tm": 256868,
    "source": {
      "script": 104,
      "start": 2210,
      "end": 2437,
      "positions": "C10O2210C18O2260C23O2265C28O2272C38O2272C45O2310C54O2329C57O2310C62O2378C72O2378C98O2415C112O2429",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "onParseError node:internal/url:551:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 391,
    "tm": 256969,
    "source": {
      "script": 33,
      "start": 14887,
      "end": 14941,
      "positions": "C0O14906C7O14912C12O14906",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "NodeError node:internal/errors:342:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 392,
    "tm": 257162,
    "source": {
      "script": 11,
      "start": 9545,
      "end": 10454,
      "positions": "C0O9545C3O9575C10O9581C15O9602C20O9606C25O9640C33O9662C37O9685C40O9685C46O9755C51O9759C56O9793C65O9815C69O9844C83O9844C89O9878C96O9901C105O9917C109O9932C121O10059C128O10076C142O10189C147O10199C162O9878C167O10379C174O10379C178O10415C180O10426C184O10437C186O10450",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isErrorStackTraceLimitWritable node:internal/errors:198:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 393,
    "tm": 263694,
    "source": {
      "script": 11,
      "start": 5518,
      "end": 5775,
      "positions": "C0O5538C7O5569C13O5538C19O5598C21O5628C28O5654C31O5635C35O5661C36O5669C44O5676C51O5735C57O5755C62O5759C63O5773",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getMessage node:internal/errors:410:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 394,
    "tm": 263880,
    "source": {
      "script": 11,
      "start": 11491,
      "end": 12327,
      "positions": "C0O11525C5O11534C10O11534C16O11547C22O11573C28O11582C35O11580C41O11613C47O11650C52O11668C57O11683C61O11675C70O11739C81O11783C99O11845C113O11803C117O11650C122O11867C136O11874C141O11904C142O11939C147O11961C152O11940C162O11988C167O11998C172O12034C176O12025C185O12055C196O12099C216O12155C226O12119C230O11998C235O12190C241O12197C246O12208C248O12219C249O12223C254O12223C259O12259C267O12279C271O12304C281O12266C286O12325",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/errors:1316:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 395,
    "tm": 263982,
    "source": {
      "script": 11,
      "start": 46210,
      "end": 46355,
      "positions": "C0O46222C2O46233C6O46332C8O46353",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "captureLargerStackTrace node:internal/errors:458:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 396,
    "tm": 264083,
    "source": {
      "script": 11,
      "start": 12774,
      "end": 13144,
      "positions": "C0O12820C3O12820C7O12858C9O12897C14O12925C21O12917C27O12948C32O12972C35O12970C39O12992C44O12992C48O13048C52O13079C59O13103C61O13101C65O13129C67O13140",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "packageResolve node:internal/modules/esm/resolve:838:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 397,
    "tm": 264647,
    "source": {
      "script": 105,
      "start": 28076,
      "end": 29965,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "parsePackageName node:internal/modules/esm/resolve:795:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 398,
    "tm": 266115,
    "source": {
      "script": 105,
      "start": 26834,
      "end": 27919,
      "positions": "C0O26877C8O26877C14O26942C16O26965C18O26974C19O26987C25O26991C30O27006C32O27027C34O27046C39O27066C45O27073C50O27088C54O27133C64O27213C71O27150C77O27252C79O27267C90O27292C101O27292C107O27453C109O27472C113O27458C118O27491C120O27506C126O27510C133O27532C139O27536C144O27554C146O27586C148O27481C153O27440C156O27606C160O27635C170O27723C173O27723C183O27641C188O27635C189O27775C194O27797C205O27815C208O27815C213O27779C217O27868C224O27877C230O27890C236O27906C242O27917",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/validators:153:3",
    "type": "JS",
    "kind": "Baseline",
    "func": 309,
    "tm": 266381,
    "source": {
      "script": 17,
      "start": 4365,
      "end": 4924,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "URL node:internal/url:620:14",
    "type": "JS",
    "kind": "Baseline",
    "func": 298,
    "tm": 266437,
    "source": {
      "script": 33,
      "start": 16989,
      "end": 17324,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get protocol node:internal/url:769:15",
    "type": "JS",
    "kind": "Baseline",
    "func": 314,
    "tm": 266471,
    "source": {
      "script": 33,
      "start": 20934,
      "end": 20975,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get pathname node:internal/url:875:15",
    "type": "JS",
    "kind": "Baseline",
    "func": 320,
    "tm": 266506,
    "source": {
      "script": 33,
      "start": 23404,
      "end": 23597,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get href node:internal/url:734:11",
    "type": "JS",
    "kind": "Baseline",
    "func": 307,
    "tm": 266588,
    "source": {
      "script": 33,
      "start": 20096,
      "end": 20134,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "SafePromise node:internal/per_context/primordials:393:16",
    "type": "JS",
    "kind": "Baseline",
    "func": 373,
    "tm": 266627,
    "source": {
      "script": 6,
      "start": 11370,
      "end": 11401,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "uvErrmapGet node:internal/errors:449:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 399,
    "tm": 266923,
    "source": {
      "script": 11,
      "start": 12526,
      "end": 12689,
      "positions": "C0O12537C3O12549C9O12547C15O12561C20O12576C26O12590C33O12609C36O12619C41O12619C45O12607C49O12640C56O12663C59O12673C64O12647C69O12687",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "lazyUv node:internal/errors:440:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 400,
    "tm": 266998,
    "source": {
      "script": 11,
      "start": 12360,
      "end": 12449,
      "positions": "C0O12367C6O12389C12O12401C19O12399C25O12430C29O12447",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toPathIfFileURL node:internal/url:1496:25",
    "type": "JS",
    "kind": "Baseline",
    "func": 154,
    "tm": 267199,
    "source": {
      "script": 33,
      "start": 41449,
      "end": 41570,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initSearchParams node:internal/url:1016:26",
    "type": "JS",
    "kind": "Baseline",
    "func": 302,
    "tm": 267245,
    "source": {
      "script": 33,
      "start": 27037,
      "end": 27152,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/url:682:12",
    "type": "JS",
    "kind": "Baseline",
    "func": 308,
    "tm": 267301,
    "source": {
      "script": 33,
      "start": 18731,
      "end": 19981,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get hostname node:internal/url:841:15",
    "type": "JS",
    "kind": "Baseline",
    "func": 324,
    "tm": 267334,
    "source": {
      "script": 33,
      "start": 22614,
      "end": 22659,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "StatsBase node:internal/fs/utils:400:19",
    "type": "JS",
    "kind": "Baseline",
    "func": 332,
    "tm": 267709,
    "source": {
      "script": 78,
      "start": 9913,
      "end": 10202,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "dateFromMs node:internal/fs/utils:460:20",
    "type": "JS",
    "kind": "Baseline",
    "func": 333,
    "tm": 267756,
    "source": {
      "script": 78,
      "start": 11518,
      "end": 11563,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/utils:680:42",
    "type": "JS",
    "kind": "Baseline",
    "func": 174,
    "tm": 267790,
    "source": {
      "script": 78,
      "start": 18456,
      "end": 18591,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/utils:357:35",
    "type": "JS",
    "kind": "Baseline",
    "func": 157,
    "tm": 267885,
    "source": {
      "script": 78,
      "start": 8569,
      "end": 9158,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/utils:668:38",
    "type": "JS",
    "kind": "Baseline",
    "func": 156,
    "tm": 267926,
    "source": {
      "script": 78,
      "start": 18141,
      "end": 18411,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toString node:internal/url:730:11",
    "type": "JS",
    "kind": "Baseline",
    "func": 342,
    "tm": 267958,
    "source": {
      "script": 33,
      "start": 20046,
      "end": 20084,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/errors:1398:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 401,
    "tm": 268173,
    "source": {
      "script": 11,
      "start": 49079,
      "end": 49180,
      "positions": "C17O49117C22O49139C35O49148C48O49171C52O49178",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resolveAsCommonJS node:internal/modules/esm/resolve:941:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 402,
    "tm": 268400,
    "source": {
      "script": 105,
      "start": 31471,
      "end": 32902,
      "positions": "C3O31523C8O31523C13O31571C25O31571C31O31604C33O31622C36O31632C41O31632C46O31620C50O31675C55O31685C68O31685C74O31820C77O31824C83O31864C88O31872C94O32159C104O32202C111O32164C118O32220C123O32232C132O32238C139O32266C142O32270C148O32405C156O32405C163O32441C167O32466C172O32466C178O32508C180O32518C185O32536C190O32544C196O32679C199O32691C206O32700C211O32721C218O32762C226O32774C238O32758C250O32729C256O32853C258O32866C261O32883C262O32896",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "promiseRejectHandler node:internal/process/promises:97:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 403,
    "tm": 269124,
    "source": {
      "script": 26,
      "start": 2708,
      "end": 3248,
      "positions": "C0O2736C6O2785C9O2811C15O2809C21O2847C23O2872C35O2966C44O3054C53O3154C62O2907C65O2907C70O2950C72O3005C75O3005C79O3038C81O3090C93O3090C98O3138C100O3189C112O3189C117O3236C120O3247",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getUnhandledRejectionsMode node:internal/process/promises:79:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 404,
    "tm": 270182,
    "source": {
      "script": 26,
      "start": 2179,
      "end": 2677,
      "positions": "C0O2213C6O2213C11O2194C16O2244C19O2252C61O2319C65O2353C66O2377C70O2415C71O2441C75O2475C76O2500C80O2533C81O2573C85O2618C86O2638C90O2671",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "unhandledRejection node:internal/process/promises:125:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 405,
    "tm": 270437,
    "source": {
      "script": 26,
      "start": 3529,
      "end": 4326,
      "positions": "C0O3529C14O3567C21O3579C26O3579C30O3567C32O3624C39O3636C44O3636C48O3624C50O3673C52O3673C54O3698C59O4028C66O4051C71O4055C78O4070C86O4089C95O4089C112O4143C122O4155C126O4051C132O4237C143O4256C146O4237C151O4296C158O4296C163O4325",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "executionAsyncId node:internal/async_hooks:561:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 406,
    "tm": 270549,
    "source": {
      "script": 24,
      "start": 18344,
      "end": 18395,
      "positions": "C0O18351C7O18374C9O18373C12O18393",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "triggerAsyncId node:internal/async_hooks:565:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 407,
    "tm": 273674,
    "source": {
      "script": 24,
      "start": 18420,
      "end": 18469,
      "positions": "C0O18427C7O18450C9O18449C12O18467",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setHasRejectionToWarn node:internal/process/promises:71:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 408,
    "tm": 273791,
    "source": {
      "script": 26,
      "start": 2001,
      "end": 2061,
      "positions": "C0O2013C7O2022C12O2045C19O2043C24O2060",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "handledRejection node:internal/process/promises:154:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 409,
    "tm": 273924,
    "source": {
      "script": 26,
      "start": 4353,
      "end": 5159,
      "positions": "C0O4387C5O4410C10O4410C16O4426C18O4463C23O4486C28O4492C33O4523C39O4547C44O4715C57O4825C67O4758C73O4715C79O4840C81O4853C85O4895C87O4906C91O4919C98O4938C108O4964C114O4973C118O4919C123O4991C128O4991C132O5026C133O5033C134O5046C139O5073C145O5078C152O5087C155O5110C161O5117C166O5128C171O5128C176O5158",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get origin node:internal/url:746:13",
    "type": "JS",
    "kind": "Baseline",
    "func": 322,
    "tm": 274639,
    "source": {
      "script": 33,
      "start": 20359,
      "end": 20918,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Stats node:internal/fs/utils:495:15",
    "type": "JS",
    "kind": "Baseline",
    "func": 331,
    "tm": 274715,
    "source": {
      "script": 78,
      "start": 12749,
      "end": 13277,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "tryStatSync node:internal/modules/esm/resolve:183:3",
    "type": "JS",
    "kind": "Baseline",
    "func": 325,
    "tm": 274839,
    "source": {
      "script": 105,
      "start": 5700,
      "end": 5766,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "StatsBase.isDirectory node:internal/fs/utils:414:43",
    "type": "JS",
    "kind": "Baseline",
    "func": 334,
    "tm": 274876,
    "source": {
      "script": 78,
      "start": 10246,
      "end": 10295,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "stat node:internal/modules/cjs/loader:151:14",
    "type": "JS",
    "kind": "Baseline",
    "func": 147,
    "tm": 274916,
    "source": {
      "script": 99,
      "start": 4627,
      "end": 5024,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isErrorStackTraceLimitWritable node:internal/errors:198:40",
    "type": "JS",
    "kind": "Baseline",
    "func": 393,
    "tm": 274955,
    "source": {
      "script": 11,
      "start": 5518,
      "end": 5775,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Stats._checkModeProperty node:internal/fs/utils:517:46",
    "type": "JS",
    "kind": "Baseline",
    "func": 335,
    "tm": 275593,
    "source": {
      "script": 78,
      "start": 13626,
      "end": 13848,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "fileURLToPath node:internal/url:1413:23",
    "type": "JS",
    "kind": "Baseline",
    "func": 321,
    "tm": 275670,
    "source": {
      "script": 33,
      "start": 38248,
      "end": 38573,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "statSync node:fs:1528:18",
    "type": "JS",
    "kind": "Baseline",
    "func": 326,
    "tm": 275714,
    "source": {
      "script": 77,
      "start": 38875,
      "end": 39279,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "uvErrmapGet node:internal/errors:449:21",
    "type": "JS",
    "kind": "Baseline",
    "func": 399,
    "tm": 275753,
    "source": {
      "script": 11,
      "start": 12526,
      "end": 12689,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "hasNoEntryError node:fs:1465:25",
    "type": "JS",
    "kind": "Baseline",
    "func": 327,
    "tm": 275787,
    "source": {
      "script": 77,
      "start": 37312,
      "end": 37503,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "parsePackageName node:internal/modules/esm/resolve:795:26",
    "type": "JS",
    "kind": "Baseline",
    "func": 398,
    "tm": 277000,
    "source": {
      "script": 105,
      "start": 26834,
      "end": 27919,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "captureLargerStackTrace node:internal/errors:458:35",
    "type": "JS",
    "kind": "Baseline",
    "func": 396,
    "tm": 277066,
    "source": {
      "script": 11,
      "start": 12774,
      "end": 13144,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "NodeError node:internal/errors:342:28",
    "type": "JS",
    "kind": "Baseline",
    "func": 392,
    "tm": 277119,
    "source": {
      "script": 11,
      "start": 9545,
      "end": 10454,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "lazyUv node:internal/errors:440:16",
    "type": "JS",
    "kind": "Baseline",
    "func": 400,
    "tm": 277156,
    "source": {
      "script": 11,
      "start": 12360,
      "end": 12449,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/errors:1316:30",
    "type": "JS",
    "kind": "Baseline",
    "func": 395,
    "tm": 277214,
    "source": {
      "script": 11,
      "start": 46210,
      "end": 46355,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "packageResolve node:internal/modules/esm/resolve:838:24",
    "type": "JS",
    "kind": "Baseline",
    "func": 397,
    "tm": 278378,
    "source": {
      "script": 105,
      "start": 28076,
      "end": 29965,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isAbsolute node:path:1156:13",
    "type": "JS",
    "kind": "Baseline",
    "func": 146,
    "tm": 278433,
    "source": {
      "script": 35,
      "start": 35448,
      "end": 35594,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._findPath node:internal/modules/cjs/loader:494:28",
    "type": "JS",
    "kind": "Baseline",
    "func": 145,
    "tm": 278508,
    "source": {
      "script": 99,
      "start": 14327,
      "end": 16931,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "URLSearchParams node:internal/url:182:14",
    "type": "JS",
    "kind": "Baseline",
    "func": 301,
    "tm": 279963,
    "source": {
      "script": 33,
      "start": 4325,
      "end": 6722,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module node:internal/modules/cjs/loader:172:16",
    "type": "JS",
    "kind": "Baseline",
    "func": 122,
    "tm": 280043,
    "source": {
      "script": 99,
      "start": 5284,
      "end": 5521,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "set pathname node:internal/url:884:15",
    "type": "JS",
    "kind": "Baseline",
    "func": 304,
    "tm": 280086,
    "source": {
      "script": 33,
      "start": 23613,
      "end": 23815,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getMessage node:internal/errors:410:20",
    "type": "JS",
    "kind": "Baseline",
    "func": 394,
    "tm": 280140,
    "source": {
      "script": 11,
      "start": 11491,
      "end": 12327,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resolve node:internal/modules/esm/loader:402:16",
    "type": "JS",
    "kind": "Baseline",
    "func": 312,
    "tm": 281409,
    "source": {
      "script": 102,
      "start": 10560,
      "end": 11833,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "assert node:internal/assert:11:16",
    "type": "JS",
    "kind": "Baseline",
    "func": 119,
    "tm": 281462,
    "source": {
      "script": 16,
      "start": 172,
      "end": 307,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "onParsePathComplete node:internal/url:591:29",
    "type": "JS",
    "kind": "Baseline",
    "func": 306,
    "tm": 281502,
    "source": {
      "script": 33,
      "start": 16154,
      "end": 16620,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "%2F|%2C",
    "timestamp": 281672,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": "(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])",
    "timestamp": 281934,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": "getPackageScopeConfig node:internal/modules/esm/resolve:247:31",
    "type": "JS",
    "kind": "Baseline",
    "func": 352,
    "tm": 284015,
    "source": {
      "script": 105,
      "start": 7340,
      "end": 8410,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "shouldBeTreatedAsRelativeOrAbsolutePath node:internal/modules/esm/resolve:905:49",
    "type": "JS",
    "kind": "Baseline",
    "func": 317,
    "tm": 284071,
    "source": {
      "script": 105,
      "start": 30459,
      "end": 30594,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "handleErrorFromBinding node:internal/fs/utils:340:32",
    "type": "JS",
    "kind": "Baseline",
    "func": 161,
    "tm": 284112,
    "source": {
      "script": 78,
      "start": 7930,
      "end": 8428,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "splitRoot node:fs:2362:33",
    "type": "JS",
    "kind": "Baseline",
    "func": 159,
    "tm": 284150,
    "source": {
      "script": 77,
      "start": 62796,
      "end": 62988,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "msFromTimeSpec node:internal/fs/utils:446:24",
    "type": "JS",
    "kind": "Baseline",
    "func": 330,
    "tm": 284181,
    "source": {
      "script": 78,
      "start": 11006,
      "end": 11065,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/module_job:75:41",
    "type": "JS",
    "kind": "Baseline",
    "func": 390,
    "tm": 284225,
    "source": {
      "script": 104,
      "start": 2210,
      "end": 2437,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "unhandledRejection node:internal/process/promises:125:28",
    "type": "JS",
    "kind": "Baseline",
    "func": 405,
    "tm": 284895,
    "source": {
      "script": 26,
      "start": 3529,
      "end": 4326,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/errors:1398:27",
    "type": "JS",
    "kind": "Baseline",
    "func": 401,
    "tm": 284946,
    "source": {
      "script": 11,
      "start": 49079,
      "end": 49180,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resolveAsCommonJS node:internal/modules/esm/resolve:941:27",
    "type": "JS",
    "kind": "Baseline",
    "func": 402,
    "tm": 285001,
    "source": {
      "script": 105,
      "start": 31471,
      "end": 32902,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "executionAsyncId node:internal/async_hooks:561:26",
    "type": "JS",
    "kind": "Baseline",
    "func": 406,
    "tm": 285035,
    "source": {
      "script": 24,
      "start": 18344,
      "end": 18395,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "triggerAsyncId node:internal/async_hooks:565:24",
    "type": "JS",
    "kind": "Baseline",
    "func": 407,
    "tm": 285070,
    "source": {
      "script": 24,
      "start": 18420,
      "end": 18469,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setHasRejectionToWarn node:internal/process/promises:71:31",
    "type": "JS",
    "kind": "Baseline",
    "func": 408,
    "tm": 285103,
    "source": {
      "script": 26,
      "start": 2001,
      "end": 2061,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "node: node:internal/modules/esm/get_format:78:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 410,
    "tm": 286036,
    "source": {
      "script": 106,
      "start": 2291,
      "end": 2315,
      "positions": "C0O2296C2O2313",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get node:internal/modules/esm/module_map:16:6",
    "type": "JS",
    "kind": "Baseline",
    "func": 343,
    "tm": 286935,
    "source": {
      "script": 103,
      "start": 499,
      "end": 569,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getModuleJob node:internal/modules/esm/loader:221:21",
    "type": "JS",
    "kind": "Baseline",
    "func": 311,
    "tm": 287020,
    "source": {
      "script": 102,
      "start": 5668,
      "end": 6606,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "extname node:path:1385:10",
    "type": "JS",
    "kind": "Baseline",
    "func": 350,
    "tm": 287085,
    "source": {
      "script": 35,
      "start": 41977,
      "end": 43660,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resolveError node:internal/process/promises:117:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 411,
    "tm": 287221,
    "source": {
      "script": 26,
      "start": 3271,
      "end": 3500,
      "positions": "C0O3271C17O3407C22O3415C32O3415C38O3499",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "nextTick node:internal/process/task_queues:104:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 412,
    "tm": 287437,
    "source": {
      "script": 25,
      "start": 2591,
      "end": 3435,
      "positions": "C0O2591C2O2606C7O2606C11O2637C14O2649C20O2663C21O2670C22O2678C24O2704C59O2726C61O2745C70O2762C82O2768C84O2787C93O2804C105O2818C117O2824C119O2843C128O2860C140O2874C152O2888C164O2894C166O2920C171O2947C175O2954C181O2927C187O2979C190O2996C194O2984C199O3017C201O3024C207O3040C210O3029C214O3005C219O2966C222O3052C227O3062C232O3062C238O3077C243O3077C247O3122C252O3122C256O3161C261O3161C265O3210C272O3217C278O3235C285O3249C291O3275C301O3295C311O3309C319O3321C324O3325C329O3347C346O3347C351O3410C356O3416C361O3416C367O3434",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/validators:221:42",
    "type": "JS",
    "kind": "Unopt",
    "func": 413,
    "tm": 287979,
    "source": {
      "script": 17,
      "start": 6796,
      "end": 6897,
      "positions": "C0O6814C6O6854C13O6860C18O6854C20O6896",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isEmpty node:internal/fixed_queue:95:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 414,
    "tm": 288039,
    "source": {
      "script": 28,
      "start": 3637,
      "end": 3677,
      "positions": "C0O3658C5O3663C10O3663C14O3673",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isEmpty node:internal/fixed_queue:67:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 415,
    "tm": 288738,
    "source": {
      "script": 28,
      "start": 3084,
      "end": 3129,
      "positions": "C0O3105C5O3118C9O3109C12O3125",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setHasTickScheduled node:internal/process/task_queues:52:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 416,
    "tm": 288800,
    "source": {
      "script": 25,
      "start": 1104,
      "end": 1162,
      "positions": "C0O1116C7O1125C12O1146C19O1144C24O1161",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "newAsyncId node:internal/async_hooks:415:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 417,
    "tm": 288857,
    "source": {
      "script": 24,
      "start": 14326,
      "end": 14377,
      "positions": "C0O14333C7O14358C16O14373C22O14375",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getDefaultTriggerAsyncId node:internal/async_hooks:431:34",
    "type": "JS",
    "kind": "Unopt",
    "func": 418,
    "tm": 288924,
    "source": {
      "script": 24,
      "start": 14785,
      "end": 15042,
      "positions": "C0O14822C7O14838C9O14837C13O14931C14O14957C19O14966C26O14989C28O14988C31O15008C32O15011C34O15040",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initHooksExist node:internal/async_hooks:468:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 419,
    "tm": 289054,
    "source": {
      "script": 24,
      "start": 15781,
      "end": 15813,
      "positions": "C0O15788C5O15804C8O15795C12O15811",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "hasHooks node:internal/async_hooks:460:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 420,
    "tm": 289105,
    "source": {
      "script": 24,
      "start": 15649,
      "end": 15695,
      "positions": "C0O15659C7O15683C12O15689C15O15693",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "push node:internal/fixed_queue:99:7",
    "type": "JS",
    "kind": "Unopt",
    "func": 421,
    "tm": 289162,
    "source": {
      "script": 28,
      "start": 3685,
      "end": 3945,
      "positions": "C0O3707C5O3712C10O3712C16O3871C23O3887C26O3883C32O3881C38O3864C42O3925C47O3930C52O3930C58O3944",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isFull node:internal/fixed_queue:71:9",
    "type": "JS",
    "kind": "Unopt",
    "func": 422,
    "tm": 289220,
    "source": {
      "script": 28,
      "start": 3139,
      "end": 3200,
      "positions": "C0O3162C4O3166C10O3173C12O3171C16O3189C20O3180C23O3196",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "push node:internal/fixed_queue:75:7",
    "type": "JS",
    "kind": "Unopt",
    "func": 423,
    "tm": 289273,
    "source": {
      "script": 28,
      "start": 3208,
      "end": 3291,
      "positions": "C0O3226C5O3236C12O3241C16O3270C20O3274C26O3281C28O3279C31O3262C36O3290",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isEmpty node:internal/fixed_queue:95:10",
    "type": "JS",
    "kind": "Baseline",
    "func": 414,
    "tm": 289429,
    "source": {
      "script": 28,
      "start": 3637,
      "end": 3677,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "defaultGetFormat node:internal/modules/esm/get_format:81:26",
    "type": "JS",
    "kind": "Baseline",
    "func": 348,
    "tm": 289484,
    "source": {
      "script": 106,
      "start": 2347,
      "end": 2536,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "primordials.PromisePrototypeCatch node:internal/per_context/primordials:397:37",
    "type": "JS",
    "kind": "Baseline",
    "func": 359,
    "tm": 289520,
    "source": {
      "script": 6,
      "start": 11446,
      "end": 11533,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "ModuleJob node:internal/modules/esm/module_job:55:14",
    "type": "JS",
    "kind": "Baseline",
    "func": 344,
    "tm": 289566,
    "source": {
      "script": 104,
      "start": 1296,
      "end": 2977,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "promiseRejectHandler node:internal/process/promises:97:30",
    "type": "JS",
    "kind": "Baseline",
    "func": 403,
    "tm": 289608,
    "source": {
      "script": 26,
      "start": 2708,
      "end": 3248,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isEmpty node:internal/fixed_queue:67:10",
    "type": "JS",
    "kind": "Baseline",
    "func": 415,
    "tm": 289639,
    "source": {
      "script": 28,
      "start": 3084,
      "end": 3129,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "builtinStrategy node:internal/modules/esm/translators:270:58",
    "type": "JS",
    "kind": "Unopt",
    "func": 424,
    "tm": 289838,
    "source": {
      "script": 111,
      "start": 8012,
      "end": 8364,
      "positions": "C6O8012C14O8022C24O8057C29O8022C33O8104C41O8104C47O8151C52O8151C58O8180C66O8185C75O8229C77O8243C84O8249C89O8243C90O8292C100O8323C105O8292C109O8347C114O8347C128O8362",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:http:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 425,
    "tm": 290059,
    "source": {
      "script": 138,
      "start": 0,
      "end": 4182,
      "positions": "C0O0C4O4182",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:http:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 426,
    "tm": 290534,
    "source": {
      "script": 138,
      "start": 0,
      "end": 4182,
      "positions": "C0O0C37O1159C42O1182C47O1204C52O1262C58O1262C62O1262C64O1312C70O1312C75O1294C81O1357C87O1357C92O1345C97O1410C103O1410C108O1390C113O1512C119O1512C124O1447C129O1469C134O1492C139O1617C145O1617C150O1549C155O1572C160O1588C166O1598C171O1646C172O1646C174O3354C181O3375C185O3426C191O3407C201O3459C209O3492C219O3501C225O3518C231O3537C237O3556C243O3566C249O3584C255O3600C261O3622C267O3645C273O3652C279O3369C283O3692C298O3764C306O3664C311O4007C326O4077C334O4126C342O3979C348O4181",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:_http_agent:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 427,
    "tm": 291137,
    "source": {
      "script": 139,
      "start": 0,
      "end": 16460,
      "positions": "C0O0C4O16460",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:_http_agent:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 428,
    "tm": 292817,
    "source": {
      "script": 139,
      "start": 0,
      "end": 16460,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Agent node:_http_agent:93:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 429,
    "tm": 293231,
    "source": {
      "script": 139,
      "start": 3008,
      "end": 6329,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/validators:127:39",
    "type": "JS",
    "kind": "Unopt",
    "func": 430,
    "tm": 293417,
    "source": {
      "script": 17,
      "start": 3681,
      "end": 4014,
      "positions": "C0O3709C5O3714C12O3774C19O3800C22O3818C27O3800C36O3774C42O3921C47O3940C51O3955C67O3961C72O3955C74O4013",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:_http_client:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 431,
    "tm": 294075,
    "source": {
      "script": 140,
      "start": 0,
      "end": 26076,
      "positions": "C0O0C4O26076",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:_http_client:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 432,
    "tm": 296795
  },
  {
    "name": " node:_http_common:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 433,
    "tm": 297385,
    "source": {
      "script": 141,
      "start": 0,
      "end": 8466,
      "positions": "C0O0C4O8466",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:_http_common:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 434,
    "tm": 298281,
    "source": {
      "script": 141,
      "start": 0,
      "end": 8466,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/freelist:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 435,
    "tm": 298660,
    "source": {
      "script": 142,
      "start": 0,
      "end": 476,
      "positions": "C0O0C4O476",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/freelist:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 436,
    "tm": 298776,
    "source": {
      "script": 142,
      "start": 0,
      "end": 476,
      "positions": "C0O0C8O25C46O449C48O464C53O475",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:_http_incoming:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 437,
    "tm": 299129,
    "source": {
      "script": 143,
      "start": 0,
      "end": 12951,
      "positions": "C0O0C4O12951",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:_http_incoming:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 438,
    "tm": 300546,
    "source": {
      "script": 143,
      "start": 0,
      "end": 12951,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "FreeList node:internal/freelist:8:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 439,
    "tm": 300806,
    "source": {
      "script": 142,
      "start": 87,
      "end": 194,
      "positions": "C0O111C2O121C6O133C8O143C12O155C14O164C18O175C20O185C25O193",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:_http_outgoing:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 440,
    "tm": 301810,
    "source": {
      "script": 144,
      "start": 0,
      "end": 28695,
      "positions": "C0O0C4O28695",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:_http_outgoing:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 441,
    "tm": 304907
  },
  {
    "name": " node:internal/http:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 442,
    "tm": 305367,
    "source": {
      "script": 145,
      "start": 0,
      "end": 1130,
      "positions": "C0O0C4O1130",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/http:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 443,
    "tm": 305564,
    "source": {
      "script": 145,
      "start": 0,
      "end": 1130,
      "positions": "C0O0C55O25C60O35C66O43C72O75C78O147C81O147C86O127C92O213C95O213C100O184C106O296C109O296C114O268C120O279C126O335C127O335C129O1005C137O1039C148O1076C158O1100C164O1111C170O1020C175O1129",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "hideStackFrames node:internal/errors:382:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 444,
    "tm": 305808,
    "source": {
      "script": 11,
      "start": 10626,
      "end": 10850,
      "positions": "C0O10751C5O10775C9O10770C13O10783C21O10804C28O10825C35O10783C40O10838C42O10848",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:_http_server:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 445,
    "tm": 306819,
    "source": {
      "script": 146,
      "start": 0,
      "end": 32691,
      "positions": "C0O0C4O32691",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:_http_server:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 446,
    "tm": 310158
  },
  {
    "name": " node:diagnostics_channel:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 447,
    "tm": 310720,
    "source": {
      "script": 147,
      "start": 0,
      "end": 2641,
      "positions": "C0O0C4O2641",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:diagnostics_channel:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 448,
    "tm": 311192,
    "source": {
      "script": 147,
      "start": 0,
      "end": 2641,
      "positions": "C0O0C55O25C61O50C67O72C73O96C78O112C84O136C90O160C95O250C98O250C103O250C108O220C114O310C117O310C122O288C128O380C131O380C136O351C142O434C145O434C150O416C197O516C215O1577C267O1467C269O1998C271O1998C275O1998C277O2580C284O2601C290O2612C296O2630C302O2595C307O2640",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "channel node:diagnostics_channel:91:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 449,
    "tm": 311437,
    "source": {
      "script": 147,
      "start": 2035,
      "end": 2392,
      "positions": "C0O2050C2O2073C9O2081C13O2091C15O2114C20O2114C25O2123C29O2136C31O2151C32O2155C44O2219C62O2225C67O2219C68O2297C75O2307C81O2328C88O2349C93O2345C98O2343C102O2375C104O2390",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Channel node:diagnostics_channel:65:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 450,
    "tm": 311513,
    "source": {
      "script": 147,
      "start": 1496,
      "end": 1565,
      "positions": "C0O1509C1O1527C5O1544C7O1554C12O1564",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "byteLength node:buffer:627:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 451,
    "tm": 311678,
    "source": {
      "script": 18,
      "start": 17976,
      "end": 18001,
      "positions": "C0O17995C4O18001",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "write node:buffer:628:12",
    "type": "JS",
    "kind": "Unopt",
    "func": 452,
    "tm": 311736,
    "source": {
      "script": 18,
      "start": 18014,
      "end": 18079,
      "positions": "C0O18048C17O18048C22O18079",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get node:http:132:6",
    "type": "JS",
    "kind": "Unopt",
    "func": 453,
    "tm": 311939,
    "source": {
      "script": 138,
      "start": 3767,
      "end": 3973,
      "positions": "C0O3776C6O3844C12O3844C17O3825C22O3879C25O3895C32O3893C38O3948C42O3969",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get node:http:145:6",
    "type": "JS",
    "kind": "Unopt",
    "func": 454,
    "tm": 312001,
    "source": {
      "script": 138,
      "start": 4080,
      "end": 4122,
      "positions": "C0O4089C5O4106C9O4118",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:os:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 455,
    "tm": 312546,
    "source": {
      "script": 148,
      "start": 0,
      "end": 9062,
      "positions": "C0O0C4O9062",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:os:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 456,
    "tm": 313718
  },
  {
    "name": "getCheckedFunction node:os:63:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 457,
    "tm": 314115,
    "source": {
      "script": 148,
      "start": 2035,
      "end": 2249,
      "positions": "C0O2035C9O2044C21O2051C25O2247",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "loadNativeModule node:internal/modules/cjs/helpers:44:26",
    "type": "JS",
    "kind": "Baseline",
    "func": 164,
    "tm": 314341,
    "source": {
      "script": 98,
      "start": 1151,
      "end": 1431,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "newAsyncId node:internal/async_hooks:415:20",
    "type": "JS",
    "kind": "Baseline",
    "func": 417,
    "tm": 314390,
    "source": {
      "script": 24,
      "start": 14326,
      "end": 14377,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getDefaultTriggerAsyncId node:internal/async_hooks:431:34",
    "type": "JS",
    "kind": "Baseline",
    "func": 418,
    "tm": 314427,
    "source": {
      "script": 24,
      "start": 14785,
      "end": 15042,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "hasHooks node:internal/async_hooks:460:18",
    "type": "JS",
    "kind": "Baseline",
    "func": 420,
    "tm": 314459,
    "source": {
      "script": 24,
      "start": 15649,
      "end": 15695,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initHooksExist node:internal/async_hooks:468:24",
    "type": "JS",
    "kind": "Baseline",
    "func": 419,
    "tm": 314490,
    "source": {
      "script": 24,
      "start": 15781,
      "end": 15813,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isFull node:internal/fixed_queue:71:9",
    "type": "JS",
    "kind": "Baseline",
    "func": 422,
    "tm": 314522,
    "source": {
      "script": 28,
      "start": 3139,
      "end": 3200,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "push node:internal/fixed_queue:75:7",
    "type": "JS",
    "kind": "Baseline",
    "func": 423,
    "tm": 314553,
    "source": {
      "script": 28,
      "start": 3208,
      "end": 3291,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resolveError node:internal/process/promises:117:22",
    "type": "JS",
    "kind": "Baseline",
    "func": 411,
    "tm": 314588,
    "source": {
      "script": 26,
      "start": 3271,
      "end": 3500,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "FastBuffer node:internal/buffer:958:14",
    "type": "JS",
    "kind": "Baseline",
    "func": 96,
    "tm": 314624,
    "source": {
      "script": 19,
      "start": 26364,
      "end": 26453,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "hasUncaughtExceptionCaptureCallback node:internal/process/execution:124:45",
    "type": "JS",
    "kind": "Unopt",
    "func": 458,
    "tm": 314826,
    "source": {
      "script": 75,
      "start": 3539,
      "end": 3596,
      "positions": "C0O3546C5O3575C10O3585C11O3594",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/process/execution:142:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 459,
    "tm": 315653,
    "source": {
      "script": 75,
      "start": 4428,
      "end": 6574,
      "positions": "C0O4592C5O4592C8O4883C13O4904C23O4957C29O4957C34O4992C37O5021C42O5021C48O5075C63O5109C74O5151C90O5243C96O5248C98O5075C109O5372C120O5434C123O5442C137O5442C142O5490C147O5516C153O5544C158O5566C163O5566C170O5592C173O5605C187O5605C197O5813C200O5826C206O5848C210O5865C214O5883C219O5900C223O5915C226O5923C237O5923C249O6034C250O6047C251O6191C257O6191C262O6208C270O6209C275O6305C280O6309C285O6349C292O6359C295O6359C299O6349C303O6395C308O6395C313O6336C316O6532C321O6532C324O6558C325O6570",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "clearDefaultTriggerAsyncId node:internal/async_hooks:440:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 460,
    "tm": 315744,
    "source": {
      "script": 24,
      "start": 15080,
      "end": 15134,
      "positions": "C0O15087C7O15103C12O15127C17O15133",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "handler node:internal/modules/run_main:59:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 461,
    "tm": 315806,
    "source": {
      "script": 114,
      "start": 1908,
      "end": 1985,
      "positions": "C0O1917C3O1929C9O1959C14O1976C19O1984",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "beforeInspector node:internal/errors:738:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 462,
    "tm": 315889,
    "source": {
      "script": 11,
      "start": 22107,
      "end": 22483,
      "positions": "C0O22121C2O22138C4O22137C11O22205C15O22211C19O22317C21O22337C23O22336C27O22366C31O22329C41O22473C45O22479",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "prepareStackTrace node:internal/errors:90:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 463,
    "tm": 316120,
    "source": {
      "script": 11,
      "start": 2163,
      "end": 3651,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "maybeOverridePrepareStackTrace node:internal/errors:135:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 464,
    "tm": 316251,
    "source": {
      "script": 11,
      "start": 3693,
      "end": 4400,
      "positions": "C0O3921C7O3926C18O3986C23O3992C28O3992C34O4024C35O4247C40O4275C48O4315C53O4339C58O4339C64O4371C65O4379C69O4398",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "afterInspector node:internal/errors:752:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 465,
    "tm": 316409,
    "source": {
      "script": 11,
      "start": 22501,
      "end": 23889,
      "positions": "C0O22543C5O22570C7O23052C10O23064C17O23073C22O23107C28O23107C33O23128C38O23129C43O23167C50O23185C55O23210C62O23185C70O23257C73O23167C79O23272C80O23279C86O23283C93O23296C101O23300C106O23319C108O23456C111O23456C115O23370C125O23426C130O23502C140O23536C145O23559C153O23560C161O23579C172O23611C177O23634C182O23635C194O23717C201O23734C207O23787C210O23803C215O23818C223O23787C232O23709C237O23837C240O23858C242O23879",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "lazyInternalUtilInspect node:internal/errors:184:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 466,
    "tm": 316494,
    "source": {
      "script": 11,
      "start": 5224,
      "end": 5354,
      "positions": "C0O5231C6O5263C12O5285C19O5283C25O5325C29O5352",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/tty:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 467,
    "tm": 316731,
    "source": {
      "script": 149,
      "start": 0,
      "end": 6367,
      "positions": "C0O0C4O6367",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/tty:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 468,
    "tm": 317607,
    "source": {
      "script": 149,
      "start": 0,
      "end": 6367,
      "positions": "C0O0C69O1186C75O1208C81O1231C87O1255C93O1329C99O1329C104O1309C110O1366C111O1366C113O1395C115O1395C117O1416C119O1416C121O1438C123O1438C125O1460C127O1460C129O1877C136O1890C142O1913C148O1937C154O1960C160O1983C166O2005C172O2026C178O2050C184O2074C190O2096C196O2119C202O2140C208O2163C214O2182C220O2287C226O2379C232O1877C234O2420C328O2420C330O2541C331O2541C333O6316C340O6337C346O6354C352O6331C357O6366",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "hasColors node:internal/tty:215:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 469,
    "tm": 317871,
    "source": {
      "script": 149,
      "start": 6059,
      "end": 6314,
      "positions": "C0O6076C18O6185C21O6202C27O6229C41O6229C46O6272C52O6293C56O6290C59O6285C62O6312",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getColorDepth node:internal/tty:106:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 470,
    "tm": 318046
  },
  {
    "name": "get node:internal/util/inspect:345:6",
    "type": "JS",
    "kind": "Unopt",
    "func": 471,
    "tm": 318314,
    "source": {
      "script": 14,
      "start": 10110,
      "end": 10152,
      "positions": "C0O10119C4O10148",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "inspect node:internal/util/inspect:286:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 472,
    "tm": 325628,
    "source": {
      "script": 14,
      "start": 8068,
      "end": 10015,
      "positions": "C0O8068C2O8119C9O8208C15O8240C18O8262C28O8285C31O8307C41O8326C44O8348C54O8375C57O8397C67O8427C70O8449C80O8480C83O8502C93O8539C96O8561C106O8595C109O8617C119O8643C122O8665C132O8686C135O8708C145O8729C148O8751C159O8780C166O8787C171O8829C178O8836C183O8849C185O8862C190O8891C192O8912C195O8901C199O8945C206O8952C213O8968C218O8997C220O9019C223O9008C227O9076C233O9115C235O9130C241O9149C245O9183C250O9183C255O9220C257O9235C261O9225C266O9270C268O9277C272O9471C279O9516C282O9486C291O9561C296O9588C298O9603C301O9597C307O9633C313O9741C315O9757C319O9245C324O9207C327O9803C333O9811C335O9823C339O9853C345O9899C348O9897C352O9919C358O9967C361O9965C365O9979C376O9986C381O10013",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "formatValue node:internal/util/inspect:726:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 473,
    "tm": 325927,
    "source": {
      "script": 14,
      "start": 21561,
      "end": 24106,
      "positions": "C0O21649C14O21726C17O21726C23O21761C26O21788C37O21768C42O21809C43O21816C47O21853C58O21853C64O21877C65O21961C68O22089C73O22118C80O22089C86O22132C88O22171C94O22190C106O22197C111O22235C112O22246C117O22401C123O22442C125O22448C127O22447C131O22474C137O22607C142O22713C148O22734C153O22746C160O22756C165O22902C174O22930C181O22936C185O22989C188O22995C193O23033C195O23022C200O23060C208O23120C223O23060C229O23265C231O23273C236O23296C242O23337C254O23344C259O23380C260O23410C276O23434C281O23445C286O23434C296O23410C302O23464C303O23650C308O23655C313O23655C320O23690C323O23705C329O23737C331O23756C334O23752C339O23750C343O23777C348O23786C353O23786C361O23836C366O23845C371O23845C377O23863C379O23910C384O23919C388O23924C392O23941C397O23950C402O23950C408O23998C418O24020C432O23998C438O24041C439O24049C454O24056C459O24104",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "formatRaw node:internal/util/inspect:796:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 474,
    "tm": 326465
  },
  {
    "name": "getConstructorName node:internal/util/inspect:548:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 475,
    "tm": 326929,
    "source": {
      "script": 14,
      "start": 15972,
      "end": 17205,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isInstanceof node:internal/util/inspect:540:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 476,
    "tm": 327027,
    "source": {
      "script": 14,
      "start": 15846,
      "end": 15943,
      "positions": "C3O15876C5O15890C8O15907C11O15924C12O15937",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getKeys node:internal/util/inspect:669:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 477,
    "tm": 327121,
    "source": {
      "script": 14,
      "start": 19667,
      "end": 20642,
      "positions": "C0O19667C9O19695C11O19719C21O19719C26O19757C30O19779C40O19786C45O19836C51O19843C56O19856C63O19856C73O20216C83O20223C91O20221C101O20268C112O20275C118O20275C127O20301C134O20306C143O20343C151O20343C156O20268C160O20382C172O20389C179O20445C185O20452C190O20482C195O20546C206O20576C209O20576C215O20546C220O20628C222O20640",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "filter node:internal/util/inspect:690:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 478,
    "tm": 327211,
    "source": {
      "script": 14,
      "start": 20482,
      "end": 20538,
      "positions": "C0O20491C10O20491C15O20538",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isError node:internal/util:80:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 479,
    "tm": 327288,
    "source": {
      "script": 12,
      "start": 1846,
      "end": 2080,
      "positions": "C0O2032C5O2039C13O2072C15O2061C18O2078",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "formatError node:internal/util/inspect:1165:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 480,
    "tm": 327510
  },
  {
    "name": "exists node:internal/bootstrap/loaders:236:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 481,
    "tm": 327820,
    "source": {
      "script": 9,
      "start": 7275,
      "end": 7322,
      "positions": "C0O7286C5O7306C10O7310C15O7310C20O7318",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "stylizeWithColor node:internal/util/inspect:521:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 482,
    "tm": 327902,
    "source": {
      "script": 14,
      "start": 15408,
      "end": 15649,
      "positions": "C0O15443C3O15451C10O15457C14O15472C16O15517C19O15525C26O15531C30O15544C32O15575C36O15597C52O15604C65O15622C78O15629C79O15636C81O15647",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get node:internal/util/inspect:409:8",
    "type": "JS",
    "kind": "Unopt",
    "func": 483,
    "tm": 327960,
    "source": {
      "script": 14,
      "start": 12107,
      "end": 12144,
      "positions": "C0O12118C2O12129C5O12138",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "^    at (?:[^/\\\\(]+ \\(|)node:(.+):\\d+:\\d+\\)?$",
    "timestamp": 328062,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": "getEmptyFormatArray node:internal/util/inspect:536:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 484,
    "tm": 328138,
    "source": {
      "script": 14,
      "start": 15804,
      "end": 15823,
      "positions": "C0O15811C2O15821",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "formatProperty node:internal/util/inspect:1672:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 485,
    "tm": 328377
  },
  {
    "name": "isUndetectableObject node:internal/util/inspect:156:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 486,
    "tm": 328522,
    "source": {
      "script": 14,
      "start": 3085,
      "end": 3135,
      "positions": "C0O3117C9O3122C10O3135",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "formatPrimitive node:internal/util/inspect:1382:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 487,
    "tm": 328634,
    "source": {
      "script": 14,
      "start": 45832,
      "end": 46991,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "strEscape node:internal/util/inspect:465:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 488,
    "tm": 329319,
    "source": {
      "script": 14,
      "start": 13614,
      "end": 15381,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "addQuotes node:internal/util/inspect:451:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 489,
    "tm": 330634,
    "source": {
      "script": 14,
      "start": 13279,
      "end": 13419,
      "positions": "C0O13297C2O13308C7O13322C12O13333C22O13340C23O13347C25O13358C30O13372C35O13384C45O13392C46O13399C51O13410C61O13417",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "reduceToSingleString node:internal/util/inspect:1764:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 490,
    "tm": 331050,
    "source": {
      "script": 14,
      "start": 59190,
      "end": 61939,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isBelowBreakLength node:internal/util/inspect:1740:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 491,
    "tm": 331306,
    "source": {
      "script": 14,
      "start": 58228,
      "end": 59159,
      "positions": "C0O58681C7O58688C11O58724C15O58715C19O58737C23O58731C28O58754C29O58767C30O58783C32O58797C36O58788C41O58824C47O58840C49O58855C54O58874C58O58855C63O58878C76O58906C78O58927C82O58931C93O58971C97O58965C102O58992C103O59005C104O58806C109O58770C112O59098C114O59110C121O59121C127O59121C133O59157",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "join node:internal/util:378:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 492,
    "tm": 331433,
    "source": {
      "script": 12,
      "start": 10457,
      "end": 10766,
      "positions": "C0O10491C3O10508C9O10515C14O10553C18O10560C22O10582C24O10587C26O10587C31O10669C33O10682C43O10693C45O10700C52O10601C57O10569C60O10721C62O10734C72O10753C74O10764",
      "inlined": "",
      "fns": []
    }
  }
],
  "functions": [
  {
    "name": " node:internal/main/run_main_module:1:1",
    "codes": [
      32751
    ]
  },
  {
    "name": " node:internal/main/run_main_module:1:1",
    "codes": [
      32752
    ]
  },
  {
    "name": "nativeModuleRequire node:internal/bootstrap/loaders:332:29",
    "codes": [
      32753,
      32870
    ]
  },
  {
    "name": "compileForInternalLoader node:internal/bootstrap/loaders:299:27",
    "codes": [
      32754,
      32871
    ]
  },
  {
    "name": " node:internal/bootstrap/pre_execution:1:1",
    "codes": [
      32755
    ]
  },
  {
    "name": " node:internal/bootstrap/pre_execution:1:1",
    "codes": [
      32756
    ]
  },
  {
    "name": " node:internal/options:1:1",
    "codes": [
      32757
    ]
  },
  {
    "name": " node:internal/options:1:1",
    "codes": [
      32758
    ]
  },
  {
    "name": "internalBinding node:internal/bootstrap/loaders:164:45",
    "codes": [
      32759,
      33017
    ]
  },
  {
    "name": "prepareMainThreadExecution node:internal/bootstrap/pre_execution:23:36",
    "codes": [
      32760
    ]
  },
  {
    "name": "reconnectZeroFillToggle node:internal/buffer:1072:33",
    "codes": [
      32761
    ]
  },
  {
    "name": "patchProcessObject node:internal/bootstrap/pre_execution:82:28",
    "codes": [
      32762
    ]
  },
  {
    "name": "getFastAPIs node:internal/process/per_thread:57:21",
    "codes": [
      32763
    ]
  },
  {
    "name": "resolve node:path:1091:10",
    "codes": [
      32764,
      32869
    ]
  },
  {
    "name": "validateString node:internal/validators:117:24",
    "codes": [
      32765,
      32956
    ]
  },
  {
    "name": " node:path:1082:10",
    "codes": [
      32766
    ]
  },
  {
    "name": "wrappedCwd node:internal/bootstrap/switches/does_own_process_state:124:20",
    "codes": [
      32767
    ]
  },
  {
    "name": "normalizeString node:path:66:25",
    "codes": [
      32768,
      32793
    ]
  },
  {
    "name": "isPosixPathSeparator node:path:56:30",
    "codes": [
      32769,
      32792
    ]
  },
  {
    "name": "addReadOnlyProcessAlias node:internal/bootstrap/pre_execution:130:33",
    "codes": [
      32770
    ]
  },
  {
    "name": "getOptionValue node:internal/options:32:24",
    "codes": [
      32771,
      32791
    ]
  },
  {
    "name": "getOptionsFromBinding node:internal/options:18:31",
    "codes": [
      32772,
      32872
    ]
  },
  {
    "name": "setupTraceCategoryState node:internal/bootstrap/pre_execution:222:33",
    "codes": [
      32773
    ]
  },
  {
    "name": "toggleTraceCategoryState node:internal/process/per_thread:385:34",
    "codes": [
      32774
    ]
  },
  {
    "name": "setupPerfHooks node:internal/bootstrap/pre_execution:228:24",
    "codes": [
      32775
    ]
  },
  {
    "name": "refreshTimeOrigin node:internal/perf/performance:178:27",
    "codes": [
      32776
    ]
  },
  {
    "name": "refreshTimeOrigin node:internal/perf/utils:25:27",
    "codes": [
      32777
    ]
  },
  {
    "name": "setupInspectorHooks node:internal/bootstrap/pre_execution:233:29",
    "codes": [
      32778
    ]
  },
  {
    "name": " node:internal/inspector_async_hook:1:1",
    "codes": [
      32779
    ]
  },
  {
    "name": " node:internal/inspector_async_hook:1:1",
    "codes": [
      32780
    ]
  },
  {
    "name": "setupWarningHandler node:internal/bootstrap/pre_execution:142:29",
    "codes": [
      32781
    ]
  },
  {
    "name": "addListener node:events:486:58",
    "codes": [
      32782
    ]
  },
  {
    "name": "_addListener node:events:418:22",
    "codes": [
      32783
    ]
  },
  {
    "name": "checkListener node:events:127:23",
    "codes": [
      32784
    ]
  },
  {
    "name": " node:internal/validators:235:42",
    "codes": [
      32785
    ]
  },
  {
    "name": "emit node:events:340:44",
    "codes": [
      32786
    ]
  },
  {
    "name": "startListeningIfSignal node:internal/process/signal:22:32",
    "codes": [
      32787
    ]
  },
  {
    "name": "isSignal node:internal/process/signal:17:18",
    "codes": [
      32788
    ]
  },
  {
    "name": "setupDebugEnv node:internal/bootstrap/pre_execution:194:23",
    "codes": [
      32789
    ]
  },
  {
    "name": "initializeDebugEnv node:internal/util/debuglog:22:28",
    "codes": [
      32790
    ]
  },
  {
    "name": "setupStacktracePrinterOnSigint node:internal/bootstrap/pre_execution:173:40",
    "codes": [
      32794
    ]
  },
  {
    "name": "initializeReport node:internal/bootstrap/pre_execution:183:26",
    "codes": [
      32795
    ]
  },
  {
    "name": " node:internal/process/report:1:1",
    "codes": [
      32796
    ]
  },
  {
    "name": " node:internal/process/report:1:1",
    "codes": [
      32797
    ]
  },
  {
    "name": "initializeReportSignalHandlers node:internal/bootstrap/pre_execution:202:40",
    "codes": [
      32798
    ]
  },
  {
    "name": "addSignalHandler node:internal/process/report:97:26",
    "codes": [
      32799
    ]
  },
  {
    "name": "initializeHeapSnapshotSignalHandlers node:internal/bootstrap/pre_execution:208:46",
    "codes": [
      32800
    ]
  },
  {
    "name": "setupChildProcessIpcChannel node:internal/bootstrap/pre_execution:338:37",
    "codes": [
      32801
    ]
  },
  {
    "name": "initializePolicy node:internal/bootstrap/pre_execution:366:26",
    "codes": [
      32802
    ]
  },
  {
    "name": "initializeClusterIPC node:internal/bootstrap/pre_execution:357:30",
    "codes": [
      32803
    ]
  },
  {
    "name": "initializeSourceMapsHandlers node:internal/bootstrap/pre_execution:461:38",
    "codes": [
      32804
    ]
  },
  {
    "name": " node:internal/source_map/source_map_cache:1:1",
    "codes": [
      32805
    ]
  },
  {
    "name": " node:internal/source_map/source_map_cache:1:1",
    "codes": [
      32806
    ]
  },
  {
    "name": "debuglog node:internal/util/debuglog:71:18",
    "codes": [
      32807,
      33065
    ]
  },
  {
    "name": " node:internal/util/iterable_weak_map:1:1",
    "codes": [
      32808
    ]
  },
  {
    "name": " node:internal/util/iterable_weak_map:1:1",
    "codes": [
      32809
    ]
  },
  {
    "name": "<instance_members_initializer> node:internal/util/iterable_weak_map:17:3",
    "codes": [
      32810
    ]
  },
  {
    "name": " node:internal/modules/cjs/helpers:1:1",
    "codes": [
      32811
    ]
  },
  {
    "name": " node:internal/modules/cjs/helpers:1:1",
    "codes": [
      32812
    ]
  },
  {
    "name": "SafeSet node:internal/per_context/primordials:364:16",
    "codes": [
      32813
    ]
  },
  {
    "name": "SafeMap node:internal/per_context/primordials:351:16",
    "codes": [
      32814,
      32874
    ]
  },
  {
    "name": "IterableWeakMap node:internal/util/iterable_weak_map:16:1",
    "codes": [
      32815
    ]
  },
  {
    "name": "SafeWeakMap node:internal/per_context/primordials:357:16",
    "codes": [
      32816
    ]
  },
  {
    "name": "SafeFinalizationRegistry node:internal/per_context/primordials:378:16",
    "codes": [
      32817
    ]
  },
  {
    "name": "initializeDeprecations node:internal/bootstrap/pre_execution:251:32",
    "codes": [
      32818
    ]
  },
  {
    "name": "initializeWASI node:internal/bootstrap/pre_execution:415:24",
    "codes": [
      32819
    ]
  },
  {
    "name": "initializeCJSLoader node:internal/bootstrap/pre_execution:422:29",
    "codes": [
      32820
    ]
  },
  {
    "name": " node:internal/modules/cjs/loader:1:1",
    "codes": [
      32821
    ]
  },
  {
    "name": " node:internal/modules/cjs/loader:1:1",
    "codes": [
      32822
    ]
  },
  {
    "name": " node:internal/modules/package_json_reader:1:1",
    "codes": [
      32823
    ]
  },
  {
    "name": " node:internal/modules/package_json_reader:1:1",
    "codes": [
      32824
    ]
  },
  {
    "name": " node:internal/process/esm_loader:1:1",
    "codes": [
      32825
    ]
  },
  {
    "name": " node:internal/process/esm_loader:1:1",
    "codes": [
      32826
    ]
  },
  {
    "name": " node:internal/modules/esm/loader:1:1",
    "codes": [
      32827
    ]
  },
  {
    "name": " node:internal/modules/esm/loader:1:1",
    "codes": [
      32828
    ]
  },
  {
    "name": "<instance_members_initializer> node:internal/modules/esm/loader:59:3",
    "codes": [
      32829
    ]
  },
  {
    "name": " node:internal/modules/esm/module_map:1:1",
    "codes": [
      32830
    ]
  },
  {
    "name": " node:internal/modules/esm/module_map:1:1",
    "codes": [
      32831
    ]
  },
  {
    "name": " node:internal/modules/esm/module_job:1:1",
    "codes": [
      32832
    ]
  },
  {
    "name": " node:internal/modules/esm/module_job:1:1",
    "codes": [
      32833
    ]
  },
  {
    "name": " node:internal/modules/esm/resolve:1:1",
    "codes": [
      32834
    ]
  },
  {
    "name": " node:internal/modules/esm/resolve:1:1",
    "codes": [
      32835
    ]
  },
  {
    "name": " node:internal/modules/esm/get_format:1:1",
    "codes": [
      32836
    ]
  },
  {
    "name": " node:internal/modules/esm/get_format:1:1",
    "codes": [
      32837
    ]
  },
  {
    "name": " node:internal/modules/esm/load:1:1",
    "codes": [
      32838
    ]
  },
  {
    "name": " node:internal/modules/esm/load:1:1",
    "codes": [
      32839
    ]
  },
  {
    "name": " node:internal/modules/esm/get_source:1:1",
    "codes": [
      32840
    ]
  },
  {
    "name": " node:internal/modules/esm/get_source:1:1",
    "codes": [
      32841
    ]
  },
  {
    "name": " node:internal/fs/promises:1:1",
    "codes": [
      32842
    ]
  },
  {
    "name": " node:internal/fs/promises:1:1",
    "codes": [
      32843
    ]
  },
  {
    "name": "<instance_members_initializer> node:internal/fs/promises:189:3",
    "codes": [
      32844
    ]
  },
  {
    "name": " node:internal/fs/rimraf:1:1",
    "codes": [
      32845
    ]
  },
  {
    "name": " node:internal/fs/rimraf:1:1",
    "codes": [
      32846
    ]
  },
  {
    "name": "from node:buffer:295:28",
    "codes": [
      32847
    ]
  },
  {
    "name": "fromString node:buffer:431:20",
    "codes": [
      32848
    ]
  },
  {
    "name": "fromStringFast node:buffer:412:24",
    "codes": [
      32849
    ]
  },
  {
    "name": "FastBuffer node:internal/buffer:958:14",
    "codes": [
      32850,
      33316
    ]
  },
  {
    "name": "write node:buffer:592:12",
    "codes": [
      32851
    ]
  },
  {
    "name": "alignPool node:buffer:158:19",
    "codes": [
      32852
    ]
  },
  {
    "name": "promisify node:internal/util:324:19",
    "codes": [
      32853
    ]
  },
  {
    "name": "EventEmitterMixin node:internal/event_target:827:27",
    "codes": [
      32854
    ]
  },
  {
    "name": " node:internal/modules/esm/translators:1:1",
    "codes": [
      32855
    ]
  },
  {
    "name": " node:internal/modules/esm/translators:1:1",
    "codes": [
      32856
    ]
  },
  {
    "name": " node:internal/modules/esm/create_dynamic_module:1:1",
    "codes": [
      32857
    ]
  },
  {
    "name": " node:internal/modules/esm/create_dynamic_module:1:1",
    "codes": [
      32858
    ]
  },
  {
    "name": " node:internal/vm/module:1:1",
    "codes": [
      32859
    ]
  },
  {
    "name": " node:internal/vm/module:1:1",
    "codes": [
      32860
    ]
  },
  {
    "name": "<instance_members_initializer> node:internal/vm/module:256:3",
    "codes": [
      32861
    ]
  },
  {
    "name": "ESMLoader node:internal/modules/esm/loader:52:1",
    "codes": [
      32862
    ]
  },
  {
    "name": "ModuleMap node:internal/modules/esm/module_map:15:14",
    "codes": [
      32863
    ]
  },
  {
    "name": "desc.value node:internal/per_context/primordials:325:32",
    "codes": [
      32864
    ]
  },
  {
    "name": "SafeIterator node:internal/per_context/primordials:270:16",
    "codes": [
      32865
    ]
  },
  {
    "name": "next node:internal/per_context/primordials:273:9",
    "codes": [
      32866,
      32873
    ]
  },
  {
    "name": "deprecate node:internal/util:96:19",
    "codes": [
      32867,
      33018
    ]
  },
  {
    "name": "Module._initPaths node:internal/modules/cjs/loader:1227:29",
    "codes": [
      32868
    ]
  },
  {
    "name": " node:internal/modules/run_main:1:1",
    "codes": [
      32875
    ]
  },
  {
    "name": " node:internal/modules/run_main:1:1",
    "codes": [
      32876
    ]
  },
  {
    "name": "initializeESMLoader node:internal/bootstrap/pre_execution:432:29",
    "codes": [
      32877
    ]
  },
  {
    "name": "get hasLoadedAnyUserCJSModule node:internal/modules/cjs/loader:74:32",
    "codes": [
      32878
    ]
  },
  {
    "name": "assert node:internal/assert:11:16",
    "codes": [
      32879,
      33235
    ]
  },
  {
    "name": "loadPreloadModules node:internal/bootstrap/pre_execution:475:28",
    "codes": [
      32880
    ]
  },
  {
    "name": "Module._preloadModules node:internal/modules/cjs/loader:1257:34",
    "codes": [
      32881
    ]
  },
  {
    "name": "Module node:internal/modules/cjs/loader:172:16",
    "codes": [
      32882,
      33231
    ]
  },
  {
    "name": "dirname node:path:1275:10",
    "codes": [
      32883,
      32959
    ]
  },
  {
    "name": "updateChildren node:internal/modules/cjs/loader:165:24",
    "codes": [
      32884
    ]
  },
  {
    "name": "Module._nodeModulePaths node:internal/modules/cjs/loader:629:37",
    "codes": [
      32885,
      32957
    ]
  },
  {
    "name": "Module.require node:internal/modules/cjs/loader:997:36",
    "codes": [
      32886
    ]
  },
  {
    "name": "Module._load node:internal/modules/cjs/loader:757:24",
    "codes": [
      32887
    ]
  },
  {
    "name": "logger node:internal/util/debuglog:96:18",
    "codes": [
      32888
    ]
  },
  {
    "name": " node:internal/per_context/primordials:276:21",
    "codes": [
      32889
    ]
  },
  {
    "name": "debug node:internal/util/debuglog:76:15",
    "codes": [
      32890
    ]
  },
  {
    "name": "init node:internal/util/debuglog:72:16",
    "codes": [
      32891
    ]
  },
  {
    "name": "testEnabled node:internal/util/debuglog:32:19",
    "codes": [
      32892
    ]
  },
  {
    "name": "debuglogImpl node:internal/util/debuglog:49:22",
    "codes": [
      32893
    ]
  },
  {
    "name": " node:internal/modules/cjs/loader:272:66",
    "codes": [
      32894
    ]
  },
  {
    "name": "noop node:internal/util/debuglog:47:14",
    "codes": [
      32895,
      33064
    ]
  },
  {
    "name": "Module._resolveFilename node:internal/modules/cjs/loader:848:35",
    "codes": [
      32896
    ]
  },
  {
    "name": "canBeRequiredByUsers node:internal/bootstrap/loaders:240:30",
    "codes": [
      32897,
      33066
    ]
  },
  {
    "name": "Module._resolveLookupPaths node:internal/modules/cjs/loader:667:38",
    "codes": [
      32898
    ]
  },
  {
    "name": "trySelfParentPath node:internal/modules/cjs/loader:427:27",
    "codes": [
      32899
    ]
  },
  {
    "name": "trySelf node:internal/modules/cjs/loader:441:17",
    "codes": [
      32900
    ]
  },
  {
    "name": "readPackageScope node:internal/modules/cjs/loader:321:26",
    "codes": [
      32901,
      33068
    ]
  },
  {
    "name": "readPackage node:internal/modules/cjs/loader:290:21",
    "codes": [
      32902
    ]
  },
  {
    "name": "read node:internal/modules/package_json_reader:16:14",
    "codes": [
      32903
    ]
  },
  {
    "name": "toNamespacedPath node:path:1266:19",
    "codes": [
      32904,
      32958
    ]
  },
  {
    "name": "Module._findPath node:internal/modules/cjs/loader:494:28",
    "codes": [
      32905,
      33229
    ]
  },
  {
    "name": "isAbsolute node:path:1156:13",
    "codes": [
      32906,
      33228
    ]
  },
  {
    "name": "stat node:internal/modules/cjs/loader:151:14",
    "codes": [
      32907,
      33215
    ]
  },
  {
    "name": "tryExtensions node:internal/modules/cjs/loader:400:23",
    "codes": [
      32908
    ]
  },
  {
    "name": "tryFile node:internal/modules/cjs/loader:384:17",
    "codes": [
      32909
    ]
  },
  {
    "name": "toRealPath node:internal/modules/cjs/loader:393:20",
    "codes": [
      32910
    ]
  },
  {
    "name": "realpathSync node:fs:2408:22",
    "codes": [
      32911,
      33063
    ]
  },
  {
    "name": "getOptions node:internal/fs/utils:314:20",
    "codes": [
      32912
    ]
  },
  {
    "name": "assertEncoding node:internal/fs/utils:151:24",
    "codes": [
      32913
    ]
  },
  {
    "name": "toPathIfFileURL node:internal/url:1496:25",
    "codes": [
      32914,
      33192
    ]
  },
  {
    "name": "isURLInstance node:internal/url:1492:23",
    "codes": [
      32915,
      33136
    ]
  },
  {
    "name": " node:internal/fs/utils:668:38",
    "codes": [
      32916,
      33200
    ]
  },
  {
    "name": " node:internal/fs/utils:357:35",
    "codes": [
      32917,
      33199
    ]
  },
  {
    "name": "isUint8Array node:internal/util/types:13:22",
    "codes": [
      32918,
      33135
    ]
  },
  {
    "name": "splitRoot node:fs:2362:33",
    "codes": [
      32919,
      33242
    ]
  },
  {
    "name": "nextPart node:fs:2395:31",
    "codes": [
      32920,
      33021
    ]
  },
  {
    "name": "handleErrorFromBinding node:internal/fs/utils:340:32",
    "codes": [
      32921,
      33241
    ]
  },
  {
    "name": "isFileType node:fs:205:20",
    "codes": [
      32922,
      32960
    ]
  },
  {
    "name": "encodeRealpathResult node:fs:2371:30",
    "codes": [
      32923
    ]
  },
  {
    "name": "loadNativeModule node:internal/modules/cjs/helpers:44:26",
    "codes": [
      32924,
      33308
    ]
  },
  {
    "name": "Module.load node:internal/modules/cjs/loader:969:33",
    "codes": [
      32925
    ]
  },
  {
    "name": "findLongestRegisteredExtension node:internal/modules/cjs/loader:413:40",
    "codes": [
      32926
    ]
  },
  {
    "name": "basename node:path:1306:11",
    "codes": [
      32927
    ]
  },
  {
    "name": "Module._extensions..js node:internal/modules/cjs/loader:1110:37",
    "codes": [
      32928
    ]
  },
  {
    "name": "readFileSync node:fs:450:22",
    "codes": [
      32929
    ]
  },
  {
    "name": "isEncoding node:buffer:529:40",
    "codes": [
      32930
    ]
  },
  {
    "name": "normalizeEncoding node:internal/util:160:27",
    "codes": [
      32931
    ]
  },
  {
    "name": "isUint32 node:internal/validators:39:18",
    "codes": [
      32932,
      33069
    ]
  },
  {
    "name": "openSync node:fs:576:18",
    "codes": [
      32933
    ]
  },
  {
    "name": " node:internal/fs/utils:680:42",
    "codes": [
      32934,
      33198
    ]
  },
  {
    "name": "stringToFlags node:internal/fs/utils:555:23",
    "codes": [
      32935
    ]
  },
  {
    "name": "parseFileMode node:internal/validators:58:23",
    "codes": [
      32936
    ]
  },
  {
    "name": " node:internal/validators:83:3",
    "codes": [
      32937
    ]
  },
  {
    "name": "isInt32 node:internal/validators:35:17",
    "codes": [
      32938,
      33067
    ]
  },
  {
    "name": "tryStatSync node:fs:404:21",
    "codes": [
      32939
    ]
  },
  {
    "name": "tryCreateBuffer node:fs:414:25",
    "codes": [
      32940
    ]
  },
  {
    "name": "allocUnsafe node:buffer:372:42",
    "codes": [
      32941
    ]
  },
  {
    "name": " node:buffer:348:36",
    "codes": [
      32942
    ]
  },
  {
    "name": "validateNumber node:internal/validators:122:24",
    "codes": [
      32943
    ]
  },
  {
    "name": "allocate node:buffer:397:18",
    "codes": [
      32944
    ]
  },
  {
    "name": "tryReadSync node:fs:429:21",
    "codes": [
      32945
    ]
  },
  {
    "name": "readSync node:fs:684:18",
    "codes": [
      32946
    ]
  },
  {
    "name": " node:internal/fs/utils:686:40",
    "codes": [
      32947
    ]
  },
  {
    "name": " node:internal/validators:190:40",
    "codes": [
      32948
    ]
  },
  {
    "name": " node:internal/validators:72:3",
    "codes": [
      32949
    ]
  },
  {
    "name": " node:internal/fs/utils:636:3",
    "codes": [
      32950
    ]
  },
  {
    "name": " node:internal/fs/utils:886:42",
    "codes": [
      32951
    ]
  },
  {
    "name": "closeSync node:fs:526:19",
    "codes": [
      32952
    ]
  },
  {
    "name": "toString node:buffer:782:46",
    "codes": [
      32953
    ]
  },
  {
    "name": "getEncodingOps node:buffer:678:24",
    "codes": [
      32954
    ]
  },
  {
    "name": "slice node:buffer:593:12",
    "codes": [
      32955
    ]
  },
  {
    "name": "Module._compile node:internal/modules/cjs/loader:1055:37",
    "codes": [
      32961
    ]
  },
  {
    "name": "maybeCacheSourceMap node:internal/source_map/source_map_cache:74:29",
    "codes": [
      32962
    ]
  },
  {
    "name": "getSourceMapsEnabled node:internal/source_map/source_map_cache:43:30",
    "codes": [
      32963
    ]
  },
  {
    "name": "setSourceMapsEnabled node:internal/source_map/source_map_cache:50:30",
    "codes": [
      32964
    ]
  },
  {
    "name": "validateBoolean node:internal/validators:138:25",
    "codes": [
      32965
    ]
  },
  {
    "name": "wrapSafe node:internal/modules/cjs/loader:1017:18",
    "codes": [
      32966
    ]
  },
  {
    "name": "compileFunction node:vm:308:25",
    "codes": [
      32967
    ]
  },
  {
    "name": " node:internal/validators:167:39",
    "codes": [
      32968
    ]
  },
  {
    "name": " node:vm:313:27",
    "codes": [
      32969,
      33016
    ]
  },
  {
    "name": " node:internal/validators:100:40",
    "codes": [
      32970
    ]
  },
  {
    "name": " /usr/local/lib/node_modules/0x/lib/preload/no-cluster.js:1:1",
    "codes": [
      32971
    ]
  },
  {
    "name": " /usr/local/lib/node_modules/0x/lib/preload/no-cluster.js:1:1",
    "codes": [
      32972
    ]
  },
  {
    "name": "importModuleDynamicallyWrap node:internal/vm/module:435:37",
    "codes": [
      32973
    ]
  },
  {
    "name": "makeRequireFunction node:internal/modules/cjs/helpers:58:29",
    "codes": [
      32974
    ]
  },
  {
    "name": "require node:internal/modules/cjs/helpers:101:31",
    "codes": [
      32975
    ]
  },
  {
    "name": " node:internal/modules/cjs/helpers:29:66",
    "codes": [
      32976
    ]
  },
  {
    "name": "compileForPublicLoader node:internal/bootstrap/loaders:246:25",
    "codes": [
      32977
    ]
  },
  {
    "name": " node:cluster:1:1",
    "codes": [
      32978
    ]
  },
  {
    "name": " node:cluster:1:1",
    "codes": [
      32979
    ]
  },
  {
    "name": " node:internal/cluster/primary:1:1",
    "codes": [
      32980
    ]
  },
  {
    "name": " node:internal/cluster/primary:1:1",
    "codes": [
      32981
    ]
  },
  {
    "name": " node:child_process:1:1",
    "codes": [
      32982
    ]
  },
  {
    "name": " node:child_process:1:1",
    "codes": [
      32983
    ]
  },
  {
    "name": " node:internal/child_process:1:1",
    "codes": [
      32984
    ]
  },
  {
    "name": " node:internal/child_process:1:1",
    "codes": [
      32985
    ]
  },
  {
    "name": "<instance_members_initializer> node:internal/child_process:524:3",
    "codes": [
      32986
    ]
  },
  {
    "name": " node:net:1:1",
    "codes": [
      32987
    ]
  },
  {
    "name": " node:net:1:1",
    "codes": [
      32988
    ]
  },
  {
    "name": " node:internal/net:1:1",
    "codes": [
      32989
    ]
  },
  {
    "name": " node:internal/net:1:1",
    "codes": [
      32990
    ]
  },
  {
    "name": " node:internal/dtrace:1:1",
    "codes": [
      32991
    ]
  },
  {
    "name": " node:internal/dtrace:1:1",
    "codes": [
      32992
    ]
  },
  {
    "name": "protoGetter node:net:718:21",
    "codes": [
      32993
    ]
  },
  {
    "name": " node:dgram:1:1",
    "codes": [
      32994
    ]
  },
  {
    "name": " node:dgram:1:1",
    "codes": [
      32995
    ]
  },
  {
    "name": " node:internal/dgram:1:1",
    "codes": [
      32996
    ]
  },
  {
    "name": " node:internal/dgram:1:1",
    "codes": [
      32997
    ]
  },
  {
    "name": " node:internal/socket_list:1:1",
    "codes": [
      32998
    ]
  },
  {
    "name": " node:internal/socket_list:1:1",
    "codes": [
      32999
    ]
  },
  {
    "name": "customPromiseExecFunction node:child_process:231:35",
    "codes": [
      33000
    ]
  },
  {
    "name": " node:internal/cluster/round_robin_handle:1:1",
    "codes": [
      33001
    ]
  },
  {
    "name": " node:internal/cluster/round_robin_handle:1:1",
    "codes": [
      33002
    ]
  },
  {
    "name": " node:internal/cluster/utils:1:1",
    "codes": [
      33003
    ]
  },
  {
    "name": " node:internal/cluster/utils:1:1",
    "codes": [
      33004
    ]
  },
  {
    "name": " node:internal/cluster/shared_handle:1:1",
    "codes": [
      33005
    ]
  },
  {
    "name": " node:internal/cluster/shared_handle:1:1",
    "codes": [
      33006
    ]
  },
  {
    "name": " node:internal/cluster/worker:1:1",
    "codes": [
      33007
    ]
  },
  {
    "name": " node:internal/cluster/worker:1:1",
    "codes": [
      33008
    ]
  },
  {
    "name": "EventEmitter node:events:84:22",
    "codes": [
      33009
    ]
  },
  {
    "name": "EventEmitter.init node:events:194:29",
    "codes": [
      33010
    ]
  },
  {
    "name": "getESMFacade node:internal/bootstrap/loaders:264:15",
    "codes": [
      33011
    ]
  },
  {
    "name": " node:internal/bootstrap/loaders:273:15",
    "codes": [
      33012
    ]
  },
  {
    "name": "syncExports node:internal/bootstrap/loaders:287:14",
    "codes": [
      33013,
      33020
    ]
  },
  {
    "name": "getOwn node:internal/bootstrap/loaders:180:16",
    "codes": [
      33014,
      33019
    ]
  },
  {
    "name": " /usr/local/lib/node_modules/0x/lib/preload/redir-stdout.js:1:1",
    "codes": [
      33022
    ]
  },
  {
    "name": " /usr/local/lib/node_modules/0x/lib/preload/redir-stdout.js:1:1",
    "codes": [
      33023
    ]
  },
  {
    "name": "get BlockList node:net:1779:16",
    "codes": [
      33024
    ]
  },
  {
    "name": " node:internal/blocklist:1:1",
    "codes": [
      33025
    ]
  },
  {
    "name": " node:internal/blocklist:1:1",
    "codes": [
      33026
    ]
  },
  {
    "name": " node:internal/socketaddress:1:1",
    "codes": [
      33027
    ]
  },
  {
    "name": " node:internal/socketaddress:1:1",
    "codes": [
      33028
    ]
  },
  {
    "name": "get SocketAddress node:net:1783:20",
    "codes": [
      33029
    ]
  },
  {
    "name": " node:worker_threads:1:1",
    "codes": [
      33030
    ]
  },
  {
    "name": " node:worker_threads:1:1",
    "codes": [
      33031
    ]
  },
  {
    "name": " node:internal/worker:1:1",
    "codes": [
      33032
    ]
  },
  {
    "name": " node:internal/worker:1:1",
    "codes": [
      33033
    ]
  },
  {
    "name": " node:internal/error_serdes:1:1",
    "codes": [
      33034
    ]
  },
  {
    "name": " node:internal/error_serdes:1:1",
    "codes": [
      33035
    ]
  },
  {
    "name": "Socket node:net:283:16",
    "codes": [
      33036
    ]
  },
  {
    "name": "Duplex node:internal/streams/duplex:52:16",
    "codes": [
      33037
    ]
  },
  {
    "name": "Readable node:internal/streams/readable:181:18",
    "codes": [
      33038
    ]
  },
  {
    "name": "Stream node:internal/streams/legacy:10:16",
    "codes": [
      33039
    ]
  },
  {
    "name": "ReadableState node:internal/streams/readable:78:23",
    "codes": [
      33040
    ]
  },
  {
    "name": "getHighWaterMark node:internal/streams/state:19:26",
    "codes": [
      33041
    ]
  },
  {
    "name": "highWaterMarkFrom node:internal/streams/state:10:27",
    "codes": [
      33042
    ]
  },
  {
    "name": "getDefaultHighWaterMark node:internal/streams/state:15:33",
    "codes": [
      33043
    ]
  },
  {
    "name": "BufferList node:internal/streams/buffer_list:14:14",
    "codes": [
      33044
    ]
  },
  {
    "name": "construct node:internal/streams/destroy:225:19",
    "codes": [
      33045
    ]
  },
  {
    "name": "Writable node:internal/streams/writable:219:18",
    "codes": [
      33046
    ]
  },
  {
    "name": "WritableState node:internal/streams/writable:77:23",
    "codes": [
      33047
    ]
  },
  {
    "name": "resetBuffer node:internal/streams/writable:202:21",
    "codes": [
      33048
    ]
  },
  {
    "name": "set node:internal/streams/readable:1175:8",
    "codes": [
      33049
    ]
  },
  {
    "name": "createHandle node:net:137:22",
    "codes": [
      33050
    ]
  },
  {
    "name": "set node:net:1707:6",
    "codes": [
      33051
    ]
  },
  {
    "name": "get node:net:1706:6",
    "codes": [
      33052
    ]
  },
  {
    "name": "Readable.on node:internal/streams/readable:875:33",
    "codes": [
      33053
    ]
  },
  {
    "name": "initSocketHandle node:net:254:26",
    "codes": [
      33054
    ]
  },
  {
    "name": "undestroy node:internal/streams/destroy:160:19",
    "codes": [
      33055
    ]
  },
  {
    "name": "getNewAsyncId node:net:156:23",
    "codes": [
      33056
    ]
  },
  {
    "name": "get node:internal/bootstrap/pre_execution:315:8",
    "codes": [
      33057
    ]
  },
  {
    "name": " /usr/local/lib/node_modules/0x/lib/preload/soft-exit.js:1:1",
    "codes": [
      33058
    ]
  },
  {
    "name": " /usr/local/lib/node_modules/0x/lib/preload/soft-exit.js:1:1",
    "codes": [
      33059
    ]
  },
  {
    "name": "initializeFrozenIntrinsics node:internal/bootstrap/pre_execution:467:36",
    "codes": [
      33060
    ]
  },
  {
    "name": "executeUserEntryPoint node:internal/modules/run_main:74:31",
    "codes": [
      33061
    ]
  },
  {
    "name": "resolveMainPath node:internal/modules/run_main:11:25",
    "codes": [
      33062
    ]
  },
  {
    "name": "shouldUseESMLoader node:internal/modules/run_main:26:28",
    "codes": [
      33070
    ]
  },
  {
    "name": "runMainESM node:internal/modules/run_main:43:20",
    "codes": [
      33071
    ]
  },
  {
    "name": "loadESM node:internal/process/esm_loader:85:41",
    "codes": [
      33072
    ]
  },
  {
    "name": "initializeLoader node:internal/process/esm_loader:50:32",
    "codes": [
      33073
    ]
  },
  {
    "name": "handleMainPromise node:internal/modules/run_main:55:33",
    "codes": [
      33074
    ]
  },
  {
    "name": " node:internal/modules/run_main:47:29",
    "codes": [
      33075
    ]
  },
  {
    "name": "pathToFileURL node:internal/url:1455:23",
    "codes": [
      33076
    ]
  },
  {
    "name": "URL node:internal/url:620:14",
    "codes": [
      33077,
      33185
    ]
  },
  {
    "name": "URLContext node:internal/url:160:14",
    "codes": [
      33078,
      33138
    ]
  },
  {
    "name": "onParseComplete node:internal/url:532:25",
    "codes": [
      33079,
      33133
    ]
  },
  {
    "name": "URLSearchParams node:internal/url:182:14",
    "codes": [
      33080,
      33230
    ]
  },
  {
    "name": "initSearchParams node:internal/url:1016:26",
    "codes": [
      33081,
      33193
    ]
  },
  {
    "name": "encodePathChars node:internal/url:1440:25",
    "codes": [
      33082
    ]
  },
  {
    "name": "set pathname node:internal/url:884:15",
    "codes": [
      33083,
      33232
    ]
  },
  {
    "name": " node:internal/url:636:21",
    "codes": [
      33084,
      33137
    ]
  },
  {
    "name": "onParsePathComplete node:internal/url:591:29",
    "codes": [
      33085,
      33236
    ]
  },
  {
    "name": "get href node:internal/url:734:11",
    "codes": [
      33086,
      33188
    ]
  },
  {
    "name": " node:internal/url:682:12",
    "codes": [
      33087,
      33194
    ]
  },
  {
    "name": " node:internal/validators:153:3",
    "codes": [
      33088,
      33184
    ]
  },
  {
    "name": "import node:internal/modules/esm/loader:268:15",
    "codes": [
      33089
    ]
  },
  {
    "name": "getModuleJob node:internal/modules/esm/loader:221:21",
    "codes": [
      33090,
      33253
    ]
  },
  {
    "name": "resolve node:internal/modules/esm/loader:402:16",
    "codes": [
      33091,
      33234
    ]
  },
  {
    "name": "defaultResolve node:internal/modules/esm/resolve:981:24",
    "codes": [
      33092
    ]
  },
  {
    "name": "get protocol node:internal/url:769:15",
    "codes": [
      33093,
      33186
    ]
  },
  {
    "name": "getConditionsSet node:internal/modules/esm/resolve:164:26",
    "codes": [
      33094
    ]
  },
  {
    "name": "moduleResolve node:internal/modules/esm/resolve:917:23",
    "codes": [
      33095
    ]
  },
  {
    "name": "shouldBeTreatedAsRelativeOrAbsolutePath node:internal/modules/esm/resolve:905:49",
    "codes": [
      33096,
      33240
    ]
  },
  {
    "name": "isRelativeSpecifier node:internal/modules/esm/resolve:895:29",
    "codes": [
      33097
    ]
  },
  {
    "name": "finalizeResolution node:internal/modules/esm/resolve:389:28",
    "codes": [
      33098
    ]
  },
  {
    "name": "get pathname node:internal/url:875:15",
    "codes": [
      33099,
      33187
    ]
  },
  {
    "name": "fileURLToPath node:internal/url:1413:23",
    "codes": [
      33100,
      33218
    ]
  },
  {
    "name": "get origin node:internal/url:746:13",
    "codes": [
      33101,
      33211
    ]
  },
  {
    "name": "getPathFromURLPosix node:internal/url:1395:29",
    "codes": [
      33102,
      33134
    ]
  },
  {
    "name": "get hostname node:internal/url:841:15",
    "codes": [
      33103,
      33195
    ]
  },
  {
    "name": "tryStatSync node:internal/modules/esm/resolve:183:3",
    "codes": [
      33104,
      33213
    ]
  },
  {
    "name": "statSync node:fs:1528:18",
    "codes": [
      33105,
      33219
    ]
  },
  {
    "name": "hasNoEntryError node:fs:1465:25",
    "codes": [
      33106,
      33221
    ]
  },
  {
    "name": "getStatsFromBinding node:internal/fs/utils:530:29",
    "codes": [
      33107
    ]
  },
  {
    "name": "isBigUint64Array node:internal/util/types:53:26",
    "codes": [
      33108
    ]
  },
  {
    "name": "msFromTimeSpec node:internal/fs/utils:446:24",
    "codes": [
      33109,
      33243
    ]
  },
  {
    "name": "Stats node:internal/fs/utils:495:15",
    "codes": [
      33110,
      33212
    ]
  },
  {
    "name": "StatsBase node:internal/fs/utils:400:19",
    "codes": [
      33111,
      33196
    ]
  },
  {
    "name": "dateFromMs node:internal/fs/utils:460:20",
    "codes": [
      33112,
      33197
    ]
  },
  {
    "name": "StatsBase.isDirectory node:internal/fs/utils:414:43",
    "codes": [
      33113,
      33214
    ]
  },
  {
    "name": "Stats._checkModeProperty node:internal/fs/utils:517:46",
    "codes": [
      33114,
      33217
    ]
  },
  {
    "name": "StatsBase.isFile node:internal/fs/utils:418:38",
    "codes": [
      33115
    ]
  },
  {
    "name": "get search node:internal/url:893:13",
    "codes": [
      33116
    ]
  },
  {
    "name": "set search node:internal/url:900:13",
    "codes": [
      33117
    ]
  },
  {
    "name": "toUSVString node:internal/util:59:21",
    "codes": [
      33118
    ]
  },
  {
    "name": "get hash node:internal/url:923:11",
    "codes": [
      33119
    ]
  },
  {
    "name": "set hash node:internal/url:930:11",
    "codes": [
      33120
    ]
  },
  {
    "name": "toString node:internal/url:730:11",
    "codes": [
      33121,
      33201
    ]
  },
  {
    "name": "get node:internal/modules/esm/module_map:16:6",
    "codes": [
      33122,
      33252
    ]
  },
  {
    "name": "ModuleJob node:internal/modules/esm/module_job:55:14",
    "codes": [
      33123,
      33271
    ]
  },
  {
    "name": "moduleProvider node:internal/modules/esm/loader:229:28",
    "codes": [
      33124
    ]
  },
  {
    "name": "load node:internal/modules/esm/loader:297:13",
    "codes": [
      33125
    ]
  },
  {
    "name": "defaultLoad node:internal/modules/esm/load:7:27",
    "codes": [
      33126
    ]
  },
  {
    "name": "defaultGetFormat node:internal/modules/esm/get_format:81:26",
    "codes": [
      33127,
      33269
    ]
  },
  {
    "name": "file: node:internal/modules/esm/get_format:56:10",
    "codes": [
      33128
    ]
  },
  {
    "name": "extname node:path:1385:10",
    "codes": [
      33129,
      33254
    ]
  },
  {
    "name": "getPackageType node:internal/modules/esm/resolve:785:24",
    "codes": [
      33130
    ]
  },
  {
    "name": "getPackageScopeConfig node:internal/modules/esm/resolve:247:31",
    "codes": [
      33131,
      33239
    ]
  },
  {
    "name": "getPackageConfig node:internal/modules/esm/resolve:191:26",
    "codes": [
      33132
    ]
  },
  {
    "name": "defaultGetSource node:internal/modules/esm/get_source:25:32",
    "codes": [
      33139
    ]
  },
  {
    "name": "readFile node:internal/fs/promises:786:24",
    "codes": [
      33140
    ]
  },
  {
    "name": "checkAborted node:internal/fs/promises:319:22",
    "codes": [
      33141
    ]
  },
  {
    "name": "open node:internal/fs/promises:449:20",
    "codes": [
      33142
    ]
  },
  {
    "name": "link node:internal/modules/esm/module_job:66:18",
    "codes": [
      33143
    ]
  },
  {
    "name": "primordials.PromisePrototypeCatch node:internal/per_context/primordials:397:37",
    "codes": [
      33144,
      33270
    ]
  },
  {
    "name": "set node:internal/modules/esm/module_map:20:6",
    "codes": [
      33145
    ]
  },
  {
    "name": " node:internal/modules/esm/module_map:7:63",
    "codes": [
      33146
    ]
  },
  {
    "name": " node:internal/modules/esm/loader:277:15",
    "codes": [
      33147
    ]
  },
  {
    "name": "run node:internal/modules/esm/module_job:180:12",
    "codes": [
      33148
    ]
  },
  {
    "name": "instantiate node:internal/modules/esm/module_job:98:14",
    "codes": [
      33149
    ]
  },
  {
    "name": "_instantiate node:internal/modules/esm/module_job:105:21",
    "codes": [
      33150
    ]
  },
  {
    "name": "addJobsToDependencyGraph node:internal/modules/esm/module_job:107:38",
    "codes": [
      33151
    ]
  },
  {
    "name": "FileHandle node:internal/fs/promises:116:14",
    "codes": [
      33152
    ]
  },
  {
    "name": "MixedEventEmitter node:internal/event_target:829:16",
    "codes": [
      33153
    ]
  },
  {
    "name": "readFileHandle node:internal/fs/promises:359:30",
    "codes": [
      33154
    ]
  },
  {
    "name": "get fd node:internal/fs/promises:129:9",
    "codes": [
      33155
    ]
  },
  {
    "name": "primordials.SafePromisePrototypeFinally node:internal/per_context/primordials:409:43",
    "codes": [
      33156
    ]
  },
  {
    "name": " node:internal/per_context/primordials:412:15",
    "codes": [
      33157
    ]
  },
  {
    "name": "SafePromise node:internal/per_context/primordials:393:16",
    "codes": [
      33158,
      33189
    ]
  },
  {
    "name": " node:internal/per_context/primordials:413:21",
    "codes": [
      33159
    ]
  },
  {
    "name": "allocUnsafeSlow node:buffer:382:50",
    "codes": [
      33160
    ]
  },
  {
    "name": "createUnsafeBuffer node:internal/buffer:1059:28",
    "codes": [
      33161
    ]
  },
  {
    "name": "close node:internal/fs/promises:189:11",
    "codes": [
      33162
    ]
  },
  {
    "name": " node:internal/fs/promises:203:9",
    "codes": [
      33163
    ]
  },
  {
    "name": "moduleStrategy node:internal/modules/esm/translators:134:56",
    "codes": [
      33164
    ]
  },
  {
    "name": "assertBufferSource node:internal/modules/esm/translators:79:28",
    "codes": [
      33165
    ]
  },
  {
    "name": "lazyTypes node:internal/modules/esm/translators:24:19",
    "codes": [
      33166
    ]
  },
  {
    "name": "stringify node:internal/modules/esm/translators:95:19",
    "codes": [
      33167
    ]
  },
  {
    "name": "TextDecoder node:internal/encoding:379:16",
    "codes": [
      33168
    ]
  },
  {
    "name": "getEncodingFromLabel node:internal/encoding:313:30",
    "codes": [
      33169
    ]
  },
  {
    "name": "decode node:internal/encoding:408:11",
    "codes": [
      33170
    ]
  },
  {
    "name": "validateDecoder node:internal/encoding:64:25",
    "codes": [
      33171
    ]
  },
  {
    "name": "slice node:buffer:602:12",
    "codes": [
      33172
    ]
  },
  {
    "name": " node:internal/modules/esm/translators:44:63",
    "codes": [
      33173
    ]
  },
  {
    "name": " file:///Users/macondo/Documents/coderhouse-task/tarea_15/punto_2/src/server.js:1:1",
    "codes": [
      33174
    ]
  },
  {
    "name": " node:internal/modules/esm/module_job:75:41",
    "codes": [
      33175,
      33244
    ]
  },
  {
    "name": "onParseError node:internal/url:551:22",
    "codes": [
      33176
    ]
  },
  {
    "name": "NodeError node:internal/errors:342:28",
    "codes": [
      33177,
      33224
    ]
  },
  {
    "name": "isErrorStackTraceLimitWritable node:internal/errors:198:40",
    "codes": [
      33178,
      33216
    ]
  },
  {
    "name": "getMessage node:internal/errors:410:20",
    "codes": [
      33179,
      33233
    ]
  },
  {
    "name": " node:internal/errors:1316:30",
    "codes": [
      33180,
      33226
    ]
  },
  {
    "name": "captureLargerStackTrace node:internal/errors:458:35",
    "codes": [
      33181,
      33223
    ]
  },
  {
    "name": "packageResolve node:internal/modules/esm/resolve:838:24",
    "codes": [
      33182,
      33227
    ]
  },
  {
    "name": "parsePackageName node:internal/modules/esm/resolve:795:26",
    "codes": [
      33183,
      33222
    ]
  },
  {
    "name": "uvErrmapGet node:internal/errors:449:21",
    "codes": [
      33190,
      33220
    ]
  },
  {
    "name": "lazyUv node:internal/errors:440:16",
    "codes": [
      33191,
      33225
    ]
  },
  {
    "name": " node:internal/errors:1398:27",
    "codes": [
      33202,
      33246
    ]
  },
  {
    "name": "resolveAsCommonJS node:internal/modules/esm/resolve:941:27",
    "codes": [
      33203,
      33247
    ]
  },
  {
    "name": "promiseRejectHandler node:internal/process/promises:97:30",
    "codes": [
      33204,
      33272
    ]
  },
  {
    "name": "getUnhandledRejectionsMode node:internal/process/promises:79:36",
    "codes": [
      33205
    ]
  },
  {
    "name": "unhandledRejection node:internal/process/promises:125:28",
    "codes": [
      33206,
      33245
    ]
  },
  {
    "name": "executionAsyncId node:internal/async_hooks:561:26",
    "codes": [
      33207,
      33248
    ]
  },
  {
    "name": "triggerAsyncId node:internal/async_hooks:565:24",
    "codes": [
      33208,
      33249
    ]
  },
  {
    "name": "setHasRejectionToWarn node:internal/process/promises:71:31",
    "codes": [
      33209,
      33250
    ]
  },
  {
    "name": "handledRejection node:internal/process/promises:154:26",
    "codes": [
      33210
    ]
  },
  {
    "name": "node: node:internal/modules/esm/get_format:78:10",
    "codes": [
      33251
    ]
  },
  {
    "name": "resolveError node:internal/process/promises:117:22",
    "codes": [
      33255,
      33315
    ]
  },
  {
    "name": "nextTick node:internal/process/task_queues:104:18",
    "codes": [
      33256
    ]
  },
  {
    "name": " node:internal/validators:221:42",
    "codes": [
      33257
    ]
  },
  {
    "name": "isEmpty node:internal/fixed_queue:95:10",
    "codes": [
      33258,
      33268
    ]
  },
  {
    "name": "isEmpty node:internal/fixed_queue:67:10",
    "codes": [
      33259,
      33273
    ]
  },
  {
    "name": "setHasTickScheduled node:internal/process/task_queues:52:29",
    "codes": [
      33260
    ]
  },
  {
    "name": "newAsyncId node:internal/async_hooks:415:20",
    "codes": [
      33261,
      33309
    ]
  },
  {
    "name": "getDefaultTriggerAsyncId node:internal/async_hooks:431:34",
    "codes": [
      33262,
      33310
    ]
  },
  {
    "name": "initHooksExist node:internal/async_hooks:468:24",
    "codes": [
      33263,
      33312
    ]
  },
  {
    "name": "hasHooks node:internal/async_hooks:460:18",
    "codes": [
      33264,
      33311
    ]
  },
  {
    "name": "push node:internal/fixed_queue:99:7",
    "codes": [
      33265
    ]
  },
  {
    "name": "isFull node:internal/fixed_queue:71:9",
    "codes": [
      33266,
      33313
    ]
  },
  {
    "name": "push node:internal/fixed_queue:75:7",
    "codes": [
      33267,
      33314
    ]
  },
  {
    "name": "builtinStrategy node:internal/modules/esm/translators:270:58",
    "codes": [
      33274
    ]
  },
  {
    "name": " node:http:1:1",
    "codes": [
      33275
    ]
  },
  {
    "name": " node:http:1:1",
    "codes": [
      33276
    ]
  },
  {
    "name": " node:_http_agent:1:1",
    "codes": [
      33277
    ]
  },
  {
    "name": " node:_http_agent:1:1",
    "codes": [
      33278
    ]
  },
  {
    "name": "Agent node:_http_agent:93:15",
    "codes": [
      33279
    ]
  },
  {
    "name": " node:internal/validators:127:39",
    "codes": [
      33280
    ]
  },
  {
    "name": " node:_http_client:1:1",
    "codes": [
      33281
    ]
  },
  {
    "name": " node:_http_client:1:1",
    "codes": [
      33282
    ]
  },
  {
    "name": " node:_http_common:1:1",
    "codes": [
      33283
    ]
  },
  {
    "name": " node:_http_common:1:1",
    "codes": [
      33284
    ]
  },
  {
    "name": " node:internal/freelist:1:1",
    "codes": [
      33285
    ]
  },
  {
    "name": " node:internal/freelist:1:1",
    "codes": [
      33286
    ]
  },
  {
    "name": " node:_http_incoming:1:1",
    "codes": [
      33287
    ]
  },
  {
    "name": " node:_http_incoming:1:1",
    "codes": [
      33288
    ]
  },
  {
    "name": "FreeList node:internal/freelist:8:14",
    "codes": [
      33289
    ]
  },
  {
    "name": " node:_http_outgoing:1:1",
    "codes": [
      33290
    ]
  },
  {
    "name": " node:_http_outgoing:1:1",
    "codes": [
      33291
    ]
  },
  {
    "name": " node:internal/http:1:1",
    "codes": [
      33292
    ]
  },
  {
    "name": " node:internal/http:1:1",
    "codes": [
      33293
    ]
  },
  {
    "name": "hideStackFrames node:internal/errors:382:25",
    "codes": [
      33294
    ]
  },
  {
    "name": " node:_http_server:1:1",
    "codes": [
      33295
    ]
  },
  {
    "name": " node:_http_server:1:1",
    "codes": [
      33296
    ]
  },
  {
    "name": " node:diagnostics_channel:1:1",
    "codes": [
      33297
    ]
  },
  {
    "name": " node:diagnostics_channel:1:1",
    "codes": [
      33298
    ]
  },
  {
    "name": "channel node:diagnostics_channel:91:17",
    "codes": [
      33299
    ]
  },
  {
    "name": "Channel node:diagnostics_channel:65:14",
    "codes": [
      33300
    ]
  },
  {
    "name": "byteLength node:buffer:627:17",
    "codes": [
      33301
    ]
  },
  {
    "name": "write node:buffer:628:12",
    "codes": [
      33302
    ]
  },
  {
    "name": "get node:http:132:6",
    "codes": [
      33303
    ]
  },
  {
    "name": "get node:http:145:6",
    "codes": [
      33304
    ]
  },
  {
    "name": " node:os:1:1",
    "codes": [
      33305
    ]
  },
  {
    "name": " node:os:1:1",
    "codes": [
      33306
    ]
  },
  {
    "name": "getCheckedFunction node:os:63:28",
    "codes": [
      33307
    ]
  },
  {
    "name": "hasUncaughtExceptionCaptureCallback node:internal/process/execution:124:45",
    "codes": [
      33317
    ]
  },
  {
    "name": " node:internal/process/execution:142:10",
    "codes": [
      33318
    ]
  },
  {
    "name": "clearDefaultTriggerAsyncId node:internal/async_hooks:440:36",
    "codes": [
      33319
    ]
  },
  {
    "name": "handler node:internal/modules/run_main:59:19",
    "codes": [
      33320
    ]
  },
  {
    "name": "beforeInspector node:internal/errors:738:18",
    "codes": [
      33321
    ]
  },
  {
    "name": "prepareStackTrace node:internal/errors:90:27",
    "codes": [
      33322
    ]
  },
  {
    "name": "maybeOverridePrepareStackTrace node:internal/errors:135:40",
    "codes": [
      33323
    ]
  },
  {
    "name": "afterInspector node:internal/errors:752:17",
    "codes": [
      33324
    ]
  },
  {
    "name": "lazyInternalUtilInspect node:internal/errors:184:33",
    "codes": [
      33325
    ]
  },
  {
    "name": " node:internal/tty:1:1",
    "codes": [
      33326
    ]
  },
  {
    "name": " node:internal/tty:1:1",
    "codes": [
      33327
    ]
  },
  {
    "name": "hasColors node:internal/tty:215:19",
    "codes": [
      33328
    ]
  },
  {
    "name": "getColorDepth node:internal/tty:106:23",
    "codes": [
      33329
    ]
  },
  {
    "name": "get node:internal/util/inspect:345:6",
    "codes": [
      33330
    ]
  },
  {
    "name": "inspect node:internal/util/inspect:286:17",
    "codes": [
      33331
    ]
  },
  {
    "name": "formatValue node:internal/util/inspect:726:21",
    "codes": [
      33332
    ]
  },
  {
    "name": "formatRaw node:internal/util/inspect:796:19",
    "codes": [
      33333
    ]
  },
  {
    "name": "getConstructorName node:internal/util/inspect:548:28",
    "codes": [
      33334
    ]
  },
  {
    "name": "isInstanceof node:internal/util/inspect:540:22",
    "codes": [
      33335
    ]
  },
  {
    "name": "getKeys node:internal/util/inspect:669:17",
    "codes": [
      33336
    ]
  },
  {
    "name": "filter node:internal/util/inspect:690:22",
    "codes": [
      33337
    ]
  },
  {
    "name": "isError node:internal/util:80:17",
    "codes": [
      33338
    ]
  },
  {
    "name": "formatError node:internal/util/inspect:1165:21",
    "codes": [
      33339
    ]
  },
  {
    "name": "exists node:internal/bootstrap/loaders:236:16",
    "codes": [
      33340
    ]
  },
  {
    "name": "stylizeWithColor node:internal/util/inspect:521:26",
    "codes": [
      33341
    ]
  },
  {
    "name": "get node:internal/util/inspect:409:8",
    "codes": [
      33342
    ]
  },
  {
    "name": "getEmptyFormatArray node:internal/util/inspect:536:29",
    "codes": [
      33344
    ]
  },
  {
    "name": "formatProperty node:internal/util/inspect:1672:24",
    "codes": [
      33345
    ]
  },
  {
    "name": "isUndetectableObject node:internal/util/inspect:156:30",
    "codes": [
      33346
    ]
  },
  {
    "name": "formatPrimitive node:internal/util/inspect:1382:25",
    "codes": [
      33347
    ]
  },
  {
    "name": "strEscape node:internal/util/inspect:465:19",
    "codes": [
      33348
    ]
  },
  {
    "name": "addQuotes node:internal/util/inspect:451:19",
    "codes": [
      33349
    ]
  },
  {
    "name": "reduceToSingleString node:internal/util/inspect:1764:30",
    "codes": [
      33350
    ]
  },
  {
    "name": "isBelowBreakLength node:internal/util/inspect:1740:28",
    "codes": [
      33351
    ]
  },
  {
    "name": "join node:internal/util:378:14",
    "codes": [
      33352
    ]
  }
],
  "ticks": [
    {
  "tm": 4640,
  "vm": 6,
  "s": [
    29409,
    822
  ]
},
    {
  "tm": 4755,
  "vm": 6,
  "s": [
    13137,
    158
  ]
},
    {
  "tm": 9361,
  "vm": 6,
  "s": [
    2440,
    6762660
  ]
},
    {
  "tm": 11239,
  "vm": 6,
  "s": [
    2440,
    6760664
  ]
},
    {
  "tm": 12596,
  "vm": 6,
  "s": [
    2440,
    5657527
  ]
},
    {
  "tm": 13482,
  "vm": 6,
  "s": [
    2440,
    5657510
  ]
},
    {
  "tm": 20180,
  "vm": 6,
  "s": [
    29594,
    39
  ]
},
    {
  "tm": 20192,
  "vm": 6,
  "s": [
    29594,
    39
  ]
},
    {
  "tm": 20202,
  "vm": 6,
  "s": [
    29594,
    39
  ]
},
    {
  "tm": 20211,
  "vm": 6,
  "s": [
    29594,
    39
  ]
},
    {
  "tm": 36986,
  "vm": 6,
  "s": [
    30910,
    3206
  ]
},
    {
  "tm": 37011,
  "vm": 6,
  "s": [
    29594,
    39
  ]
},
    {
  "tm": 37022,
  "vm": 6,
  "s": [
    586,
    224
  ]
},
    {
  "tm": 37035,
  "vm": 6,
  "s": [
    11117,
    211
  ]
},
    {
  "tm": 37046,
  "vm": 6,
  "s": [
    29594,
    39
  ]
},
    {
  "tm": 37055,
  "vm": 6,
  "s": [
    29594,
    39
  ]
},
    {
  "tm": 37064,
  "vm": 6,
  "s": [
    29594,
    39
  ]
},
    {
  "tm": 37076,
  "vm": 6,
  "s": [
    29594,
    39
  ]
},
    {
  "tm": 37087,
  "vm": 6,
  "s": [
    29594,
    39
  ]
},
    {
  "tm": 37098,
  "vm": 6,
  "s": [
    30910,
    3281
  ]
},
    {
  "tm": 37146,
  "vm": 6,
  "s": [
    11555,
    23
  ]
},
    {
  "tm": 37159,
  "vm": 6,
  "s": [
    29594,
    39
  ]
},
    {
  "tm": 37169,
  "vm": 6,
  "s": [
    29554,
    2
  ]
},
    {
  "tm": 45790,
  "vm": 6,
  "s": [
    2440,
    4116576
  ]
},
    {
  "tm": 45820,
  "vm": 6,
  "s": [
    29594,
    39
  ]
},
    {
  "tm": 45832,
  "vm": 6,
  "s": [
    29594,
    39
  ]
},
    {
  "tm": 45841,
  "vm": 6,
  "s": [
    30910,
    2107
  ]
},
    {
  "tm": 45851,
  "vm": 6,
  "s": [
    29594,
    39
  ]
},
    {
  "tm": 45866,
  "vm": 6,
  "s": [
    29554,
    2
  ]
},
    {
  "tm": 47671,
  "vm": 6,
  "s": [
    2440,
    1323696
  ]
},
    {
  "tm": 48581,
  "vm": 5,
  "s": [
    2440,
    16547893
  ]
},
    {
  "tm": 50513,
  "vm": 5,
  "s": [
    2440,
    6765780
  ]
},
    {
  "tm": 51153,
  "vm": 5,
  "s": [
    2440,
    2809110
  ]
},
    {
  "tm": 52850,
  "vm": 6,
  "s": [
    2440,
    1375854
  ]
},
    {
  "tm": 64427,
  "vm": 3,
  "s": [
    29411,
    1,
    2440,
    6554816,
    32752,
    3
  ]
},
    {
  "tm": 64461,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    32752,
    3
  ]
},
    {
  "tm": 64483,
  "vm": 3,
  "s": [
    30910,
    3234,
    2440,
    6554816,
    32760,
    15,
    32752,
    15
  ]
},
    {
  "tm": 64505,
  "vm": 2,
  "s": [
    2440,
    5652535,
    2440,
    6554816,
    32762,
    40,
    32760,
    21,
    32752,
    15
  ]
},
    {
  "tm": 72180,
  "vm": 3,
  "s": [
    26472,
    29,
    2440,
    6554816,
    32762,
    229,
    32760,
    21,
    32752,
    15
  ]
},
    {
  "tm": 72199,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    32762,
    229,
    32760,
    21,
    32752,
    15
  ]
},
    {
  "tm": 72213,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    32762,
    229,
    32760,
    21,
    32752,
    15
  ]
},
    {
  "tm": 72225,
  "vm": 3,
  "s": [
    26474,
    99,
    2440,
    6554816,
    32762,
    229,
    32760,
    21,
    32752,
    15
  ]
},
    {
  "tm": 72236,
  "vm": 3,
  "s": [
    2440,
    4086087,
    2440,
    6554816,
    32762,
    229,
    32760,
    21,
    32752,
    15
  ]
},
    {
  "tm": 73285,
  "vm": 3,
  "s": [
    30910,
    2762,
    2440,
    6554816,
    32764,
    57,
    32762,
    229,
    32760,
    21,
    32752,
    15
  ]
},
    {
  "tm": 73975,
  "vm": 3,
  "s": [
    2440,
    4086674,
    2440,
    6554816,
    32766,
    8,
    32764,
    45,
    32762,
    229,
    32760,
    21,
    32752,
    15
  ]
},
    {
  "tm": 75011,
  "vm": 5,
  "s": [
    2440,
    40192,
    2440,
    6553984,
    32772,
    11,
    32771,
    3,
    32770,
    21,
    32762,
    253,
    32760,
    21,
    32752,
    15
  ]
},
    {
  "tm": 76296,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    32760,
    40,
    32752,
    15
  ]
},
    {
  "tm": 80201,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    32781,
    61,
    32760,
    46,
    32752,
    15
  ]
},
    {
  "tm": 80235,
  "vm": 3,
  "s": [
    26263,
    235,
    2440,
    6554816,
    32781,
    61,
    32760,
    46,
    32752,
    15
  ]
},
    {
  "tm": 80256,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    32781,
    61,
    32760,
    46,
    32752,
    15
  ]
},
    {
  "tm": 81192,
  "vm": 2,
  "s": [
    2440,
    5652518,
    2440,
    6554816,
    32760,
    98,
    32752,
    15
  ]
},
    {
  "tm": 82511,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    32760,
    110,
    32752,
    15
  ]
},
    {
  "tm": 83724,
  "vm": 2,
  "s": [
    28729,
    1052,
    2440,
    6554816,
    32760,
    134,
    32752,
    15
  ]
},
    {
  "tm": 85436,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32804,
    6,
    32760,
    146,
    32752,
    15
  ]
},
    {
  "tm": 86382,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32806,
    295,
    32754,
    103,
    32753,
    71,
    32804,
    6,
    32760,
    146,
    32752,
    15
  ]
},
    {
  "tm": 90817,
  "vm": 2,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32806,
    311,
    32754,
    103,
    32753,
    71,
    32804,
    6,
    32760,
    146,
    32752,
    15
  ]
},
    {
  "tm": 92457,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32806,
    311,
    32754,
    103,
    32753,
    71,
    32804,
    6,
    32760,
    146,
    32752,
    15
  ]
},
    {
  "tm": 92830,
  "vm": 0,
  "s": [
    2440,
    10626096,
    32812,
    354,
    32754,
    103,
    32753,
    71,
    32806,
    311,
    32754,
    103,
    32753,
    71,
    32804,
    6,
    32760,
    146,
    32752,
    15
  ]
},
    {
  "tm": 94290,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    32812,
    465,
    32754,
    103,
    32753,
    71,
    32806,
    311,
    32754,
    103,
    32753,
    71,
    32804,
    6,
    32760,
    146,
    32752,
    15
  ]
},
    {
  "tm": 95269,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    32760,
    152,
    32752,
    15
  ]
},
    {
  "tm": 96518,
  "vm": 2,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 101157,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 101189,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 101203,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 101288,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 102451,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32822,
    926,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 104697,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 104735,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 107252,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 107286,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 108423,
  "vm": 2,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32831,
    20,
    32754,
    103,
    32753,
    71,
    32828,
    295,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 109897,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32831,
    20,
    32754,
    103,
    32753,
    71,
    32828,
    295,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 110460,
  "vm": 2,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32828,
    319,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 114952,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32828,
    319,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 114989,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32828,
    319,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 115068,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32828,
    319,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 115453,
  "vm": 0,
  "s": [
    2440,
    6519728,
    2440,
    6597984,
    32835,
    999,
    32754,
    103,
    32753,
    71,
    32828,
    319,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 116582,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 117841,
  "vm": 2,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 122290,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 122412,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 122451,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 122489,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 124092,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32843,
    709,
    32754,
    103,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 135502,
  "vm": 3,
  "s": [
    2440,
    1407280,
    2440,
    6554816,
    32846,
    371,
    32754,
    103,
    32753,
    71,
    32843,
    709,
    32754,
    103,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 135532,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    32846,
    371,
    32754,
    103,
    32753,
    71,
    32843,
    709,
    32754,
    103,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 135559,
  "vm": 3,
  "s": [
    2440,
    6957251,
    2440,
    6554816,
    32846,
    371,
    32754,
    103,
    32753,
    71,
    32843,
    709,
    32754,
    103,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 135600,
  "vm": 3,
  "s": [
    587,
    32,
    2440,
    6554816,
    32846,
    371,
    32754,
    103,
    32753,
    71,
    32843,
    709,
    32754,
    103,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 135626,
  "vm": 3,
  "s": [
    26478,
    40,
    2440,
    6554816,
    32846,
    371,
    32754,
    103,
    32753,
    71,
    32843,
    709,
    32754,
    103,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 135648,
  "vm": 3,
  "s": [
    26626,
    2400,
    2440,
    6554816,
    32846,
    371,
    32754,
    103,
    32753,
    71,
    32843,
    709,
    32754,
    103,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 135734,
  "vm": 3,
  "s": [
    30910,
    2770,
    2440,
    6554816,
    32846,
    371,
    32754,
    103,
    32753,
    71,
    32843,
    709,
    32754,
    103,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 135758,
  "vm": 3,
  "s": [
    -1,
    140735070273544,
    2440,
    6554816,
    32846,
    371,
    32754,
    103,
    32753,
    71,
    32843,
    709,
    32754,
    103,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 135789,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    32846,
    371,
    32754,
    103,
    32753,
    71,
    32843,
    709,
    32754,
    103,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 136605,
  "vm": 3,
  "s": [
    2440,
    5667008,
    2440,
    6554816,
    32843,
    1199,
    32754,
    103,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 138445,
  "vm": 3,
  "s": [
    2440,
    1407504,
    2440,
    6554816,
    32843,
    1199,
    32754,
    103,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 141213,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    32843,
    1217,
    32754,
    103,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 141249,
  "vm": 3,
  "s": [
    30910,
    3206,
    2440,
    6554816,
    32843,
    1217,
    32754,
    103,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 141313,
  "vm": 0,
  "s": [
    28739,
    876,
    2440,
    1760816,
    32854,
    57,
    32843,
    1217,
    32754,
    103,
    32753,
    71,
    32841,
    100,
    32754,
    103,
    32753,
    71,
    32839,
    36,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 143237,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32839,
    50,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 143619,
  "vm": 5,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32839,
    50,
    32754,
    103,
    32753,
    71,
    32828,
    342,
    32754,
    103,
    32753,
    71,
    32826,
    78,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 144800,
  "vm": 2,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32826,
    129,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 146476,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32754,
    70,
    32753,
    71,
    32826,
    129,
    32754,
    103,
    32753,
    71,
    32822,
    1195,
    32754,
    103,
    32753,
    71,
    32820,
    6,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 147372,
  "vm": 2,
  "s": [
    2440,
    1434119,
    2440,
    6554816,
    32820,
    27,
    32760,
    164,
    32752,
    15
  ]
},
    {
  "tm": 148644,
  "vm": 0,
  "s": [
    2440,
    10157955,
    32791,
    438,
    32877,
    91,
    32760,
    170,
    32752,
    15
  ]
},
    {
  "tm": 150101,
  "vm": 3,
  "s": [
    11555,
    94,
    2440,
    6554816,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 151247,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    32896,
    366,
    32887,
    138,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 152914,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    32896,
    563,
    32887,
    138,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 153518,
  "vm": 3,
  "s": [
    2440,
    3763424,
    2440,
    6554816,
    32900,
    9,
    32896,
    563,
    32887,
    138,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 155490,
  "vm": 6,
  "s": [
    1785,
    0,
    2440,
    1625584,
    32903,
    48,
    32902,
    51,
    32901,
    90,
    32900,
    9,
    32896,
    563,
    32887,
    138,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 155593,
  "vm": 0,
  "s": [
    2440,
    10274138,
    32870,
    104,
    32903,
    92,
    32902,
    51,
    32901,
    90,
    32900,
    9,
    32896,
    563,
    32887,
    138,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 156875,
  "vm": 3,
  "s": [
    2440,
    3907419,
    2440,
    6554816,
    32910,
    35,
    32909,
    45,
    32908,
    23,
    32905,
    342,
    32896,
    657,
    32887,
    138,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 165188,
  "vm": 3,
  "s": [
    26472,
    342,
    2440,
    6554816,
    32910,
    35,
    32909,
    45,
    32908,
    23,
    32905,
    342,
    32896,
    657,
    32887,
    138,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 165219,
  "vm": 3,
  "s": [
    26479,
    72,
    2440,
    6554816,
    32910,
    35,
    32909,
    45,
    32908,
    23,
    32905,
    342,
    32896,
    657,
    32887,
    138,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 165235,
  "vm": 3,
  "s": [
    587,
    59,
    2440,
    6554816,
    32910,
    35,
    32909,
    45,
    32908,
    23,
    32905,
    342,
    32896,
    657,
    32887,
    138,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 165249,
  "vm": 3,
  "s": [
    30720,
    554,
    2440,
    6554816,
    32910,
    35,
    32909,
    45,
    32908,
    23,
    32905,
    342,
    32896,
    657,
    32887,
    138,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 165263,
  "vm": 3,
  "s": [
    2440,
    6957236,
    2440,
    6554816,
    32910,
    35,
    32909,
    45,
    32908,
    23,
    32905,
    342,
    32896,
    657,
    32887,
    138,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 165276,
  "vm": 3,
  "s": [
    26478,
    150,
    2440,
    6554816,
    32910,
    35,
    32909,
    45,
    32908,
    23,
    32905,
    342,
    32896,
    657,
    32887,
    138,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 168052,
  "vm": 3,
  "s": [
    30910,
    3234,
    2440,
    6554816,
    32911,
    12,
    32910,
    35,
    32909,
    45,
    32908,
    23,
    32905,
    342,
    32896,
    657,
    32887,
    138,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 168069,
  "vm": 3,
  "s": [
    30910,
    2762,
    2440,
    6554816,
    32911,
    12,
    32910,
    35,
    32909,
    45,
    32908,
    23,
    32905,
    342,
    32896,
    657,
    32887,
    138,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 168166,
  "vm": 2,
  "s": [
    2440,
    6094438,
    2440,
    6554816,
    32912,
    92,
    32911,
    12,
    32910,
    35,
    32909,
    45,
    32908,
    23,
    32905,
    342,
    32896,
    657,
    32887,
    138,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 172718,
  "vm": 3,
  "s": [
    30910,
    2811,
    2440,
    6554816,
    32911,
    25,
    32910,
    35,
    32909,
    45,
    32908,
    23,
    32905,
    342,
    32896,
    657,
    32887,
    138,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 172749,
  "vm": 3,
  "s": [
    587,
    267,
    2440,
    6554816,
    32911,
    25,
    32910,
    35,
    32909,
    45,
    32908,
    23,
    32905,
    342,
    32896,
    657,
    32887,
    138,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 172770,
  "vm": 3,
  "s": [
    587,
    17,
    2440,
    6554816,
    32911,
    25,
    32910,
    35,
    32909,
    45,
    32908,
    23,
    32905,
    342,
    32896,
    657,
    32887,
    138,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 173047,
  "vm": 2,
  "s": [
    2440,
    6098421,
    2440,
    6554816,
    32916,
    68,
    32911,
    51,
    32910,
    35,
    32909,
    45,
    32908,
    23,
    32905,
    342,
    32896,
    657,
    32887,
    138,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 174382,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 175477,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    32933,
    5,
    32929,
    56,
    32928,
    60,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 176775,
  "vm": 3,
  "s": [
    2440,
    1482016,
    2440,
    6554816,
    32946,
    7,
    32945,
    29,
    32929,
    159,
    32928,
    60,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 178366,
  "vm": 6,
  "s": [
    1776,
    0,
    2440,
    1625584,
    32946,
    221,
    32945,
    29,
    32929,
    159,
    32928,
    60,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 179417,
  "vm": 0,
  "s": [
    2440,
    4002160,
    2440,
    1757056,
    32902,
    107,
    32901,
    90,
    32928,
    86,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 181876,
  "vm": 3,
  "s": [
    30910,
    3234,
    2440,
    6554816,
    32966,
    113,
    32961,
    103,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 181907,
  "vm": 3,
  "s": [
    26969,
    109,
    2440,
    6554816,
    32966,
    113,
    32961,
    103,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 183194,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 186518,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 186557,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 186579,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 190191,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 190212,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 190230,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 191215,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32983,
    580,
    32871,
    771,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 194560,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32983,
    580,
    32871,
    771,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 194596,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32983,
    580,
    32871,
    771,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 195040,
  "vm": 2,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32985,
    491,
    32871,
    771,
    32870,
    645,
    32983,
    580,
    32871,
    771,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 201282,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32985,
    491,
    32871,
    771,
    32870,
    645,
    32983,
    580,
    32871,
    771,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 201321,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32985,
    491,
    32871,
    771,
    32870,
    645,
    32983,
    580,
    32871,
    771,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 201352,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32985,
    491,
    32871,
    771,
    32870,
    645,
    32983,
    580,
    32871,
    771,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 201375,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32985,
    491,
    32871,
    771,
    32870,
    645,
    32983,
    580,
    32871,
    771,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 201400,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32985,
    491,
    32871,
    771,
    32870,
    645,
    32983,
    580,
    32871,
    771,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 202607,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32988,
    532,
    32871,
    771,
    32870,
    645,
    32985,
    491,
    32871,
    771,
    32870,
    645,
    32983,
    580,
    32871,
    771,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 203418,
  "vm": 5,
  "s": [
    1274,
    0,
    2440,
    1625584,
    32759,
    25,
    32992,
    17,
    32871,
    771,
    32870,
    645,
    32988,
    975,
    32871,
    771,
    32870,
    645,
    32985,
    491,
    32871,
    771,
    32870,
    645,
    32983,
    580,
    32871,
    771,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 204716,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32985,
    503,
    32871,
    771,
    32870,
    645,
    32983,
    580,
    32871,
    771,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 207582,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32985,
    503,
    32871,
    771,
    32870,
    645,
    32983,
    580,
    32871,
    771,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 207611,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32985,
    503,
    32871,
    771,
    32870,
    645,
    32983,
    580,
    32871,
    771,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 208402,
  "vm": 6,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32985,
    503,
    32871,
    771,
    32870,
    645,
    32983,
    580,
    32871,
    771,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 209452,
  "vm": 6,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32985,
    503,
    32871,
    771,
    32870,
    645,
    32983,
    580,
    32871,
    771,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 210682,
  "vm": 0,
  "s": [
    2440,
    10398762,
    32867,
    121,
    32995,
    1168,
    32871,
    771,
    32870,
    645,
    32985,
    503,
    32871,
    771,
    32870,
    645,
    32983,
    580,
    32871,
    771,
    32870,
    645,
    32981,
    219,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 212200,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32981,
    250,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 213334,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    32981,
    268,
    32871,
    771,
    32870,
    645,
    32979,
    29,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    32972,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 214529,
  "vm": 6,
  "s": [
    1774,
    0,
    2440,
    1625584,
    32933,
    95,
    32929,
    56,
    32928,
    60,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 215747,
  "vm": 0,
  "s": [
    2440,
    2737679,
    2440,
    6588880,
    32969,
    26,
    2440,
    10476543,
    32967,
    59,
    32966,
    113,
    32961,
    103,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 217135,
  "vm": 3,
  "s": [
    1479,
    0,
    2440,
    1625584,
    32967,
    312,
    32966,
    113,
    32961,
    103,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 218471,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33024,
    14,
    2440,
    10715151,
    33019,
    263,
    33020,
    513,
    33012,
    10,
    1122,
    0,
    33011,
    140,
    32977,
    111,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    33023,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 219532,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33026,
    81,
    32871,
    771,
    32870,
    645,
    33024,
    14,
    2440,
    10715151,
    33019,
    263,
    33020,
    513,
    33012,
    10,
    1122,
    0,
    33011,
    140,
    32977,
    111,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    33023,
    3,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 220808,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33031,
    3,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    33023,
    16,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 222594,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33031,
    3,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    33023,
    16,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 223827,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33033,
    603,
    32871,
    771,
    32870,
    645,
    33031,
    3,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    32887,
    304,
    32886,
    76,
    32975,
    8,
    33023,
    16,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 224785,
  "vm": 3,
  "s": [
    26472,
    342,
    2440,
    6624192,
    33023,
    65,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 229595,
  "vm": 3,
  "s": [
    30720,
    352,
    2440,
    6624192,
    33023,
    65,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 229630,
  "vm": 3,
  "s": [
    586,
    243,
    2440,
    6624192,
    33023,
    65,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 229648,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6624192,
    33023,
    65,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 229662,
  "vm": 3,
  "s": [
    30910,
    3206,
    2440,
    6624192,
    33023,
    65,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 230644,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    33040,
    88,
    33038,
    71,
    33037,
    28,
    33036,
    316,
    33023,
    65,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 232325,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    33038,
    212,
    33037,
    28,
    33036,
    316,
    33023,
    65,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 234915,
  "vm": 3,
  "s": [
    30720,
    352,
    2440,
    6554816,
    33037,
    44,
    33036,
    316,
    33023,
    65,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 234946,
  "vm": 3,
  "s": [
    30910,
    3206,
    2440,
    6554816,
    33037,
    44,
    33036,
    316,
    33023,
    65,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 235746,
  "vm": 3,
  "s": [
    2440,
    3837098,
    2440,
    6554816,
    2440,
    10398729,
    33036,
    382,
    33023,
    65,
    32961,
    459,
    32928,
    477,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 236995,
  "vm": 0,
  "s": [
    2440,
    2715776,
    2440,
    6698784,
    2440,
    10584286,
    32869,
    762,
    32902,
    13,
    32901,
    90,
    32928,
    86,
    32925,
    144,
    32887,
    409,
    32886,
    76,
    32881,
    141,
    32880,
    47,
    32760,
    202,
    32752,
    15
  ]
},
    {
  "tm": 238273,
  "vm": 0,
  "s": [
    2440,
    6702368,
    2440,
    6702368,
    2440,
    10248267,
    33063,
    826,
    32910,
    35,
    33062,
    60,
    33061,
    25,
    32752,
    51
  ]
},
    {
  "tm": 239551,
  "vm": 3,
  "s": [
    2440,
    3965042,
    2440,
    6624192,
    33079,
    144,
    2440,
    248864,
    33077,
    98,
    33076,
    10,
    33075,
    30,
    33072,
    63,
    2440,
    10145775
  ]
},
    {
  "tm": 240889,
  "vm": 3,
  "s": [
    11556,
    5,
    2440,
    6554816,
    33089,
    128,
    33075,
    49,
    33072,
    63,
    2440,
    10145775
  ]
},
    {
  "tm": 242137,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    33095,
    110,
    33092,
    498,
    33091,
    144,
    33090,
    38,
    33089,
    128,
    33075,
    49,
    33072,
    63,
    2440,
    10145775
  ]
},
    {
  "tm": 243448,
  "vm": 2,
  "s": [
    28753,
    39,
    2440,
    6624192,
    33107,
    570,
    33105,
    118,
    33104,
    10,
    33098,
    230,
    33095,
    110,
    33092,
    498,
    33091,
    144,
    33090,
    38,
    33089,
    128,
    33075,
    49,
    33072,
    63,
    2440,
    10145775
  ]
},
    {
  "tm": 244667,
  "vm": 0,
  "s": [
    2440,
    9911348,
    33121,
    12,
    33092,
    877,
    33091,
    144,
    33090,
    38,
    33089,
    128,
    33075,
    49,
    33072,
    63,
    2440,
    10145775
  ]
},
    {
  "tm": 246057,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    33131,
    54,
    33130,
    3,
    33128,
    34,
    33127,
    48,
    33126,
    50,
    33125,
    114,
    33124,
    39,
    33123,
    89,
    33090,
    199,
    2440,
    10145775
  ]
},
    {
  "tm": 247129,
  "vm": 6,
  "s": [
    1775,
    0,
    2440,
    1625584,
    33142,
    104,
    33140,
    98,
    33139,
    102,
    33126,
    94,
    33125,
    114,
    33124,
    39,
    33123,
    89,
    33090,
    199,
    2440,
    10145775
  ]
},
    {
  "tm": 248383,
  "vm": 8,
  "s": [
    1751,
    0
  ]
},
    {
  "tm": 249523,
  "vm": 8,
  "s": [
    29759,
    227
  ]
},
    {
  "tm": 250848,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    2440,
    10690792
  ]
},
    {
  "tm": 253522,
  "vm": 3,
  "s": [
    30910,
    2058,
    2440,
    6624192,
    33167,
    36,
    33164,
    33,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 253551,
  "vm": 3,
  "s": [
    30910,
    3206,
    2440,
    6624192,
    33167,
    36,
    33164,
    33,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 254562,
  "vm": 3,
  "s": [
    1114,
    0,
    2440,
    1625584,
    33164,
    87,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 256644,
  "vm": 3,
  "s": [
    1114,
    0,
    2440,
    1625584,
    33164,
    87,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 256672,
  "vm": 3,
  "s": [
    1114,
    0,
    2440,
    1625584,
    33164,
    87,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 263520,
  "vm": 3,
  "s": [
    26478,
    40,
    2440,
    6624192,
    33176,
    7,
    2440,
    248864,
    33077,
    98,
    33092,
    209,
    33091,
    144,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 263551,
  "vm": 3,
  "s": [
    30910,
    2770,
    2440,
    6624192,
    33176,
    7,
    2440,
    248864,
    33077,
    98,
    33092,
    209,
    33091,
    144,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 263566,
  "vm": 3,
  "s": [
    30910,
    3223,
    2440,
    6624192,
    33176,
    7,
    2440,
    248864,
    33077,
    98,
    33092,
    209,
    33091,
    144,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 263658,
  "vm": 3,
  "s": [
    587,
    295,
    2440,
    6624192,
    33176,
    7,
    2440,
    248864,
    33077,
    98,
    33092,
    209,
    33091,
    144,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 263675,
  "vm": 3,
  "s": [
    26478,
    40,
    2440,
    6624192,
    33176,
    7,
    2440,
    248864,
    33077,
    98,
    33092,
    209,
    33091,
    144,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 264224,
  "vm": 0,
  "s": [
    2440,
    2394782,
    2440,
    1719696,
    33181,
    44,
    33177,
    174,
    33176,
    7,
    2440,
    248864,
    33077,
    98,
    33092,
    209,
    33091,
    144,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 265560,
  "vm": 2,
  "s": [
    2440,
    1433003,
    2440,
    6554816,
    33182,
    3,
    33095,
    101,
    33092,
    498,
    33091,
    144,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 266795,
  "vm": 0,
  "s": [
    2440,
    10955375,
    33085,
    28,
    2440,
    248864,
    33083,
    63,
    2440,
    10398729,
    33076,
    276,
    33182,
    48,
    33095,
    101,
    33092,
    498,
    33091,
    144,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 267851,
  "vm": 0,
  "s": [
    2440,
    1527507,
    2440,
    6588880,
    33111,
    61,
    33110,
    41,
    33104,
    24,
    33182,
    178,
    33095,
    101,
    33092,
    498,
    33091,
    144,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 269073,
  "vm": 3,
  "s": [
    2440,
    3946607,
    2440,
    6554816,
    2440,
    10398729,
    33091,
    343,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 270348,
  "vm": 3,
  "s": [
    2440,
    3948224,
    2440,
    6554816,
    33204,
    65,
    2440,
    10398729,
    33091,
    343,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 273569,
  "vm": 3,
  "s": [
    30910,
    2770,
    2440,
    6554816,
    33206,
    26,
    33204,
    65,
    2440,
    10398729,
    33091,
    343,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 273597,
  "vm": 3,
  "s": [
    26472,
    342,
    2440,
    6554816,
    33206,
    26,
    33204,
    65,
    2440,
    10398729,
    33091,
    343,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 274803,
  "vm": 0,
  "s": [
    29594,
    39,
    2440,
    6588880,
    33101,
    149,
    33136,
    167,
    33100,
    25,
    33131,
    49,
    33182,
    27,
    33095,
    101,
    33092,
    498,
    33091,
    144,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 276093,
  "vm": 6,
  "s": [
    1786,
    0,
    2440,
    1625584,
    33215,
    487,
    32905,
    165,
    32896,
    657,
    33203,
    68,
    33092,
    591,
    33091,
    144,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 277361,
  "vm": 0,
  "s": [
    2440,
    10177934,
    33134,
    430,
    33218,
    879,
    33131,
    49,
    33182,
    27,
    33095,
    101,
    33092,
    498,
    33091,
    144,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 278639,
  "vm": 0,
  "s": [
    2440,
    10274174,
    33134,
    460,
    33218,
    879,
    33182,
    241,
    33095,
    101,
    33092,
    498,
    33091,
    144,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 279919,
  "vm": 0,
  "s": [
    28741,
    388,
    2440,
    6588880,
    33080,
    888,
    33133,
    1128,
    2440,
    248864,
    33185,
    736,
    33227,
    1693,
    33095,
    101,
    33092,
    498,
    33091,
    144,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 281197,
  "vm": 0,
  "s": [
    28760,
    1927,
    2440,
    1727248,
    33134,
    1085,
    33218,
    879,
    33203,
    8,
    33092,
    591,
    33091,
    144,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 282606,
  "vm": 1,
  "s": [
    29594,
    39
  ]
},
    {
  "tm": 283564,
  "vm": 1,
  "s": [
    2440,
    2839600
  ]
},
    {
  "tm": 284848,
  "vm": 0,
  "s": [
    28727,
    67,
    2440,
    1719504,
    32896,
    791,
    33203,
    68,
    33092,
    591,
    33234,
    1098,
    33090,
    38,
    33175,
    38,
    1117,
    0,
    33143,
    132,
    2440,
    10145775
  ]
},
    {
  "tm": 286132,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    33127,
    48,
    33126,
    50,
    33125,
    114,
    33124,
    39,
    33123,
    89,
    33090,
    199,
    2440,
    10145775
  ]
},
    {
  "tm": 287375,
  "vm": 3,
  "s": [
    2440,
    3948208,
    2440,
    6554816,
    33255,
    32,
    33204,
    112,
    2440,
    10398729,
    2440,
    10666613
  ]
},
    {
  "tm": 288659,
  "vm": 3,
  "s": [
    29411,
    24,
    2440,
    6554816,
    33256,
    232,
    33255,
    32,
    33204,
    112,
    2440,
    10398729,
    2440,
    10666613
  ]
},
    {
  "tm": 289748,
  "vm": 2,
  "s": [
    2409,
    0,
    2440,
    6554816,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 291049,
  "vm": 2,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33276,
    58,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    33274,
    52,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 292939,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33276,
    58,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    33274,
    52,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 293599,
  "vm": 2,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33276,
    70,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    33274,
    52,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 296745,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33276,
    70,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    33274,
    52,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 296776,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33276,
    70,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    33274,
    52,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 298305,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33282,
    421,
    32871,
    771,
    32870,
    645,
    33276,
    70,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    33274,
    52,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 298825,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33284,
    218,
    32871,
    771,
    32870,
    645,
    33282,
    421,
    32871,
    771,
    32870,
    645,
    33276,
    70,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    33274,
    52,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 300643,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33284,
    226,
    32871,
    771,
    32870,
    645,
    33282,
    421,
    32871,
    771,
    32870,
    645,
    33276,
    70,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    33274,
    52,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 301273,
  "vm": 2,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33282,
    465,
    32871,
    771,
    32870,
    645,
    33276,
    70,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    33274,
    52,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 304833,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33282,
    465,
    32871,
    771,
    32870,
    645,
    33276,
    70,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    33274,
    52,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 304870,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33282,
    465,
    32871,
    771,
    32870,
    645,
    33276,
    70,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    33274,
    52,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 304887,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33282,
    465,
    32871,
    771,
    32870,
    645,
    33276,
    70,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    33274,
    52,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 305948,
  "vm": 0,
  "s": [
    2440,
    5145753,
    2440,
    1760960,
    33065,
    994,
    33282,
    697,
    32871,
    771,
    32870,
    645,
    33276,
    70,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    33274,
    52,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 310093,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33276,
    145,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    33274,
    52,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 310124,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33276,
    145,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    33274,
    52,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 310139,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33276,
    145,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    33274,
    52,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 311146,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33296,
    733,
    32871,
    771,
    32870,
    645,
    33276,
    145,
    32871,
    771,
    32977,
    44,
    32924,
    53,
    33274,
    52,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 313667,
  "vm": 2,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32977,
    44,
    32924,
    53,
    33274,
    52,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 313699,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32977,
    44,
    32924,
    53,
    33274,
    52,
    33124,
    143,
    2440,
    10145775
  ]
},
    {
  "tm": 314799,
  "vm": 3,
  "s": [
    2440,
    5667008,
    2440,
    6554816,
    33072,
    120,
    2440,
    10145591
  ]
},
    {
  "tm": 316075,
  "vm": 3,
  "s": [
    2440,
    3818254,
    2440,
    6554816,
    2440,
    1623856,
    33321,
    11,
    1650,
    0,
    33072,
    178,
    2440,
    10145591
  ]
},
    {
  "tm": 317575,
  "vm": 3,
  "s": [
    2431,
    0,
    2440,
    1625584,
    32871,
    571,
    32870,
    645,
    33324,
    172,
    1650,
    0,
    33072,
    178,
    2440,
    10145591
  ]
},
    {
  "tm": 325480,
  "vm": 3,
  "s": [
    586,
    247,
    2440,
    6554816,
    33324,
    210,
    1650,
    0,
    33072,
    178,
    2440,
    10145591
  ]
},
    {
  "tm": 325510,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    33324,
    210,
    1650,
    0,
    33072,
    178,
    2440,
    10145591
  ]
},
    {
  "tm": 325523,
  "vm": 3,
  "s": [
    26469,
    21,
    2440,
    6554816,
    33324,
    210,
    1650,
    0,
    33072,
    178,
    2440,
    10145591
  ]
},
    {
  "tm": 325535,
  "vm": 3,
  "s": [
    11119,
    13,
    2440,
    6554816,
    33324,
    210,
    1650,
    0,
    33072,
    178,
    2440,
    10145591
  ]
},
    {
  "tm": 325546,
  "vm": 3,
  "s": [
    2440,
    6957251,
    2440,
    6554816,
    33324,
    210,
    1650,
    0,
    33072,
    178,
    2440,
    10145591
  ]
},
    {
  "tm": 325556,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    33324,
    210,
    1650,
    0,
    33072,
    178,
    2440,
    10145591
  ]
},
    {
  "tm": 326068,
  "vm": 3,
  "s": [
    26472,
    203,
    2440,
    6554816,
    33331,
    376,
    33324,
    232,
    1650,
    0,
    33072,
    178,
    2440,
    10145591
  ]
},
    {
  "tm": 327358,
  "vm": 2,
  "s": [
    2440,
    5662806,
    2440,
    6554816,
    33333,
    1543,
    33332,
    454,
    33331,
    376,
    33324,
    232,
    1650,
    0,
    33072,
    178,
    2440,
    10145591
  ]
},
    {
  "tm": 328318,
  "vm": 3,
  "s": [
    30720,
    1546,
    2440,
    6554816,
    33333,
    2587,
    33332,
    454,
    33331,
    376,
    33324,
    232,
    1650,
    0,
    33072,
    178,
    2440,
    10145591
  ]
},
    {
  "tm": 329477,
  "vm": 3,
  "s": [
    29594,
    39,
    2440,
    6554816,
    33347,
    237,
    33332,
    37,
    33345,
    137,
    33333,
    2587,
    33332,
    454,
    33331,
    376,
    33324,
    232,
    1650,
    0,
    33072,
    178,
    2440,
    10145591
  ]
},
    {
  "tm": 330760,
  "vm": 3,
  "s": [
    30910,
    3069,
    2440,
    6554816,
    33348,
    127,
    33347,
    237,
    33332,
    37,
    33345,
    137,
    33333,
    2587,
    33332,
    454,
    33331,
    376,
    33324,
    232,
    1650,
    0,
    33072,
    178,
    2440,
    10145591
  ]
},
    {
  "tm": 331887,
  "vm": 6,
  "s": [
    1650,
    0,
    2440,
    6622256,
    33072,
    178,
    2440,
    10145591
  ]
},
    {
  "tm": 332887,
  "vm": 6,
  "s": [
    1650,
    0,
    2440,
    6622256,
    33072,
    178,
    2440,
    10145591
  ]
}
  ],
  "scripts": [
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "url": "node:internal/assert",
    "source": "'use strict';\n\nlet error;\nfunction lazyError() {\n  if (!error) {\n    error = require('internal/errors').codes.ERR_INTERNAL_ASSERTION;\n  }\n  return error;\n}\n\nfunction assert(value, message) {\n  if (!value) {\n    const ERR_INTERNAL_ASSERTION = lazyError();\n    throw new ERR_INTERNAL_ASSERTION(message);\n  }\n}\n\nfunction fail(message) {\n  const ERR_INTERNAL_ASSERTION = lazyError();\n  throw new ERR_INTERNAL_ASSERTION(message);\n}\n\nassert.fail = fail;\n\nmodule.exports = assert;\n",
    "name": "assert",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 16,
    "sourcePositions": []
  },
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "url": "node:internal/perf/utils",
    "source": "'use strict';\n\nconst binding = internalBinding('performance');\nconst {\n  milestones,\n  getTimeOrigin,\n} = binding;\n\n// TODO(joyeecheung): we may want to warn about access to\n// this during snapshot building.\nlet timeOrigin = getTimeOrigin();\n\nfunction now() {\n  const hr = process.hrtime();\n  return (hr[0] * 1000 + hr[1] / 1e6) - timeOrigin;\n}\n\nfunction getMilestoneTimestamp(milestoneIdx) {\n  const ns = milestones[milestoneIdx];\n  if (ns === -1)\n    return ns;\n  return ns / 1e6 - timeOrigin;\n}\n\nfunction refreshTimeOrigin() {\n  timeOrigin = getTimeOrigin();\n}\n\nmodule.exports = {\n  now,\n  getMilestoneTimestamp,\n  refreshTimeOrigin\n};\n",
    "name": "utils",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 41,
    "sourcePositions": []
  },
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "url": "node:internal/streams/state",
    "source": "'use strict';\n\nconst {\n  MathFloor,\n  NumberIsInteger,\n} = primordials;\n\nconst { ERR_INVALID_ARG_VALUE } = require('internal/errors').codes;\n\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\n  return options.highWaterMark != null ? options.highWaterMark :\n    isDuplex ? options[duplexKey] : null;\n}\n\nfunction getDefaultHighWaterMark(objectMode) {\n  return objectMode ? 16 : 16 * 1024;\n}\n\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\n  const hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n  if (hwm != null) {\n    if (!NumberIsInteger(hwm) || hwm < 0) {\n      const name = isDuplex ? `options.${duplexKey}` : 'options.highWaterMark';\n      throw new ERR_INVALID_ARG_VALUE(name, hwm);\n    }\n    return MathFloor(hwm);\n  }\n\n  // Default value\n  return getDefaultHighWaterMark(state.objectMode);\n}\n\nmodule.exports = {\n  getHighWaterMark,\n  getDefaultHighWaterMark\n};\n",
    "name": "state",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 53,
    "sourcePositions": []
  },
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "url": "node:internal/main/run_main_module",
    "source": "'use strict';\n\nconst {\n  prepareMainThreadExecution\n} = require('internal/bootstrap/pre_execution');\n\nprepareMainThreadExecution(true);\n\nmarkBootstrapComplete();\n\n// Note: this loads the module through the ESM loader if the module is\n// determined to be an ES module. This hangs from the CJS module loader\n// because we currently allow monkey-patching of the module loaders\n// in the preloaded scripts through require('module').\n// runMain here might be monkey-patched by users in --require.\n// XXX: the monkey-patchability here should probably be deprecated.\nrequire('internal/modules/cjs/loader').Module.runMain(process.argv[1]);\n",
    "name": "run_main_module",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 91,
    "sourcePositions": []
  },
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "url": "node:internal/modules/esm/load",
    "source": "'use strict';\n\nconst { defaultGetFormat } = require('internal/modules/esm/get_format');\nconst { defaultGetSource } = require('internal/modules/esm/get_source');\nconst { translators } = require('internal/modules/esm/translators');\n\nasync function defaultLoad(url, context) {\n  let {\n    format,\n    source,\n  } = context;\n\n  if (!translators.has(format)) format = defaultGetFormat(url);\n\n  if (\n    format === 'builtin' ||\n    format === 'commonjs'\n  ) {\n    source = null;\n  } else if (source == null) {\n    source = await defaultGetSource(url, { format });\n  }\n\n  return {\n    format,\n    source,\n  };\n}\n\nmodule.exports = {\n  defaultLoad,\n};\n",
    "name": "load",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 107,
    "sourcePositions": []
  },
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "url": "/usr/local/lib/node_modules/0x/lib/preload/no-cluster.js",
    "source": "const cluster = require('cluster')\n\ncluster.on('fork', () => {\n  throw new Error('0x does not support clustering.')\n})\n",
    "name": "no-cluster.js",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 115,
    "sourcePositions": []
  },
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "url": "node:internal/dtrace",
    "source": "'use strict';\n\nconst config = internalBinding('config');\n\nconst {\n  DTRACE_HTTP_CLIENT_REQUEST = () => {},\n  DTRACE_HTTP_CLIENT_RESPONSE = () => {},\n  DTRACE_HTTP_SERVER_REQUEST = () => {},\n  DTRACE_HTTP_SERVER_RESPONSE = () => {},\n  DTRACE_NET_SERVER_CONNECTION = () => {},\n  DTRACE_NET_STREAM_END = () => {}\n} = (config.hasDtrace ? internalBinding('dtrace') : {});\n\nmodule.exports = {\n  DTRACE_HTTP_CLIENT_REQUEST,\n  DTRACE_HTTP_CLIENT_RESPONSE,\n  DTRACE_HTTP_SERVER_REQUEST,\n  DTRACE_HTTP_SERVER_RESPONSE,\n  DTRACE_NET_SERVER_CONNECTION,\n  DTRACE_NET_STREAM_END\n};\n",
    "name": "dtrace",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 122,
    "sourcePositions": []
  },
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "url": "/usr/local/lib/node_modules/0x/lib/preload/redir-stdout.js",
    "source": "'use strict'\nconst net = require('net')\n\nlet isWorker = false\ntry {\n  // Skip redirecting stdout in Worker threads.\n  isWorker = !require('worker_threads').isMainThread\n} catch (e) {}\n\nif (!isWorker) {\n  const socket = new net.Socket({\n    fd: 3,\n    readable: false,\n    writable: true\n  })\n  Object.defineProperty(process, 'stdout', {\n    configurable: true,\n    enumerable: true,\n    get: () => socket\n  })\n}\n",
    "name": "redir-stdout.js",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 130,
    "sourcePositions": []
  },
  null,
  null,
  {
    "url": "node:worker_threads",
    "source": "'use strict';\n\nconst {\n  isMainThread,\n  SHARE_ENV,\n  resourceLimits,\n  setEnvironmentData,\n  getEnvironmentData,\n  threadId,\n  Worker\n} = require('internal/worker');\n\nconst {\n  MessagePort,\n  MessageChannel,\n  moveMessagePortToContext,\n  receiveMessageOnPort,\n  BroadcastChannel,\n} = require('internal/worker/io');\n\nconst {\n  markAsUntransferable,\n} = require('internal/buffer');\n\nmodule.exports = {\n  isMainThread,\n  MessagePort,\n  MessageChannel,\n  markAsUntransferable,\n  moveMessagePortToContext,\n  receiveMessageOnPort,\n  resourceLimits,\n  threadId,\n  SHARE_ENV,\n  Worker,\n  parentPort: null,\n  workerData: null,\n  BroadcastChannel,\n  setEnvironmentData,\n  getEnvironmentData,\n};\n",
    "name": "node:worker_threads",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 133,
    "sourcePositions": []
  },
  null,
  null,
  {
    "url": "/usr/local/lib/node_modules/0x/lib/preload/soft-exit.js",
    "source": "'use strict'\n\nconst SOFT_EXIT_SIGNALS = ['SIGINT', 'SIGTERM']\n\nfor (let i = 0; i < SOFT_EXIT_SIGNALS.length; i++) {\n  process.on(SOFT_EXIT_SIGNALS[i], process.exit)\n}\n\nmodule.exports = { SOFT_EXIT_SIGNALS }\n",
    "name": "soft-exit.js",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 136,
    "sourcePositions": []
  },
  null,
  null,
  null,
  null,
  null,
  {
    "url": "node:internal/freelist",
    "source": "'use strict';\n\nconst {\n  ReflectApply,\n} = primordials;\n\nclass FreeList {\n  constructor(name, max, ctor) {\n    this.name = name;\n    this.ctor = ctor;\n    this.max = max;\n    this.list = [];\n  }\n\n  alloc() {\n    return this.list.length > 0 ?\n      this.list.pop() :\n      ReflectApply(this.ctor, this, arguments);\n  }\n\n  free(obj) {\n    if (this.list.length < this.max) {\n      this.list.push(obj);\n      return true;\n    }\n    return false;\n  }\n}\n\nmodule.exports = FreeList;\n",
    "name": "freelist",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 142,
    "sourcePositions": []
  }
]}
